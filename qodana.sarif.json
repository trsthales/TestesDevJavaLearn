{
  "$schema": "https://raw.githubusercontent.com/schemastore/schemastore/master/src/schemas/json/sarif-2.1.0-rtm.5.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "IU",
          "fullName": "Qodana",
          "version": "253.22441.33",
          "rules": [],
          "taxa": [
            {
              "id": "Language injection",
              "name": "Language injection"
            },
            {
              "id": "JVM languages",
              "name": "JVM languages"
            },
            {
              "id": "Java",
              "name": "Java"
            },
            {
              "id": "Java/Internationalization",
              "name": "Internationalization",
              "relationships": [
                {
                  "target": {
                    "id": "Java",
                    "index": 2,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Java/Performance",
              "name": "Performance",
              "relationships": [
                {
                  "target": {
                    "id": "Java",
                    "index": 2,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Spring",
              "name": "Spring"
            },
            {
              "id": "Spring/Spring Core",
              "name": "Spring Core",
              "relationships": [
                {
                  "target": {
                    "id": "Spring",
                    "index": 5,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Spring/Spring Core/XML",
              "name": "XML",
              "relationships": [
                {
                  "target": {
                    "id": "Spring/Spring Core",
                    "index": 6,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Java/Code style issues",
              "name": "Code style issues",
              "relationships": [
                {
                  "target": {
                    "id": "Java",
                    "index": 2,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Java/Declaration redundancy",
              "name": "Declaration redundancy",
              "relationships": [
                {
                  "target": {
                    "id": "Java",
                    "index": 2,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Java/Error handling",
              "name": "Error handling",
              "relationships": [
                {
                  "target": {
                    "id": "Java",
                    "index": 2,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Spring/Spring Core/Code",
              "name": "Code",
              "relationships": [
                {
                  "target": {
                    "id": "Spring/Spring Core",
                    "index": 6,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Java/Probable bugs",
              "name": "Probable bugs",
              "relationships": [
                {
                  "target": {
                    "id": "Java",
                    "index": 2,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Spring/Spring Cloud",
              "name": "Spring Cloud",
              "relationships": [
                {
                  "target": {
                    "id": "Spring",
                    "index": 5,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript",
              "name": "JavaScript and TypeScript"
            },
            {
              "id": "JavaScript and TypeScript/Unit testing",
              "name": "Unit testing",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 14,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Proofreading",
              "name": "Proofreading"
            },
            {
              "id": "Java/Class structure",
              "name": "Class structure",
              "relationships": [
                {
                  "target": {
                    "id": "Java",
                    "index": 2,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Java/Serialization issues",
              "name": "Serialization issues",
              "relationships": [
                {
                  "target": {
                    "id": "Java",
                    "index": 2,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Java/Imports",
              "name": "Imports",
              "relationships": [
                {
                  "target": {
                    "id": "Java",
                    "index": 2,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Maven",
              "name": "Maven"
            },
            {
              "id": "JSON and JSON5",
              "name": "JSON and JSON5"
            },
            {
              "id": "MySQL",
              "name": "MySQL"
            },
            {
              "id": "Java/Threading issues",
              "name": "Threading issues",
              "relationships": [
                {
                  "target": {
                    "id": "Java",
                    "index": 2,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Java/Control flow issues",
              "name": "Control flow issues",
              "relationships": [
                {
                  "target": {
                    "id": "Java",
                    "index": 2,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Java/Numeric issues",
              "name": "Numeric issues",
              "relationships": [
                {
                  "target": {
                    "id": "Java",
                    "index": 2,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JPA",
              "name": "JPA"
            },
            {
              "id": "Java/Initialization",
              "name": "Initialization",
              "relationships": [
                {
                  "target": {
                    "id": "Java",
                    "index": 2,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Sass_SCSS",
              "name": "Sass/SCSS"
            },
            {
              "id": "HTML",
              "name": "HTML"
            },
            {
              "id": "JavaScript and TypeScript/Unused symbols",
              "name": "Unused symbols",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 14,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Java/Security",
              "name": "Security",
              "relationships": [
                {
                  "target": {
                    "id": "Java",
                    "index": 2,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Properties files",
              "name": "Properties files"
            },
            {
              "id": "PostCSS",
              "name": "PostCSS"
            },
            {
              "id": "JavaScript and TypeScript/Bitwise operation issues",
              "name": "Bitwise operation issues",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 14,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/General",
              "name": "General",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 14,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Java/Packaging issues",
              "name": "Packaging issues",
              "relationships": [
                {
                  "target": {
                    "id": "Java",
                    "index": 2,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Java/Verbose or redundant code constructs",
              "name": "Verbose or redundant code constructs",
              "relationships": [
                {
                  "target": {
                    "id": "Java",
                    "index": 2,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Gradle",
              "name": "Gradle"
            },
            {
              "id": "Gradle/Probable bugs",
              "name": "Probable bugs",
              "relationships": [
                {
                  "target": {
                    "id": "Gradle",
                    "index": 38,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "General",
              "name": "General"
            },
            {
              "id": "JVM languages/Logging",
              "name": "Logging",
              "relationships": [
                {
                  "target": {
                    "id": "JVM languages",
                    "index": 1,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "HTTP Client",
              "name": "HTTP Client"
            },
            {
              "id": "EditorConfig",
              "name": "EditorConfig"
            },
            {
              "id": "Gradle/Validity issues",
              "name": "Validity issues",
              "relationships": [
                {
                  "target": {
                    "id": "Gradle",
                    "index": 38,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/Validity issues",
              "name": "Validity issues",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 14,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Java/Code maturity",
              "name": "Code maturity",
              "relationships": [
                {
                  "target": {
                    "id": "Java",
                    "index": 2,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/Potentially confusing code constructs",
              "name": "Potentially confusing code constructs",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 14,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "SQL",
              "name": "SQL"
            },
            {
              "id": "Spring/Spring Data",
              "name": "Spring Data",
              "relationships": [
                {
                  "target": {
                    "id": "Spring",
                    "index": 5,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/Try statement issues",
              "name": "Try statement issues",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 14,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Java/Data flow",
              "name": "Data flow",
              "relationships": [
                {
                  "target": {
                    "id": "Java",
                    "index": 2,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CDI (Contexts and Dependency Injection)",
              "name": "CDI (Contexts and Dependency Injection)"
            },
            {
              "id": "CSS",
              "name": "CSS"
            },
            {
              "id": "CSS/Invalid elements",
              "name": "Invalid elements",
              "relationships": [
                {
                  "target": {
                    "id": "CSS",
                    "index": 53,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
              "name": "Potentially undesirable code constructs",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 14,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Java/Finalization",
              "name": "Finalization",
              "relationships": [
                {
                  "target": {
                    "id": "Java",
                    "index": 2,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Java/Modularization issues",
              "name": "Modularization issues",
              "relationships": [
                {
                  "target": {
                    "id": "Java",
                    "index": 2,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Java/Javadoc",
              "name": "Javadoc",
              "relationships": [
                {
                  "target": {
                    "id": "Java",
                    "index": 2,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Java/Naming conventions",
              "name": "Naming conventions",
              "relationships": [
                {
                  "target": {
                    "id": "Java",
                    "index": 2,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Java/Naming conventions/Class",
              "name": "Class",
              "relationships": [
                {
                  "target": {
                    "id": "Java/Naming conventions",
                    "index": 59,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Hibernate",
              "name": "Hibernate"
            },
            {
              "id": "Spring/Spring Integration",
              "name": "Spring Integration",
              "relationships": [
                {
                  "target": {
                    "id": "Spring",
                    "index": 5,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Java/Abstraction issues",
              "name": "Abstraction issues",
              "relationships": [
                {
                  "target": {
                    "id": "Java",
                    "index": 2,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Java/Assignment issues",
              "name": "Assignment issues",
              "relationships": [
                {
                  "target": {
                    "id": "Java",
                    "index": 2,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Java/Java language level migration aids",
              "name": "Java language level migration aids",
              "relationships": [
                {
                  "target": {
                    "id": "Java",
                    "index": 2,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Java/Java language level migration aids/Java 9",
              "name": "Java 9",
              "relationships": [
                {
                  "target": {
                    "id": "Java/Java language level migration aids",
                    "index": 65,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Java/JUnit",
              "name": "JUnit",
              "relationships": [
                {
                  "target": {
                    "id": "Java",
                    "index": 2,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Java EE",
              "name": "Java EE"
            },
            {
              "id": "Java/Portability",
              "name": "Portability",
              "relationships": [
                {
                  "target": {
                    "id": "Java",
                    "index": 2,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Java/TestNG",
              "name": "TestNG",
              "relationships": [
                {
                  "target": {
                    "id": "Java",
                    "index": 2,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/Assignment issues",
              "name": "Assignment issues",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 14,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JSP",
              "name": "JSP"
            },
            {
              "id": "Java/Visibility",
              "name": "Visibility",
              "relationships": [
                {
                  "target": {
                    "id": "Java",
                    "index": 2,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RegExp",
              "name": "RegExp"
            },
            {
              "id": "Java/Concurrency annotation issues",
              "name": "Concurrency annotation issues",
              "relationships": [
                {
                  "target": {
                    "id": "Java",
                    "index": 2,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JUnit",
              "name": "JUnit"
            },
            {
              "id": "CSS/Probable bugs",
              "name": "Probable bugs",
              "relationships": [
                {
                  "target": {
                    "id": "CSS",
                    "index": 53,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/TypeScript",
              "name": "TypeScript",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 14,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Java/Lombok",
              "name": "Lombok",
              "relationships": [
                {
                  "target": {
                    "id": "Java",
                    "index": 2,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Java/Lombok/Redundant modifiers",
              "name": "Redundant modifiers",
              "relationships": [
                {
                  "target": {
                    "id": "Java/Lombok",
                    "index": 79,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Micronaut",
              "name": "Micronaut"
            },
            {
              "id": "JavaScript and TypeScript/ES2015 migration aids",
              "name": "ES2015 migration aids",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 14,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Java/Naming conventions/Method",
              "name": "Method",
              "relationships": [
                {
                  "target": {
                    "id": "Java/Naming conventions",
                    "index": 59,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/DOM issues",
              "name": "DOM issues",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 14,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Angular",
              "name": "Angular"
            },
            {
              "id": "JavaScript and TypeScript/Probable bugs",
              "name": "Probable bugs",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 14,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Code Coverage",
              "name": "Code Coverage"
            },
            {
              "id": "XML",
              "name": "XML"
            },
            {
              "id": "Java/Cloning issues",
              "name": "Cloning issues",
              "relationships": [
                {
                  "target": {
                    "id": "Java",
                    "index": 2,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Manifest",
              "name": "Manifest"
            },
            {
              "id": "Java/Logging",
              "name": "Logging",
              "relationships": [
                {
                  "target": {
                    "id": "Java",
                    "index": 2,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Markdown",
              "name": "Markdown"
            },
            {
              "id": "Java/Java language level migration aids/Java 5",
              "name": "Java 5",
              "relationships": [
                {
                  "target": {
                    "id": "Java/Java language level migration aids",
                    "index": 65,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Java/Java language level migration aids/Java 8",
              "name": "Java 8",
              "relationships": [
                {
                  "target": {
                    "id": "Java/Java language level migration aids",
                    "index": 65,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JVM languages/Test frameworks",
              "name": "Test frameworks",
              "relationships": [
                {
                  "target": {
                    "id": "JVM languages",
                    "index": 1,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Java/Class metrics",
              "name": "Class metrics",
              "relationships": [
                {
                  "target": {
                    "id": "Java",
                    "index": 2,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Security",
              "name": "Security"
            },
            {
              "id": "RESTful Web Service (JAX-RS)",
              "name": "RESTful Web Service (JAX-RS)"
            },
            {
              "id": "Micronaut/Micronaut Data",
              "name": "Micronaut Data",
              "relationships": [
                {
                  "target": {
                    "id": "Micronaut",
                    "index": 81,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Java/Encapsulation",
              "name": "Encapsulation",
              "relationships": [
                {
                  "target": {
                    "id": "Java",
                    "index": 2,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/Control flow issues",
              "name": "Control flow issues",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 14,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Java/Test frameworks",
              "name": "Test frameworks",
              "relationships": [
                {
                  "target": {
                    "id": "Java",
                    "index": 2,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Java/Reflective access",
              "name": "Reflective access",
              "relationships": [
                {
                  "target": {
                    "id": "Java",
                    "index": 2,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "OpenAPI specifications",
              "name": "OpenAPI specifications"
            },
            {
              "id": "JavaScript and TypeScript/Code quality tools",
              "name": "Code quality tools",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 14,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Java/Java language level migration aids/Java 15",
              "name": "Java 15",
              "relationships": [
                {
                  "target": {
                    "id": "Java/Java language level migration aids",
                    "index": 65,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "GitHub actions",
              "name": "GitHub actions"
            },
            {
              "id": "Java/Method metrics",
              "name": "Method metrics",
              "relationships": [
                {
                  "target": {
                    "id": "Java",
                    "index": 2,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Java/Resource management",
              "name": "Resource management",
              "relationships": [
                {
                  "target": {
                    "id": "Java",
                    "index": 2,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/Switch statement issues",
              "name": "Switch statement issues",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 14,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Java/Java language level migration aids/Java 14",
              "name": "Java 14",
              "relationships": [
                {
                  "target": {
                    "id": "Java/Java language level migration aids",
                    "index": 65,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Java/Numeric issues/Cast",
              "name": "Cast",
              "relationships": [
                {
                  "target": {
                    "id": "Java/Numeric issues",
                    "index": 25,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Java/JavaBeans issues",
              "name": "JavaBeans issues",
              "relationships": [
                {
                  "target": {
                    "id": "Java",
                    "index": 2,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Pattern validation",
              "name": "Pattern validation"
            },
            {
              "id": "JavaScript and TypeScript/Function metrics",
              "name": "Function metrics",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 14,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JSONPath",
              "name": "JSONPath"
            },
            {
              "id": "JavaScript and TypeScript/Code style issues",
              "name": "Code style issues",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 14,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Java/Dependency issues",
              "name": "Dependency issues",
              "relationships": [
                {
                  "target": {
                    "id": "Java",
                    "index": 2,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Java/Java language level issues",
              "name": "Java language level issues",
              "relationships": [
                {
                  "target": {
                    "id": "Java",
                    "index": 2,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "HTML/Accessibility",
              "name": "Accessibility",
              "relationships": [
                {
                  "target": {
                    "id": "HTML",
                    "index": 29,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Java/Inheritance issues",
              "name": "Inheritance issues",
              "relationships": [
                {
                  "target": {
                    "id": "Java",
                    "index": 2,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/Security",
              "name": "Security",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 14,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Bean Validation",
              "name": "Bean Validation"
            },
            {
              "id": "Oracle",
              "name": "Oracle"
            },
            {
              "id": "Internationalization",
              "name": "Internationalization"
            },
            {
              "id": "Java/Java language level migration aids/Java 10",
              "name": "Java 10",
              "relationships": [
                {
                  "target": {
                    "id": "Java/Java language level migration aids",
                    "index": 65,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Jakarta Data",
              "name": "Jakarta Data"
            },
            {
              "id": "Java/Java language level migration aids/Java 7",
              "name": "Java 7",
              "relationships": [
                {
                  "target": {
                    "id": "Java/Java language level migration aids",
                    "index": 65,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Java/Compiler issues",
              "name": "Compiler issues",
              "relationships": [
                {
                  "target": {
                    "id": "Java",
                    "index": 2,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Version control",
              "name": "Version control"
            },
            {
              "id": "MongoJS",
              "name": "MongoJS"
            },
            {
              "id": "Java/Memory",
              "name": "Memory",
              "relationships": [
                {
                  "target": {
                    "id": "Java",
                    "index": 2,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Structural search",
              "name": "Structural search"
            },
            {
              "id": "Spring/Spring Security",
              "name": "Spring Security",
              "relationships": [
                {
                  "target": {
                    "id": "Spring",
                    "index": 5,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Gradle/Style",
              "name": "Style",
              "relationships": [
                {
                  "target": {
                    "id": "Gradle",
                    "index": 38,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "YAML",
              "name": "YAML"
            },
            {
              "id": "Java/Performance/Embedded",
              "name": "Embedded",
              "relationships": [
                {
                  "target": {
                    "id": "Java/Performance",
                    "index": 4,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Java/Java language level migration aids/Java 25",
              "name": "Java 25",
              "relationships": [
                {
                  "target": {
                    "id": "Java/Java language level migration aids",
                    "index": 65,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Spring Data",
              "name": "Spring Data"
            },
            {
              "id": "Spring/Spring Boot",
              "name": "Spring Boot",
              "relationships": [
                {
                  "target": {
                    "id": "Spring",
                    "index": 5,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Java/Probable bugs/Nullability problems",
              "name": "Nullability problems",
              "relationships": [
                {
                  "target": {
                    "id": "Java/Probable bugs",
                    "index": 12,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/Imports and dependencies",
              "name": "Imports and dependencies",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 14,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RELAX NG",
              "name": "RELAX NG"
            },
            {
              "id": "Java/Properties files",
              "name": "Properties files",
              "relationships": [
                {
                  "target": {
                    "id": "Java",
                    "index": 2,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Spring/Spring Cloud Stream",
              "name": "Spring Cloud Stream",
              "relationships": [
                {
                  "target": {
                    "id": "Spring",
                    "index": 5,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Java/Java language level migration aids/Java 11",
              "name": "Java 11",
              "relationships": [
                {
                  "target": {
                    "id": "Java/Java language level migration aids",
                    "index": 65,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "PostgreSQL",
              "name": "PostgreSQL"
            },
            {
              "id": "SQL server",
              "name": "SQL server"
            },
            {
              "id": "JavaScript and TypeScript/Async code and promises",
              "name": "Async code and promises",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 14,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/Naming conventions",
              "name": "Naming conventions",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 14,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Inappropriate gRPC request scheme",
              "name": "Inappropriate gRPC request scheme"
            },
            {
              "id": "EL",
              "name": "EL"
            },
            {
              "id": "Java/Java language level migration aids/Java 16",
              "name": "Java 16",
              "relationships": [
                {
                  "target": {
                    "id": "Java/Java language level migration aids",
                    "index": 65,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Shell script",
              "name": "Shell script"
            },
            {
              "id": "Spring Modulith",
              "name": "Spring Modulith"
            },
            {
              "id": "JavaScript and TypeScript/Data flow",
              "name": "Data flow",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 14,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/React",
              "name": "React",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 14,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Java/Lombok/Redundant definitions",
              "name": "Redundant definitions",
              "relationships": [
                {
                  "target": {
                    "id": "Java/Lombok",
                    "index": 79,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Spring/Spring MVC",
              "name": "Spring MVC",
              "relationships": [
                {
                  "target": {
                    "id": "Spring",
                    "index": 5,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSS/Code style issues",
              "name": "Code style issues",
              "relationships": [
                {
                  "target": {
                    "id": "CSS",
                    "index": 53,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Java/Java language level migration aids/Java 21",
              "name": "Java 21",
              "relationships": [
                {
                  "target": {
                    "id": "Java/Java language level migration aids",
                    "index": 65,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Less",
              "name": "Less"
            },
            {
              "id": "Java/Bitwise operation issues",
              "name": "Bitwise operation issues",
              "relationships": [
                {
                  "target": {
                    "id": "Java",
                    "index": 2,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Java/Java language level migration aids/Java 23",
              "name": "Java 23",
              "relationships": [
                {
                  "target": {
                    "id": "Java/Java language level migration aids",
                    "index": 65,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Protocol Buffers",
              "name": "Protocol Buffers"
            },
            {
              "id": "TOML",
              "name": "TOML"
            },
            {
              "id": "JavaScript and TypeScript/Flow type checker",
              "name": "Flow type checker",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 14,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Cron",
              "name": "Cron"
            },
            {
              "id": "JavaScript and TypeScript/Node.js",
              "name": "Node.js",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 14,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Java/toString() issues",
              "name": "toString() issues",
              "relationships": [
                {
                  "target": {
                    "id": "Java",
                    "index": 2,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Thymeleaf",
              "name": "Thymeleaf"
            },
            {
              "id": "Qodana",
              "name": "Qodana"
            },
            {
              "id": "CSS/Code quality tools",
              "name": "Code quality tools",
              "relationships": [
                {
                  "target": {
                    "id": "CSS",
                    "index": 53,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Code metrics",
              "name": "Code metrics"
            },
            {
              "id": "Gradle/Best practises",
              "name": "Best practises",
              "relationships": [
                {
                  "target": {
                    "id": "Gradle",
                    "index": 38,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Micronaut/Micronaut",
              "name": "Micronaut",
              "relationships": [
                {
                  "target": {
                    "id": "Micronaut",
                    "index": 81,
                    "toolComponent": {
                      "name": "IU"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        },
        "extensions": [
          {
            "name": "com.intellij.java",
            "version": "253.22441.33",
            "rules": [
              {
                "id": "InjectionNotApplicable",
                "shortDescription": {
                  "text": "Injection annotation is not applicable"
                },
                "fullDescription": {
                  "text": "Reports when a '@Language' annotation is applied to an element with a type other than 'String' or 'String[]'. Example: '@Language(\"HTML\") int i;' After the quick-fix is applied: 'int i;' Inspection ID: InjectionNotApplicable",
                  "markdown": "Reports when a `@Language` annotation is applied to an element with a type other than `String` or `String[]`.\n\n**Example:**\n\n\n      @Language(\"HTML\") int i;\n\nAfter the quick-fix is applied:\n\n\n      int i;\n\nInspection ID: InjectionNotApplicable"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "InjectionNotApplicable",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language injection",
                      "index": 0,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OverrideOnly",
                "shortDescription": {
                  "text": "Method can only be overridden"
                },
                "fullDescription": {
                  "text": "Reports calls to API methods marked with '@ApiStatus.OverrideOnly'. The '@ApiStatus.OverrideOnly' annotation indicates that the annotated method is supposed to be implemented or overridden by client code, but not called by it directly. This pattern commonly appears in extension mechanisms where your implementation must conform to some interface, but it's not your responsibility to call it. One example of such an extension mechanism is the Service Provider Interface. Marking a class or interface with this annotation is the same as marking every method with it. The '@ApiStatus.OverrideOnly' annotation indicates that the method is part of SPI (Service Provider Interface). Clients of the declaring library should implement or override such methods, not call them directly. Marking a class or interface with this annotation is the same as marking every method with it. Example: '// In upstream library code\n  @ApiStatus.OverrideOnly\n  public class MyService {\n    public void perform();\n  }\n\n  // In downstream client code\n  public class Foo {\n    public void bar(myService: MyService) {\n      myService.perform();\n    }\n  }' This inspection also detects the following problems related to applying the annotation incorrectly: Annotating classes/methods that cannot be extended/overridden Redundantly annotating methods from a class already annotated with '@ApiStatus.OverrideOnly' Inspection ID: OverrideOnly",
                  "markdown": "Reports calls to API methods marked with `@ApiStatus.OverrideOnly`.\n\n\nThe `@ApiStatus.OverrideOnly` annotation indicates that the annotated method is supposed to be implemented or overridden by\nclient code, but not called by it directly.\nThis pattern commonly appears in extension mechanisms where your implementation must conform to some interface, but it's not your\nresponsibility to call it.\nOne example of such an extension mechanism is the Service Provider Interface.\nMarking a class or interface with this annotation is the same as marking every method with it.\n\n\nThe `@ApiStatus.OverrideOnly` annotation indicates that the method is part of SPI (Service Provider Interface).\nClients of the declaring library should implement or override such methods, not call them directly.\nMarking a class or interface with this annotation is the same as marking every method with it.\n\n**Example:**\n\n\n      // In upstream library code\n      @ApiStatus.OverrideOnly\n      public class MyService {\n        public void perform();\n      }\n\n      // In downstream client code\n      public class Foo {\n        public void bar(myService: MyService) {\n          myService.perform();\n        }\n      }\n\nThis inspection also detects the following problems related to applying the annotation incorrectly:\n\n* Annotating classes/methods that cannot be extended/overridden\n* Redundantly annotating methods from a class already annotated with `@ApiStatus.OverrideOnly`\n\nInspection ID: OverrideOnly"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "OverrideOnly",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JVM languages",
                      "index": 1,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CallToSuspiciousStringMethod",
                "shortDescription": {
                  "text": "Call to suspicious 'String' method"
                },
                "fullDescription": {
                  "text": "Reports calls of: 'equals()' 'equalsIgnoreCase()' 'compareTo()' 'compareToIgnoreCase()' and 'trim()' on 'String' objects. Comparison of internationalized strings should probably use a 'java.text.Collator' instead. 'String.trim()' only removes control characters between 0x00 and 0x20. The 'String.strip()' method introduced in Java 11 is more Unicode aware and can be used as a replacement. Inspection ID: CallToSuspiciousStringMethod",
                  "markdown": "Reports calls of:\n\n* `equals()`\n* `equalsIgnoreCase()`\n* `compareTo()`\n* `compareToIgnoreCase()` and\n* `trim()`\n\n\non `String` objects.\nComparison of internationalized strings should probably use a `java.text.Collator` instead.\n`String.trim()` only removes control characters between 0x00 and 0x20.\nThe `String.strip()` method introduced in Java 11 is more Unicode aware and can be used as a replacement.\n\nInspection ID: CallToSuspiciousStringMethod"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CallToSuspiciousStringMethod",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Internationalization",
                      "index": 3,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "KeySetIterationMayUseEntrySet",
                "shortDescription": {
                  "text": "Iteration over 'keySet()' can be optimized"
                },
                "fullDescription": {
                  "text": "Reports iterations over the 'keySet()' of a 'java.util.Map' instance, where the iterated keys are used to retrieve the values from the map. Such iteration may be more efficient when replaced with an iteration over the 'entrySet()' or 'values()' (if the key is not actually used). Similarly, 'keySet().forEach(key -> ...)' can be replaced with 'forEach((key, value) -> ...)' if values are retrieved inside a lambda. Example: 'for (Object key : map.keySet()) {\n   Object val = map.get(key);\n  }' After the quick-fix is applied: 'for (Object val : map.values()) {}' Inspection ID: KeySetIterationMayUseEntrySet",
                  "markdown": "Reports iterations over the `keySet()` of a `java.util.Map` instance, where the iterated keys are used to retrieve the values from the map.\n\n\nSuch iteration may be more efficient when replaced with an iteration over the\n`entrySet()` or `values()` (if the key is not actually used).\n\n\nSimilarly, `keySet().forEach(key -> ...)`\ncan be replaced with `forEach((key, value) -> ...)` if values are retrieved\ninside a lambda.\n\n**Example:**\n\n\n      for (Object key : map.keySet()) {\n       Object val = map.get(key);\n      }\n\nAfter the quick-fix is applied:\n\n\n      for (Object val : map.values()) {}\n\nInspection ID: KeySetIterationMayUseEntrySet"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "KeySetIterationMayUseEntrySet",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Performance",
                      "index": 4,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryQualifierForThis",
                "shortDescription": {
                  "text": "Unnecessary qualifier for 'this' or 'super'"
                },
                "fullDescription": {
                  "text": "Reports unnecessary qualification of 'this' or 'super'. Using a qualifier on 'this' or 'super' to disambiguate a code reference may easily become unnecessary via automatic refactorings and should be deleted for clarity. Example: 'class Foo {\n    void foo() {}\n  }\n\n  class Bar extends Foo {\n    void bar() {\n      Bar.super.foo();\n    }\n  }' After the quick-fix is applied: 'class Foo {\n    void foo() {}\n  }\n\n  class Bar extends Foo {\n    void bar() {\n      super.foo();\n    }\n  }' Inspection ID: UnnecessaryQualifierForThis",
                  "markdown": "Reports unnecessary qualification of `this` or `super`.\n\n\nUsing a qualifier on `this` or `super` to\ndisambiguate a code reference may easily become unnecessary via automatic refactorings and should be deleted for clarity.\n\n**Example:**\n\n\n      class Foo {\n        void foo() {}\n      }\n\n      class Bar extends Foo {\n        void bar() {\n          Bar.super.foo();\n        }\n      }\n\nAfter the quick-fix is applied:\n\n\n      class Foo {\n        void foo() {}\n      }\n\n      class Bar extends Foo {\n        void bar() {\n          super.foo();\n        }\n      }\n\nInspection ID: UnnecessaryQualifierForThis"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnnecessaryQualifierForThis",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedReturnValue",
                "shortDescription": {
                  "text": "Method can be made 'void'"
                },
                "fullDescription": {
                  "text": "Reports methods whose return values are never used when called. The return type of such methods can be made 'void'. Methods annotated with Error Prone's or AssertJ's '@CanIgnoreReturnValue' annotation will not be reported. The quick-fix updates the method signature and removes 'return' statements from inside the method. Example: '// reported if visibility setting is Protected or Public\n  protected String myToUpperCase(String s) {\n    return s.toUpperCase();\n  }\n\n  // simple setter, reporting depends on setting\n  public String setStr(String str) {\n    myStr = str;\n    return myStr;\n  }\n\n  void test() {\n    setStr(\"value\");          // return value is unused\n    myToUpperCase(\"result\");  // return value is unused\n  }' After the quick-fix is applied to both methods: 'protected void myToUpperCase(String s) {\n      // 'return' removed completely\n      // as 's.toUpperCase()' has no side effect\n    }\n\n    public void setStr(String str) {\n      myStr = str;\n      // 'return' removed\n    }\n  ...' NOTE: Some methods might not be reported during in-editor highlighting due to performance reasons. To see all results, run the inspection using Code | Inspect Code or Code | Analyze Code | Run Inspection by Name> Use the Ignore chainable methods option to ignore unused return values from chainable calls. Use the Maximal reported method visibility option to control the maximum visibility of methods to be reported. Inspection ID: UnusedReturnValue",
                  "markdown": "Reports methods whose return values are never used when called. The return type of such methods can be made `void`.\n\nMethods annotated with Error Prone's or AssertJ's `@CanIgnoreReturnValue` annotation will not be reported.\nThe quick-fix updates the method signature and removes `return` statements from inside the method.\n\n**Example:**\n\n\n      // reported if visibility setting is Protected or Public\n      protected String myToUpperCase(String s) {\n        return s.toUpperCase();\n      }\n\n      // simple setter, reporting depends on setting\n      public String setStr(String str) {\n        myStr = str;\n        return myStr;\n      }\n\n      void test() {\n        setStr(\"value\");          // return value is unused\n        myToUpperCase(\"result\");  // return value is unused\n      }\n\nAfter the quick-fix is applied to both methods:\n\n\n        protected void myToUpperCase(String s) {\n          // 'return' removed completely\n          // as 's.toUpperCase()' has no side effect\n        }\n\n        public void setStr(String str) {\n          myStr = str;\n          // 'return' removed\n        }\n      ...\n\n\n**NOTE:** Some methods might not be reported during in-editor highlighting due to performance reasons.\nTo see all results, run the inspection using **Code \\| Inspect Code** or **Code \\| Analyze Code \\| Run Inspection by Name**\\>\n\nUse the **Ignore chainable methods** option to ignore unused return values from chainable calls.\n\nUse the **Maximal reported method visibility** option to control the maximum visibility of methods to be reported.\n\nInspection ID: UnusedReturnValue"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnusedReturnValue",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Declaration redundancy",
                      "index": 9,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UncheckedExceptionClass",
                "shortDescription": {
                  "text": "Unchecked 'Exception' class"
                },
                "fullDescription": {
                  "text": "Reports subclasses of 'java.lang.RuntimeException'. Some coding standards require that all user-defined exception classes are checked. Example: 'class EnigmaException extends RuntimeException {} // warning: Unchecked exception class 'EnigmaException'' Inspection ID: UncheckedExceptionClass",
                  "markdown": "Reports subclasses of `java.lang.RuntimeException`.\n\nSome coding standards require that all user-defined exception classes are checked.\n\n**Example:**\n\n\n      class EnigmaException extends RuntimeException {} // warning: Unchecked exception class 'EnigmaException'\n\nInspection ID: UncheckedExceptionClass"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UncheckedExceptionClass",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Error handling",
                      "index": 10,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SizeReplaceableByIsEmpty",
                "shortDescription": {
                  "text": "'size() == 0' can be replaced with 'isEmpty()'"
                },
                "fullDescription": {
                  "text": "Reports '.size()' or '.length()' comparisons with a '0' literal that can be replaced with a call to '.isEmpty()'. Example: 'boolean emptyList = list.size() == 0;' After the quick-fix is applied: 'boolean emptyList = list.isEmpty();' Use the Ignored classes table to add classes for which any '.size()' or '.length()' comparisons should not be replaced. Use the Ignore expressions which would be replaced with '!isEmpty()' option to ignore any expressions which would be replaced with '!isEmpty()'. Inspection ID: SizeReplaceableByIsEmpty",
                  "markdown": "Reports `.size()` or `.length()` comparisons with a `0` literal that can be replaced with a call to `.isEmpty()`.\n\n**Example:**\n\n\n      boolean emptyList = list.size() == 0;\n\nAfter the quick-fix is applied:\n\n\n      boolean emptyList = list.isEmpty();\n      \n\nUse the **Ignored classes** table to add classes for which any `.size()` or `.length()` comparisons should not be replaced.\n\nUse the **Ignore expressions which would be replaced with `!isEmpty()`** option to ignore any expressions which would be replaced with `!isEmpty()`.\n\nInspection ID: SizeReplaceableByIsEmpty"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SizeReplaceableByIsEmpty",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnsupportedChronoFieldUnitCall",
                "shortDescription": {
                  "text": "Call methods with unsupported 'java.time.temporal.ChronoUnit' and 'java.time.temporal.ChronoField'"
                },
                "fullDescription": {
                  "text": "Reports 'java.time' method calls ('get()', 'getLong()', 'with()', 'plus()', 'minus()') with unsupported 'java.time.temporal.ChronoField' or 'java.time.temporal.ChronoUnit' enum constants as arguments. Such calls will throw a 'UnsupportedTemporalTypeException' at runtime. Example: 'LocalTime localTime = LocalTime.now();\nint year = localTime.get(ChronoField.YEAR);' Inspection ID: UnsupportedChronoFieldUnitCall New in 2023.2",
                  "markdown": "Reports `java.time` method calls (`get()`, `getLong()`, `with()`, `plus()`, `minus()`) with unsupported `java.time.temporal.ChronoField` or `java.time.temporal.ChronoUnit` enum constants as arguments. Such calls will throw a `UnsupportedTemporalTypeException` at runtime.\n\nExample:\n\n\n    LocalTime localTime = LocalTime.now();\n    int year = localTime.get(ChronoField.YEAR);\n\nInspection ID: UnsupportedChronoFieldUnitCall\n\nNew in 2023.2"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnsupportedChronoFieldUnitCall",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NumberEquality",
                "shortDescription": {
                  "text": "Number comparison using '==', instead of 'equals()'"
                },
                "fullDescription": {
                  "text": "Reports code that uses == or != instead of 'equals()' to test for 'Number' equality. With auto-boxing, it is easy to make the mistake of comparing two instances of a wrapper type instead of two primitives, for example 'Integer' instead of 'int'. Example: 'void foo(Integer a, Integer b) {\n    final boolean bool = a == b;\n  }' If 'a' is known to be non-null, then it's safe to apply the \"unsafe\" quick-fix and get the result similar to the following: 'void foo(Integer a, Integer b) {\n    final boolean bool = a.equals(b);\n  }' Inspection ID: NumberEquality",
                  "markdown": "Reports code that uses **==** or **!=** instead of `equals()` to test for `Number` equality.\n\n\nWith auto-boxing, it is easy\nto make the mistake of comparing two instances of a wrapper type instead of two primitives, for example `Integer` instead of\n`int`.\n\n**Example:**\n\n      void foo(Integer a, Integer b) {\n        final boolean bool = a == b;\n      }\n\nIf `a` is known to be non-null, then it's safe to apply the \"unsafe\" quick-fix and get the result similar to the following:\n\n      void foo(Integer a, Integer b) {\n        final boolean bool = a.equals(b);\n      }\n\n\nInspection ID: NumberEquality"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NumberEquality",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ClassWithOnlyPrivateConstructors",
                "shortDescription": {
                  "text": "Class with only 'private' constructors should be declared 'final'"
                },
                "fullDescription": {
                  "text": "Reports classes with only 'private' constructors. A class that only has 'private' constructors cannot be extended outside a file and should be declared as 'final'. Inspection ID: ClassWithOnlyPrivateConstructors",
                  "markdown": "Reports classes with only `private` constructors.\n\nA class that only has `private` constructors cannot be extended outside a file and should be declared as `final`.\n\nInspection ID: ClassWithOnlyPrivateConstructors"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ClassWithOnlyPrivateConstructors",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Class structure",
                      "index": 17,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ComparatorNotSerializable",
                "shortDescription": {
                  "text": "'Comparator' class not declared 'Serializable'"
                },
                "fullDescription": {
                  "text": "Reports classes that implement 'java.lang.Comparator', but do not implement 'java.io.Serializable'. If a non-serializable comparator is used to construct an ordered collection such as a 'java.util.TreeMap' or 'java.util.TreeSet', then the collection will also be non-serializable. This can result in unexpected and difficult-to-diagnose bugs. Since subclasses of 'java.lang.Comparator' are often stateless, simply marking them serializable is a small cost to avoid such issues. Example: 'class Foo implements Comparator { // warning\n      @Override\n      public int compare(Object o1, Object o2) {\n          /* ... */\n      }\n  }' After the quick-fix is applied: 'class Foo implements Comparator, Serializable { // no warning here\n      @Override\n      public int compare(Object o1, Object o2) {\n          /* ... */\n      }\n  }' Inspection ID: ComparatorNotSerializable",
                  "markdown": "Reports classes that implement `java.lang.Comparator`, but do not implement `java.io.Serializable`.\n\n\nIf a non-serializable comparator is used to construct an ordered collection such\nas a `java.util.TreeMap` or `java.util.TreeSet`, then the\ncollection will also be non-serializable. This can result in unexpected and\ndifficult-to-diagnose bugs.\n\n\nSince subclasses of `java.lang.Comparator` are often stateless,\nsimply marking them serializable is a small cost to avoid such issues.\n\n**Example:**\n\n\n      class Foo implements Comparator { // warning\n          @Override\n          public int compare(Object o1, Object o2) {\n              /* ... */\n          }\n      }\n\nAfter the quick-fix is applied:\n\n\n      class Foo implements Comparator, Serializable { // no warning here\n          @Override\n          public int compare(Object o1, Object o2) {\n              /* ... */\n          }\n      }\n\nInspection ID: ComparatorNotSerializable"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ComparatorNotSerializable",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Serialization issues",
                      "index": 18,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UNUSED_IMPORT",
                "shortDescription": {
                  "text": "Unused import"
                },
                "fullDescription": {
                  "text": "Reports redundant 'import' statements. Regular 'import' statements are unnecessary when not using imported classes and packages in the source file. The same applies to imported 'static' fields and methods that aren't used in the source file. Example: 'import java.util.ArrayList;\n  public class Example {\n    public static void main(String[] args) {\n      System.out.println(\"Hello World!\");\n    }\n  }' After the quick fix is applied: 'public class Example {\n    public static void main(String[] args) {\n      System.out.println(\"Hello World!\");\n    }\n  }' Inspection ID: UNUSED_IMPORT",
                  "markdown": "Reports redundant `import` statements.\n\nRegular `import` statements are unnecessary when not using imported classes and packages in the source file.\nThe same applies to imported `static` fields and methods that aren't used in the source file.\n\n**Example:**\n\n\n      import java.util.ArrayList;\n      public class Example {\n        public static void main(String[] args) {\n          System.out.println(\"Hello World!\");\n        }\n      }\n\nAfter the quick fix is applied:\n\n\n      public class Example {\n        public static void main(String[] args) {\n          System.out.println(\"Hello World!\");\n        }\n      }\n\nInspection ID: UNUSED_IMPORT"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UNUSED_IMPORT",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Imports",
                      "index": 19,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FieldAccessedSynchronizedAndUnsynchronized",
                "shortDescription": {
                  "text": "Field accessed in both 'synchronized' and unsynchronized contexts"
                },
                "fullDescription": {
                  "text": "Reports non-final fields that are accessed in both 'synchronized' and non-'synchronized' contexts. 'volatile' fields as well as accesses in constructors and initializers are ignored by this inspection. Such \"partially synchronized\" access is often the result of a coding oversight and may lead to unexpectedly inconsistent data structures. Example: 'public class Program {\n    Console console; // warning: Field 'console' is accessed in both synchronized and unsynchronized contexts\n\n    public synchronized void execute() {\n      console.print(\"running\");\n    }\n\n    public void check() {\n      console.check();\n    }\n  }'\n Use the option to specify if simple getters and setters are counted as accesses too. Inspection ID: FieldAccessedSynchronizedAndUnsynchronized",
                  "markdown": "Reports non-final fields that are accessed in both `synchronized` and non-`synchronized` contexts. `volatile` fields as well as accesses in constructors and initializers are ignored by this inspection.\n\n\nSuch \"partially synchronized\" access is often the result of a coding oversight\nand may lead to unexpectedly inconsistent data structures.\n\n**Example:**\n\n\n      public class Program {\n        Console console; // warning: Field 'console' is accessed in both synchronized and unsynchronized contexts\n\n        public synchronized void execute() {\n          console.print(\"running\");\n        }\n\n        public void check() {\n          console.check();\n        }\n      }\n\n\nUse the option to specify if simple getters and setters are counted as accesses too.\n\n\nInspection ID: FieldAccessedSynchronizedAndUnsynchronized"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "FieldAccessedSynchronizedAndUnsynchronized",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Threading issues",
                      "index": 23,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NegatedEqualityExpression",
                "shortDescription": {
                  "text": "Negated equality expression"
                },
                "fullDescription": {
                  "text": "Reports equality expressions which are negated by a prefix expression. Such expressions can be simplified using the '!=' operator. Example: '!(i == 1)' After the quick-fix is applied: 'i != 1' Inspection ID: NegatedEqualityExpression",
                  "markdown": "Reports equality expressions which are negated by a prefix expression.\n\nSuch expressions can be simplified using the `!=` operator.\n\nExample:\n\n\n      !(i == 1)\n\nAfter the quick-fix is applied:\n\n\n      i != 1\n\n\nInspection ID: NegatedEqualityExpression"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NegatedEqualityExpression",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Control flow issues",
                      "index": 24,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RemoveLiteralUnderscores",
                "shortDescription": {
                  "text": "Underscores in numeric literal"
                },
                "fullDescription": {
                  "text": "Reports numeric literals with underscores and suggests removing them with a quick-fix. This may be useful if you need to lower the language level. The quick-fix removes underscores from numeric literals. For example '1_000_000' will be converted to '1000000'. Numeric literals with underscores appeared in Java 7. This inspection can help to downgrade for backward compatibility with earlier Java versions. Inspection ID: RemoveLiteralUnderscores New in 2020.2",
                  "markdown": "Reports numeric literals with underscores and suggests removing them with a quick-fix. This may be useful if you need to lower the language level.\n\nThe quick-fix removes underscores from numeric literals. For example `1_000_000` will be converted to `1000000`.\n\n\n*Numeric literals with underscores* appeared in Java 7.\nThis inspection can help to downgrade for backward compatibility with earlier Java versions.\n\nInspection ID: RemoveLiteralUnderscores\n\nNew in 2020.2"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "RemoveLiteralUnderscores",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Numeric issues",
                      "index": 25,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MathRandomCastToInt",
                "shortDescription": {
                  "text": "'Math.random()' cast to 'int'"
                },
                "fullDescription": {
                  "text": "Reports calls to 'Math.random()' which are immediately cast to 'int'. Casting a 'double' between '0.0' (inclusive) and '1.0' (exclusive) to 'int' will always round down to zero. The value should first be multiplied by some factor before casting it to an 'int' to get a value between zero (inclusive) and the multiplication factor (exclusive). Another possible solution is to use the 'nextInt()' method of 'java.util.Random'. Example: 'int r = (int)Math.random() * 10;' After the quick fix is applied: 'int r = (int)(Math.random() * 10);' Inspection ID: MathRandomCastToInt",
                  "markdown": "Reports calls to `Math.random()` which are immediately cast to `int`.\n\nCasting a `double` between `0.0` (inclusive) and\n`1.0` (exclusive) to `int` will always round down to zero. The value\nshould first be multiplied by some factor before casting it to an `int` to\nget a value between zero (inclusive) and the multiplication factor (exclusive).\nAnother possible solution is to use the `nextInt()` method of\n`java.util.Random`.\n\n**Example:**\n\n      int r = (int)Math.random() * 10;\n\nAfter the quick fix is applied:\n\n      int r = (int)(Math.random() * 10);\n\nInspection ID: MathRandomCastToInt"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MathRandomCastToInt",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DoubleBraceInitialization",
                "shortDescription": {
                  "text": "Double brace initialization"
                },
                "fullDescription": {
                  "text": "Reports Double Brace Initialization. Compared to regular initialization, double brace initialization provides worse performance since it requires loading an additional class. It may also cause failure of 'equals()' comparisons if the 'equals()' method doesn't accept subclasses as parameters. Double brace initialization may cause memory leaks when used in a non-static context. This is because it defines an anonymous class that will reference the surrounding object, when compiled with javac from before Java 18. In addition, before Java 9, double brace initialization couldn't be combined with the diamond operator since it was incompatible with anonymous classes. Example: 'List<Integer> list = new ArrayList<>() {{\n    add(1);\n    add(2);\n  }};' After the quick-fix is applied: 'List<Integer> list = new ArrayList<>();\n  list.add(1);\n  list.add(2);' Inspection ID: DoubleBraceInitialization",
                  "markdown": "Reports [Double Brace Initialization](https://www.c2.com/cgi/wiki?DoubleBraceInitialization).\n\nCompared to regular initialization, double brace initialization provides worse performance since it requires loading an\nadditional class.\n\nIt may also cause failure of `equals()` comparisons if the `equals()` method doesn't accept subclasses as\nparameters.\n\nDouble brace initialization may cause memory leaks when used in a non-static context. This is because it defines an anonymous class\nthat will reference the surrounding object, when compiled with javac from before Java 18.\n\nIn addition, before Java 9, double brace initialization couldn't be combined with the diamond operator since it was incompatible\nwith anonymous classes.\n\n**Example:**\n\n\n      List<Integer> list = new ArrayList<>() {{\n        add(1);\n        add(2);\n      }};\n\nAfter the quick-fix is applied:\n\n\n      List<Integer> list = new ArrayList<>();\n      list.add(1);\n      list.add(2);\n\nInspection ID: DoubleBraceInitialization"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "DoubleBraceInitialization",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Initialization",
                      "index": 27,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StringConcatenationInLoops",
                "shortDescription": {
                  "text": "String concatenation in loop"
                },
                "fullDescription": {
                  "text": "Reports String concatenation in loops. As every String concatenation copies the whole string, usually it is preferable to replace it with explicit calls to 'StringBuilder.append()' or 'StringBuffer.append()'. Example: 'String str = \"\";\n  for(int i=0; i<10; i++) {\n    str += i;\n  }' After the quick-fix is applied: 'String str = \"\";\n  StringBuilder strBuilder = new StringBuilder(str);\n  for(int i = 0; i<10; i++) {\n    strBuilder.append(i);\n  }\n  str = strBuilder.toString();' Sometimes, the quick-fixes allow you to convert a 'String' variable to a 'StringBuilder' or introduce a new 'StringBuilder'. Be careful if the original code specially handles the 'null' value, as the replacement may change semantics. If 'null' is possible, null-safe fixes that generate necessary null-checks are suggested. Also, it's not guaranteed that the automatic replacement will always be more performant. Inspection ID: StringConcatenationInLoops",
                  "markdown": "Reports String concatenation in loops.\n\n\nAs every String concatenation copies the whole\nstring, usually it is preferable to replace it with explicit calls to `StringBuilder.append()` or\n`StringBuffer.append()`.\n\n**Example:**\n\n\n      String str = \"\";\n      for(int i=0; i<10; i++) {\n        str += i;\n      }\n\nAfter the quick-fix is applied:\n\n\n      String str = \"\";\n      StringBuilder strBuilder = new StringBuilder(str);\n      for(int i = 0; i<10; i++) {\n        strBuilder.append(i);\n      }\n      str = strBuilder.toString();\n\n\nSometimes, the quick-fixes allow you to convert a `String` variable to a `StringBuilder` or\nintroduce a new `StringBuilder`. Be careful if the original code specially handles the `null` value, as the\nreplacement may change semantics. If `null` is possible, null-safe fixes that generate\nnecessary null-checks are suggested. Also, it's not guaranteed that the automatic replacement will always be more performant.\n\nInspection ID: StringConcatenationInLoops"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "StringConcatenationInLoop",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Performance",
                      "index": 4,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CloneableClassInSecureContext",
                "shortDescription": {
                  "text": "Cloneable class in secure context"
                },
                "fullDescription": {
                  "text": "Reports classes which may be cloned. A class may be cloned if it supports the 'Cloneable' interface, and its 'clone()' method is not defined to immediately throw an error. Cloneable classes may be dangerous in code intended for secure use. Example: 'class SecureBean implements Cloneable {}' After the quick-fix is applied: 'class SecureBean {}' When the class extends an existing cloneable class or implements a cloneable interface, then after the quick-fix is applied, the code may look like: 'class SecureBean extends ParentBean {\n    @Override\n    protected SecureBean clone() throws CloneNotSupportedException {\n        throw new CloneNotSupportedException();\n    }\n}' Inspection ID: CloneableClassInSecureContext",
                  "markdown": "Reports classes which may be cloned.\n\n\nA class\nmay be cloned if it supports the `Cloneable` interface,\nand its `clone()` method is not defined to immediately\nthrow an error. Cloneable classes may be dangerous in code intended for secure use.\n\n**Example:**\n`class SecureBean implements Cloneable {}`\n\nAfter the quick-fix is applied:\n`class SecureBean {}`\n\n\nWhen the class extends an existing cloneable class or implements a cloneable interface,\nthen after the quick-fix is applied, the code may look like:\n\n    class SecureBean extends ParentBean {\n        @Override\n        protected SecureBean clone() throws CloneNotSupportedException {\n            throw new CloneNotSupportedException();\n        }\n    }\n\n\nInspection ID: CloneableClassInSecureContext"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CloneableClassInSecureContext",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Security",
                      "index": 31,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InconsistentTextBlockIndent",
                "shortDescription": {
                  "text": "Inconsistent whitespace indentation in text block"
                },
                "fullDescription": {
                  "text": "Reports text blocks that are indented using both space and tab characters. This can produce unexpected results because spaces and tabs are treated equally by javac's text block processing. In the following example, spaces and tabs are visualized as '·' and '␉' respectively, and a tab is equal to 2 spaces in the editor. Example: 'String colors = \"\"\"\n····red\n␉ ␉ green\n····blue\"\"\";' When printing such a string, the result will be: '··red\ngreen\n··blue' After the compiler removes an equal number of whitespace characters from the beginning of each line, some lines remain with leading spaces. This inspection depends on the Java feature 'Text block literals', which is available since Java 15. Inspection ID: InconsistentTextBlockIndent New in 2021.1",
                  "markdown": "Reports text blocks that are indented using both space and tab characters. This can produce unexpected results because spaces and tabs are treated equally by javac's text block processing.\n\nIn the following example, spaces and tabs are visualized as `·` and `␉` respectively,\nand a tab is equal to 2 spaces in the editor.\n\n**Example:**\n\n\n    String colors = \"\"\"\n    ····red\n    ␉ ␉ green\n    ····blue\"\"\";\n\nWhen printing such a string, the result will be:\n\n\n    ··red\n    green\n    ··blue\n\nAfter the compiler removes an equal number of whitespace characters from the beginning of each line,\nsome lines remain with leading spaces.\n\nThis inspection depends on the Java feature 'Text block literals', which is available since Java 15.\n\nInspection ID: InconsistentTextBlockIndent\n\nNew in 2021.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "InconsistentTextBlockIndent",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DoubleNegation",
                "shortDescription": {
                  "text": "Double negation"
                },
                "fullDescription": {
                  "text": "Reports double negations that can be simplified. Example: 'if (!!functionCall()) {}' After the quick-fix is applied: 'if (functionCall()) {}' Example: 'if (!(a != b)) {}' After the quick-fix is applied: 'if (a == b) {}' Inspection ID: DoubleNegation",
                  "markdown": "Reports double negations that can be simplified.\n\nExample:\n\n\n      if (!!functionCall()) {}\n\nAfter the quick-fix is applied:\n\n\n      if (functionCall()) {}\n\nExample:\n\n\n      if (!(a != b)) {}\n\nAfter the quick-fix is applied:\n\n\n      if (a == b) {}\n\n\nInspection ID: DoubleNegation"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "DoubleNegation",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Control flow issues",
                      "index": 24,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AssertionCanBeIf",
                "shortDescription": {
                  "text": "Assertion can be replaced with 'if' statement"
                },
                "fullDescription": {
                  "text": "Reports 'assert' statements and suggests replacing them with 'if' statements that throw 'java.lang.AssertionError'. Example: 'assert param != null;' After the quick-fix is applied: 'if (param == null) throw new AssertionError();' This inspection depends on the Java feature 'Assertions', which is available since Java 1.4. Inspection ID: AssertionCanBeIf",
                  "markdown": "Reports `assert` statements and suggests replacing them with `if` statements that throw `java.lang.AssertionError`.\n\nExample:\n\n\n      assert param != null;\n\nAfter the quick-fix is applied:\n\n\n      if (param == null) throw new AssertionError();\n\nThis inspection depends on the Java feature 'Assertions', which is available since Java 1.4.\n\nInspection ID: AssertionCanBeIf"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "AssertionCanBeIf",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Control flow issues",
                      "index": 24,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PackageWithTooFewClasses",
                "shortDescription": {
                  "text": "Package with too few classes"
                },
                "fullDescription": {
                  "text": "Reports packages that contain fewer classes than the specified minimum. Packages which contain subpackages are not reported. Overly small packages may indicate a fragmented design. Available only from Code | Inspect Code or Code | Analyze Code | Run Inspection by Name and isn't reported in the editor. Use the Minimum number of classes field to specify the minimum allowed number of classes in a package. Inspection ID: PackageWithTooFewClasses",
                  "markdown": "Reports packages that contain fewer classes than the specified minimum.\n\nPackages which contain subpackages are not reported. Overly small packages may indicate a fragmented design.\n\nAvailable only from **Code \\| Inspect Code** or\n**Code \\| Analyze Code \\| Run Inspection by Name** and isn't reported in the editor.\n\nUse the **Minimum number of classes** field to specify the minimum allowed number of classes in a package.\n\nInspection ID: PackageWithTooFewClasses"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PackageWithTooFewClasses",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Packaging issues",
                      "index": 36,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceOnLiteralHasNoEffect",
                "shortDescription": {
                  "text": "Replacement operation has no effect"
                },
                "fullDescription": {
                  "text": "Reports calls to the 'String' methods 'replace()', 'replaceAll()' or 'replaceFirst()' that have no effect. Such calls can be guaranteed to have no effect when the qualifier and search string are compile-time constants and the search string is not found in the qualifier. This is redundant and may indicate an error. Example: '// replacement does nothing\n  \"hello\".replace(\"$value$\", value);' Inspection ID: ReplaceOnLiteralHasNoEffect New in 2022.1",
                  "markdown": "Reports calls to the `String` methods `replace()`, `replaceAll()` or `replaceFirst()` that have no effect. Such calls can be guaranteed to have no effect when the qualifier and search string are compile-time constants and the search string is not found in the qualifier. This is redundant and may indicate an error.\n\n**Example:**\n\n\n      // replacement does nothing\n      \"hello\".replace(\"$value$\", value);\n\nInspection ID: ReplaceOnLiteralHasNoEffect\n\nNew in 2022.1"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ReplaceOnLiteralHasNoEffect",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Verbose or redundant code constructs",
                      "index": 37,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SingleClassImport",
                "shortDescription": {
                  "text": "Single class import"
                },
                "fullDescription": {
                  "text": "Reports 'import' statements that import single classes (as opposed to entire packages). Some coding standards prohibit such 'import' statements. You can configure IntelliJ IDEA to detect and fix such statements with its Optimize Imports command. Go to Settings | Editor | Code Style | Java | Imports and clear the Use single class import checkbox. Thus this inspection is mostly useful for offline reporting on code bases that you don't intend to change. Inspection ID: SingleClassImport",
                  "markdown": "Reports `import` statements that import single classes (as opposed to entire packages).\n\nSome coding standards prohibit such `import` statements.\n\n\nYou can configure IntelliJ IDEA to detect and fix such statements with its **Optimize Imports** command. Go to\n[Settings \\| Editor \\| Code Style \\| Java \\| Imports](settings://preferences.sourceCode.Java?Use%20single%20class%20import)\nand clear the **Use single class import** checkbox. Thus this inspection is mostly useful for\noffline reporting on code bases that you don't intend to change.\n\nInspection ID: SingleClassImport"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SingleClassImport",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Imports",
                      "index": 19,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LoggingConditionDisagreesWithLogLevelStatement",
                "shortDescription": {
                  "text": "Log condition does not match logging call"
                },
                "fullDescription": {
                  "text": "Reports is log enabled for conditions of 'if' statements that do not match the log level of the contained logging call. For example: 'if (LOG.isTraceEnabled()) {\n    // debug level logged, but checked for trace level\n    LOG.debug(\"some log message\");\n  }' This inspection understands the java.util.logging, Log4j, Log4j2, Apache Commons Logging and the SLF4J logging frameworks. Inspection ID: LoggingConditionDisagreesWithLogLevelStatement",
                  "markdown": "Reports *is log enabled for* conditions of `if` statements that do not match the log level of the contained logging call.\n\n\nFor example:\n\n\n      if (LOG.isTraceEnabled()) {\n        // debug level logged, but checked for trace level\n        LOG.debug(\"some log message\");\n      }\n\nThis inspection understands the *java.util.logging* , *Log4j* , *Log4j2* , *Apache Commons Logging*\nand the *SLF4J* logging frameworks.\n\nInspection ID: LoggingConditionDisagreesWithLogLevelStatement"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "LoggingConditionDisagreesWithLogLevelStatement",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JVM languages/Logging",
                      "index": 41,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BadOddness",
                "shortDescription": {
                  "text": "Suspicious oddness check"
                },
                "fullDescription": {
                  "text": "Reports odd-even checks of the following form: 'x % 2 == 1'. Such checks fail when used with negative odd values. Consider using 'x % 2 != 0' or '(x & 1) == 1' instead. Inspection ID: BadOddness",
                  "markdown": "Reports odd-even checks of the following form: `x % 2 == 1`. Such checks fail when used with negative odd values. Consider using `x % 2 != 0` or `(x & 1) == 1` instead.\n\n\nInspection ID: BadOddness"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "BadOddness",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Numeric issues",
                      "index": 25,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SystemOutErr",
                "shortDescription": {
                  "text": "Use of 'System.out' or 'System.err'"
                },
                "fullDescription": {
                  "text": "Reports usages of 'System.out' or 'System.err'. Such statements are often used for temporary debugging and should be either removed from the production code, or replaced by a more robust logging facility. The provided quick-fix supports SLF4J and Log4j 2. It replaces 'System.out' and 'System.err' calls with log calls Example: 'public static void test(Object o) {\n    System.out.println(\"Test: \"+ o);\n  }' After the quick-fix is applied: 'private static final Logger log = LoggerFactory.getLogger(Test.class);\n\n  public static void test(Object o) {\n      log.info(\"Test: {}\", o);;\n  }' Use the Log method for 'System.err' option to specify a method which it is used to log a message for 'System.err' calls. Use the Log method for 'System.out' option to specify a method which it is used to log a message for 'System.out' calls. Inspection ID: SystemOutErr",
                  "markdown": "Reports usages of `System.out` or `System.err`.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code, or replaced by a more robust\nlogging facility.\n\nThe provided quick-fix supports **SLF4J** and **Log4j 2** .\nIt replaces `System.out` and `System.err` calls with log calls\n\n**Example:**\n\n\n      public static void test(Object o) {\n        System.out.println(\"Test: \"+ o);\n      }\n\nAfter the quick-fix is applied:\n\n\n      private static final Logger log = LoggerFactory.getLogger(Test.class);\n\n      public static void test(Object o) {\n          log.info(\"Test: {}\", o);;\n      }\n\n\nUse the **Log method for 'System.err'** option to specify a method which it is used to log a message for 'System.err' calls.\nUse the **Log method for 'System.out'** option to specify a method which it is used to log a message for 'System.out' calls.\n\nInspection ID: SystemOutErr"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "UseOfSystemOutOrSystemErr",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code maturity",
                      "index": 46,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckedExceptionClass",
                "shortDescription": {
                  "text": "Checked exception class"
                },
                "fullDescription": {
                  "text": "Reports checked exception classes (that is, subclasses of 'java.lang.Exception' that are not subclasses of 'java.lang.RuntimeException'). Some coding standards suppress checked user-defined exception classes. Example: 'class IllegalMoveException extends Exception {}' Inspection ID: CheckedExceptionClass",
                  "markdown": "Reports checked exception classes (that is, subclasses of `java.lang.Exception` that are not subclasses of `java.lang.RuntimeException`).\n\nSome coding standards suppress checked user-defined exception classes.\n\n**Example:**\n\n\n      class IllegalMoveException extends Exception {}\n\nInspection ID: CheckedExceptionClass"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CheckedExceptionClass",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Error handling",
                      "index": 10,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SerializableStoresNonSerializable",
                "shortDescription": {
                  "text": "'Serializable' object implicitly stores non-'Serializable' object"
                },
                "fullDescription": {
                  "text": "Reports any references to local non-'Serializable' variables outside 'Serializable' lambdas, local and anonymous classes. When a local variable is referenced from an anonymous class, its value is stored in an implicit field of that class. The same happens for local classes and lambdas. If the variable is of a non-'Serializable' type, serialization will fail. Example: 'interface A extends Serializable {\n      abstract void foo();\n  }\n  class B {}\n  class C {\n      void foo() {\n          B b = new B();\n          A a = new A() {\n              @Override\n              public void foo() {\n                  System.out.println(b); // warning\n              }\n          };\n      }\n  }' Inspection ID: SerializableStoresNonSerializable",
                  "markdown": "Reports any references to local non-`Serializable` variables outside `Serializable` lambdas, local and anonymous classes.\n\n\nWhen a local variable is referenced from an anonymous class, its value\nis stored in an implicit field of that class. The same happens\nfor local classes and lambdas. If the variable is of a\nnon-`Serializable` type, serialization will fail.\n\n**Example:**\n\n\n      interface A extends Serializable {\n          abstract void foo();\n      }\n      class B {}\n      class C {\n          void foo() {\n              B b = new B();\n              A a = new A() {\n                  @Override\n                  public void foo() {\n                      System.out.println(b); // warning\n                  }\n              };\n          }\n      }\n\nInspection ID: SerializableStoresNonSerializable"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SerializableStoresNonSerializable",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Serialization issues",
                      "index": 18,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InsertLiteralUnderscores",
                "shortDescription": {
                  "text": "Numeric literal can use underscore separators"
                },
                "fullDescription": {
                  "text": "Reports long numeric literals without underscore separators and suggests adding them. Underscore separators can make such literals easier to read. Example: '1000000' After the quick-fix is applied: '1_000_000' This inspection only reports if the language level of the project or module is 7 or higher. Inspection ID: InsertLiteralUnderscores New in 2020.2",
                  "markdown": "Reports long numeric literals without underscore separators and suggests adding them. Underscore separators can make such literals easier to read.\n\nExample:\n\n\n      1000000\n\nAfter the quick-fix is applied:\n\n\n      1_000_000\n\nThis inspection only reports if the language level of the project or module is 7 or higher.\n\nInspection ID: InsertLiteralUnderscores\n\nNew in 2020.2"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "InsertLiteralUnderscores",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Numeric issues",
                      "index": 25,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BreakStatement",
                "shortDescription": {
                  "text": "'break' statement"
                },
                "fullDescription": {
                  "text": "Reports 'break' statements that are used in places other than at the end of a 'switch' statement branch. 'break' statements complicate refactoring and can be confusing. Example: 'void foo(List<String> strs) {\n  for (String str : strs) {\n    if (str.contains(\"stop\")) break;\n    handleStr(str);\n  }\n}' Inspection ID: BreakStatement",
                  "markdown": "Reports `break` statements that are used in places other than at the end of a `switch` statement branch.\n\n`break` statements complicate refactoring and can be confusing.\n\nExample:\n\n\n    void foo(List<String> strs) {\n      for (String str : strs) {\n        if (str.contains(\"stop\")) break;\n        handleStr(str);\n      }\n    }\n\n\nInspection ID: BreakStatement"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "BreakStatement",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Control flow issues",
                      "index": 24,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JDBCExecuteWithNonConstantString",
                "shortDescription": {
                  "text": "Call to 'Statement.execute()' with non-constant string"
                },
                "fullDescription": {
                  "text": "Reports calls to 'java.sql.Statement.execute()' or any of its variants which take a dynamically-constructed string as the query to execute. Constructed SQL statements are a common source of security breaches. By default, this inspection ignores compile-time constants. Example: 'ResultSet execute(Statement statement, String name) throws SQLException {\n    return statement.executeQuery(\"select * from \" + name); // reports warning\n  }' Use the inspection options to consider any 'static' 'final' fields as constant. Be careful, because strings like the following will be ignored when the option is enabled: 'private static final String SQL = \"SELECT * FROM user WHERE name='\" + getUserInput() + \"'\";' Inspection ID: JDBCExecuteWithNonConstantString",
                  "markdown": "Reports calls to `java.sql.Statement.execute()` or any of its variants which take a dynamically-constructed string as the query to execute.\n\nConstructed SQL statements are a common source of security breaches.\nBy default, this inspection ignores compile-time constants.\n\n**Example:**\n\n\n      ResultSet execute(Statement statement, String name) throws SQLException {\n        return statement.executeQuery(\"select * from \" + name); // reports warning\n      }\n\n\nUse the inspection options to consider any `static` `final` fields as constant.\nBe careful, because strings like the following will be ignored when the option is enabled:\n\n\n      private static final String SQL = \"SELECT * FROM user WHERE name='\" + getUserInput() + \"'\";\n\n\nInspection ID: JDBCExecuteWithNonConstantString"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JDBCExecuteWithNonConstantString",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Security",
                      "index": 31,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConstantValueVariableUse",
                "shortDescription": {
                  "text": "Use of variable whose value is known to be constant"
                },
                "fullDescription": {
                  "text": "Reports any usages of variables which are known to be constant. This is the case if the (read) use of the variable is surrounded by an 'if', 'while', or 'for' statement with an '==' condition which compares the variable with a constant. In this case, the use of a variable which is known to be constant can be replaced with an actual constant. Example: 'private static void foo(double number) {\n        if (number == 1.0) {\n            f(number);\n        }\n    }\n    private static void f(double number) {}' After the quick-fix is applied: 'private static void foo(double number) {\n        if (number == 1.0) {\n            f(1.0);\n        }\n    }\n    private static void f(double number) {}' Inspection ID: ConstantValueVariableUse",
                  "markdown": "Reports any usages of variables which are known to be constant.\n\nThis is the case if the (read) use of the variable is surrounded by an\n`if`, `while`, or `for`\nstatement with an `==` condition which compares the variable with a constant.\nIn this case, the use of a variable which is known to be constant can be replaced with\nan actual constant.\n\nExample:\n\n\n        private static void foo(double number) {\n            if (number == 1.0) {\n                f(number);\n            }\n        }\n        private static void f(double number) {}\n\nAfter the quick-fix is applied:\n\n\n        private static void foo(double number) {\n            if (number == 1.0) {\n                f(1.0);\n            }\n        }\n        private static void f(double number) {}\n\nInspection ID: ConstantValueVariableUse"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ConstantValueVariableUse",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Data flow",
                      "index": 51,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NewStringBufferWithCharArgument",
                "shortDescription": {
                  "text": "StringBuilder constructor call with 'char' argument"
                },
                "fullDescription": {
                  "text": "Reports calls to 'StringBuffer' and 'StringBuilder' constructors with 'char' as the argument. In this case, 'char' is silently cast to an integer and interpreted as the initial capacity of the buffer. Example: 'new StringBuilder('(').append(\"1\").append(')');' After the quick-fix is applied: 'new StringBuilder(\"(\").append(\"1\").append(')');' Inspection ID: NewStringBufferWithCharArgument",
                  "markdown": "Reports calls to `StringBuffer` and `StringBuilder` constructors with `char` as the argument. In this case, `char` is silently cast to an integer and interpreted as the initial capacity of the buffer.\n\n**Example:**\n\n\n      new StringBuilder('(').append(\"1\").append(')');\n\nAfter the quick-fix is applied:\n\n\n      new StringBuilder(\"(\").append(\"1\").append(')');\n\nInspection ID: NewStringBufferWithCharArgument"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NewStringBufferWithCharArgument",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ResultOfObjectAllocationIgnored",
                "shortDescription": {
                  "text": "Result of object allocation ignored"
                },
                "fullDescription": {
                  "text": "Reports object allocations where the allocated object is ignored and neither assigned to a variable nor used in another way. Such allocation expressions are legal in Java, but are usually either unintended, or evidence of a very odd object initialization strategy. Use the options to list classes whose allocations should be ignored by this inspection. Inspection ID: ResultOfObjectAllocationIgnored",
                  "markdown": "Reports object allocations where the allocated object is ignored and neither assigned to a variable nor used in another way.\n\n\nSuch allocation expressions are legal in Java, but are usually either unintended, or\nevidence of a very odd object initialization strategy.\n\n\nUse the options to list classes whose allocations should be ignored by this inspection.\n\n\nInspection ID: ResultOfObjectAllocationIgnored"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ResultOfObjectAllocationIgnored",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ClassGetClass",
                "shortDescription": {
                  "text": "Suspicious 'Class.getClass()' call"
                },
                "fullDescription": {
                  "text": "Reports 'getClass()' methods that are called on a 'java.lang.Class' instance. This is usually a mistake as the result is always equivalent to 'Class.class'. If it's a mistake, then it's better to remove the 'getClass()' call and use the qualifier directly. If the behavior is intended, then it's better to write 'Class.class' explicitly to avoid confusion. Example: 'void test(Class<?> clazz) {\n    String name = clazz.getClass().getName();\n  }' After one of the possible quick-fixes is applied: 'void test(Class<?> clazz) {\n    String name = clazz.getName();\n  }' Inspection ID: ClassGetClass New in 2018.2",
                  "markdown": "Reports `getClass()` methods that are called on a `java.lang.Class` instance.\n\nThis is usually a mistake as the result is always equivalent to `Class.class`.\nIf it's a mistake, then it's better to remove the `getClass()` call and use the qualifier directly.\nIf the behavior is intended, then it's better to write `Class.class` explicitly to avoid confusion.\n\nExample:\n\n\n      void test(Class<?> clazz) {\n        String name = clazz.getClass().getName();\n      }\n\nAfter one of the possible quick-fixes is applied:\n\n\n      void test(Class<?> clazz) {\n        String name = clazz.getName();\n      }\n\nInspection ID: ClassGetClass\n\nNew in 2018.2"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ClassGetClass",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedLibrary",
                "shortDescription": {
                  "text": "Unused library"
                },
                "fullDescription": {
                  "text": "Reports libraries attached to the specified inspection scope that are not used directly in code. Inspection ID: UnusedLibrary",
                  "markdown": "Reports libraries attached to the specified inspection scope that are not used directly in code.\n\n\nInspection ID: UnusedLibrary"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnusedLibrary",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Declaration redundancy",
                      "index": 9,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ObsoleteCollection",
                "shortDescription": {
                  "text": "Use of obsolete collection type"
                },
                "fullDescription": {
                  "text": "Reports usages of 'java.util.Vector', 'java.util.Hashtable' and 'java.util.Stack'. Usages of these classes can often be replaced with usages of 'java.util.ArrayList', 'java.util.HashMap' and 'java.util.ArrayDeque' respectively. While still supported, the former classes were made obsolete by the JDK1.2 collection classes, and should probably not be used in new development. Use the Ignore obsolete collection types where they are required option to ignore any cases where the obsolete collections are used as method arguments or assigned to a variable that requires the obsolete type. Enabling this option may consume significant processor resources. Inspection ID: ObsoleteCollection",
                  "markdown": "Reports usages of `java.util.Vector`, `java.util.Hashtable` and `java.util.Stack`.\n\nUsages of these classes can often be replaced with usages of\n`java.util.ArrayList`, `java.util.HashMap` and `java.util.ArrayDeque` respectively.\nWhile still supported,\nthe former classes were made obsolete by the JDK1.2 collection classes, and should probably\nnot be used in new development.\n\n\nUse the **Ignore obsolete collection types where they are required** option to ignore any cases where the obsolete collections are used\nas method arguments or assigned to a variable that requires the obsolete type.\nEnabling this option may consume significant processor resources.\n\nInspection ID: ObsoleteCollection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UseOfObsoleteCollectionType",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code maturity",
                      "index": 46,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MismatchedStringBuilderQueryUpdate",
                "shortDescription": {
                  "text": "Mismatched query and update of 'StringBuilder'"
                },
                "fullDescription": {
                  "text": "Reports 'StringBuilder', 'StringBuffer' or 'StringJoiner' objects whose contents are read but not written to, or written to but not read. Such inconsistent reads and writes are pointless and probably indicate dead, incomplete, or erroneous code. Example: 'public void m1() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"a\");\n  }' Inspection ID: MismatchedStringBuilderQueryUpdate",
                  "markdown": "Reports `StringBuilder`, `StringBuffer` or `StringJoiner` objects whose contents are read but not written to, or written to but not read.\n\nSuch inconsistent reads and writes are pointless and probably indicate\ndead, incomplete, or erroneous code.\n\n**Example:**\n\n\n      public void m1() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"a\");\n      }\n\n\nInspection ID: MismatchedStringBuilderQueryUpdate"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MismatchedQueryAndUpdateOfStringBuilder",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FinalizeNotProtected",
                "shortDescription": {
                  "text": "'finalize()' should be protected, not public"
                },
                "fullDescription": {
                  "text": "Reports any implementations of the 'Object.finalize()' method that are declared 'public'. According to the contract of the 'Object.finalize()', only the garbage collector calls this method. Making this method public may be confusing, because it means that the method can be used from other code. A quick-fix is provided to make the method 'protected', to prevent it from being invoked from other classes. Example: 'class X {\n    public void finalize() {\n      /* ... */\n    }\n  }' After the quick-fix is applied: 'class X {\n    protected void finalize() {\n      /* ... */\n    }\n  }' Inspection ID: FinalizeNotProtected",
                  "markdown": "Reports any implementations of the `Object.finalize()` method that are declared `public`.\n\n\nAccording to the contract of the `Object.finalize()`, only the garbage\ncollector calls this method. Making this method public may be confusing, because it\nmeans that the method can be used from other code.\n\n\nA quick-fix is provided to make the method `protected`, to prevent it from being invoked\nfrom other classes.\n\n**Example:**\n\n\n      class X {\n        public void finalize() {\n          /* ... */\n        }\n      }\n\nAfter the quick-fix is applied:\n\n\n      class X {\n        protected void finalize() {\n          /* ... */\n        }\n      }\n\nInspection ID: FinalizeNotProtected"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "FinalizeNotProtected",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Finalization",
                      "index": 56,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ModuleWithTooManyClasses",
                "shortDescription": {
                  "text": "Module with too many classes"
                },
                "fullDescription": {
                  "text": "Reports modules that contain too many classes. Overly large modules may indicate a lack of design clarity. Java, Kotlin and Groovy classes are counted. Available only from Code | Inspect Code or Code | Analyze Code | Run Inspection by Name and isn't reported in the editor. Use the Maximum number of classes field to specify the maximum number of classes a module may have. Inspection ID: ModuleWithTooManyClasses",
                  "markdown": "Reports modules that contain too many classes. Overly large modules may indicate a lack of design clarity. Java, Kotlin and Groovy classes are counted.\n\nAvailable only from **Code \\| Inspect Code** or\n**Code \\| Analyze Code \\| Run Inspection by Name** and isn't reported in the editor.\n\nUse the **Maximum number of classes** field to specify the maximum number of classes a module may have.\n\n\nInspection ID: ModuleWithTooManyClasses"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ModuleWithTooManyClasses",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Modularization issues",
                      "index": 57,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InfiniteLoopStatement",
                "shortDescription": {
                  "text": "Infinite loop statement"
                },
                "fullDescription": {
                  "text": "Reports 'for', 'while', or 'do' statements that can only exit by throwing an exception. While such statements may be correct, they often happen due to coding errors. Example: 'for (;;) {\n  }' Use the Ignore when placed in Thread.run option to ignore the infinite loop statements inside 'Thread.run'. It may be useful for the daemon threads. Example: 'new Thread(() -> {\n    while (true) {\n    }\n  }).start();' Inspection ID: InfiniteLoopStatement",
                  "markdown": "Reports `for`, `while`, or `do` statements that can only exit by throwing an exception. While such statements may be correct, they often happen due to coding errors.\n\nExample:\n\n\n      for (;;) {\n      }\n\n\nUse the **Ignore when placed in Thread.run** option to ignore the\ninfinite loop statements inside `Thread.run`.\nIt may be useful for the daemon threads.\n\nExample:\n\n\n      new Thread(() -> {\n        while (true) {\n        }\n      }).start();\n\n\nInspection ID: InfiniteLoopStatement"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "InfiniteLoopStatement",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Control flow issues",
                      "index": 24,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JavadocHtmlLint",
                "shortDescription": {
                  "text": "HTML problems in Javadoc (DocLint)"
                },
                "fullDescription": {
                  "text": "Reports the same HTML issues in the Javadoc comments that have been reported by DocLint since Java 8. The inspection detects the following issues: Self-closed, unclosed, unknown, misplaced, or empty tag Unknown or wrong attribute Misplaced text Example: '/**\n * Unknown tag: List<String>\n * Unclosed tag: error</b>\n * Misplaced text or tag: <ul><li>one</li>, <li>two</li></ul>\n * Wrong or empty attribute: <a href=\"\"></a>\n * Self-closed tag: <br/>\n * ...\n */\nvoid sample(){ }' Inspection ID: JavadocHtmlLint",
                  "markdown": "Reports the same HTML issues in the Javadoc comments that have been reported by DocLint since Java 8.\n\nThe inspection detects the following issues:\n\n* Self-closed, unclosed, unknown, misplaced, or empty tag\n* Unknown or wrong attribute\n* Misplaced text\n\nExample:\n\n\n    /**\n     * Unknown tag: List<String>\n     * Unclosed tag: error</b>\n     * Misplaced text or tag: <ul><li>one</li>, <li>two</li></ul>\n     * Wrong or empty attribute: <a href=\"\"></a>\n     * Self-closed tag: <br/>\n     * ...\n     */\n    void sample(){ }\n\nInspection ID: JavadocHtmlLint"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "JavadocHtmlLint",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Javadoc",
                      "index": 58,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ClassUnconnectedToPackage",
                "shortDescription": {
                  "text": "Class independent of its package"
                },
                "fullDescription": {
                  "text": "Reports classes that don't depend on any other class in their package and are not a dependency for any other class in their package. Such classes indicate ad-hoc or incoherent packaging strategies and often may be profitably moved. Classes that are the only class in their package are not reported. Available only from Code | Inspect Code or Code | Analyze Code | Run Inspection by Name and isn't reported in the editor. Inspection ID: ClassUnconnectedToPackage",
                  "markdown": "Reports classes that don't depend on any other class in their package and are not a dependency for any other class in their package. Such classes indicate ad-hoc or incoherent packaging strategies and often may be profitably moved. Classes that are the only class in their package are not reported.\n\nAvailable only from **Code \\| Inspect Code** or\n**Code \\| Analyze Code \\| Run Inspection by Name** and isn't reported in the editor.\n\nInspection ID: ClassUnconnectedToPackage"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ClassUnconnectedToPackage",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Packaging issues",
                      "index": 36,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ExceptionNameDoesntEndWithException",
                "shortDescription": {
                  "text": "Exception class name does not end with 'Exception'"
                },
                "fullDescription": {
                  "text": "Reports exception classes whose names don't end with 'Exception'. Example: 'class NotStartedEx extends Exception {}' A quick-fix that renames such classes is available only in the editor. Inspection ID: ExceptionNameDoesntEndWithException",
                  "markdown": "Reports exception classes whose names don't end with `Exception`.\n\n**Example:** `class NotStartedEx extends Exception {}`\n\nA quick-fix that renames such classes is available only in the editor.\n\n\nInspection ID: ExceptionNameDoesntEndWithException"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ExceptionClassNameDoesntEndWithException",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Naming conventions/Class",
                      "index": 60,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NonFinalStaticVariableUsedInClassInitialization",
                "shortDescription": {
                  "text": "Non-final static field is used during class initialization"
                },
                "fullDescription": {
                  "text": "Reports the use of non-'final' 'static' variables during class initialization. In such cases, the code semantics may become dependent on the class creation order. Additionally, such cases may lead to the use of variables before their initialization, and generally cause difficult and confusing bugs. Example: 'class Foo {\n    public static int bar = 0;\n\n    static {\n      System.out.println(bar);\n    }\n  }' Inspection ID: NonFinalStaticVariableUsedInClassInitialization",
                  "markdown": "Reports the use of non-`final` `static` variables during class initialization.\n\nIn such cases, the code semantics may become dependent on the class creation order. Additionally, such cases may lead to the use of\nvariables before their initialization, and generally cause difficult and confusing bugs.\n\n**Example:**\n\n\n      class Foo {\n        public static int bar = 0;\n\n        static {\n          System.out.println(bar);\n        }\n      }\n\nInspection ID: NonFinalStaticVariableUsedInClassInitialization"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NonFinalStaticVariableUsedInClassInitialization",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Initialization",
                      "index": 27,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ThreadStopSuspendResume",
                "shortDescription": {
                  "text": "Call to 'Thread.stop()', 'suspend()' or 'resume()'"
                },
                "fullDescription": {
                  "text": "Reports calls to 'Thread.stop()', 'Thread.suspend()', and 'Thread.resume()'. These calls are inherently prone to data corruption and deadlocks, and their use is strongly discouraged. It is better to use cooperative cancellation instead of 'stop', and interruption instead of direct calls to 'suspend' and 'resume'. Inspection ID: ThreadStopSuspendResume",
                  "markdown": "Reports calls to `Thread.stop()`, `Thread.suspend()`, and `Thread.resume()`.\n\n\nThese calls are inherently prone to data corruption and deadlocks, and their use is strongly discouraged.\nIt is better to use cooperative cancellation instead of `stop`, and\ninterruption instead of direct calls to `suspend` and `resume`.\n\nInspection ID: ThreadStopSuspendResume"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CallToThreadStopSuspendOrResumeManager",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Threading issues",
                      "index": 23,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryTemporaryOnConversionFromString",
                "shortDescription": {
                  "text": "Unnecessary temporary object in conversion from 'String'"
                },
                "fullDescription": {
                  "text": "Reports unnecessary creation of temporary objects when converting from 'String' to primitive types. Example: 'new Integer(\"3\").intValue()' After the quick-fix is applied: 'Integer.valueOf(\"3\")' Inspection ID: UnnecessaryTemporaryOnConversionFromString",
                  "markdown": "Reports unnecessary creation of temporary objects when converting from `String` to primitive types.\n\n**Example:**\n\n\n      new Integer(\"3\").intValue()\n\nAfter the quick-fix is applied:\n\n\n      Integer.valueOf(\"3\")\n\n\nInspection ID: UnnecessaryTemporaryOnConversionFromString"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnnecessaryTemporaryOnConversionFromString",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Performance",
                      "index": 4,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseOfConcreteClass",
                "shortDescription": {
                  "text": "Use of concrete class"
                },
                "fullDescription": {
                  "text": "Reports usages of concrete classes, rather than interfaces. Such declarations may represent a failure of abstraction and may make testing more difficult. Declarations whose classes come from system or third-party libraries will not be reported by this inspection. Casts, instanceofs, and local variables are not reported in 'equals()' method implementations. Also, casts are not reported in 'clone()' method implementations. Example: 'interface Entity {}\n  class EntityImpl implements Entity {}\n\n  void processObject(Object obj) {\n    // warning: instanceof of the concrete class\n    if (obj instanceof EntityImpl) {\n      // warning: cast to the concrete class,\n      // rather than the interface\n      processEntity((EntityImpl)obj);\n    }\n  }\n  // warning: parameter of concrete class\n  void processEntity(EntityImpl obj) {\n  }' Use the Ignore abstract class type option to ignore casts to abstract classes. Use the subsequent options to control contexts where the problem is reported. Inspection ID: UseOfConcreteClass",
                  "markdown": "Reports usages of concrete classes, rather than interfaces. Such declarations may represent a failure of abstraction and may make testing more difficult.\n\n\nDeclarations whose classes come from system or third-party libraries will not be reported by this inspection.\nCasts, instanceofs, and local variables are not reported in `equals()` method implementations.\nAlso, casts are not reported in `clone()` method implementations.\n\nExample:\n\n\n      interface Entity {}\n      class EntityImpl implements Entity {}\n\n      void processObject(Object obj) {\n        // warning: instanceof of the concrete class\n        if (obj instanceof EntityImpl) {\n          // warning: cast to the concrete class,\n          // rather than the interface\n          processEntity((EntityImpl)obj);\n        }\n      }\n      // warning: parameter of concrete class\n      void processEntity(EntityImpl obj) {\n      }\n\n\nUse the **Ignore abstract class type** option to ignore casts to abstract classes.\n\nUse the subsequent options to control contexts where the problem is reported.\n\nInspection ID: UseOfConcreteClass"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UseOfConcreteClass",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Abstraction issues",
                      "index": 63,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantLabeledSwitchRuleCodeBlock",
                "shortDescription": {
                  "text": "Labeled switch rule has redundant code block"
                },
                "fullDescription": {
                  "text": "Reports labeled rules of 'switch' statements or 'switch' expressions that have a redundant code block. Example: 'String s = switch (n) {\n    case 1 -> { yield Integer.toString(n); }\n    default -> \"default\";\n  };' After the quick-fix is applied: 'String s = switch (n) {\n    case 1 -> Integer.toString(n);\n    default -> \"default\";\n  };' This inspection depends on the Java feature 'Enhanced 'switch' blocks', which is available since Java 14. Inspection ID: RedundantLabeledSwitchRuleCodeBlock New in 2019.1",
                  "markdown": "Reports labeled rules of `switch` statements or `switch` expressions that have a redundant code block.\n\nExample:\n\n\n      String s = switch (n) {\n        case 1 -> { yield Integer.toString(n); }\n        default -> \"default\";\n      };\n\nAfter the quick-fix is applied:\n\n\n      String s = switch (n) {\n        case 1 -> Integer.toString(n);\n        default -> \"default\";\n      };\n\nThis inspection depends on the Java feature 'Enhanced 'switch' blocks', which is available since Java 14.\n\nInspection ID: RedundantLabeledSwitchRuleCodeBlock\n\nNew in 2019.1"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RedundantLabeledSwitchRuleCodeBlock",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IOStreamConstructor",
                "shortDescription": {
                  "text": "'InputStream' and 'OutputStream' can be constructed using 'Files' methods"
                },
                "fullDescription": {
                  "text": "Reports 'new FileInputStream()' or 'new FileOutputStream()' expressions that can be replaced with 'Files.newInputStream()' or 'Files.newOutputStream()' calls respectively. The streams created using 'Files' methods are usually more efficient than those created by stream constructors. Example: 'InputStream is = new BufferedInputStream(new FileInputStream(file));' After the quick-fix is applied: 'InputStream is = new BufferedInputStream(Files.newInputStream(file.toPath()));' This inspection does not show warning if the language level 10 or higher, but the quick-fix is still available. This inspection only reports if the language level of the project or module is 7 or higher. Inspection ID: IOStreamConstructor New in 2022.1",
                  "markdown": "Reports `new FileInputStream()` or `new FileOutputStream()` expressions that can be replaced with `Files.newInputStream()` or `Files.newOutputStream()` calls respectively.   \nThe streams created using `Files` methods are usually more efficient than those created by stream constructors.\n\nExample:\n\n\n      InputStream is = new BufferedInputStream(new FileInputStream(file));\n\nAfter the quick-fix is applied:\n\n\n      InputStream is = new BufferedInputStream(Files.newInputStream(file.toPath()));\n\nThis inspection does not show warning if the language level 10 or higher, but the quick-fix is still available.\n\nThis inspection only reports if the language level of the project or module is 7 or higher.\n\nInspection ID: IOStreamConstructor\n\nNew in 2022.1"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "IOStreamConstructor",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Performance",
                      "index": 4,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AssignmentToForLoopParameter",
                "shortDescription": {
                  "text": "Assignment to 'for' loop parameter"
                },
                "fullDescription": {
                  "text": "Reports assignment to, or modification of a 'for' loop parameter inside the body of the loop. Although occasionally intended, this construct may be confusing and is often the result of a typo or a wrong variable being used. The quick-fix adds a declaration of a new variable. Example: 'for (String s : list) {\n    // Warning: s is changed inside the loop\n    s = s.trim();\n    System.out.println(\"String: \" + s);\n  }' After the quick-fix is applied: 'for (String s : list) {\n    String trimmed = s.trim();\n    System.out.println(\"String: \" + trimmed);\n  }' Assignments in basic 'for' loops without an update statement are not reported. In such cases the assignment is probably intended and can't be easily moved to the update part of the 'for' loop. Example: 'for (int i = 0; i < list.size(); ) {\n    if (element.equals(list.get(i))) {\n      list.remove(i);\n    } else {\n      // modification of for loop parameter is not reported\n      // as there's no update statement\n      i++;\n    }\n  }' Use the Check enhanced 'for' loop parameters option to specify whether modifications of enhanced 'for' loop parameters should be also reported. Inspection ID: AssignmentToForLoopParameter",
                  "markdown": "Reports assignment to, or modification of a `for` loop parameter inside the body of the loop.\n\nAlthough occasionally intended, this construct may be confusing and is often the result of a typo or a wrong variable being used.\n\nThe quick-fix adds a declaration of a new variable.\n\n**Example:**\n\n\n      for (String s : list) {\n        // Warning: s is changed inside the loop\n        s = s.trim();\n        System.out.println(\"String: \" + s);\n      }\n\nAfter the quick-fix is applied:\n\n\n      for (String s : list) {\n        String trimmed = s.trim();\n        System.out.println(\"String: \" + trimmed);\n      }\n\nAssignments in basic `for` loops without an update statement are not reported.\nIn such cases the assignment is probably intended and can't be easily moved to the update part of the `for` loop.\n\n**Example:**\n\n\n      for (int i = 0; i < list.size(); ) {\n        if (element.equals(list.get(i))) {\n          list.remove(i);\n        } else {\n          // modification of for loop parameter is not reported\n          // as there's no update statement\n          i++;\n        }\n      }\n\nUse the **Check enhanced 'for' loop parameters** option to specify whether modifications of enhanced `for` loop parameters\nshould be also reported.\n\nInspection ID: AssignmentToForLoopParameter"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AssignmentToForLoopParameter",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Assignment issues",
                      "index": 64,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Java9CollectionFactory",
                "shortDescription": {
                  "text": "Immutable collection creation can be replaced with collection factory call"
                },
                "fullDescription": {
                  "text": "Reports 'java.util.Collections' unmodifiable collection calls that can be converted to newer collection factory methods. These can be replaced with e.g. 'List.of()' or 'Set.of()' introduced in Java 9 or 'List.copyOf()' introduced in Java 10. Note that in contrast to 'java.util.Collections' methods, Java 9 collection factory methods: Do not accept 'null' values. Require unique set elements and map keys. Do not accept 'null' arguments to query methods like 'List.contains()' or 'Map.get()' of the collections returned. When these cases are violated, exceptions are thrown. This can change the semantics of the code after the migration. Example: 'List<Integer> even = Collections.unmodifiableList(\n    Arrays.asList(2, 4, 6, 8, 10, 2));\n  List<Integer> evenCopy = Collections.unmodifiableList(\n    new ArrayList<>(list1));' After the quick-fix is applied: 'List<Integer> even = List.of(2, 4, 6, 8, 10, 2);\n  List<Integer> evenCopy = List.copyOf(list);' Use the Do not warn when content is non-constant option to report only in cases when the supplied arguments are compile-time constants. This reduces the chances that the behavior changes, because it's not always possible to statically check whether original elements are unique and not 'null'. Use the Suggest 'Map.ofEntries' option to suggest replacing unmodifiable maps with more than 10 entries with 'Map.ofEntries()'. This inspection depends on the Java feature 'Collection factory methods', which is available since Java 9. Inspection ID: Java9CollectionFactory New in 2017.2",
                  "markdown": "Reports `java.util.Collections` unmodifiable collection calls that can be converted to newer collection factory methods. These can be replaced with e.g. `List.of()` or `Set.of()` introduced in Java 9 or `List.copyOf()` introduced in Java 10.\n\nNote that in contrast to `java.util.Collections` methods, Java 9 collection factory methods:\n\n* Do not accept `null` values.\n* Require unique set elements and map keys.\n* Do not accept `null` arguments to query methods like `List.contains()` or `Map.get()` of the collections returned.\n\nWhen these cases are violated, exceptions are thrown.\nThis can change the semantics of the code after the migration.\n\nExample:\n\n\n      List<Integer> even = Collections.unmodifiableList(\n        Arrays.asList(2, 4, 6, 8, 10, 2));\n      List<Integer> evenCopy = Collections.unmodifiableList(\n        new ArrayList<>(list1));\n\nAfter the quick-fix is applied:\n\n\n      List<Integer> even = List.of(2, 4, 6, 8, 10, 2);\n      List<Integer> evenCopy = List.copyOf(list);\n\n\nUse the **Do not warn when content is non-constant** option to report only in cases when the supplied arguments are compile-time constants.\nThis reduces the chances that the behavior changes,\nbecause it's not always possible to statically check whether original elements are unique and not `null`.\n\n\nUse the **Suggest 'Map.ofEntries'** option to suggest replacing unmodifiable maps with more than 10 entries with `Map.ofEntries()`.\n\nThis inspection depends on the Java feature 'Collection factory methods', which is available since Java 9.\n\nInspection ID: Java9CollectionFactory\n\nNew in 2017.2"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "Java9CollectionFactory",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level migration aids/Java 9",
                      "index": 66,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MetaAnnotationWithoutRuntimeRetention",
                "shortDescription": {
                  "text": "Test annotation without '@Retention(RUNTIME)' annotation"
                },
                "fullDescription": {
                  "text": "Reports annotations with a 'SOURCE' or 'CLASS' retention policy that are supposed to be used by JUnit 5. Such annotations are not available at runtime and most probably their retention policy should be fixed to be accessible through reflection. Note that if the retention policy is not specified, then the default retention policy 'CLASS' is used. Example: '@Testable\n  public @interface UnitTest {}' After the quick-fix is applied: '@Retention(RetentionPolicy.RUNTIME)\n  @Testable\n  public @interface UnitTest {}'",
                  "markdown": "Reports annotations with a `SOURCE` or `CLASS` retention policy that are supposed to be used by JUnit 5. Such annotations are not available at runtime and most probably their retention policy should be fixed to be accessible through reflection.\n\nNote that if the retention policy is not specified, then the default retention policy `CLASS` is used.\n\n**Example:**\n\n\n      @Testable\n      public @interface UnitTest {}\n\nAfter the quick-fix is applied:\n\n\n      @Retention(RetentionPolicy.RUNTIME)\n      @Testable\n      public @interface UnitTest {}\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MetaAnnotationWithoutRuntimeRetention",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/JUnit",
                      "index": 67,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryContinue",
                "shortDescription": {
                  "text": "Unnecessary 'continue' statement"
                },
                "fullDescription": {
                  "text": "Reports 'continue' statements if they are the last reachable statements in the loop. These 'continue' statements are unnecessary and can be safely removed. Example: 'for (String element: elements) {\n    System.out.println();\n    continue;\n  }' After the quick-fix is applied: 'for (String element: elements) {\n    System.out.println();\n  }' The inspection doesn't analyze JSP files. Use the Ignore in then branch of 'if' statement with 'else' branch option to ignore 'continue' statements when they are placed in a 'then' branch of a complete 'if'-'else' statement. Example: 'for (String element: elements) {\n    if(element.isEmpty()) {\n      continue;\n    } else {\n      //...\n    }\n  }' Inspection ID: UnnecessaryContinue",
                  "markdown": "Reports `continue` statements if they are the last reachable statements in the loop. These `continue` statements are unnecessary and can be safely removed.\n\nExample:\n\n\n      for (String element: elements) {\n        System.out.println();\n        continue;\n      }\n\nAfter the quick-fix is applied:\n\n\n      for (String element: elements) {\n        System.out.println();\n      }\n\nThe inspection doesn't analyze JSP files.\n\n\nUse the **Ignore in then branch of 'if' statement with 'else' branch** option to ignore\n`continue` statements when they are placed in a `then` branch of a complete\n`if`-`else` statement.\n\nExample:\n\n\n      for (String element: elements) {\n        if(element.isEmpty()) {\n          continue;\n        } else {\n          //...\n        }\n      }\n\nInspection ID: UnnecessaryContinue"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnnecessaryContinue",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Verbose or redundant code constructs",
                      "index": 37,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CStyleArrayDeclaration",
                "shortDescription": {
                  "text": "C-style array declaration"
                },
                "fullDescription": {
                  "text": "Reports array declarations written in C-style syntax, where the array brackets are placed after a variable name or after a method parameter list. Most code styles prefer Java-style array declarations, where the array brackets are placed after the type name. Example: 'public String process(String value[])[] {\n    return value;\n  }' After the quick-fix is applied: 'public String[] process(String[] value) {\n    return value;\n  }' Configure the inspection: Use the Ignore C-style declarations in variables option to report C-style array declaration of method return types only. Inspection ID: CStyleArrayDeclaration",
                  "markdown": "Reports array declarations written in C-style syntax, where the array brackets are placed after a variable name or after a method parameter list. Most code styles prefer Java-style array declarations, where the array brackets are placed after the type name.\n\n**Example:**\n\n\n      public String process(String value[])[] {\n        return value;\n      }\n\nAfter the quick-fix is applied:\n\n\n      public String[] process(String[] value) {\n        return value;\n      }\n\nConfigure the inspection:\n\n\nUse the **Ignore C-style declarations in variables** option to report C-style array declaration of method return types only.\n\n\nInspection ID: CStyleArrayDeclaration"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CStyleArrayDeclaration",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SystemExit",
                "shortDescription": {
                  "text": "Call to 'System.exit()' or related methods"
                },
                "fullDescription": {
                  "text": "Reports calls to 'System.exit()', 'Runtime.exit()', and 'Runtime.halt()'. Invoking 'System.exit()' or 'Runtime.exit()' calls the shutdown hooks and terminates the currently running Java virtual machine. Invoking 'Runtime.halt()' forcibly terminates the JVM without causing shutdown hooks to be started. Each of these methods should be used with extreme caution. Calls to these methods make the calling code unportable to most application servers. Use the option to ignore calls in main methods. Inspection ID: SystemExit",
                  "markdown": "Reports calls to `System.exit()`, `Runtime.exit()`, and `Runtime.halt()`.\n\n\nInvoking `System.exit()` or `Runtime.exit()`\ncalls the shutdown hooks and terminates the currently running Java\nvirtual machine. Invoking `Runtime.halt()` forcibly\nterminates the JVM without causing shutdown hooks to be started.\nEach of these methods should be used with extreme caution. Calls\nto these methods make the calling code unportable to most\napplication servers.\n\n\nUse the option to ignore calls in main methods.\n\n\nInspection ID: SystemExit"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CallToSystemExit",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Portability",
                      "index": 69,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DeclareCollectionAsInterface",
                "shortDescription": {
                  "text": "Collection declared by class, not interface"
                },
                "fullDescription": {
                  "text": "Reports declarations of 'Collection' variables made by using the collection class as a type, rather than an appropriate interface. The warning is not issued if weakening the variable type will cause a compilation error. Example: '// Warning: concrete collection class ArrayList used.\n  int getTotalLength(ArrayList<String> list) {\n    return list.stream().mapToInt(String::length).sum();\n  }\n\n  // No warning, as trimToSize() method is not\n  // available in the List interface\n  void addData(ArrayList<String> data) {\n    data.add(\"Hello\");\n    data.add(\"World\");\n    data.trimToSize();\n  }' A quick-fix is suggested to use the appropriate collection interface (e.g. 'Collection', 'Set', or 'List'). Inspection ID: DeclareCollectionAsInterface",
                  "markdown": "Reports declarations of `Collection` variables made by using the collection class as a type, rather than an appropriate interface. The warning is not issued if weakening the variable type will cause a compilation error.\n\nExample:\n\n\n      // Warning: concrete collection class ArrayList used.\n      int getTotalLength(ArrayList<String> list) {\n        return list.stream().mapToInt(String::length).sum();\n      }\n\n      // No warning, as trimToSize() method is not\n      // available in the List interface\n      void addData(ArrayList<String> data) {\n        data.add(\"Hello\");\n        data.add(\"World\");\n        data.trimToSize();\n      }\n\nA quick-fix is suggested to use the appropriate collection interface (e.g. `Collection`, `Set`, or `List`).\n\nInspection ID: DeclareCollectionAsInterface"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CollectionDeclaredAsConcreteClass",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Abstraction issues",
                      "index": 63,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TrivialStringConcatenation",
                "shortDescription": {
                  "text": "Concatenation with empty string"
                },
                "fullDescription": {
                  "text": "Reports empty string operands in string concatenations. Concatenation with the empty string can be used to convert non-'String' objects or primitives into 'String's, but it can be clearer to use a 'String.valueOf()' method call. A quick-fix is suggested to simplify the concatenation. Example: 'void foo(int x, int y) {\n    String s = \"\" + x + \" ; \" + y;\n  }' After the quick-fix is applied: 'void foo(int x, int y) {\n    String s = x + \" ; \" + y;\n  }' Use the Report only where empty strings can be removed without other changes option to ignore cases cases where removing the empty string will require adding a 'String.valueOf()' conversion of another operand. Inspection ID: TrivialStringConcatenation",
                  "markdown": "Reports empty string operands in string concatenations. Concatenation with the empty string can be used to convert non-`String` objects or primitives into `String`s, but it can be clearer to use a `String.valueOf()` method call.\n\n\nA quick-fix is suggested to simplify the concatenation.\n\n**Example:**\n\n\n      void foo(int x, int y) {\n        String s = \"\" + x + \" ; \" + y;\n      }\n\nAfter the quick-fix is applied:\n\n\n      void foo(int x, int y) {\n        String s = x + \" ; \" + y;\n      }\n\n\nUse the **Report only where empty strings can be removed without other changes**\noption to ignore cases cases where removing the empty string\nwill require adding a `String.valueOf()` conversion of another operand.\n\nInspection ID: TrivialStringConcatenation"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ConcatenationWithEmptyString",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Verbose or redundant code constructs",
                      "index": 37,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SuspiciousInvocationHandlerImplementation",
                "shortDescription": {
                  "text": "Suspicious 'InvocationHandler' implementation"
                },
                "fullDescription": {
                  "text": "Reports implementations of 'InvocationHandler' that do not proxy standard 'Object' methods like 'hashCode()', 'equals()', and 'toString()'. Failing to handle these methods might cause unexpected problems upon calling them on a proxy instance. Example: 'InvocationHandler myHandler = (proxy, method, params) -> {\n    System.out.println(\"Hello World!\");\n    return null;\n  };\n  Runnable myProxy = (Runnable) Proxy.newProxyInstance(\n    Thread.currentThread().getContextClassLoader(),\n    new Class[] {Runnable.class}, myHandler\n  );' This code snippet is designed to only proxy the 'Runnable.run()' method. However, calls to any 'Object' methods, like 'hashCode()', are proxied as well. This can lead to problems like a 'NullPointerException', for example, when adding 'myProxy' to a 'HashSet'. New in 2020.2 Inspection ID: SuspiciousInvocationHandlerImplementation",
                  "markdown": "Reports implementations of `InvocationHandler` that do not proxy standard `Object` methods like `hashCode()`, `equals()`, and `toString()`.\n\nFailing to handle these methods might cause unexpected problems upon calling them on a proxy instance.\n\n**Example:**\n\n\n      InvocationHandler myHandler = (proxy, method, params) -> {\n        System.out.println(\"Hello World!\");\n        return null;\n      };\n      Runnable myProxy = (Runnable) Proxy.newProxyInstance(\n        Thread.currentThread().getContextClassLoader(),\n        new Class[] {Runnable.class}, myHandler\n      );\n\n\nThis code snippet is designed to only proxy the `Runnable.run()` method.\nHowever, calls to any `Object` methods, like `hashCode()`, are proxied as well.\nThis can lead to problems like a `NullPointerException`, for example, when adding `myProxy` to a `HashSet`.\n\nNew in 2020.2\n\nInspection ID: SuspiciousInvocationHandlerImplementation"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SuspiciousInvocationHandlerImplementation",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnreachableCode",
                "shortDescription": {
                  "text": "Unreachable code"
                },
                "fullDescription": {
                  "text": "Reports the code which is never reached according to data flow analysis. It can be the result of previous always-true or always-false condition, unreachable loop body or catch section. Usually (though not always) unreachable code is a consequence of a previous warning, so check inspection warnings form \"Nullability and data flow problems\", \"Constant values\", or \"Redundant operation on empty container\" to better understand the cause. Example: 'void finishApplication() {\n    System.exit(0);\n    System.out.println(\"Application is terminated\"); // Unreachable code\n  }' Note that this inspection relies on method contract inference. In particular, if you call a static or final method that always throws an exception, then the \"always failing\" contract will be inferred, and code after the method call will be considered unreachable. For example: 'void run() {\n    performAction();\n    System.out.println(\"Action is performed\"); // Unreachable code\n  }\n  \n  static void performAction() {\n    throw new AssertionError();\n  }' This may cause false-positives if any kind of code postprocessing is used, for example, if an annotation processor later replaces the method body with something useful. To avoid false-positive warnings, suppress the automatic contract inference with explicit '@org.jetbrains.annotations.Contract' annotation from 'org.jetbrains:annotations' package: 'void run() {\n    performAction();\n    System.out.println(\"Action is performed\"); // No warning anymore\n  }\n\n  @Contract(\"-> _\") // implementation will be replaced\n  static void performAction() {\n    throw new AssertionError();\n  }' Inspection ID: UnreachableCode New in 2024.1",
                  "markdown": "Reports the code which is never reached according to data flow analysis. It can be the result of previous always-true or always-false condition, unreachable loop body or catch section. Usually (though not always) unreachable code is a consequence of a previous warning, so check inspection warnings form \"Nullability and data flow problems\", \"Constant values\", or \"Redundant operation on empty container\" to better understand the cause.\n\nExample:\n\n\n      void finishApplication() {\n        System.exit(0);\n        System.out.println(\"Application is terminated\"); // Unreachable code\n      }\n\n\nNote that this inspection relies on method contract inference. In particular, if you call a static or final method\nthat always throws an exception, then the \"always failing\" contract will be inferred, and code after the method call\nwill be considered unreachable. For example:\n\n\n      void run() {\n        performAction();\n        System.out.println(\"Action is performed\"); // Unreachable code\n      }\n      \n      static void performAction() {\n        throw new AssertionError();\n      }\n\n\nThis may cause false-positives if any kind of code postprocessing is used, for example, if an annotation processor\nlater replaces the method body with something useful. To avoid false-positive warnings, suppress the automatic\ncontract inference with explicit `@org.jetbrains.annotations.Contract` annotation from\n`org.jetbrains:annotations` package:\n\n\n      void run() {\n        performAction();\n        System.out.println(\"Action is performed\"); // No warning anymore\n      }\n\n      @Contract(\"-> _\") // implementation will be replaced\n      static void performAction() {\n        throw new AssertionError();\n      }\n\nInspection ID: UnreachableCode\n\nNew in 2024.1"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnreachableCode",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlTagCanBeJavadocTag",
                "shortDescription": {
                  "text": "'<code>…</code>' can be replaced with '{@code …}'"
                },
                "fullDescription": {
                  "text": "Reports usages of '<code>' tags in Javadoc comments. Since Java 5, these tags can be replaced with '{@code ...}' constructs. This allows using angle brackets '<' and '>' inside the comment instead of HTML character entities. Example: '/**\n   * @return empty <code>ArrayList&lt;Integer&gt;</code>\n   */\n  List<Integer> getList(){ ... }' After the quick-fix is applied: '/**\n   * @return empty {@code ArrayList<Integer>}\n   */\n  List<Integer> getList(){ ... }' Inspection ID: HtmlTagCanBeJavadocTag",
                  "markdown": "Reports usages of `<code>` tags in Javadoc comments. Since Java 5, these tags can be replaced with `{@code ...}` constructs. This allows using angle brackets `<` and `>` inside the comment instead of HTML character entities.\n\n**Example:**\n\n\n      /**\n       * @return empty <code>ArrayList&lt;Integer&gt;</code>\n       */\n      List<Integer> getList(){ ... }\n\nAfter the quick-fix is applied:\n\n\n      /**\n       * @return empty {@code ArrayList<Integer>}\n       */\n      List<Integer> getList(){ ... }\n\nInspection ID: HtmlTagCanBeJavadocTag"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HtmlTagCanBeJavadocTag",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Javadoc",
                      "index": 58,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ClassEscapesItsScope",
                "shortDescription": {
                  "text": "Class is exposed outside of its visibility scope"
                },
                "fullDescription": {
                  "text": "Reports usages of classes in a field or method signature where the class has less visibility than the member that uses it. While legal Java, such members cannot be used outside of the visibility scope of the class type they reference. Example: 'public class Parent {\n    public Child getChild() {\n      return new Child();\n    }\n\n    private class Child {}\n  }' Additionally, in Java 9 and higher, a module may hide some of its classes from other modules by not exporting their packages. However, if a member that is part of the exported API references a non-exported class in its signature, such a member cannot be used outside of the module. Configure the inspection: Use the Report non-exported classes exposed in module API (Java 9+) option to report module API members that expose non-exported classes. Note that the language level of the project or module needs to be 9 or higher for this option. Use the Report non-accessible classes exposed in public API option to report on public members that expose classes with a smaller visibility scope. Use the Report private classes exposed in package-local API option to report on package-local members that expose 'private' classes. Inspection ID: ClassEscapesItsScope",
                  "markdown": "Reports usages of classes in a field or method signature where the class has less visibility than the member that uses it. While legal Java, such members cannot be used outside of the visibility scope of the class type they reference.\n\n**Example:**\n\n\n      public class Parent {\n        public Child getChild() {\n          return new Child();\n        }\n\n        private class Child {}\n      }\n\n\nAdditionally, in Java 9 and higher, a module may hide some of its classes from other modules by not exporting their packages.\nHowever, if a member that is part of the exported API references a non-exported class in its signature,\nsuch a member cannot be used outside of the module.\n\nConfigure the inspection:\n\n* Use the **Report non-exported classes exposed in module API (Java 9+)** option to report module API members that expose non-exported classes.  \n  Note that the language level of the project or module needs to be 9 or higher for this option.\n* Use the **Report non-accessible classes exposed in public API** option to report on public members that expose classes with a smaller visibility scope.\n* Use the **Report private classes exposed in package-local API** option to report on package-local members that expose `private` classes.\n\nInspection ID: ClassEscapesItsScope"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ClassEscapesDefinedScope",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Visibility",
                      "index": 73,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EqualsUsesNonFinalVariable",
                "shortDescription": {
                  "text": "Non-final field referenced in 'equals()'"
                },
                "fullDescription": {
                  "text": "Reports implementations of 'equals()' that access non-'final' variables. Such access may result in 'equals()' returning different results at different points in the object's lifecycle, which may in turn cause problems when using the standard collections classes. Example: 'public class Person {\n    private String lastName;\n\n    @Override\n    public boolean equals(Object obj) {\n      ...\n      Person other = (Person) obj;\n      if (lastName == null) {\n        if (!lastName.equals(other.lastName)) {\n        return false;\n      ...\n      }\n    }\n  }'\n Inspection ID: EqualsUsesNonFinalVariable",
                  "markdown": "Reports implementations of `equals()` that access non-`final` variables. Such access may result in `equals()` returning different results at different points in the object's lifecycle, which may in turn cause problems when using the standard collections classes.\n\n**Example:**\n\n\n      public class Person {\n        private String lastName;\n\n        @Override\n        public boolean equals(Object obj) {\n          ...\n          Person other = (Person) obj;\n          if (lastName == null) {\n            if (!lastName.equals(other.lastName)) {\n            return false;\n          ...\n          }\n        }\n      }\n      \nInspection ID: EqualsUsesNonFinalVariable"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NonFinalFieldReferenceInEquals",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NestedAssignment",
                "shortDescription": {
                  "text": "Nested assignment"
                },
                "fullDescription": {
                  "text": "Reports assignment expressions that are nested inside other expressions. Such expressions may be confusing and violate the general design principle, which states that any construct should do precisely one thing. Example: 'String userName;\n  // Warning: result of assignment to 'userName' is used\n  String message = \"Hello \" + (userName = \"Alice\") + \"!\"\n  System.out.println(message);\n  System.out.println(\"Goodbye \" + userName);' Inspection ID: NestedAssignment",
                  "markdown": "Reports assignment expressions that are nested inside other expressions.\n\nSuch expressions may be confusing and violate the general design principle, which states that any construct should do precisely one thing.\n\n**Example:**\n\n\n      String userName;\n      // Warning: result of assignment to 'userName' is used\n      String message = \"Hello \" + (userName = \"Alice\") + \"!\"\n      System.out.println(message);\n      System.out.println(\"Goodbye \" + userName);\n\nInspection ID: NestedAssignment"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NestedAssignment",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Assignment issues",
                      "index": 64,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AutoUnboxing",
                "shortDescription": {
                  "text": "Auto-unboxing"
                },
                "fullDescription": {
                  "text": "Reports expressions that are affected by unboxing conversion (automatic unwrapping of objects into primitive values). Try not to use objects instead of primitives. It might significantly affect the performance. Example: 'int x = new Integer(42);' The quick-fix makes the conversion explicit: 'int x = new Integer(42).intValue();' AutoUnboxing appeared in Java 5. This inspection can help to downgrade for backward compatibility with earlier Java versions. Inspection ID: AutoUnboxing",
                  "markdown": "Reports expressions that are affected by unboxing conversion (automatic unwrapping of objects into primitive values). Try not to use objects instead of primitives. It might significantly affect the performance.\n\n**Example:**\n\n    int x = new Integer(42);\n\nThe quick-fix makes the conversion explicit:\n\n    int x = new Integer(42).intValue();\n\n\n*AutoUnboxing* appeared in Java 5.\nThis inspection can help to downgrade for backward compatibility with earlier Java versions.\n\nInspection ID: AutoUnboxing"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AutoUnboxing",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Performance",
                      "index": 4,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StringConcatenationInMessageFormatCall",
                "shortDescription": {
                  "text": "String concatenation as argument to 'MessageFormat.format()' call"
                },
                "fullDescription": {
                  "text": "Reports non-constant string concatenations used as an argument to a call to 'MessageFormat.format()'. While occasionally intended, this is usually a misuse of the formatting method and may even cause unexpected exceptions if the variables used in the concatenated string contain special characters like '{'. Also, sometimes this could be the result of mistakenly concatenating a string format argument by typing a '+' when a ',' was meant. Example: 'String formatGreeting(String userName, int balance) {\n    return MessageFormat.format(\"Hello, \" + userName + \"! Your balance is {0}.\", balance);\n  }' Here, the 'userName' will be interpreted as a part of the format string, which may result in 'IllegalArgumentException' (for example, if 'userName' is '\"{\"'). This call should be probably replaced with 'MessageFormat.format(\"Hello, {0}! Your balance is {1}.\", userName, balance)'. Inspection ID: StringConcatenationInMessageFormatCall",
                  "markdown": "Reports non-constant string concatenations used as an argument to a call to `MessageFormat.format()`.\n\n\nWhile occasionally intended, this is usually a misuse of the formatting method\nand may even cause unexpected exceptions if the variables used in the concatenated string contain\nspecial characters like `{`.\n\n\nAlso, sometimes this could be the result\nof mistakenly concatenating a string format argument by typing a `+` when a `,` was meant.\n\n**Example:**\n\n\n      String formatGreeting(String userName, int balance) {\n        return MessageFormat.format(\"Hello, \" + userName + \"! Your balance is {0}.\", balance);\n      }\n\n\nHere, the `userName` will be interpreted as a part of the format string, which may result\nin `IllegalArgumentException` (for example, if `userName` is `\"{\"`).\nThis call should be probably replaced with `MessageFormat.format(\"Hello, {0}! Your balance is {1}.\", userName, balance)`.\n\nInspection ID: StringConcatenationInMessageFormatCall"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "StringConcatenationInMessageFormatCall",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NonFinalFieldInImmutable",
                "shortDescription": {
                  "text": "Non-final field in '@Immutable' class"
                },
                "fullDescription": {
                  "text": "Reports any non-final field in a class with the '@Immutable' annotation. This violates the contract of the '@Immutable' annotation. Example: 'import javax.annotation.concurrent.Immutable;\n  @Immutable\n  class Foo {\n    String bar = \"foo\";\n  }' Supported '@GuardedBy' annotations are: 'net.jcip.annotations.GuardedBy' 'javax.annotation.concurrent.GuardedBy' 'org.apache.http.annotation.GuardedBy' 'com.android.annotations.concurrency.GuardedBy' 'androidx.annotation.GuardedBy' 'com.google.errorprone.annotations.concurrent.GuardedBy' Inspection ID: NonFinalFieldInImmutable",
                  "markdown": "Reports any non-final field in a class with the `@Immutable` annotation. This violates the contract of the `@Immutable` annotation.\n\nExample:\n\n\n      import javax.annotation.concurrent.Immutable;\n      @Immutable\n      class Foo {\n        String bar = \"foo\";\n      }\n\nSupported `@GuardedBy` annotations are:\n\n* `net.jcip.annotations.GuardedBy`\n* `javax.annotation.concurrent.GuardedBy`\n* `org.apache.http.annotation.GuardedBy`\n* `com.android.annotations.concurrency.GuardedBy`\n* `androidx.annotation.GuardedBy`\n* `com.google.errorprone.annotations.concurrent.GuardedBy`\n\nInspection ID: NonFinalFieldInImmutable"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NonFinalFieldInImmutable",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Concurrency annotation issues",
                      "index": 75,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CallToStringConcatCanBeReplacedByOperator",
                "shortDescription": {
                  "text": "Call to 'String.concat()' can be replaced with '+'"
                },
                "fullDescription": {
                  "text": "Reports calls to 'java.lang.String.concat()'. Such calls can be replaced with the '+' operator for clarity and possible increased performance if the method was invoked on a constant with a constant argument. Example: 'String foo(String name) {\n    return name.concat(\"foo\");\n  }' After the quick-fix is applied: 'String foo(String name) {\n    return name + \"foo\";\n  }' Inspection ID: CallToStringConcatCanBeReplacedByOperator",
                  "markdown": "Reports calls to `java.lang.String.concat()`.\n\n\nSuch calls can be replaced with the `+` operator for clarity and possible increased\nperformance if the method was invoked on a constant with a constant argument.\n\n**Example:**\n\n\n      String foo(String name) {\n        return name.concat(\"foo\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      String foo(String name) {\n        return name + \"foo\";\n      }\n\nInspection ID: CallToStringConcatCanBeReplacedByOperator"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CallToStringConcatCanBeReplacedByOperator",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HardcodedFileSeparators",
                "shortDescription": {
                  "text": "Hardcoded file separator"
                },
                "fullDescription": {
                  "text": "Reports the forward ('/') or backward ('\\') slash in a string or character literal. These characters are commonly used as file separators, and portability may suffer if they are hardcoded. The inspection will not report backward slashes inside escape sequences and forward slashes immediately following the '<' character or immediately preceding the '>' character, as those often indicate XML or HTML tags rather than file names. Strings representing a 'java.util.TimeZone' ID, strings that are valid regular expressions, or strings that equal IANA-registered MIME media types will not be reported either. Example: 'new File(\"C:\\\\Users\\\\Name\");' Use the option to include 'example/*' in the set of recognized media types. Normally, usage of the 'example/*' MIME media type outside of an example (e.g. in a 'Content-Type' header) is an error. Inspection ID: HardcodedFileSeparators",
                  "markdown": "Reports the forward (`/`) or backward (`\\`) slash in a string or character literal. These characters are commonly used as file separators, and portability may suffer if they are hardcoded.\n\n\nThe inspection will not report backward slashes inside escape sequences and forward slashes immediately following the '\\<' character\nor immediately preceding the '\\>' character, as those often indicate XML or HTML tags rather than file names.\nStrings representing a `java.util.TimeZone` ID, strings that are valid regular expressions,\nor strings that equal IANA-registered MIME media types will not be reported either.\n\n**Example:**\n\n\n      new File(\"C:\\\\Users\\\\Name\");\n\n\nUse the option to include `example/*` in the set of recognized media types.\nNormally, usage of the `example/*` MIME media type outside of an example (e.g. in a `Content-Type`\nheader) is an error.\n\nInspection ID: HardcodedFileSeparators"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HardcodedFileSeparator",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Portability",
                      "index": 69,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConfusingFloatingPointLiteral",
                "shortDescription": {
                  "text": "Confusing floating-point literal"
                },
                "fullDescription": {
                  "text": "Reports any floating point numbers that don't have a decimal point, numbers before the decimal point, or numbers after the decimal point. Such literals may be confusing, and violate several coding standards. Example: 'double d = .03;' After the quick-fix is applied: 'double d = 0.03;' Use the Ignore floating point literals in scientific notation option to ignore floating point numbers in scientific notation. Inspection ID: ConfusingFloatingPointLiteral",
                  "markdown": "Reports any floating point numbers that don't have a decimal point, numbers before the decimal point, or numbers after the decimal point.\n\nSuch literals may be confusing, and violate several coding standards.\n\n**Example:**\n\n    double d = .03;\n\nAfter the quick-fix is applied:\n\n    double d = 0.03;\n\n\nUse the **Ignore floating point literals in scientific notation** option to ignore floating point numbers in scientific notation.\n\nInspection ID: ConfusingFloatingPointLiteral"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ConfusingFloatingPointLiteral",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Numeric issues",
                      "index": 25,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JavadocReference",
                "shortDescription": {
                  "text": "Declaration has problems in Javadoc references"
                },
                "fullDescription": {
                  "text": "Reports unresolved references inside Javadoc comments. In the following example, the 'someParam' parameter is missing, so it will be highlighted: 'class A {\n    /**\n     * @param someParam description\n     **/\n    void foo() {\n    }\n}' Disable the Report inaccessible symbols option to ignore the tags that reference missing method parameters, classes, fields and methods. Inspection ID: JavadocReference",
                  "markdown": "Reports unresolved references inside Javadoc comments.\n\nIn the following example, the `someParam` parameter is missing, so it will be highlighted:\n\n\n    class A {\n        /**\n         * @param someParam description\n         **/\n        void foo() {\n        }\n    }\n\n\nDisable the **Report inaccessible symbols** option to ignore the tags that reference missing method parameters,\nclasses, fields and methods.\n\nInspection ID: JavadocReference"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JavadocReference",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Javadoc",
                      "index": 58,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LoggingPlaceholderCountMatchesArgumentCount",
                "shortDescription": {
                  "text": "Number of placeholders does not match number of arguments in logging call"
                },
                "fullDescription": {
                  "text": "Reports SLF4J, Log4j2 and akka.event.LoggingAdapter logging calls, such as 'logger.info(\"{}: {}\", key)' where the number of '{}' placeholders in the logger message doesn't match the number of other arguments to the logging call. Use the inspection option to specify which implementation SLF4J uses. If Check automatically is chosen, then 'org.apache.logging.slf4j.Log4jLogger' is searched in the classpath. If this file is founded or Yes is chosen, then cases, when the last parameter with an exception type has a placeholder, will not be reported for SLFJ4 API. For example: '//this case will not be reported with \"Yes\" option\nlog.error(\"For id {}: {}\", \"1\", new RuntimeException());' In this case 'new RuntimeException()' will be printed using 'toString()', (its stacktrace will not be printed): 'For id 1: java.lang.RuntimeException' Otherwise, it will be highlighted because the last placeholder is not used: 'For id 1: {}\njava.lang.RuntimeException: null' No option can be used to always highlight such cases when a placeholder is used for an exception even if 'org.apache.logging.slf4j.Log4jLogger' is used as a backend. This option works only for SLF4J. Inspection ID: LoggingPlaceholderCountMatchesArgumentCount",
                  "markdown": "Reports SLF4J, Log4j2 and akka.event.LoggingAdapter logging calls, such as `logger.info(\"{}: {}\", key)` where the number of `{}` placeholders in the logger message doesn't match the number of other arguments to the logging call.\n\n\nUse the inspection option to specify which implementation SLF4J uses.\nIf **Check automatically** is chosen, then `org.apache.logging.slf4j.Log4jLogger` is searched in the classpath.\nIf this file is founded or **Yes** is chosen, then cases, when the last parameter with an exception type has a placeholder,\nwill not be reported for SLFJ4 API.  \n\nFor example:\n\n\n    //this case will not be reported with \"Yes\" option\n    log.error(\"For id {}: {}\", \"1\", new RuntimeException());\n\nIn this case 'new RuntimeException()' will be printed using 'toString()', (its stacktrace will not be printed):\n\n\n    For id 1: java.lang.RuntimeException\n\nOtherwise, it will be highlighted because the last placeholder is not used:\n\n\n    For id 1: {}\n    java.lang.RuntimeException: null\n\n**No** option can be used to always highlight such cases when a placeholder is used for an exception even if `org.apache.logging.slf4j.Log4jLogger` is used as a backend.  \nThis option works only for SLF4J.\n\n\nInspection ID: LoggingPlaceholderCountMatchesArgumentCount"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "LoggingPlaceholderCountMatchesArgumentCount",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JVM languages/Logging",
                      "index": 41,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ImplicitArrayToString",
                "shortDescription": {
                  "text": "Call to 'toString()' on array"
                },
                "fullDescription": {
                  "text": "Reports arrays used in 'String' concatenations or passed as parameters to 'java.io.PrintStream' methods, such as 'System.out.println()'. Usually, the content of the array is meant to be used and not the array object itself. Example: 'void print(Object[] objects) {\n    System.out.println(objects);\n  }' After the quick-fix is applied: 'void print(Object[] objects) {\n    System.out.println(Arrays.toString(objects));\n  }' Inspection ID: ImplicitArrayToString",
                  "markdown": "Reports arrays used in `String` concatenations or passed as parameters to `java.io.PrintStream` methods, such as `System.out.println()`.\n\n\nUsually, the content of the array is meant to be used and not the array object itself.\n\n**Example:**\n\n\n      void print(Object[] objects) {\n        System.out.println(objects);\n      }\n\nAfter the quick-fix is applied:\n\n\n      void print(Object[] objects) {\n        System.out.println(Arrays.toString(objects));\n      }\n\nInspection ID: ImplicitArrayToString"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ImplicitArrayToString",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReuseOfLocalVariable",
                "shortDescription": {
                  "text": "Reuse of local variable"
                },
                "fullDescription": {
                  "text": "Reports local variables that are \"reused\" overwriting their values with new values unrelated to their original use. Such a local variable reuse may be confusing, as the intended semantics of the local variable may vary with each use. It may also be prone to bugs if due to the code changes, the values that have been considered overwritten actually appear to be alive. It is a good practice to keep variable lifetimes as short as possible, and not to reuse local variables for the sake of brevity. Example: 'void x() {\n        String s = \"one\";\n        System.out.println(\"s = \" + s);\n        s = \"two\"; //reuse of local variable 's'\n        System.out.println(\"s = \" + s);\n    }' Inspection ID: ReuseOfLocalVariable",
                  "markdown": "Reports local variables that are \"reused\" overwriting their values with new values unrelated to their original use.\n\nSuch a local variable reuse may be confusing,\nas the intended semantics of the local variable may vary with each use. It may also be\nprone to bugs if due to the code changes, the values that have been considered overwritten actually\nappear to be alive. It is a good practice to keep variable lifetimes as short as possible, and not\nto reuse local variables for the sake of brevity.\n\nExample:\n\n\n        void x() {\n            String s = \"one\";\n            System.out.println(\"s = \" + s);\n            s = \"two\"; //reuse of local variable 's'\n            System.out.println(\"s = \" + s);\n        }\n\nInspection ID: ReuseOfLocalVariable"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ReuseOfLocalVariable",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Data flow",
                      "index": 51,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BooleanMethodNameMustStartWithQuestion",
                "shortDescription": {
                  "text": "Boolean method name must start with question word"
                },
                "fullDescription": {
                  "text": "Reports boolean methods whose names do not start with a question word. Boolean methods that override library methods are ignored by this inspection. Example: 'boolean empty(List<String> list) {\n  return list.isEmpty();\n}' A quick-fix that renames such methods is available only in the editor. Configure the inspection: Use the Boolean method name prefixes list to specify acceptable question words to start boolean method names with. Use the Ignore methods with 'java.lang.Boolean' return type option to ignore methods with the 'java.lang.Boolean' return type. Use the Ignore boolean methods in an @interface option to ignore boolean methods in annotation types ('@interface'). Use the Ignore methods overriding/implementing a super method to ignore methods the have supers. Inspection ID: BooleanMethodNameMustStartWithQuestion",
                  "markdown": "Reports boolean methods whose names do not start with a question word.\n\nBoolean methods that override library methods are ignored by this inspection.\n\n**Example:**\n\n    boolean empty(List<String> list) {\n      return list.isEmpty();\n    }\n\nA quick-fix that renames such methods is available only in the editor.\n\nConfigure the inspection:\n\n* Use the **Boolean method name prefixes** list to specify acceptable question words to start boolean method names with.\n* Use the **Ignore methods with 'java.lang.Boolean' return type** option to ignore methods with the `java.lang.Boolean` return type.\n* Use the **Ignore boolean methods in an @interface** option to ignore boolean methods in annotation types (`@interface`).\n* Use the **Ignore methods overriding/implementing a super method** to ignore methods the have supers.\n\nInspection ID: BooleanMethodNameMustStartWithQuestion"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "BooleanMethodNameMustStartWithQuestion",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Naming conventions/Method",
                      "index": 83,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SynchronizationOnLocalVariableOrMethodParameter",
                "shortDescription": {
                  "text": "Synchronization on local variable or method parameter"
                },
                "fullDescription": {
                  "text": "Reports synchronization on a local variable or parameter. It is very difficult to guarantee correct operation when such synchronization is used. It may be possible to improve such code, for example, by controlling access using a synchronized wrapper class or by synchronizing on a field. Example: 'void bar() {\n    final Object lock = new Object();\n    synchronized (lock) { }\n  }' Inspection ID: SynchronizationOnLocalVariableOrMethodParameter",
                  "markdown": "Reports synchronization on a local variable or parameter.\n\n\nIt is very difficult to guarantee correct operation when such synchronization is used.\nIt may be possible to improve such code, for example, by controlling access using a synchronized wrapper class or by synchronizing on a\nfield.\n\n**Example:**\n\n\n      void bar() {\n        final Object lock = new Object();\n        synchronized (lock) { }\n      }\n\nInspection ID: SynchronizationOnLocalVariableOrMethodParameter"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SynchronizationOnLocalVariableOrMethodParameter",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Threading issues",
                      "index": 23,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FinalMethod",
                "shortDescription": {
                  "text": "Method can't be overridden"
                },
                "fullDescription": {
                  "text": "Reports methods that are declared 'final'. Such methods can't be overridden and may indicate a lack of object-oriented design. Some coding standards discourage 'final' methods. Inspection ID: FinalMethod",
                  "markdown": "Reports methods that are declared `final`. Such methods can't be overridden and may indicate a lack of object-oriented design. Some coding standards discourage `final` methods.\n\nInspection ID: FinalMethod"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "FinalMethod",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Class structure",
                      "index": 17,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NegatedConditionalExpression",
                "shortDescription": {
                  "text": "Negated conditional expression"
                },
                "fullDescription": {
                  "text": "Reports conditional expressions which are negated with a prefix expression, as such constructions may be confusing. There is a fix that propagates the outer negation to both branches. Example: '!(i == 1 ? a : b)' After the quick-fix is applied: 'i == 1 ? !a : !b' Inspection ID: NegatedConditionalExpression",
                  "markdown": "Reports conditional expressions which are negated with a prefix expression, as such constructions may be confusing.\n\nThere is a fix that propagates the outer negation to both branches.\n\nExample:\n\n\n      !(i == 1 ? a : b)\n\nAfter the quick-fix is applied:\n\n\n      i == 1 ? !a : !b\n\n\nInspection ID: NegatedConditionalExpression"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NegatedConditionalExpression",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Control flow issues",
                      "index": 24,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SuspiciousSystemArraycopy",
                "shortDescription": {
                  "text": "Suspicious 'System.arraycopy()' call"
                },
                "fullDescription": {
                  "text": "Reports suspicious calls to 'System.arraycopy()'. Such calls are suspicious when: the source or destination is not of an array type the source and destination are of different types the copied chunk length is greater than 'src.length - srcPos' the copied chunk length is greater than 'dest.length - destPos' the ranges always intersect when the source and destination are the same array Example: 'void foo() {\n    int[] src = new int[] { 1, 2, 3, 4 };\n    System.arraycopy(src, 0, src, 1, 2); // warning: Copying to the same array with intersecting ranges\n  }' Inspection ID: SuspiciousSystemArraycopy",
                  "markdown": "Reports suspicious calls to `System.arraycopy()`.\n\nSuch calls are suspicious when:\n\n* the source or destination is not of an array type\n* the source and destination are of different types\n* the copied chunk length is greater than `src.length - srcPos`\n* the copied chunk length is greater than `dest.length - destPos`\n* the ranges always intersect when the source and destination are the same array\n\n**Example:**\n\n\n      void foo() {\n        int[] src = new int[] { 1, 2, 3, 4 };\n        System.arraycopy(src, 0, src, 1, 2); // warning: Copying to the same array with intersecting ranges\n      }\n\n\nInspection ID: SuspiciousSystemArraycopy"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SuspiciousSystemArraycopy",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AbsoluteAlignmentInUserInterface",
                "shortDescription": {
                  "text": "Absolute alignment in AWT/Swing code"
                },
                "fullDescription": {
                  "text": "Reports usages of absolute alignment constants from AWT and Swing. Internationalized applications use relative alignment because it respects the locale component orientation settings. Example: 'JPanel panel = new JPanel(new BorderLayout(2, 2));\n  JLabel label = new JLabel(\"Hello World\");\n  panel.add(label, BorderLayout.NORTH);' After the quick-fix is applied: 'JPanel panel = new JPanel(new BorderLayout(2, 2));\n  JLabel label = new JLabel(\"Hello World\");\n  panel.add(label, BorderLayout.PAGE_START);' Inspection ID: AbsoluteAlignmentInUserInterface",
                  "markdown": "Reports usages of absolute alignment constants from AWT and Swing. Internationalized applications use relative alignment because it respects the locale component orientation settings.\n\n**Example:**\n\n\n      JPanel panel = new JPanel(new BorderLayout(2, 2));\n      JLabel label = new JLabel(\"Hello World\");\n      panel.add(label, BorderLayout.NORTH);\n\nAfter the quick-fix is applied:\n\n\n      JPanel panel = new JPanel(new BorderLayout(2, 2));\n      JLabel label = new JLabel(\"Hello World\");\n      panel.add(label, BorderLayout.PAGE_START);\n\nInspection ID: AbsoluteAlignmentInUserInterface"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AbsoluteAlignmentInUserInterface",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Internationalization",
                      "index": 3,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantLambdaParameterType",
                "shortDescription": {
                  "text": "Redundant lambda parameter types"
                },
                "fullDescription": {
                  "text": "Reports lambda formal parameter types that are redundant because they can be inferred from the context. Example: 'Map<String, Integer> map = ...\n  map.forEach((String s, Integer i) -> log.info(s + \"=\" + i));' The quick-fix removes the parameter types from the lambda. 'Map<String, Integer> map = ...\n  map.forEach((s, i) -> log.info(s + \"=\" + i));' Inspection ID: RedundantLambdaParameterType",
                  "markdown": "Reports lambda formal parameter types that are redundant because they can be inferred from the context.\n\n**Example:**\n\n\n      Map<String, Integer> map = ...\n      map.forEach((String s, Integer i) -> log.info(s + \"=\" + i));\n\nThe quick-fix removes the parameter types from the lambda.\n\n\n      Map<String, Integer> map = ...\n      map.forEach((s, i) -> log.info(s + \"=\" + i));\n\nInspection ID: RedundantLambdaParameterType"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "RedundantLambdaParameterType",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Declaration redundancy",
                      "index": 9,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SuspiciousReturnByteInputStream",
                "shortDescription": {
                  "text": "Suspicious byte value returned from 'InputStream.read()'"
                },
                "fullDescription": {
                  "text": "Reports expressions of 'byte' type returned from a method implementing the 'InputStream.read()' method. This is suspicious because 'InputStream.read()' should return a value in the range from '0' to '255', while an expression of byte type contains a value from '-128' to '127'. The quick-fix converts the expression into an unsigned 'byte' by applying the bitmask '0xFF'. Example: 'class MyInputStream extends InputStream {\n  int pos = 0;\n  byte[] data;\n\n  MyInputStream(byte[] input) {\n    data = input;\n  }\n\n  @Override\n  public int read() {\n    if (pos == data.length) {\n      return -1;\n    }\n    return data[pos++]; // problem\n  }\n}' After applying the quick-fix: 'class MyInputStream extends InputStream {\n  int pos = 0;\n  byte[] data;\n\n  MyInputStream(byte[] input) {\n    data = input;\n  }\n\n  @Override\n  public int read() {\n    if (pos == data.length) {\n      return -1;\n    }\n    return data[pos++] & 0xFF;\n  }\n}' Inspection ID: SuspiciousReturnByteInputStream New in 2023.2",
                  "markdown": "Reports expressions of `byte` type returned from a method implementing the `InputStream.read()` method.\n\n\nThis is suspicious because `InputStream.read()` should return a value in the range from `0` to `255`,\nwhile an expression of byte type contains a value from `-128` to `127`.\nThe quick-fix converts the expression into an unsigned `byte` by applying the bitmask `0xFF`.\n\n**Example:**\n\n\n    class MyInputStream extends InputStream {\n      int pos = 0;\n      byte[] data;\n\n      MyInputStream(byte[] input) {\n        data = input;\n      }\n\n      @Override\n      public int read() {\n        if (pos == data.length) {\n          return -1;\n        }\n        return data[pos++]; // problem\n      }\n    }\n\nAfter applying the quick-fix:\n\n\n    class MyInputStream extends InputStream {\n      int pos = 0;\n      byte[] data;\n\n      MyInputStream(byte[] input) {\n        data = input;\n      }\n\n      @Override\n      public int read() {\n        if (pos == data.length) {\n          return -1;\n        }\n        return data[pos++] & 0xFF;\n      }\n    }\n\nInspection ID: SuspiciousReturnByteInputStream\n\nNew in 2023.2"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SuspiciousReturnByteInputStream",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConditionalExpression",
                "shortDescription": {
                  "text": "Conditional expression"
                },
                "fullDescription": {
                  "text": "Reports usages of the ternary condition operator and suggests converting them to 'if'/'else' statements. Some code standards prohibit the use of the condition operator. Example: 'Object result = (condition) ? foo() : bar();' After the quick-fix is applied: 'Object result;\n  if (condition) {\n    comp = foo();\n  }\n  else {\n    comp = bar();\n  }' Configure the inspection: Use the Ignore for simple assignments and returns option to ignore simple assignments and returns and allow the following constructs: 'String s = (foo == null) ? \"\" : foo.toString();' Use the Ignore places where an if statement is not possible option to ignore conditional expressions in contexts in which automatic replacement with an if statement is not possible (for example, when the conditional expression is used as an argument to a 'super()' constructor call). Inspection ID: ConditionalExpression",
                  "markdown": "Reports usages of the ternary condition operator and suggests converting them to `if`/`else` statements.\n\nSome code standards prohibit the use of the condition operator.\n\nExample:\n\n\n      Object result = (condition) ? foo() : bar();\n\nAfter the quick-fix is applied:\n\n\n      Object result;\n      if (condition) {\n        comp = foo();\n      }\n      else {\n        comp = bar();\n      }\n\nConfigure the inspection:\n\nUse the **Ignore for simple assignments and returns** option to ignore simple assignments and returns and allow the following constructs:\n\n\n      String s = (foo == null) ? \"\" : foo.toString();\n\n\nUse the **Ignore places where an if statement is not possible** option to ignore conditional expressions in contexts in which automatic\nreplacement with an if statement is not possible (for example, when the conditional expression is used as an argument to a\n`super()` constructor call).\n\nInspection ID: ConditionalExpression"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ConditionalExpression",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Control flow issues",
                      "index": 24,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseOfClone",
                "shortDescription": {
                  "text": "Use of 'clone()' or 'Cloneable'"
                },
                "fullDescription": {
                  "text": "Reports implementations of, and calls to, the 'clone()' method and uses of the 'java.lang.Cloneable' interface. Some coding standards prohibit the use of 'clone()', and recommend using a copy constructor or a 'static' factory method instead. The inspection ignores calls to 'clone()' on arrays because it's a correct and compact way to copy an array. Example: 'class Copy implements Cloneable /*warning*/ {\n\n    public Copy clone() /*warning*/ {\n      try {\n        return (Copy) super.clone(); // warning\n      } catch (CloneNotSupportedException e) {\n        throw new AssertionError();\n      }\n    }\n  }' Inspection ID: UseOfClone",
                  "markdown": "Reports implementations of, and calls to, the `clone()` method and uses of the `java.lang.Cloneable` interface.\n\nSome coding standards prohibit the use of `clone()`, and recommend using a copy constructor or\na `static` factory method instead.\n\nThe inspection ignores calls to `clone()` on arrays because it's a correct and compact way to copy an array.\n\n**Example:**\n\n\n      class Copy implements Cloneable /*warning*/ {\n\n        public Copy clone() /*warning*/ {\n          try {\n            return (Copy) super.clone(); // warning\n          } catch (CloneNotSupportedException e) {\n            throw new AssertionError();\n          }\n        }\n      }\n\nInspection ID: UseOfClone"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UseOfClone",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Cloning issues",
                      "index": 89,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MissingFinalNewline",
                "shortDescription": {
                  "text": "Missing final new line"
                },
                "fullDescription": {
                  "text": "Reports if manifest files do not end with a final newline as required by the JAR file specification. Inspection ID: MissingFinalNewline",
                  "markdown": "Reports if manifest files do not end with a final newline as required by the JAR file specification.\n\nInspection ID: MissingFinalNewline"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "MissingFinalNewline",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Manifest",
                      "index": 90,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NestedTryStatement",
                "shortDescription": {
                  "text": "Nested 'try' statement"
                },
                "fullDescription": {
                  "text": "Reports nested 'try' statements. Nested 'try' statements may result in unclear code and should probably have their 'catch' and 'finally' sections merged. Inspection ID: NestedTryStatement",
                  "markdown": "Reports nested `try` statements.\n\nNested `try` statements\nmay result in unclear code and should probably have their `catch` and `finally` sections\nmerged.\n\nInspection ID: NestedTryStatement"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NestedTryStatement",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Error handling",
                      "index": 10,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NonStaticFinalLogger",
                "shortDescription": {
                  "text": "Non-constant logger"
                },
                "fullDescription": {
                  "text": "Reports logger fields that are not declared 'static' and/or 'final'. Ensuring that every class logger is effectively constant and bound to that class simplifies the task of providing a unified logging implementation for an application. A quick-fix is provided to change the logger modifiers to 'static final'. Example: 'public class Significant {\n    private Logger LOG = Logger.getLogger(Critical.class);\n  }' After the quick-fix is applied: 'public class Significant {\n    private static final Logger LOG = Logger.getLogger(Critical.class);\n  }' Configure the inspection: Use the Logger class name table to specify logger class names. The inspection will report the fields that are not 'static' and 'final' and are of the type equal to one of the specified class names. Inspection ID: NonStaticFinalLogger",
                  "markdown": "Reports logger fields that are not declared `static` and/or `final`. Ensuring that every class logger is effectively constant and bound to that class simplifies the task of providing a unified logging implementation for an application.\n\nA quick-fix is provided to change the logger modifiers to `static final`.\n\n**Example:**\n\n\n      public class Significant {\n        private Logger LOG = Logger.getLogger(Critical.class);\n      }\n\nAfter the quick-fix is applied:\n\n\n      public class Significant {\n        private static final Logger LOG = Logger.getLogger(Critical.class);\n      }\n\n\nConfigure the inspection:\n\n* Use the **Logger class name** table to specify logger class names. The inspection will report the fields that are not `static` and `final` and are of the type equal to one of the specified class names.\n\nInspection ID: NonStaticFinalLogger"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NonConstantLogger",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Logging",
                      "index": 91,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConditionalExpressionWithIdenticalBranches",
                "shortDescription": {
                  "text": "Conditional expression with identical branches"
                },
                "fullDescription": {
                  "text": "Reports conditional expressions with identical 'then' and 'else' branches. Such expressions almost certainly indicate bugs. The inspection provides a fix that collapses conditional expressions. Example: 'int y = x == 10 ? 4 : 4;' After the quick-fix is applied: 'int y = 4;' Inspection ID: ConditionalExpressionWithIdenticalBranches",
                  "markdown": "Reports conditional expressions with identical `then` and `else` branches.\n\nSuch expressions almost certainly indicate bugs. The inspection provides a fix that collapses conditional expressions.\n\nExample:\n\n\n      int y = x == 10 ? 4 : 4;\n\nAfter the quick-fix is applied:\n\n\n      int y = 4;\n\n\nInspection ID: ConditionalExpressionWithIdenticalBranches"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ConditionalExpressionWithIdenticalBranches",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Control flow issues",
                      "index": 24,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OnlyOneElementUsed",
                "shortDescription": {
                  "text": "Only one element is used"
                },
                "fullDescription": {
                  "text": "Reports lists, arrays, and strings where exactly one element is queried right upon the creation. Such expressions may appear after refactoring and usually could be replaced with an accessed element. Example: 'System.out.println(new int[] {1,2,3,4,5}[2]);' After the quick-fix is applied: 'System.out.println(3);' Inspection ID: OnlyOneElementUsed New in 2022.3",
                  "markdown": "Reports lists, arrays, and strings where exactly one element is queried right upon the creation. Such expressions may appear after refactoring and usually could be replaced with an accessed element.\n\nExample:\n\n\n      System.out.println(new int[] {1,2,3,4,5}[2]);\n\nAfter the quick-fix is applied:\n\n\n      System.out.println(3);\n\nInspection ID: OnlyOneElementUsed\n\nNew in 2022.3"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "OnlyOneElementUsed",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Verbose or redundant code constructs",
                      "index": 37,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BadExceptionThrown",
                "shortDescription": {
                  "text": "Prohibited exception thrown"
                },
                "fullDescription": {
                  "text": "Reports 'throw' statements that throw an inappropriate exception. For example an exception can be inappropriate because it is overly generic, such as 'java.lang.Exception' or 'java.io.IOException'. Example: 'void setup(Mode mode) {\n      if (mode == null)\n          throw new RuntimeException(\"Problem during setup\"); // warning: Prohibited exception 'RuntimeException' thrown\n      ...\n  }' Use the Prohibited exceptions list to specify which exceptions should be reported. Inspection ID: BadExceptionThrown",
                  "markdown": "Reports `throw` statements that throw an inappropriate exception. For example an exception can be inappropriate because it is overly generic, such as `java.lang.Exception` or `java.io.IOException`.\n\n**Example:**\n\n\n      void setup(Mode mode) {\n          if (mode == null)\n              throw new RuntimeException(\"Problem during setup\"); // warning: Prohibited exception 'RuntimeException' thrown\n          ...\n      }\n\nUse the **Prohibited exceptions** list to specify which exceptions should be reported.\n\n\nInspection ID: BadExceptionThrown"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ProhibitedExceptionThrown",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Error handling",
                      "index": 10,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryBoxing",
                "shortDescription": {
                  "text": "Unnecessary boxing"
                },
                "fullDescription": {
                  "text": "Reports explicit boxing, that is wrapping of primitive values in objects. Explicit manual boxing is unnecessary as of Java 5 and later, and can safely be removed. Examples: 'Integer i = new Integer(1);' → 'Integer i = Integer.valueOf(1);' 'int i = Integer.valueOf(1);' → 'int i = 1;' Use the Only report truly superfluously boxed expressions option to report only truly superfluous boxing, where a boxed value is immediately unboxed either implicitly or explicitly. In this case, the entire boxing-unboxing step can be removed. The inspection doesn't report simple explicit boxing. This inspection only reports if the language level of the project or module is 5 or higher. Inspection ID: UnnecessaryBoxing",
                  "markdown": "Reports explicit boxing, that is wrapping of primitive values in objects.\n\nExplicit manual boxing is unnecessary as of Java 5 and later, and can safely be removed.\n\n**Examples:**\n\n* `Integer i = new Integer(1);` → `Integer i = Integer.valueOf(1);`\n* `int i = Integer.valueOf(1);` → `int i = 1;`\n\n\nUse the **Only report truly superfluously boxed expressions** option to report only truly superfluous boxing,\nwhere a boxed value is immediately unboxed either implicitly or explicitly.\nIn this case, the entire boxing-unboxing step can be removed. The inspection doesn't report simple explicit boxing.\n\nThis inspection only reports if the language level of the project or module is 5 or higher.\n\nInspection ID: UnnecessaryBoxing"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnnecessaryBoxing",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level migration aids/Java 5",
                      "index": 93,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Anonymous2MethodRef",
                "shortDescription": {
                  "text": "Anonymous type can be replaced with method reference"
                },
                "fullDescription": {
                  "text": "Reports anonymous classes which can be replaced with method references. Note that if an anonymous class is converted into an unbound method reference, the same method reference object can be reused by the Java runtime during subsequent invocations. On the other hand, when an anonymous class is used, separate objects are created every time. Thus, applying the quick-fix can cause the semantics change in rare cases, e.g. when anonymous class instances are used as 'HashMap' keys. Example: 'Runnable r = new Runnable() {\n    @Override\n    public void run() {\n      System.out.println();\n    }\n  };' After the quick-fix is applied: 'Runnable r = System.out::println;' Use the Report when interface is not annotated with @FunctionalInterface option to enable this inspection for interfaces which are not annotated with '@FunctionalInterface'. This inspection depends on the Java feature 'Method references', which is available since Java 8. Inspection ID: Anonymous2MethodRef",
                  "markdown": "Reports anonymous classes which can be replaced with method references.\n\n\nNote that if an anonymous class is converted into an unbound method reference, the same method reference object\ncan be reused by the Java runtime during subsequent invocations. On the other hand, when an anonymous class is used,\nseparate objects are created every time. Thus, applying the quick-fix can cause the semantics change in rare cases,\ne.g. when anonymous class instances are used as `HashMap` keys.\n\n**Example:**\n\n\n      Runnable r = new Runnable() {\n        @Override\n        public void run() {\n          System.out.println();\n        }\n      };\n\nAfter the quick-fix is applied:\n\n\n      Runnable r = System.out::println;\n\nUse the **Report when interface is not annotated with @FunctionalInterface** option to enable this inspection for\ninterfaces which are not annotated with `@FunctionalInterface`.\n\nThis inspection depends on the Java feature 'Method references', which is available since Java 8.\n\nInspection ID: Anonymous2MethodRef"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "Anonymous2MethodRef",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level migration aids/Java 8",
                      "index": 94,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PublicMethodNotExposedInInterface",
                "shortDescription": {
                  "text": "'public' method not exposed in interface"
                },
                "fullDescription": {
                  "text": "Reports 'public' methods in classes which are not exposed in an interface. Exposing all 'public' methods via an interface is important for maintaining loose coupling, and may be necessary for certain component-based programming styles. Example: 'interface Person {\n  String getName();\n}\n\nclass PersonImpl implements Person {\n  private String name;\n\n  // ok: method is exposed in interface\n  @Override\n  public String getName() {\n    return name;\n  }\n\n  // warning: method is public\n  // but not exposed in interface\n  public void setName() {\n    this.name = name;\n  }\n}' Use the Ignore if annotated by list to specify special annotations. Methods annotated with one of these annotations will be ignored by this inspection. Use the Ignore if the containing class does not implement a non-library interface option to ignore methods from classes which do not implement any interface from the project. Inspection ID: PublicMethodNotExposedInInterface",
                  "markdown": "Reports `public` methods in classes which are not exposed in an interface.\n\nExposing all `public` methods via an interface is important for\nmaintaining loose coupling, and may be necessary for certain component-based programming styles.\n\nExample:\n\n\n    interface Person {\n      String getName();\n    }\n\n    class PersonImpl implements Person {\n      private String name;\n\n      // ok: method is exposed in interface\n      @Override\n      public String getName() {\n        return name;\n      }\n\n      // warning: method is public\n      // but not exposed in interface\n      public void setName() {\n        this.name = name;\n      }\n    }\n\n\nUse the **Ignore if annotated by** list to specify special annotations. Methods annotated with one of\nthese annotations will be ignored by this inspection.\n\n\nUse the **Ignore if the containing class does not implement a non-library interface** option to ignore methods from classes which do not\nimplement any interface from the project.\n\n\nInspection ID: PublicMethodNotExposedInInterface"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PublicMethodNotExposedInInterface",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Abstraction issues",
                      "index": 63,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SerializableHasSerialVersionUIDField",
                "shortDescription": {
                  "text": "Serializable class without 'serialVersionUID'"
                },
                "fullDescription": {
                  "text": "Reports classes that implement 'Serializable' and do not declare a 'serialVersionUID' field. Without a 'serialVersionUID' field, any change to the class will make previously serialized versions unreadable. Example: 'class Main implements Serializable {\n  }' After the quick-fix is applied: 'class Main implements Serializable {\n    private static final long serialVersionUID = -1446398935944895849L;\n  }' When using a language level of JDK 14 or higher, the quickfix will also add the 'java.io.Serial' annotation. Use the following options to configure the inspection: List classes whose inheritors should not be reported by this inspection. This is meant for classes that inherit 'Serializable' from a superclass but are not intended for serialization. Whether to ignore 'Serializable' anonymous classes. Inspection ID: SerializableHasSerialVersionUIDField",
                  "markdown": "Reports classes that implement `Serializable` and do not declare a `serialVersionUID` field.\n\n\nWithout a `serialVersionUID` field, any change to the class will make previously serialized versions unreadable.\n\n**Example:**\n\n\n      class Main implements Serializable {\n      }\n\nAfter the quick-fix is applied:\n\n\n      class Main implements Serializable {\n        private static final long serialVersionUID = -1446398935944895849L;\n      }\n\nWhen using a language level of JDK 14 or higher, the quickfix will also add the `java.io.Serial` annotation.\n\nUse the following options to configure the inspection:\n\n* List classes whose inheritors should not be reported by this inspection. This is meant for classes that inherit `Serializable` from a superclass but are not intended for serialization.\n* Whether to ignore `Serializable` anonymous classes.\n\nInspection ID: SerializableHasSerialVersionUIDField"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "serial",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JVM languages",
                      "index": 1,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TestCaseWithNoTestMethods",
                "shortDescription": {
                  "text": "Test class without tests"
                },
                "fullDescription": {
                  "text": "Reports non-'abstract' test cases without any test methods. Such test cases usually indicate unfinished code or could be a refactoring leftover that should be removed. Example: 'public class CrucialTest {\n    @Before\n    public void setUp() {\n      System.out.println(\"setting up\");\n    }\n  }' Inspection ID: TestCaseWithNoTestMethods",
                  "markdown": "Reports non-`abstract` test cases without any test methods. Such test cases usually indicate unfinished code or could be a refactoring leftover that should be removed.\n\nExample:\n\n\n      public class CrucialTest {\n        @Before\n        public void setUp() {\n          System.out.println(\"setting up\");\n        }\n      }\n\nInspection ID: TestCaseWithNoTestMethods"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JUnitTestCaseWithNoTests",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JVM languages/Test frameworks",
                      "index": 95,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MismatchedArrayReadWrite",
                "shortDescription": {
                  "text": "Mismatched read and write of array"
                },
                "fullDescription": {
                  "text": "Reports arrays whose contents are read but not updated, or updated but not read. Such inconsistent reads and writes are pointless and probably indicate dead, incomplete or erroneous code. Example: 'final int[] bar = new int[3];\n  bar[2] = 3;' Inspection ID: MismatchedArrayReadWrite",
                  "markdown": "Reports arrays whose contents are read but not updated, or updated but not read. Such inconsistent reads and writes are pointless and probably indicate dead, incomplete or erroneous code.\n\n**Example:**\n\n\n      final int[] bar = new int[3];\n      bar[2] = 3;\n\n\nInspection ID: MismatchedArrayReadWrite"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MismatchedReadAndWriteOfArray",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessarilyQualifiedStaticUsage",
                "shortDescription": {
                  "text": "Unnecessarily qualified static access"
                },
                "fullDescription": {
                  "text": "Reports usages of static members unnecessarily qualified with the class name. Qualification with the class is unnecessary when the static member is available in a surrounding class or in a super class of a surrounding class. Such qualification may be safely removed. Example: 'class Foo {\n    static void foo() {}\n    static int x;\n\n    void bar() {\n      Foo.foo();\n      System.out.println(Foo.x);\n    }\n\n    static void baz() { Foo.foo(); }\n  }' After the quick-fix is applied: 'class Foo {\n    static void foo() {}\n    static int x;\n\n    void bar() {\n      foo();\n      System.out.println(x);\n    }\n\n    static void baz() { foo(); }\n  }' Use the inspection options to toggle the reporting for: Static fields access: 'void bar() { System.out.println(Foo.x); }' Calls to static methods: 'void bar() { Foo.foo(); }' Also, you can configure the inspection to only report static member usage in a static context. In this case, only 'static void baz() { Foo.foo(); }' will be reported. Inspection ID: UnnecessarilyQualifiedStaticUsage",
                  "markdown": "Reports usages of static members unnecessarily qualified with the class name.\n\n\nQualification with the class is unnecessary when the static member is available in a surrounding class\nor in a super class of a surrounding class. Such qualification may be safely removed.\n\n**Example:**\n\n\n      class Foo {\n        static void foo() {}\n        static int x;\n\n        void bar() {\n          Foo.foo();\n          System.out.println(Foo.x);\n        }\n\n        static void baz() { Foo.foo(); }\n      }\n\nAfter the quick-fix is applied:\n\n\n      class Foo {\n        static void foo() {}\n        static int x;\n\n        void bar() {\n          foo();\n          System.out.println(x);\n        }\n\n        static void baz() { foo(); }\n      }\n\n\nUse the inspection options to toggle the reporting for:\n\n* Static fields access:  \n  `void bar() { System.out.println(Foo.x); }`\n\n* Calls to static methods:  \n  `void bar() { Foo.foo(); }`\n\n\nAlso, you can configure the inspection to only report static member usage\nin a static context. In this case, only `static void baz() { Foo.foo(); }` will be reported.\n\nInspection ID: UnnecessarilyQualifiedStaticUsage"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnnecessarilyQualifiedStaticUsage",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SystemGetProperty",
                "shortDescription": {
                  "text": "Call to 'System.getProperty(str)' could be simplified"
                },
                "fullDescription": {
                  "text": "Reports the usage of method 'System.getProperty(str)' and suggests a fix in 2 cases: 'System.getProperty(\"path.separator\")' -> 'File.pathSeparator' 'System.getProperty(\"line.separator\")' -> 'System.lineSeparator()' The second one is not only less error-prone but is likely to be faster, as 'System.lineSeparator()' returns cached value, while 'System.getProperty(\"line.separator\")' each time calls to Properties (Hashtable or CHM depending on implementation). Inspection ID: SystemGetProperty",
                  "markdown": "Reports the usage of method `System.getProperty(str)` and suggests a fix in 2 cases:\n\n* `System.getProperty(\"path.separator\")` -\\> `File.pathSeparator`\n* `System.getProperty(\"line.separator\")` -\\> `System.lineSeparator()`\n\nThe second one is not only less error-prone but is likely to be faster, as `System.lineSeparator()` returns cached value, while `System.getProperty(\"line.separator\")` each time calls to Properties (Hashtable or CHM depending on implementation).\n\nInspection ID: SystemGetProperty"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SystemGetProperty",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Performance"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JVM languages",
                      "index": 1,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CollectionsMustHaveInitialCapacity",
                "shortDescription": {
                  "text": "Collection without initial capacity"
                },
                "fullDescription": {
                  "text": "Reports attempts to instantiate a new 'Collection' object without specifying an initial capacity. If no initial capacity is specified, a default capacity is used, which will rarely be optimal. Failing to specify initial capacities for collections may result in performance issues if space needs to be reallocated and memory copied when the initial capacity is exceeded. This inspection checks allocations of classes listed in the inspection's settings. Example: 'new HashMap<String, String>();' Use the following options to configure the inspection: List collection classes that should be checked. Whether to ignore field initializers. Inspection ID: CollectionsMustHaveInitialCapacity",
                  "markdown": "Reports attempts to instantiate a new `Collection` object without specifying an initial capacity.\n\n\nIf no initial capacity is specified, a default capacity is used, which will rarely be optimal. Failing\nto specify initial capacities for collections may result in performance issues if space needs to be reallocated and\nmemory copied when the initial capacity is exceeded.\nThis inspection checks allocations of classes listed in the inspection's settings.\n\n**Example:**\n\n\n      new HashMap<String, String>();\n\nUse the following options to configure the inspection:\n\n* List collection classes that should be checked.\n* Whether to ignore field initializers.\n\nInspection ID: CollectionsMustHaveInitialCapacity"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CollectionWithoutInitialCapacity",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Performance",
                      "index": 4,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ClassOnlyUsedInOneModule",
                "shortDescription": {
                  "text": "Class only used from one other module"
                },
                "fullDescription": {
                  "text": "Reports classes that: do not depend on any other class in their module depend on classes from a different module are a dependency only for classes from this other module Such classes could be moved into the module on which they depend. Available only from Code | Inspect Code or Code | Analyze Code | Run Inspection by Name and isn't reported in the editor. Inspection ID: ClassOnlyUsedInOneModule",
                  "markdown": "Reports classes that:\n\n* do not depend on any other class in their module\n* depend on classes from a different module\n* are a dependency only for classes from this other module\n\nSuch classes could be moved into the module on which they depend.\n\nAvailable only from **Code \\| Inspect Code** or\n**Code \\| Analyze Code \\| Run Inspection by Name** and isn't reported in the editor.\n\nInspection ID: ClassOnlyUsedInOneModule"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ClassOnlyUsedInOneModule",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Modularization issues",
                      "index": 57,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TryStatementWithMultipleResources",
                "shortDescription": {
                  "text": "'try' statement with multiple resources can be split"
                },
                "fullDescription": {
                  "text": "Reports 'try' statements with multiple resources that can be automatically split into multiple try-with-resources statements. This conversion can be useful for further refactoring (for example, for extracting the nested 'try' statement into a separate method). Example: 'try (FileInputStream in = new FileInputStream(\"in.txt\");\n     FileOutputStream out = new FileOutputStream(\"out.txt\")) {\n     /*read and write*/\n  }' After the quick-fix is applied: 'try (FileInputStream in = new FileInputStream(\"in.txt\")) {\n    try (FileOutputStream out = new FileOutputStream(\"out.txt\")) {\n      /*read and write*/\n    }\n  }' Inspection ID: TryStatementWithMultipleResources",
                  "markdown": "Reports `try` statements with multiple resources that can be automatically split into multiple try-with-resources statements.\n\nThis conversion can be useful for further refactoring\n(for example, for extracting the nested `try` statement into a separate method).\n\nExample:\n\n\n      try (FileInputStream in = new FileInputStream(\"in.txt\");\n         FileOutputStream out = new FileOutputStream(\"out.txt\")) {\n         /*read and write*/\n      }\n\nAfter the quick-fix is applied:\n\n\n      try (FileInputStream in = new FileInputStream(\"in.txt\")) {\n        try (FileOutputStream out = new FileOutputStream(\"out.txt\")) {\n          /*read and write*/\n        }\n      }\n\nInspection ID: TryStatementWithMultipleResources"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "TryStatementWithMultipleResources",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CloneableImplementsClone",
                "shortDescription": {
                  "text": "Cloneable class without 'clone()' method"
                },
                "fullDescription": {
                  "text": "Reports classes implementing the 'Cloneable' interface that don't override the 'clone()' method. Such classes use the default implementation of 'clone()', which isn't 'public' but 'protected', and which does not copy the mutable state of the class. A quick-fix is available to generate a basic 'clone()' method, which can be used as a basis for a properly functioning 'clone()' method expected from a 'Cloneable' class. Example: 'public class Data implements Cloneable {\n    private String[] names;\n  }' After the quick-fix is applied: 'public class Data implements Cloneable {\n    private String[] names;\n\n    @Override\n    public Data clone() {\n      try {\n        Data clone = (Data) super.clone();\n        // TODO: copy mutable state here, so the clone can't change the internals of the original\n        return clone;\n      } catch (CloneNotSupportedException e) {\n        throw new AssertionError();\n      }\n    }\n  }' Use the Ignore classes cloneable due to inheritance option to ignore classes that are 'Cloneable' because they inherit from the 'Cloneable' class. Use the Ignore when Cloneable is necessary to call clone() method of super class option to ignore classes that require implementing 'Cloneable' because they call the 'clone()' method from a superclass. Inspection ID: CloneableImplementsClone",
                  "markdown": "Reports classes implementing the `Cloneable` interface that don't override the `clone()` method.\n\nSuch classes use the default implementation of `clone()`,\nwhich isn't `public` but `protected`, and which does not copy the mutable state of the class.\n\nA quick-fix is available to generate a basic `clone()` method,\nwhich can be used as a basis for a properly functioning `clone()` method\nexpected from a `Cloneable` class.\n\n**Example:**\n\n\n      public class Data implements Cloneable {\n        private String[] names;\n      }\n\nAfter the quick-fix is applied:\n\n\n      public class Data implements Cloneable {\n        private String[] names;\n\n        @Override\n        public Data clone() {\n          try {\n            Data clone = (Data) super.clone();\n            // TODO: copy mutable state here, so the clone can't change the internals of the original\n            return clone;\n          } catch (CloneNotSupportedException e) {\n            throw new AssertionError();\n          }\n        }\n      }\n\nUse the **Ignore classes cloneable due to inheritance** option to ignore classes that are\n`Cloneable` because they inherit from the `Cloneable` class.\n\nUse the **Ignore when Cloneable is necessary to call clone() method of super class**\noption to ignore classes that require implementing `Cloneable` because they call the `clone()` method from a superclass.\n\nInspection ID: CloneableImplementsClone"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CloneableClassWithoutClone",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Cloning issues",
                      "index": 89,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeMayBeWeakened",
                "shortDescription": {
                  "text": "Type may be weakened"
                },
                "fullDescription": {
                  "text": "Reports variable and method return types that can be changed to a more abstract (weaker) type. This allows making the code more abstract, hence more reusable. Example: '// Type of parameter can be weakened to java.util.List\n  void processList(ArrayList<String> list) {\n    if (list.isEmpty()) return;\n    System.out.println(\"Processing\");\n    for (String s : list) {\n      System.out.println(\"String: \" + s);\n    }\n  }' Enable the Only weaken to an interface checkbox below to only report a problem when the type can be weakened to an interface type. Enable the Do not suggest weakening variable declared as 'var' checkbox below to prevent reporting on local variables declared using the 'var' keyword (Java 10+) Stop classes are intended to prevent weakening to classes lower than stop classes, even if it is possible. In some cases, this may improve readability. Inspection ID: TypeMayBeWeakened",
                  "markdown": "Reports variable and method return types that can be changed to a more abstract (weaker) type. This allows making the code more abstract, hence more reusable.\n\nExample:\n\n\n      // Type of parameter can be weakened to java.util.List\n      void processList(ArrayList<String> list) {\n        if (list.isEmpty()) return;\n        System.out.println(\"Processing\");\n        for (String s : list) {\n          System.out.println(\"String: \" + s);\n        }\n      }\n\n\nEnable the **Only weaken to an interface** checkbox below\nto only report a problem when the type can be weakened to an interface type.\n\n\nEnable the **Do not suggest weakening variable declared as 'var'** checkbox below\nto prevent reporting on local variables declared using the 'var' keyword (Java 10+)\n\n\n**Stop classes** are intended to prevent weakening to classes\nlower than stop classes, even if it is possible.\nIn some cases, this may improve readability.\n\nInspection ID: TypeMayBeWeakened"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "TypeMayBeWeakened",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Abstraction issues",
                      "index": 63,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OctalAndDecimalIntegersMixed",
                "shortDescription": {
                  "text": "Octal and decimal integers in same array"
                },
                "fullDescription": {
                  "text": "Reports mixed octal and decimal integer literals in a single array initializer. This situation might happen when you copy a list of numbers into an array initializer. Some numbers in the array might be zero-padded and the compiler will interpret them as octal. Example: 'int[] elapsed = {1, 13, 052};' After the quick-fix that removes a leading zero is applied: 'int[] elapsed = {1, 13, 52};' If it is an octal number (for example, after a variable inline), then you can use another quick-fix that converts octal to decimal: 'int[] elapsed = {1, 13, 42};' Inspection ID: OctalAndDecimalIntegersMixed",
                  "markdown": "Reports mixed octal and decimal integer literals in a single array initializer. This situation might happen when you copy a list of numbers into an array initializer. Some numbers in the array might be zero-padded and the compiler will interpret them as octal.\n\n**Example:**\n\n    int[] elapsed = {1, 13, 052};\n\nAfter the quick-fix that removes a leading zero is applied:\n\n    int[] elapsed = {1, 13, 52};\n\nIf it is an octal number (for example, after a variable inline), then you can use another quick-fix that converts octal to decimal:\n`int[] elapsed = {1, 13, 42};`\n\n\nInspection ID: OctalAndDecimalIntegersMixed"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "OctalAndDecimalIntegersInSameArray",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Numeric issues",
                      "index": 25,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Deprecation",
                "shortDescription": {
                  "text": "Deprecated API usage"
                },
                "fullDescription": {
                  "text": "Reports usages of deprecated classes, fields, and methods. A quick-fix is available to automatically convert the deprecated usage, when the necessary information can be extracted from the Javadoc of the deprecated member. Example: 'class Interesting {\n\n    /**\n     * @deprecated Use {@link #newHotness()} instead\n     */\n    @Deprecated\n    public void oldAndBusted() {}\n\n    public void newHotness() {}\n  }\n  class ElseWhere {\n    void x(Interesting i) {\n      i.oldAndBusted(); // deprecated warning here\n    }\n  }' After the quick-fix is applied: 'class Interesting {\n\n    /**\n     * @deprecated Use {@link #newHotness()} instead\n     */\n    @Deprecated\n    public void oldAndBusted() {}\n\n    public void newHotness() {}\n  }\n  class ElseWhere {\n    void x(Interesting i) {\n      i.newHotness();\n    }\n  }' By default, the inspection doesn't produce a warning if it's impossible or hard to avoid it. For example, the following code won't be reported: 'abstract class A { //library code\n     @Deprecated\n     abstract void m();\n  }\n  class B extends A { //project code\n     @Override\n     void m() {\n        //doSmth;\n     }\n  }' Configure the inspection: Use the options to disable this inspection inside deprecated members, overrides of abstract deprecated methods, non-static import statements, methods of deprecated classes, or same top-level classes. Inspection ID: Deprecation",
                  "markdown": "Reports usages of deprecated classes, fields, and methods. A quick-fix is available to automatically convert the deprecated usage, when the necessary information can be extracted from the Javadoc of the deprecated member.\n\n**Example:**\n\n\n      class Interesting {\n\n        /**\n         * @deprecated Use {@link #newHotness()} instead\n         */\n        @Deprecated\n        public void oldAndBusted() {}\n\n        public void newHotness() {}\n      }\n      class ElseWhere {\n        void x(Interesting i) {\n          i.oldAndBusted(); // deprecated warning here\n        }\n      }\n\nAfter the quick-fix is applied:\n\n\n      class Interesting {\n\n        /**\n         * @deprecated Use {@link #newHotness()} instead\n         */\n        @Deprecated\n        public void oldAndBusted() {}\n\n        public void newHotness() {}\n      }\n      class ElseWhere {\n        void x(Interesting i) {\n          i.newHotness();\n        }\n      }\n\nBy default, the inspection doesn't produce a warning if it's impossible or hard to avoid it. For example,\nthe following code won't be reported:\n\n\n      abstract class A { //library code\n         @Deprecated\n         abstract void m();\n      }\n      class B extends A { //project code\n         @Override\n         void m() {\n            //doSmth;\n         }\n      }\n\nConfigure the inspection:\n\n\nUse the options to disable this inspection inside deprecated members,\noverrides of abstract deprecated methods, non-static import statements, methods of deprecated classes, or same top-level classes.\n\nInspection ID: Deprecation"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "deprecation",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code maturity",
                      "index": 46,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConditionSignal",
                "shortDescription": {
                  "text": "Call to 'signal()' instead of 'signalAll()'"
                },
                "fullDescription": {
                  "text": "Reports calls to 'java.util.concurrent.locks.Condition.signal()'. While occasionally useful, in almost all cases 'signalAll()' is a better and safer choice. Inspection ID: ConditionSignal",
                  "markdown": "Reports calls to `java.util.concurrent.locks.Condition.signal()`. While occasionally useful, in almost all cases `signalAll()` is a better and safer choice.\n\nInspection ID: ConditionSignal"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CallToSignalInsteadOfSignalAll",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Threading issues",
                      "index": 23,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PublicMethodWithoutLogging",
                "shortDescription": {
                  "text": "'public' method without logging"
                },
                "fullDescription": {
                  "text": "Reports any public methods that do not contain a logging statement. This inspection does not report simple getters and setters. For example: 'public class Crucial {\n    private static final Logger LOG = LoggerFactory.getLogger(Crucial.class);\n    public void doImportantStuff() {\n      // warning on this method\n    }\n\n    public void doOtherStuff() {\n      LOG.info(\"do other stuff\");\n    }\n  }' Use the table below to specify Logger class names. Public methods that do not use instance methods of the specified classes will be reported by this inspection. Inspection ID: PublicMethodWithoutLogging",
                  "markdown": "Reports any public methods that do not contain a logging statement. This inspection does not report simple getters and setters.\n\nFor example:\n\n\n      public class Crucial {\n        private static finalLogger LOG = LoggerFactory.getLogger(Crucial.class);\n        public void doImportantStuff() {\n          // warning on this method\n        }\n\n        public void doOtherStuff() {\n          LOG.info(\"do other stuff\");\n        }\n      }\n\n\nUse the table below to specify Logger class names.\nPublic methods that do not use instance methods of the specified classes will be reported by this inspection.\n\nInspection ID: PublicMethodWithoutLogging"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PublicMethodWithoutLogging",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Logging",
                      "index": 91,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ClassNestingDepth",
                "shortDescription": {
                  "text": "Inner class too deeply nested"
                },
                "fullDescription": {
                  "text": "Reports classes whose number of nested inner classes exceeds the specified maximum. Nesting inner classes inside other inner classes is confusing and indicates that a refactoring may be necessary. Use the Nesting limit field to specify the maximum allowed nesting depth for a class. Inspection ID: ClassNestingDepth",
                  "markdown": "Reports classes whose number of nested inner classes exceeds the specified maximum.\n\nNesting inner classes inside other inner classes is confusing and indicates that a refactoring may be necessary.\n\nUse the **Nesting limit** field to specify the maximum allowed nesting depth for a class.\n\n\nInspection ID: ClassNestingDepth"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "InnerClassTooDeeplyNested",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Class metrics",
                      "index": 96,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LambdaParameterTypeCanBeSpecified",
                "shortDescription": {
                  "text": "Lambda parameter type can be specified"
                },
                "fullDescription": {
                  "text": "Reports lambda parameters that do not have their type specified and suggests adding the missing type declarations. Example: 'Function<String, Integer> length = a -> a.length();' After the quick-fix is applied: 'Function<String, Integer> length = (String a) -> a.length();' This inspection depends on the Java feature 'Lambda expressions', which is available since Java 8. Inspection ID: LambdaParameterTypeCanBeSpecified",
                  "markdown": "Reports lambda parameters that do not have their type specified and suggests adding the missing type declarations.\n\nExample:\n\n\n      Function<String, Integer> length = a -> a.length();\n\nAfter the quick-fix is applied:\n\n\n      Function<String, Integer> length = (String a) -> a.length();\n\nThis inspection depends on the Java feature 'Lambda expressions', which is available since Java 8.\n\nInspection ID: LambdaParameterTypeCanBeSpecified"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "LambdaParameterTypeCanBeSpecified",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TextLabelInSwitchStatement",
                "shortDescription": {
                  "text": "Text label in 'switch' statement"
                },
                "fullDescription": {
                  "text": "Reports labeled statements inside of 'switch' statements. While occasionally intended, this construction is often the result of a typo. Example: 'switch (x) {\n      case 1:\n      case2:   //warning: Text label 'case2:' in 'switch' statement\n      case 3:\n          break;\n  }' Inspection ID: TextLabelInSwitchStatement",
                  "markdown": "Reports labeled statements inside of `switch` statements. While occasionally intended, this construction is often the result of a typo.\n\n**Example:**\n\n\n      switch (x) {\n          case 1:\n          case2:   //warning: Text label 'case2:' in 'switch' statement\n          case 3:\n              break;\n      }\n\nInspection ID: TextLabelInSwitchStatement"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "TextLabelInSwitchStatement",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PackageVisibleInnerClass",
                "shortDescription": {
                  "text": "Package-visible nested class"
                },
                "fullDescription": {
                  "text": "Reports nested classes that are declared without any access modifier (also known as package-private). Example: 'public class Outer {\n    static class Nested {}  // warning\n    class Inner {}          // warning\n    enum Mode {}            // warning depends on the setting\n    interface I {}          // warning depends on the setting\n  }' Configure the inspection: Use the Ignore package-visible inner enums option to ignore package-private inner enums. Use the Ignore package-visible inner interfaces option to ignore package-private inner interfaces. Inspection ID: PackageVisibleInnerClass",
                  "markdown": "Reports nested classes that are declared without any access modifier (also known as package-private).\n\n**Example:**\n\n\n      public class Outer {\n        static class Nested {}  // warning\n        class Inner {}          // warning\n        enum Mode {}            // warning depends on the setting\n        interface I {}          // warning depends on the setting\n      }\n\nConfigure the inspection:\n\n* Use the **Ignore package-visible inner enums** option to ignore package-private inner enums.\n* Use the **Ignore package-visible inner interfaces** option to ignore package-private inner interfaces.\n\nInspection ID: PackageVisibleInnerClass"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PackageVisibleInnerClass",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Encapsulation",
                      "index": 100,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryUnaryMinus",
                "shortDescription": {
                  "text": "Unnecessary unary minus"
                },
                "fullDescription": {
                  "text": "Reports unnecessary unary minuses. Such expressions might be hard to understand and might contain errors. For example: 'void unaryMinus(int i) {\n    int x = - -i;\n  }' The following quick fixes are suggested here: Remove '-' operators before the 'i' variable: 'void unaryMinus(int i) {\n    int x = i;\n  }' Replace '-' operators with the prefix decrement operator: 'void unaryMinus(int i) {\n    int x = --i;\n  }' Another example: 'void unaryMinus(int i) {\n    i += - 8;\n  }' After the quick-fix is applied: 'void unaryMinus(int i) {\n    i -= 8;\n  }' Inspection ID: UnnecessaryUnaryMinus",
                  "markdown": "Reports unnecessary unary minuses. Such expressions might be hard to understand and might contain errors.\n\n**For example:**\n\n    void unaryMinus(int i) {\n        int x = - -i;\n      }\n\nThe following quick fixes are suggested here:\n\n* Remove `-` operators before the `i` variable:\n\n      void unaryMinus(int i) {\n          int x = i;\n        }\n\n* Replace `-` operators with the prefix decrement operator:\n\n      void unaryMinus(int i) {\n          int x = --i;\n        }\n\n**Another example:**\n\n    void unaryMinus(int i) {\n        i += - 8;\n      }\n\nAfter the quick-fix is applied:\n\n    void unaryMinus(int i) {\n        i -= 8;\n      }\n\nInspection ID: UnnecessaryUnaryMinus"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnnecessaryUnaryMinus",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Numeric issues",
                      "index": 25,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MethodMayBeStatic",
                "shortDescription": {
                  "text": "Method can be made 'static'"
                },
                "fullDescription": {
                  "text": "Reports methods that can safely be made 'static'. Making methods static when possible can reduce memory consumption and improve your code quality. A method can be 'static' if: it is not 'synchronized', 'native' or 'abstract', does not reference any of non-static methods and non-static fields from the containing class, is not an override and is not overridden in a subclass. Use the following options to configure the inspection: Whether to report only 'private' and 'final' methods, which increases the performance of this inspection. Whether to ignore empty methods. Whether to ignore default methods in interface when using Java 8 or higher. Whether to let the quick-fix replace instance qualifiers with class references in calls to methods which are made 'static', that is, call 'myClass.m()' would be replaced with 'MyClass.m()'. Inspection ID: MethodMayBeStatic",
                  "markdown": "Reports methods that can safely be made `static`. Making methods static when possible can reduce memory consumption and improve your code quality.\n\nA method can be `static` if:\n\n* it is not `synchronized`, `native` or `abstract`,\n* does not reference any of non-static methods and non-static fields from the containing class,\n* is not an override and is not overridden in a subclass.\n\nUse the following options to configure the inspection:\n\n* Whether to report only `private` and `final` methods, which increases the performance of this inspection.\n* Whether to ignore empty methods.\n* Whether to ignore default methods in interface when using Java 8 or higher.\n* Whether to let the quick-fix replace instance qualifiers with class references in calls to methods which are made `static`, that is, call `myClass.m()` would be replaced with `MyClass.m()`.\n\nInspection ID: MethodMayBeStatic"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MethodMayBeStatic",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Performance",
                      "index": 4,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TestMethodWithoutAssertion",
                "shortDescription": {
                  "text": "Test method without assertions"
                },
                "fullDescription": {
                  "text": "Reports test methods that do not contain any assertions. Such methods may indicate either incomplete or weak test cases. Example: 'public class ExtensiveTest {\n\n    @Test\n    public void testAlive() {\n      System.out.println(\"nothing\");\n    }\n  }' Configure the inspection: Use the table to specify the combinations of fully qualified class name and method name regular expression that should qualify as assertions. Class names also match subclasses. Use the 'assert' keyword is considered an assertion option to specify if the Java 'assert' statements using the 'assert' keyword should be considered an assertion. Use the Ignore test methods which declare exceptions option to ignore the test methods that declare exceptions. This can be useful when you have tests that will throw an exception on failure and thus don't need any assertions. Inspection ID: TestMethodWithoutAssertion",
                  "markdown": "Reports test methods that do not contain any assertions. Such methods may indicate either incomplete or weak test cases.\n\n**Example:**\n\n\n      public class ExtensiveTest {\n\n        @Test\n        public void testAlive() {\n          System.out.println(\"nothing\");\n        }\n      }\n\n\nConfigure the inspection:\n\n* Use the table to specify the combinations of fully qualified class name and method name regular expression that should qualify as assertions. Class names also match subclasses.\n* Use the **'assert' keyword is considered an assertion** option to specify if the Java `assert` statements using the `assert` keyword should be considered an assertion.\n* Use the **Ignore test methods which declare exceptions** option to ignore the test methods that declare exceptions. This can be useful when you have tests that will throw an exception on failure and thus don't need any assertions.\n\nInspection ID: TestMethodWithoutAssertion"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "TestMethodWithoutAssertion",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JVM languages/Test frameworks",
                      "index": 95,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EscapedSpace",
                "shortDescription": {
                  "text": "Non-terminal use of '\\s' escape sequence"
                },
                "fullDescription": {
                  "text": "Reports '\\s' escape sequences anywhere except at text-block line endings or within a series of several escaped spaces. Such usages can be confusing or a mistake, especially if the string is interpreted as a regular expression. The '\\s' escape sequence is intended to encode a space at the end of text-block lines where normal spaces are trimmed. In other locations, as well as in regular string or char literals, '\\s' is identical to an ordinary space character ('\" \"'). Example: 'if (str.matches(\"\\s+\")) {...}' Here it's likely that '\"\\\\s+\"' was intended (to match any whitespace character). If not, using 'str.matches(\" +\")' would be less confusing. A quick-fix is provided that replaces '\\s' escapes with space characters. This inspection depends on the Java feature ''\\s' escape sequences', which is available since Java 15. Inspection ID: EscapedSpace New in 2022.3",
                  "markdown": "Reports `\\s` escape sequences anywhere except at text-block line endings or within a series of several escaped spaces. Such usages can be confusing or a mistake, especially if the string is interpreted as a regular expression. The `\\s` escape sequence is intended to encode a space at the end of text-block lines where normal spaces are trimmed. In other locations, as well as in regular string or char literals, `\\s` is identical to an ordinary space character (`\" \"`).\n\n**Example:**\n\n\n      if (str.matches(\"\\s+\")) {...}\n\nHere it's likely that `\"\\\\s+\"` was intended (to match any whitespace character). If not, using `str.matches(\" +\")` would be less confusing.\n\n\nA quick-fix is provided that replaces `\\s` escapes with space characters.\n\nThis inspection depends on the Java feature ''\\\\s' escape sequences', which is available since Java 15.\n\nInspection ID: EscapedSpace\n\nNew in 2022.3"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EscapedSpace",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ContinueStatement",
                "shortDescription": {
                  "text": "'continue' statement"
                },
                "fullDescription": {
                  "text": "Reports 'continue' statements. 'continue' statements complicate refactoring and can be confusing. Example: 'void foo(List<String> strs) {\n    for (String str : strs) {\n      if (str.contains(\"skip\")) continue;\n      handleStr(str);\n    }\n  }' Inspection ID: ContinueStatement",
                  "markdown": "Reports `continue` statements.\n\n`continue` statements complicate refactoring and can be confusing.\n\nExample:\n\n\n      void foo(List<String> strs) {\n        for (String str : strs) {\n          if (str.contains(\"skip\")) continue;\n          handleStr(str);\n        }\n      }\n\nInspection ID: ContinueStatement"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ContinueStatement",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Control flow issues",
                      "index": 24,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MisorderedAssertEqualsArguments",
                "shortDescription": {
                  "text": "Misordered 'assertEquals()' arguments"
                },
                "fullDescription": {
                  "text": "Reports calls to 'assertEquals()' that have the expected argument and the actual argument in the wrong order. For JUnit 3, 4, and 5 the correct order is '(expected, actual)'. For TestNG the correct order is '(actual, expected)'. Such calls will behave fine for assertions that pass, but may give confusing error reports on failure. Use the quick-fix to flip the order of the arguments. Example (JUnit): 'assertEquals(actual, expected)' After the quick-fix is applied: 'assertEquals(expected, actual)' Inspection ID: MisorderedAssertEqualsArguments",
                  "markdown": "Reports calls to `assertEquals()` that have the expected argument and the actual argument in the wrong order.\n\n\nFor JUnit 3, 4, and 5 the correct order is `(expected, actual)`.\nFor TestNG the correct order is `(actual, expected)`.\n\n\nSuch calls will behave fine for assertions that pass, but may give confusing error reports on failure.\nUse the quick-fix to flip the order of the arguments.\n\n**Example (JUnit):**\n\n\n      assertEquals(actual, expected)\n\nAfter the quick-fix is applied:\n\n\n      assertEquals(expected, actual)\n\nInspection ID: MisorderedAssertEqualsArguments"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MisorderedAssertEqualsArguments",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Test frameworks",
                      "index": 102,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StaticVariableInitialization",
                "shortDescription": {
                  "text": "Static field may not be initialized"
                },
                "fullDescription": {
                  "text": "Reports 'static' variables that may be uninitialized upon class initialization. Example: 'class Foo {\n    public static int bar;\n\n    static { }\n  }' Note that this inspection uses a very conservative dataflow algorithm and may incorrectly report 'static' variables as uninitialized. Variables reported as initialized will always be initialized. Use the Ignore primitive fields option to ignore uninitialized primitive fields. Inspection ID: StaticVariableInitialization",
                  "markdown": "Reports `static` variables that may be uninitialized upon class initialization.\n\n**Example:**\n\n\n      class Foo {\n        public static int bar;\n\n        static { }\n      }\n\nNote that this inspection uses a very conservative dataflow algorithm and may incorrectly report `static` variables as uninitialized. Variables\nreported as initialized will always be initialized.\n\nUse the **Ignore primitive fields** option to ignore uninitialized primitive fields.\n\nInspection ID: StaticVariableInitialization"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "StaticVariableMayNotBeInitialized",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Initialization",
                      "index": 27,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConstantAssertCondition",
                "shortDescription": {
                  "text": "Constant condition in 'assert' statement"
                },
                "fullDescription": {
                  "text": "Reports 'assert' statement conditions that are constants. 'assert' statements with constant conditions will either always fail or always succeed. Such statements might be left over after a refactoring and are probably not intended. Example: 'void foo() {\n        assert true;\n    }' This inspection depends on the Java feature 'Assertions', which is available since Java 1.4. Inspection ID: ConstantAssertCondition",
                  "markdown": "Reports `assert` statement conditions that are constants. `assert` statements with constant conditions will either always fail or always succeed. Such statements might be left over after a refactoring and are probably not intended.\n\n**Example:**\n\n\n        void foo() {\n            assert true;\n        }\n\nThis inspection depends on the Java feature 'Assertions', which is available since Java 1.4.\n\nInspection ID: ConstantAssertCondition"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ConstantAssertCondition",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JavaReflectionInvocation",
                "shortDescription": {
                  "text": "Reflective invocation arguments mismatch"
                },
                "fullDescription": {
                  "text": "Reports cases in which the arguments provided to 'Method.invoke()' and 'Constructor.newInstance()' do not match the signature specified in 'Class.getMethod()' and 'Class.getConstructor()'. Example: 'Method m = myObj.getClass().getMethod(\"myMethod\", int.class);\n  // the argument should be an int value\n  m.invoke(myObj, \"abc\");' Inspection ID: JavaReflectionInvocation New in 2017.2",
                  "markdown": "Reports cases in which the arguments provided to `Method.invoke()` and `Constructor.newInstance()` do not match the signature specified in `Class.getMethod()` and `Class.getConstructor()`.\n\nExample:\n\n\n      Method m = myObj.getClass().getMethod(\"myMethod\", int.class);\n      // the argument should be an **int** value\n      m.invoke(myObj, \"abc\");\n\nInspection ID: JavaReflectionInvocation\n\nNew in 2017.2"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JavaReflectionInvocation",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Reflective access",
                      "index": 103,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CaughtExceptionImmediatelyRethrown",
                "shortDescription": {
                  "text": "Caught exception is immediately rethrown"
                },
                "fullDescription": {
                  "text": "Reports 'catch' blocks that immediately rethrow the caught exception without performing any action on it. Such 'catch' blocks are unnecessary and have no error handling. Example: 'try {\n            new FileInputStream(\"\");\n        } catch (FileNotFoundException e) {\n            throw e;\n        }' Inspection ID: CaughtExceptionImmediatelyRethrown",
                  "markdown": "Reports `catch` blocks that immediately rethrow the caught exception without performing any action on it. Such `catch` blocks are unnecessary and have no error handling.\n\n**Example:**\n\n\n            try {\n                new FileInputStream(\"\");\n            } catch (FileNotFoundException e) {\n                throw e;\n            }\n\nInspection ID: CaughtExceptionImmediatelyRethrown"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CaughtExceptionImmediatelyRethrown",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Error handling",
                      "index": 10,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ArrayHashCode",
                "shortDescription": {
                  "text": "'hashCode()' called on array"
                },
                "fullDescription": {
                  "text": "Reports incorrect hash code calculation for arrays. In order to correctly calculate the hash code for an array, use: 'Arrays.hashcode()' for linear arrays 'Arrays.deepHashcode()' for multidimensional arrays These methods should also be used with 'Objects.hash()' when the sequence of input values includes arrays, for example: 'Objects.hash(string, Arrays.hashcode(array))' Inspection ID: ArrayHashCode",
                  "markdown": "Reports incorrect hash code calculation for arrays.\n\nIn order to\ncorrectly calculate the hash code for an array, use:\n\n* `Arrays.hashcode()` for linear arrays\n* `Arrays.deepHashcode()` for multidimensional arrays\n\nThese methods should also be used with `Objects.hash()` when the sequence of input values includes arrays, for example: `Objects.hash(string, Arrays.hashcode(array))`\n\n\nInspection ID: ArrayHashCode"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ArrayHashCode",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "WaitNotInLoop",
                "shortDescription": {
                  "text": "'wait()' not called in loop"
                },
                "fullDescription": {
                  "text": "Reports calls to 'wait()' that are not made inside a loop. 'wait()' is normally used to suspend a thread until some condition becomes true. As the thread could have been waken up for a different reason, the condition should be checked after the 'wait()' call returns. A loop is a simple way to achieve this. Example: 'class BoundedCounter {\n    private int count;\n    synchronized void inc() throws InterruptedException {\n      if (count >= 10) wait();\n      ++count;\n    }\n  }' Good code should look like this: 'class BoundedCounter {\n    private int count;\n    synchronized void inc() throws InterruptedException {\n      while (count >= 10) wait();\n      ++count;\n    }\n  }' Inspection ID: WaitNotInLoop",
                  "markdown": "Reports calls to `wait()` that are not made inside a loop.\n\n\n`wait()` is normally used to suspend a thread until some condition becomes true.\nAs the thread could have been waken up for a different reason,\nthe condition should be checked after the `wait()` call returns.\nA loop is a simple way to achieve this.\n\n**Example:**\n\n\n      class BoundedCounter {\n        private int count;\n        synchronized void inc() throws InterruptedException {\n          if (count >= 10) wait();\n          ++count;\n        }\n      }\n\nGood code should look like this:\n\n\n      class BoundedCounter {\n        private int count;\n        synchronized void inc() throws InterruptedException {\n          while (count >= 10) wait();\n          ++count;\n        }\n      }\n\nInspection ID: WaitNotInLoop"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "WaitNotInLoop",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Threading issues",
                      "index": 23,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ExternalizableWithSerializationMethods",
                "shortDescription": {
                  "text": "Externalizable class with 'readObject()' or 'writeObject()'"
                },
                "fullDescription": {
                  "text": "Reports 'Externalizable' classes that define 'readObject()' or 'writeObject()' methods. These methods are not called for serialization of 'Externalizable' objects. Example: 'abstract class Crucial implements Externalizable {\n    int value;\n    private void readObject(ObjectInputStream in) {\n      value = in.readInt();\n    }\n  }' Inspection ID: ExternalizableWithSerializationMethods",
                  "markdown": "Reports `Externalizable` classes that define `readObject()` or `writeObject()` methods. These methods are not called for serialization of `Externalizable` objects.\n\n**Example:**\n\n\n      abstract class Crucial implements Externalizable {\n        int value;\n        private void readObject(ObjectInputStream in) {\n          value = in.readInt();\n        }\n      }\n\nInspection ID: ExternalizableWithSerializationMethods"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ExternalizableClassWithSerializationMethods",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Serialization issues",
                      "index": 18,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SafeLock",
                "shortDescription": {
                  "text": "Lock acquired but not safely unlocked"
                },
                "fullDescription": {
                  "text": "Reports 'java.util.concurrent.locks.Lock' resources that are not acquired in front of a 'try' block or not unlocked in the corresponding 'finally' block. Such resources may be inadvertently leaked if an exception is thrown before the resource is closed. Example: 'lock.lock(); // will be reported since the 'finally' block is missing\n  try {\n    doSmthWithLock();\n  } catch (IOException e) {\n    throw new UncheckedIOException(e);\n  }\n  lock.unlock();' Inspection ID: SafeLock",
                  "markdown": "Reports `java.util.concurrent.locks.Lock` resources that are not acquired in front of a `try` block or not unlocked in the corresponding `finally` block. Such resources may be inadvertently leaked if an exception is thrown before the resource is closed.\n\n**Example:**\n\n\n      lock.lock(); // will be reported since the 'finally' block is missing\n      try {\n        doSmthWithLock();\n      } catch (IOException e) {\n        throw new UncheckedIOException(e);\n      }\n      lock.unlock();\n\nInspection ID: SafeLock"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "LockAcquiredButNotSafelyReleased",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Threading issues",
                      "index": 23,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JavaLangInvokeHandleSignature",
                "shortDescription": {
                  "text": "MethodHandle/VarHandle type mismatch"
                },
                "fullDescription": {
                  "text": "Reports 'MethodHandle' and 'VarHandle' factory method calls that don't match any method or field. Also reports arguments to 'MethodHandle.invoke()' and similar methods, that don't match the 'MethodHandle' signature and arguments to 'VarHandle.set()' that don't match the 'VarHandle' type. Examples:   MethodHandle mh = MethodHandles.lookup().findVirtual(\n      MyClass.class, \"foo\", MethodType.methodType(void.class, int.class));\n  // the argument should be an int value\n  mh.invoke(myObj, \"abc\");\n   // the argument should be String.class\n  VarHandle vh = MethodHandles.lookup().findVarHandle(\n      MyClass.class, \"text\", int.class);\n   VarHandle vh = MethodHandles.lookup().findVarHandle(\n      MyClass.class, \"text\", String.class);\n  // the argument should be a String value\n  vh.set(myObj, 42);\n New in 2017.2 Inspection ID: JavaLangInvokeHandleSignature",
                  "markdown": "Reports `MethodHandle` and `VarHandle` factory method calls that don't match any method or field.\n\nAlso reports arguments to `MethodHandle.invoke()` and similar methods, that don't match the `MethodHandle` signature\nand arguments to `VarHandle.set()` that don't match the `VarHandle` type.\n\n\nExamples:\n\n```\n  MethodHandle mh = MethodHandles.lookup().findVirtual(\n      MyClass.class, \"foo\", MethodType.methodType(void.class, int.class));\n  // the argument should be an int value\n  mh.invoke(myObj, \"abc\");\n```\n\n```\n  // the argument should be String.class\n  VarHandle vh = MethodHandles.lookup().findVarHandle(\n      MyClass.class, \"text\", int.class);\n```\n\n```\n  VarHandle vh = MethodHandles.lookup().findVarHandle(\n      MyClass.class, \"text\", String.class);\n  // the argument should be a String value\n  vh.set(myObj, 42);\n```\n\n\nNew in 2017.2\n\nInspection ID: JavaLangInvokeHandleSignature"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JavaLangInvokeHandleSignature",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Reflective access",
                      "index": 103,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CanBeFinal",
                "shortDescription": {
                  "text": "Declaration can have 'final' modifier"
                },
                "fullDescription": {
                  "text": "Reports fields, methods, or classes that may have the 'final' modifier added to their declarations. Final classes can't be extended, final methods can't be overridden, and final fields can't be reassigned. Example: 'public class Person {\n    private String name;\n\n    Person(String name) {\n      this.name = name;\n    }\n\n    public String getName() {\n      return name;\n    }\n\n    public String toString() {\n      return getName();\n    }\n  }' After the quick-fix is applied: 'public final class Person {\n    private final String name;\n\n    Person(String name) {\n      this.name = name;\n    }\n\n    public final String getName() {\n      return name;\n    }\n\n    public final String toString() {\n      return getName();\n    }\n  }' Use the Report classes and Report methods options to define which declarations are to be reported. Inspection ID: CanBeFinal",
                  "markdown": "Reports fields, methods, or classes that may have the `final` modifier added to their declarations.\n\nFinal classes can't be extended, final methods can't be overridden, and final fields can't be reassigned.\n\n**Example:**\n\n\n      public class Person {\n        private String name;\n\n        Person(String name) {\n          this.name = name;\n        }\n\n        public String getName() {\n          return name;\n        }\n\n        public String toString() {\n          return getName();\n        }\n      }\n\nAfter the quick-fix is applied:\n\n\n      public final class Person {\n        private final String name;\n\n        Person(String name) {\n          this.name = name;\n        }\n\n        public final String getName() {\n          return name;\n        }\n\n        public final String toString() {\n          return getName();\n        }\n      }\n\nUse the **Report classes** and **Report methods** options to define which declarations are to be reported.\n\nInspection ID: CanBeFinal"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CanBeFinal",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Declaration redundancy",
                      "index": 9,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReturnThis",
                "shortDescription": {
                  "text": "Return of 'this'"
                },
                "fullDescription": {
                  "text": "Reports methods returning 'this'. While such a return is valid, it is rarely necessary, and usually indicates that the method is intended to be used as part of a chain of similar method calls (for example, 'buffer.append(\"foo\").append(\"bar\").append(\"baz\")'). Such chains are frowned upon by many coding standards. Example: 'public Builder append(String str) {\n    // [...]\n    return this;\n  }' Inspection ID: ReturnThis",
                  "markdown": "Reports methods returning `this`.\n\n\nWhile such a return is valid, it is rarely necessary, and usually indicates that the method is intended to be used\nas part of a chain of similar method calls (for example, `buffer.append(\"foo\").append(\"bar\").append(\"baz\")`).\nSuch chains are frowned upon by many coding standards.\n\n**Example:**\n\n\n      public Builder append(String str) {\n        // [...]\n        return this;\n      }\n\nInspection ID: ReturnThis"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ReturnOfThis",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryLabelOnBreakStatement",
                "shortDescription": {
                  "text": "Unnecessary label on 'break' statement"
                },
                "fullDescription": {
                  "text": "Reports 'break' statements with unnecessary labels. Such labels do not change the control flow but make the code difficult to follow. Example: 'label:\n  for(int i = 0; i < 10; i++) {\n    if (shouldBreak()) break label;\n    //doSmth\n  }' After the quick-fix is applied: 'label:\n  for(int i = 0; i < 10; i++) {\n    if (shouldBreak()) break;\n    //doSmth\n  }' Inspection ID: UnnecessaryLabelOnBreakStatement",
                  "markdown": "Reports `break` statements with unnecessary labels. Such labels do not change the control flow but make the code difficult to follow.\n\n**Example:**\n\n\n      label:\n      for(int i = 0; i < 10; i++) {\n        if (shouldBreak()) break label;\n        //doSmth\n      }\n\nAfter the quick-fix is applied:\n\n\n      label:\n      for(int i = 0; i < 10; i++) {\n        if (shouldBreak()) break;\n        //doSmth\n      }\n\nInspection ID: UnnecessaryLabelOnBreakStatement"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnnecessaryLabelOnBreakStatement",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Verbose or redundant code constructs",
                      "index": 37,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NakedNotify",
                "shortDescription": {
                  "text": "'notify()' or 'notifyAll()' without corresponding state change"
                },
                "fullDescription": {
                  "text": "Reports 'Object.notify()' or 'Object.notifyAll()' being called without any detectable state change occurring. Normally, 'Object.notify()' and 'Object.notifyAll()' are used to inform other threads that a state change has occurred. That state change should occur in a synchronized context that contains the 'Object.notify()' or 'Object.notifyAll()' call, and prior to the call. While not having such a state change isn't necessarily incorrect, it is certainly worth examining. Example: 'synchronized (this) {\n    notify();\n  }\n  // no state change\n  synchronized (this) {\n    notify(); // this notify might be redundant\n  }' Inspection ID: NakedNotify",
                  "markdown": "Reports `Object.notify()` or `Object.notifyAll()` being called without any detectable state change occurring.\n\n\nNormally, `Object.notify()` and `Object.notifyAll()` are used to inform other threads that a state change has\noccurred. That state change should occur in a synchronized context that contains the `Object.notify()` or\n`Object.notifyAll()` call, and prior to the call. While not having such a state change isn't necessarily incorrect, it is\ncertainly worth examining.\n\n**Example:**\n\n\n      synchronized (this) {\n        notify();\n      }\n      // no state change\n      synchronized (this) {\n        notify(); // this notify might be redundant\n      }\n\nInspection ID: NakedNotify"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NakedNotify",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Threading issues",
                      "index": 23,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ClassCoupling",
                "shortDescription": {
                  "text": "Overly coupled class"
                },
                "fullDescription": {
                  "text": "Reports classes that reference too many other classes. Classes with too high coupling can be very fragile, and should probably be split into smaller classes. Configure the inspection: Use the Class coupling limit field to specify the maximum allowed coupling for a class. Use the Include couplings to java system classes option to specify whether references to system classes (those in the 'java.'or 'javax.' packages) should be counted. Use the Include couplings to library classes option to specify whether references to any library classes should be counted. Inspection ID: ClassCoupling",
                  "markdown": "Reports classes that reference too many other classes.\n\nClasses with too high coupling can be very fragile, and should probably be split into smaller classes.\n\nConfigure the inspection:\n\n* Use the **Class coupling limit** field to specify the maximum allowed coupling for a class.\n* Use the **Include couplings to java system classes** option to specify whether references to system classes (those in the `java.`or `javax.` packages) should be counted.\n* Use the **Include couplings to library classes** option to specify whether references to any library classes should be counted.\n\nInspection ID: ClassCoupling"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "OverlyCoupledClass",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Class metrics",
                      "index": 96,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EmptySynchronizedStatement",
                "shortDescription": {
                  "text": "Empty 'synchronized' statement"
                },
                "fullDescription": {
                  "text": "Reports 'synchronized' statements with empty bodies. Empty 'synchronized' statements are sometimes used to wait for other threads to release a particular resource. However, there is no guarantee that the same resource won't be acquired again right after the empty 'synchronized' statement finishes. For proper synchronization, the resource should be utilized inside the 'synchronized' block. Also, an empty 'synchronized' block may appear after a refactoring when redundant code was removed. In this case, the 'synchronized' block itself will be redundant and should be removed as well. Example: 'synchronized(lock) {}' A quick-fix is suggested to remove the empty synchronized statement. This inspection is disabled in JSP files. Inspection ID: EmptySynchronizedStatement",
                  "markdown": "Reports `synchronized` statements with empty bodies.\n\n\nEmpty `synchronized` statements are sometimes used to wait for other threads to\nrelease a particular resource. However, there is no guarantee that the same resource\nwon't be acquired again right after the empty `synchronized` statement finishes.\nFor proper synchronization, the resource should be utilized inside the `synchronized` block.\n\n\nAlso, an empty `synchronized` block may appear after a refactoring\nwhen redundant code was removed. In this case, the `synchronized` block\nitself will be redundant and should be removed as well.\n\nExample:\n\n\n      synchronized(lock) {}\n\n\nA quick-fix is suggested to remove the empty synchronized statement.\n\n\nThis inspection is disabled in JSP files.\n\n\nInspection ID: EmptySynchronizedStatement"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EmptySynchronizedStatement",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Threading issues",
                      "index": 23,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TextBlockMigration",
                "shortDescription": {
                  "text": "Text block can be used"
                },
                "fullDescription": {
                  "text": "Reports 'String' concatenations that can be simplified by replacing them with text blocks. Requirements: '\\n' occurs two or more times. Text blocks are not concatenated. Use the Report single string literals option to highlight single literals containing line breaks. The quick-fix will still be available even when this option is disabled. Example: 'String html = \"<html>\\n\" +\n                \"    <body>\\n\" +\n                \"        <p>Hello, world</p>\\n\" +\n                \"    </body>\\n\" +\n                \"</html>\\n\";' After the quick-fix is applied: 'String html = \"\"\"\n                <html>\n                    <body>\n                        <p>Hello, world</p>\n                    </body>\n                </html>\n                \"\"\";' This inspection depends on the Java feature 'Text block literals', which is available since Java 15. Inspection ID: TextBlockMigration New in 2019.3",
                  "markdown": "Reports `String` concatenations that can be simplified by replacing them with text blocks.\n\nRequirements:\n\n* `\\n` occurs two or more times.\n* Text blocks are not concatenated.\n\n\nUse the **Report single string literals** option to highlight single literals containing line breaks.\nThe quick-fix will still be available even when this option is disabled.\n\n\n**Example:**\n\n\n      String html = \"<html>\\n\" +\n                    \"    <body>\\n\" +\n                    \"        <p>Hello, world</p>\\n\" +\n                    \"    </body>\\n\" +\n                    \"</html>\\n\";\n\nAfter the quick-fix is applied:\n\n\n      String html = \"\"\"\n                    <html>\n                        <body>\n                            <p>Hello, world</p>\n                        </body>\n                    </html>\n                    \"\"\";\n\nThis inspection depends on the Java feature 'Text block literals', which is available since Java 15.\n\nInspection ID: TextBlockMigration\n\nNew in 2019.3"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "TextBlockMigration",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level migration aids/Java 15",
                      "index": 106,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ObjectAllocationInLoop",
                "shortDescription": {
                  "text": "Object allocation in loop"
                },
                "fullDescription": {
                  "text": "Reports object or array allocations inside loops. While not necessarily a problem, an object allocation inside a loop is a great place to look for memory leaks and performance issues. The inspection reports the following constructs: Explicit allocations via 'new' operator Methods known to return new object Instance-bound method references Lambdas that capture variables or 'this' reference Example: '// Explicit allocation\n  for (Status status : Status.values()) {\n    declarationsMap.put(status, new ArrayList<>());\n  }\n\n  // Lambda captures variable\n  String message = \"Engine running.\";\n  for (Engine engine : engines) {\n      if (!isRunning(engine)) {\n          logger.warn(() -> {\n              return String.format(message);\n          });\n      }\n  }\n\n  // Instance-bound method reference\n  for(Node node : nodes) {\n    descriptor = node.getDescription();\n    descriptor.ifPresent(dynamicTestExecutor::execute);\n  }'\n Inspection ID: ObjectAllocationInLoop",
                  "markdown": "Reports object or array allocations inside loops. While not necessarily a problem, an object allocation inside a loop is a great place to look for memory leaks and performance issues.\n\n\nThe inspection reports the following constructs:\n\n* Explicit allocations via `new` operator\n* Methods known to return new object\n* Instance-bound method references\n* Lambdas that capture variables or `this` reference\n\n**Example:**\n\n\n      // Explicit allocation\n      for (Status status : Status.values()) {\n        declarationsMap.put(status, new ArrayList<>());\n      }\n\n      // Lambda captures variable\n      String message = \"Engine running.\";\n      for (Engine engine : engines) {\n          if (!isRunning(engine)) {\n              logger.warn(() -> {\n                  return String.format(message);\n              });\n          }\n      }\n\n      // Instance-bound method reference\n      for(Node node : nodes) {\n        descriptor = node.getDescription();\n        descriptor.ifPresent(dynamicTestExecutor::execute);\n      }\n\nInspection ID: ObjectAllocationInLoop"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ObjectAllocationInLoop",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Performance",
                      "index": 4,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NonFinalClone",
                "shortDescription": {
                  "text": "Non-final 'clone()' in secure context"
                },
                "fullDescription": {
                  "text": "Reports 'clone()' methods without the 'final' modifier. Since 'clone()' can be used to instantiate objects without using a constructor, allowing the 'clone()' method to be overridden may result in corrupted objects, and even in security exploits. This may be prevented by making the 'clone()' method or the enclosing class itself 'final'. Example: 'class Main implements Cloneable {\n    @Override\n    protected Object clone() throws CloneNotSupportedException {\n      return super.clone();\n    }\n  }' Inspection ID: NonFinalClone",
                  "markdown": "Reports `clone()` methods without the `final` modifier.\n\n\nSince `clone()` can be used to instantiate objects without using a constructor, allowing the `clone()`\nmethod to be overridden may result in corrupted objects, and even in security exploits. This may be prevented by making the\n`clone()` method or the enclosing class itself `final`.\n\n**Example:**\n\n\n      class Main implements Cloneable {\n        @Override\n        protected Object clone() throws CloneNotSupportedException {\n          return super.clone();\n        }\n      }\n\nInspection ID: NonFinalClone"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NonFinalClone",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Security",
                      "index": 31,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ChainedEquality",
                "shortDescription": {
                  "text": "Chained equality comparisons"
                },
                "fullDescription": {
                  "text": "Reports chained equality comparisons. Such comparisons may be confusing: 'a == b == c' means '(a == b) == c', but possibly 'a == b && a == c' is intended. Example: 'boolean chainedEquality(boolean a, boolean b, boolean c) {\n    return a == b == c;\n  }' You can use parentheses to make the comparison less confusing: 'boolean chainedEquality(boolean a, boolean b, boolean c) {\n    return (a == b) == c;\n  }' Inspection ID: ChainedEquality",
                  "markdown": "Reports chained equality comparisons.\n\nSuch comparisons may be confusing: `a == b == c` means `(a == b) == c`,\nbut possibly `a == b && a == c` is intended.\n\n**Example:**\n\n\n      boolean chainedEquality(boolean a, boolean b, boolean c) {\n        return a == b == c;\n      }\n\nYou can use parentheses to make the comparison less confusing:\n\n\n      boolean chainedEquality(boolean a, boolean b, boolean c) {\n        return (a == b) == c;\n      }\n\nInspection ID: ChainedEquality"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ChainedEqualityComparisons",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LossyConversionCompoundAssignment",
                "shortDescription": {
                  "text": "Possibly lossy implicit cast in compound assignment"
                },
                "fullDescription": {
                  "text": "Reports compound assignments if the type of the right-hand operand is not assignment compatible with the type of the variable. During such compound assignments, an implicit cast occurs, potentially resulting in lossy conversions. Example: 'long c = 1;\n  c += 1.2;' After the quick-fix is applied: 'long c = 1;\n  c += (long) 1.2;' Inspection ID: LossyConversionCompoundAssignment New in 2023.2",
                  "markdown": "Reports compound assignments if the type of the right-hand operand is not assignment compatible with the type of the variable.\n\n\nDuring such compound assignments, an implicit cast occurs, potentially resulting in lossy conversions.\n\nExample:\n\n\n      long c = 1;\n      c += 1.2;\n\nAfter the quick-fix is applied:\n\n\n      long c = 1;\n      c += (long) 1.2;\n\nInspection ID: LossyConversionCompoundAssignment\n\nNew in 2023.2"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "lossy-conversions",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Numeric issues",
                      "index": 25,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ThrowFromFinallyBlock",
                "shortDescription": {
                  "text": "'throw' inside 'finally' block"
                },
                "fullDescription": {
                  "text": "Reports 'throw' statements inside 'finally' blocks. While occasionally intended, such 'throw' statements can hide exceptions thrown from the 'try' and 'catch' blocks, thereby complicating the debugging process. Example: 'class Fascinating {\n    void doTask(Task t) {\n      try {\n        t.activity();\n      } finally {\n        if (!t.finish()) {\n          throw new IllegalStateException();\n        }\n      }\n    }\n  }' Use the Warn everywhere declared exceptions may be thrown option to warn on method calls to methods that declare exceptions as well. Inspection ID: ThrowFromFinallyBlock",
                  "markdown": "Reports `throw` statements inside `finally` blocks. While occasionally intended, such `throw` statements can hide exceptions thrown from the `try` and `catch` blocks, thereby complicating the debugging process.\n\n**Example:**\n\n\n      class Fascinating {\n        void doTask(Task t) {\n          try {\n            t.activity();\n          } finally {\n            if (!t.finish()) {\n              throw new IllegalStateException();\n            }\n          }\n        }\n      }\n\nUse the **Warn everywhere declared exceptions may be thrown** option\nto warn on method calls to methods that declare exceptions as well.\n\nInspection ID: ThrowFromFinallyBlock"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ThrowFromFinallyBlock",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Error handling",
                      "index": 10,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StaticNonFinalField",
                "shortDescription": {
                  "text": "'static', non-'final' field"
                },
                "fullDescription": {
                  "text": "Reports non-'final' 'static' fields. A quick-fix is available to add the 'final' modifier to a non-'final' 'static' field. This inspection doesn't check fields' mutability. For example, adding the 'final' modifier to a field that has a value being set somewhere will cause a compilation error. Use the Only report 'public' fields option so that the inspection reported only 'public' fields. Inspection ID: StaticNonFinalField",
                  "markdown": "Reports non-`final` `static` fields.\n\nA quick-fix is available to add the `final` modifier to a non-`final` `static` field.\n\nThis inspection doesn't check fields' mutability. For example, adding the `final` modifier to a field that has a value\nbeing set somewhere will cause a compilation error.\n\n\nUse the **Only report 'public' fields** option so that the inspection reported only `public` fields.\n\nInspection ID: StaticNonFinalField"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "StaticNonFinalField",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Class structure",
                      "index": 17,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EmptyMethod",
                "shortDescription": {
                  "text": "Empty method"
                },
                "fullDescription": {
                  "text": "Reports empty methods that can be removed. Methods are considered empty if they are empty themselves and if they are overridden or implemented by empty methods only. Note that methods containing only comments and the 'super()' call with own parameters are also considered empty. The inspection ignores methods with special annotations, for example, the 'javax.ejb.Init' and 'javax.ejb.Remove' EJB annotations . The quick-fix safely removes unnecessary methods. Configure the inspection: Use the Comments and javadoc count as content option to select whether methods with comments should be treated as non-empty. Use the Additional special annotations option to configure additional annotations that should be ignored by this inspection. Inspection ID: EmptyMethod",
                  "markdown": "Reports empty methods that can be removed.\n\nMethods are considered empty if they are empty themselves and if they are overridden or\nimplemented by empty methods only. Note that methods containing only comments and the `super()` call with own parameters are\nalso considered empty.\n\nThe inspection ignores methods with special annotations, for example, the `javax.ejb.Init` and `javax.ejb.Remove` EJB annotations .\n\nThe quick-fix safely removes unnecessary methods.\n\nConfigure the inspection:\n\n* Use the **Comments and javadoc count as content** option to select whether methods with comments should be treated as non-empty.\n* Use the **Additional special annotations** option to configure additional annotations that should be ignored by this inspection.\n\nInspection ID: EmptyMethod"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EmptyMethod",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JVM languages",
                      "index": 1,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SimplifiableEqualsExpression",
                "shortDescription": {
                  "text": "Unnecessary 'null' check before 'equals()' call"
                },
                "fullDescription": {
                  "text": "Reports comparisons to 'null' that are followed by a call to 'equals()' with a constant argument. Example: 'if (s != null && s.equals(\"literal\")) {}' After the quick-fix is applied: 'if (\"literal\".equals(s)) {}' Use the inspection settings to report 'equals()' calls with a non-constant argument when the argument to 'equals()' is proven not to be 'null'. Inspection ID: SimplifiableEqualsExpression",
                  "markdown": "Reports comparisons to `null` that are followed by a call to `equals()` with a constant argument.\n\n**Example:**\n\n\n      if (s != null && s.equals(\"literal\")) {}\n\nAfter the quick-fix is applied:\n\n\n      if (\"literal\".equals(s)) {}\n\n\nUse the inspection settings to report `equals()` calls with a non-constant argument\nwhen the argument to `equals()` is proven not to be `null`.\n\nInspection ID: SimplifiableEqualsExpression"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SimplifiableEqualsExpression",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NonCommentSourceStatements",
                "shortDescription": {
                  "text": "Overly long method"
                },
                "fullDescription": {
                  "text": "Reports methods whose number of statements exceeds the specified maximum. Methods with too many statements may be confusing and are a good sign that refactoring is necessary. The following statements are not counted: empty statements (semicolons) block statements 'for' loop initialization statements, that is, 'int i = ...' within a 'for(int i = ...;...)' statement 'for' loop update statements, that is, 'i += 2' within a 'for(int i = ...;...; i += 2)' statement Use the Maximum statements per method field to specify the maximum allowed number of statements in a method. Inspection ID: NonCommentSourceStatements",
                  "markdown": "Reports methods whose number of statements exceeds the specified maximum.\n\nMethods with too many statements may be confusing and are a good sign that refactoring is necessary.\n\nThe following statements are not counted:\n\n* empty statements (semicolons)\n* block statements\n* `for` loop initialization statements, that is, `int i = ...` within a `for(int i = ...;...)` statement\n* `for` loop update statements, that is, `i += 2` within a `for(int i = ...;...; i += 2)` statement\n\nUse the **Maximum statements per method** field to specify the maximum allowed number of statements in a method.\n\n\nInspection ID: NonCommentSourceStatements"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "OverlyLongMethod",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Method metrics",
                      "index": 108,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConfusingMainMethod",
                "shortDescription": {
                  "text": "Confusing 'main()' method"
                },
                "fullDescription": {
                  "text": "Reports methods that are named \"main\", but do not have the 'public static void main(String[])' signature in Java up to 21. Starting from Java 21 Preview, inspection doesn't highlight in case of package-private, protected or instance main methods, also without parameters. Additionally main methods located in anonymous or local classes are reported. Anonymous and local classes do not have a fully qualified name and thus can't be run. Such methods may be confusing, as methods named \"main\" are expected to be application entry points. Example: 'class Main {\n    void main(String[] args) {} // warning here because there are no \"public static\" modifiers\n  }' A quick-fix that renames such methods is available only in the editor. Inspection ID: ConfusingMainMethod",
                  "markdown": "Reports methods that are named \"main\", but do not have the `public static void main(String[])` signature in Java up to 21. Starting from Java 21 Preview, inspection doesn't highlight in case of package-private, protected or instance main methods, also without parameters. Additionally main methods located in anonymous or local classes are reported. Anonymous and local classes do not have a fully qualified name and thus can't be run.\n\nSuch methods may be confusing, as methods named \"main\"\nare expected to be application entry points.\n\n**Example:**\n\n\n      class Main {\n        void main(String[] args) {} // warning here because there are no \"public static\" modifiers\n      }\n\nA quick-fix that renames such methods is available only in the editor.\n\n\nInspection ID: ConfusingMainMethod"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ConfusingMainMethod",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MultipleVariablesInDeclaration",
                "shortDescription": {
                  "text": "Multiple variables in one declaration"
                },
                "fullDescription": {
                  "text": "Reports multiple variables that are declared in a single declaration and suggest creating a separate declaration for each variable. Some coding standards prohibit such declarations. Example: 'int x = 1, y = 2;' After the quick-fix is applied: 'int x = 1;\n  int y = 2;' Configure the inspection: Use the Ignore 'for' loop declarations option to ignore multiple variables declared in the initialization of a 'for' loop statement, for example: 'for (int i = 0, max = list.size(); i > max; i++) {}' Use the Only warn on different array dimensions in a single declaration option to only warn when variables with different array dimensions are declared in a single declaration, for example: 'String s = \"\", array[];' Inspection ID: MultipleVariablesInDeclaration New in 2019.2",
                  "markdown": "Reports multiple variables that are declared in a single declaration and suggest creating a separate declaration for each variable.\n\nSome coding standards prohibit such declarations.\n\nExample:\n\n\n      int x = 1, y = 2;\n\nAfter the quick-fix is applied:\n\n\n      int x = 1;\n      int y = 2;\n\nConfigure the inspection:\n\n* Use the **Ignore 'for' loop declarations** option to ignore multiple variables declared in the initialization of a 'for' loop statement, for example:\n\n\n        for (int i = 0, max = list.size(); i > max; i++) {}\n\n* Use the **Only warn on different array dimensions in a single declaration** option to only warn when variables with different array dimensions are declared in a single declaration, for example:\n\n\n        String s = \"\", array[];\n\nInspection ID: MultipleVariablesInDeclaration\n\nNew in 2019.2"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "MultipleVariablesInDeclaration",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IOResource",
                "shortDescription": {
                  "text": "I/O resource opened but not safely closed"
                },
                "fullDescription": {
                  "text": "Reports I/O resources that are not safely closed. I/O resources checked by this inspection include 'java.io.InputStream', 'java.io.OutputStream', 'java.io.Reader', 'java.io.Writer', 'java.util.zip.ZipFile', 'java.io.Closeable' and 'java.io.RandomAccessFile'. I/O resources wrapped by other I/O resources are not reported, as the wrapped resource will be closed by the wrapping resource. By default, the inspection assumes that the resources can be closed by any method with 'close' or 'cleanup' in its name. Example: 'void save() throws IOException {\n    FileWriter writer = new FileWriter(\"filename.txt\"); //warning\n    writer.write(\"sample\");\n  }' Use the following options to configure the inspection: List I/O resource classes that do not need to be closed and should be ignored by this inspection. Whether an I/O resource is allowed to be opened inside a 'try'block. This style is less desirable because it is more verbose than opening a resource in front of a 'try' block. Whether the resource can be closed by any method call with the resource passed as argument. Inspection ID: IOResource",
                  "markdown": "Reports I/O resources that are not safely closed. I/O resources checked by this inspection include `java.io.InputStream`, `java.io.OutputStream`, `java.io.Reader`, `java.io.Writer`, `java.util.zip.ZipFile`, `java.io.Closeable` and `java.io.RandomAccessFile`.\n\n\nI/O resources wrapped by other I/O resources are not reported, as the wrapped resource will be closed by the wrapping resource.\n\n\nBy default, the inspection assumes that the resources can be closed by any method with\n'close' or 'cleanup' in its name.\n\n**Example:**\n\n\n      void save() throws IOException {\n        FileWriter writer = new FileWriter(\"filename.txt\"); //warning\n        writer.write(\"sample\");\n      }\n\n\nUse the following options to configure the inspection:\n\n* List I/O resource classes that do not need to be closed and should be ignored by this inspection.\n* Whether an I/O resource is allowed to be opened inside a `try`block. This style is less desirable because it is more verbose than opening a resource in front of a `try` block.\n* Whether the resource can be closed by any method call with the resource passed as argument.\n\nInspection ID: IOResource"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "IOResourceOpenedButNotSafelyClosed",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Resource management",
                      "index": 109,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CallToSimpleGetterInClass",
                "shortDescription": {
                  "text": "Call to simple getter from within class"
                },
                "fullDescription": {
                  "text": "Reports calls to a simple property getter from within the property's class. A simple property getter is defined as one which simply returns the value of a field, and does no other calculations. Such simple getter calls can be safely inlined using the quick-fix. Some coding standards also suggest against the use of simple getters for code clarity reasons. Example: 'public class Salient {\n    private String name;\n\n    public String getName() {\n      return name;\n    }\n\n    @Override\n    public String toString() {\n      return getName();\n    }\n  }' After the quick-fix is applied: 'public class Salient {\n    private String name;\n\n    public String getName() {\n      return name;\n    }\n\n    @Override\n    public String toString() {\n      return name;\n    }\n  }' Use the following options to configure the inspection: Whether to only report getter calls on 'this', not on objects of the same type passed in as a parameter. Whether to ignore non-'private' getters. Inspection ID: CallToSimpleGetterInClass",
                  "markdown": "Reports calls to a simple property getter from within the property's class.\n\n\nA simple property getter is defined as one which simply returns the value of a field,\nand does no other calculations. Such simple getter calls can be safely inlined using the quick-fix.\nSome coding standards also suggest against the use of simple getters for code clarity reasons.\n\n**Example:**\n\n\n      public class Salient {\n        private String name;\n\n        public String getName() {\n          return name;\n        }\n\n        @Override\n        public String toString() {\n          return getName();\n        }\n      }\n\nAfter the quick-fix is applied:\n\n\n      public class Salient {\n        private String name;\n\n        public String getName() {\n          return name;\n        }\n\n        @Override\n        public String toString() {\n          return name;\n        }\n      }\n\nUse the following options to configure the inspection:\n\n* Whether to only report getter calls on `this`, not on objects of the same type passed in as a parameter.\n* Whether to ignore non-`private` getters.\n\nInspection ID: CallToSimpleGetterInClass"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CallToSimpleGetterFromWithinClass",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Performance",
                      "index": 4,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NonSerializableFieldInSerializableClass",
                "shortDescription": {
                  "text": "Non-serializable field in a 'Serializable' class"
                },
                "fullDescription": {
                  "text": "Reports non-serializable fields in classes that implement 'java.io.Serializable'. Such fields will result in runtime exceptions if the object is serialized. Fields declared 'transient' or 'static' are not reported, nor are fields of classes that have a 'writeObject' method defined. This inspection assumes fields of the types 'java.util.Collection' and 'java.util.Map' to be 'Serializable', unless the types they are declared in are non-'Serializable'. Example: 'class NonSerializableClass {}\n\n  public class SerializableClass implements Serializable {\n      NonSerializableClass clazz; // warning: Non-serializable field 'clazz' in a Serializable class\n      static NonSerializableClass staticClazz; // no warnings\n  }'\n Use the following options to configure the inspection: List classes whose inheritors should not be reported by this inspection. This is meant for classes that inherit 'Serializable' from a superclass but are not intended for serialization. List annotations that will make the inspection ignore the annotated fields. Whether to ignore fields initialized with an anonymous class. Inspection ID: NonSerializableFieldInSerializableClass",
                  "markdown": "Reports non-serializable fields in classes that implement `java.io.Serializable`. Such fields will result in runtime exceptions if the object is serialized.\n\n\nFields declared\n`transient` or `static`\nare not reported, nor are fields of classes that have a `writeObject` method defined.\n\n\nThis inspection assumes fields of the types\n`java.util.Collection` and\n`java.util.Map` to be\n`Serializable`, unless the types\nthey are declared in are non-`Serializable`.\n\n**Example:**\n\n\n      class NonSerializableClass {}\n\n      public class SerializableClass implements Serializable {\n          NonSerializableClass clazz; // warning: Non-serializable field 'clazz' in a Serializable class\n          static NonSerializableClass staticClazz; // no warnings\n      }\n      \n\nUse the following options to configure the inspection:\n\n* List classes whose inheritors should not be reported by this inspection. This is meant for classes that inherit `Serializable` from a superclass but are not intended for serialization.\n* List annotations that will make the inspection ignore the annotated fields.\n* Whether to ignore fields initialized with an anonymous class.\n\nInspection ID: NonSerializableFieldInSerializableClass"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NonSerializableFieldInSerializableClass",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Serialization issues",
                      "index": 18,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EnhancedSwitchMigration",
                "shortDescription": {
                  "text": "Statement can be replaced with enhanced 'switch'"
                },
                "fullDescription": {
                  "text": "Reports 'switch' statements that can be automatically replaced with enhanced 'switch' statements or expressions. Example: 'double getPrice(String fruit) {\n    // Switch statement can be replaced with enhanced 'switch'\n    switch (fruit) {\n      case \"Apple\":\n        return 1.0;\n      case \"Orange\":\n        return 1.5;\n      case \"Mango\":\n        return 2.0;\n      default:\n        throw new IllegalArgumentException();\n    }\n  }' After the quick-fix is applied: 'double getPrice(String fruit) {\n    return switch (fruit) {\n      case \"Apple\" -> 1.0;\n      case \"Orange\" -> 1.5;\n      case \"Mango\" -> 2.0;\n      default -> throw new IllegalArgumentException();\n    };\n  }' Use the Show warning only if conversion to expression is possible option not to warn about conversion to 'switch' statement. Use the Maximum number of statements in one branch to convert to switch expression option warn about conversion to expression only if each branch has less than the given number of statements. This inspection depends on the Java feature 'Enhanced 'switch' blocks', which is available since Java 14. Inspection ID: EnhancedSwitchMigration New in 2019.1",
                  "markdown": "Reports `switch` statements that can be automatically replaced with enhanced `switch` statements or expressions.\n\n**Example:**\n\n\n      double getPrice(String fruit) {\n        // Switch statement can be replaced with enhanced 'switch'\n        switch (fruit) {\n          case \"Apple\":\n            return 1.0;\n          case \"Orange\":\n            return 1.5;\n          case \"Mango\":\n            return 2.0;\n          default:\n            throw new IllegalArgumentException();\n        }\n      }\n\nAfter the quick-fix is applied:\n\n\n      double getPrice(String fruit) {\n        return switch (fruit) {\n          case \"Apple\" -> 1.0;\n          case \"Orange\" -> 1.5;\n          case \"Mango\" -> 2.0;\n          default -> throw new IllegalArgumentException();\n        };\n      }\n      \n\n* Use the **Show warning only if conversion to expression is possible** option not to warn about conversion to `switch` statement.\n* Use the **Maximum number of statements in one branch to convert to switch expression** option warn about conversion to expression only if each branch has less than the given number of statements.\n\nThis inspection depends on the Java feature 'Enhanced 'switch' blocks', which is available since Java 14.\n\nInspection ID: EnhancedSwitchMigration\n\nNew in 2019.1"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EnhancedSwitchMigration",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level migration aids/Java 14",
                      "index": 111,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DoubleLiteralMayBeFloatLiteral",
                "shortDescription": {
                  "text": "Cast to 'float' can be 'float' literal"
                },
                "fullDescription": {
                  "text": "Reports 'double' literal expressions that are immediately cast to 'float'. Such literal expressions can be replaced with equivalent 'float' literals. Example: 'float f = (float)1.1;' After the quick-fix is applied: 'float f = 1.1f;' Inspection ID: DoubleLiteralMayBeFloatLiteral",
                  "markdown": "Reports `double` literal expressions that are immediately cast to `float`.\n\nSuch literal expressions can be replaced with equivalent `float` literals.\n\n**Example:**\n\n    float f = (float)1.1;\n\nAfter the quick-fix is applied:\n\n    float f = 1.1f;\n\nInspection ID: DoubleLiteralMayBeFloatLiteral"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "DoubleLiteralMayBeFloatLiteral",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Numeric issues/Cast",
                      "index": 112,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OverloadedMethodsWithSameNumberOfParameters",
                "shortDescription": {
                  "text": "Overloaded methods with same number of parameters"
                },
                "fullDescription": {
                  "text": "Reports methods that are declared in the same class, have the same name, and the same number of parameters. Such overloads cam be very confusing because it can be unclear which overload gets called. Example: 'class Main {\n    public static void execute(Runnable r) {}\n    public static <T> void execute(RunnableFuture<T> c) {}\n  }' Use the option to ignore overloaded methods whose parameter types are definitely incompatible. Inspection ID: OverloadedMethodsWithSameNumberOfParameters",
                  "markdown": "Reports methods that are declared in the same class, have the same name, and the same number of parameters. Such overloads cam be very confusing because it can be unclear which overload gets called.\n\n**Example:**\n\n\n      class Main {\n        public static void execute(Runnable r) {}\n        public static <T> void execute(RunnableFuture<T> c) {}\n      }\n\n\nUse the option to ignore overloaded methods whose parameter types are definitely incompatible.\n\nInspection ID: OverloadedMethodsWithSameNumberOfParameters"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "OverloadedMethodsWithSameNumberOfParameters",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Naming conventions/Method",
                      "index": 83,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OverlyLongLambda",
                "shortDescription": {
                  "text": "Overly long lambda expression"
                },
                "fullDescription": {
                  "text": "Reports lambda expressions whose number of statements exceeds the specified maximum. Lambda expressions that are too long may be confusing, and it is often better to extract the statements into a separate method. The following statements are not counted: empty statements (semicolons) block statements 'for' loop initialization statements, that is, 'int i = ...' within a 'for(int i = ...;...)' statement 'for' loop update statements, that is, 'i += 2' within a 'for(int i = ...;...; i += 2)' statement Use the Non-comment source statements limit field to specify the maximum allowed number of statements in a lambda expression. Inspection ID: OverlyLongLambda",
                  "markdown": "Reports lambda expressions whose number of statements exceeds the specified maximum.\n\nLambda expressions that are too long may be confusing, and it is often better to extract the statements into a separate method.\n\n\nThe following statements are not counted:\n\n* empty statements (semicolons)\n* block statements\n* `for` loop initialization statements, that is, `int i = ...` within a `for(int i = ...;...)` statement\n* `for` loop update statements, that is, `i += 2` within a `for(int i = ...;...; i += 2)` statement\n\nUse the **Non-comment source statements limit** field to specify the maximum allowed number of statements in a lambda expression.\n\n\nInspection ID: OverlyLongLambda"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "OverlyLongLambda",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Method metrics",
                      "index": 108,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ParametersPerMethod",
                "shortDescription": {
                  "text": "Method with too many parameters"
                },
                "fullDescription": {
                  "text": "Reports methods whose number of parameters exceeds the specified maximum. Methods with too many parameters can be a good sign that a refactoring is necessary. Methods that have super methods are not reported. Use the Parameter limit field to specify the maximum allowed number of parameters for a method. Inspection ID: ParametersPerMethod",
                  "markdown": "Reports methods whose number of parameters exceeds the specified maximum. Methods with too many parameters can be a good sign that a refactoring is necessary.\n\nMethods that have super methods are not reported.\n\nUse the **Parameter limit** field to specify the maximum allowed number of parameters for a method.\n\n\nInspection ID: ParametersPerMethod"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MethodWithTooManyParameters",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Method metrics",
                      "index": 108,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CloneDeclaresCloneNotSupported",
                "shortDescription": {
                  "text": "'clone()' does not declare 'CloneNotSupportedException'"
                },
                "fullDescription": {
                  "text": "Reports 'clone()' methods that do not declare 'throws CloneNotSupportedException'. If 'throws CloneNotSupportedException' is not declared, the method's subclasses will not be able to prohibit cloning in the standard way. This inspection does not report 'clone()' methods declared 'final' and 'clone()' methods on 'final' classes. Configure the inspection: Use the Only warn on 'protected' clone methods option to indicate that this inspection should only warn on 'protected clone()' methods. The Effective Java book (second and third edition) recommends omitting the 'CloneNotSupportedException' declaration on 'public' methods, because the methods that do not throw checked exceptions are easier to use. Example: 'public class Example implements Cloneable {\n    // method doesn't declare 'throws CloneNotSupportedException'\n    protected Object clone() {\n        try {\n            return super.clone();\n        } catch (CloneNotSupportedException e) {\n            return null;\n        }\n    }\n  }' Inspection ID: CloneDeclaresCloneNotSupported",
                  "markdown": "Reports `clone()` methods that do not declare `throws CloneNotSupportedException`.\n\nIf `throws CloneNotSupportedException` is not declared, the method's subclasses will not be able to prohibit cloning\nin the standard way. This inspection does not report `clone()` methods declared `final`\nand `clone()` methods on `final` classes.\n\nConfigure the inspection:\n\nUse the **Only warn on 'protected' clone methods** option to indicate that this inspection should only warn on `protected clone()` methods.\nThe *Effective Java* book (second and third edition) recommends omitting the `CloneNotSupportedException`\ndeclaration on `public` methods, because the methods that do not throw checked exceptions are easier to use.\n\nExample:\n\n\n      public class Example implements Cloneable {\n        // method doesn't declare 'throws CloneNotSupportedException'\n        protected Object clone() {\n            try {\n                return super.clone();\n            } catch (CloneNotSupportedException e) {\n                return null;\n            }\n        }\n      }\n\nInspection ID: CloneDeclaresCloneNotSupported"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CloneDoesntDeclareCloneNotSupportedException",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Cloning issues",
                      "index": 89,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BooleanExpressionMayBeConditional",
                "shortDescription": {
                  "text": "Boolean expression can be replaced with conditional expression"
                },
                "fullDescription": {
                  "text": "Reports any 'boolean' expressions which can be formulated in a more compact and, arguably, clear way than by using a conditional expression. Use the quick-fix to replace the 'boolean' expression by a conditional expression. Example: 'a && b || !a && c;' After the quick-fix is applied: 'a ? b : c;' Inspection ID: BooleanExpressionMayBeConditional",
                  "markdown": "Reports any `boolean` expressions which can be formulated in a more compact and, arguably, clear way than by using a conditional expression.\n\nUse the quick-fix to replace the `boolean` expression by a conditional expression.\n\n**Example:**\n\n\n      a && b || !a && c;\n\nAfter the quick-fix is applied:\n\n\n      a ? b : c;\n\n\nInspection ID: BooleanExpressionMayBeConditional"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "BooleanExpressionMayBeConditional",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Control flow issues",
                      "index": 24,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryExplicitNumericCast",
                "shortDescription": {
                  "text": "Unnecessary explicit numeric cast"
                },
                "fullDescription": {
                  "text": "Reports primitive numeric casts that would be inserted implicitly by the compiler. Also, reports any primitive numeric casts that the compiler will remove. Example: 'int x = (short)5; // The cast will be removed by the javac tool' After the quick-fix is applied: 'int x = 5;' Inspection ID: UnnecessaryExplicitNumericCast",
                  "markdown": "Reports primitive numeric casts that would be inserted implicitly by the compiler. Also, reports any primitive numeric casts that the compiler will remove.\n\n**Example:**\n\n    int x = (short)5; // The cast will be removed by the javac tool\n\nAfter the quick-fix is applied:\n`int x = 5;`\n\n\nInspection ID: UnnecessaryExplicitNumericCast"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnnecessaryExplicitNumericCast",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Numeric issues/Cast",
                      "index": 112,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TransientFieldNotInitialized",
                "shortDescription": {
                  "text": "Transient field is not initialized on deserialization"
                },
                "fullDescription": {
                  "text": "Reports 'transient' fields that are initialized during normal object construction, but whose class does not have a 'readObject' method. As 'transient' fields are not serialized they need to be initialized separately in a 'readObject()' method during deserialization. Any 'transient' fields that are not initialized during normal object construction are considered to use the default initialization and are not reported by this inspection. Example: 'class Person implements Serializable {\n    transient String name = \"Default\"; //warning, can actually be a null after deserialization\n    transient String surname; //null is considered the default value and not reported\n  }' Inspection ID: TransientFieldNotInitialized",
                  "markdown": "Reports `transient` fields that are initialized during normal object construction, but whose class does not have a `readObject` method.\n\n\nAs `transient` fields are not serialized they need\nto be initialized separately in a `readObject()` method\nduring deserialization.\n\n\nAny `transient` fields that\nare not initialized during normal object construction are considered to use the default\ninitialization and are not reported by this inspection.\n\n**Example:**\n\n\n      class Person implements Serializable {\n        transient String name = \"Default\"; //warning, can actually be a null after deserialization\n        transient String surname; //null is considered the default value and not reported\n      }\n\nInspection ID: TransientFieldNotInitialized"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "TransientFieldNotInitialized",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Serialization issues",
                      "index": 18,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PropertyValueSetToItself",
                "shortDescription": {
                  "text": "Property value set to itself"
                },
                "fullDescription": {
                  "text": "Reports calls of setter methods with the same object getter as a value. Usually, this code does nothing and probably was not intended. For example: 'bean.setPayerId(bean.getPayerId());' Inspection ID: PropertyValueSetToItself",
                  "markdown": "Reports calls of setter methods with the same object getter as a value. Usually, this code does nothing and probably was not intended.\n\n**For example:**\n\n    bean.setPayerId(bean.getPayerId());\n\n\nInspection ID: PropertyValueSetToItself"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PropertyValueSetToItself",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/JavaBeans issues",
                      "index": 113,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PatternOverriddenByNonAnnotatedMethod",
                "shortDescription": {
                  "text": "Non-annotated Method overrides @Pattern Method"
                },
                "fullDescription": {
                  "text": "Reports when a method without any '@Pattern' annotation overrides a '@Pattern' annotated method. This does not prevent error-highlighting inside the editor, however the overriding method will not be checked at runtime. A quick fix is provided to add a '@Pattern' annotation that matches the one from the superclass method. This ensures the runtime-check instrumentation works correctly. Example: 'abstract class Parent {\n    abstract @Pattern(\"\\\\d\\\\d-\\\\d\\\\d\\\\d\") String getId();\n  }\n  class Child extends Parent {\n    @Override String getId() { // warning here\n      return \"12-345\";\n    }\n  }' Inspection ID: PatternOverriddenByNonAnnotatedMethod",
                  "markdown": "Reports when a method without any `@Pattern` annotation overrides a `@Pattern` annotated method. This does not prevent error-highlighting inside the editor, however the overriding method will not be checked at runtime.\n\n\nA quick fix is provided to add a `@Pattern` annotation that matches the one from the superclass method. This ensures the\nruntime-check instrumentation works correctly.\n\n**Example:**\n\n\n      abstract class Parent {\n        abstract @Pattern(\"\\\\d\\\\d-\\\\d\\\\d\\\\d\") String getId();\n      }\n      class Child extends Parent {\n        @Override String getId() { // warning here\n          return \"12-345\";\n        }\n      }\n\nInspection ID: PatternOverriddenByNonAnnotatedMethod"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PatternOverriddenByNonAnnotatedMethod",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Pattern validation",
                      "index": 114,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ClassInitializer",
                "shortDescription": {
                  "text": "Non-'static' initializer"
                },
                "fullDescription": {
                  "text": "Reports non-'static' initializers in classes. Some coding standards prohibit instance initializers and recommend using constructors or field initializers for initialization. Also, deleting the 'static' keyword may accidentally create non-'static' initializers and result in obscure bugs. This inspection doesn't report instance initializers in anonymous classes. Use the Only warn when the class has one or more constructors option to ignore instance initializers in classes that don't have any constructors. Inspection ID: ClassInitializer",
                  "markdown": "Reports non-`static` initializers in classes.\n\nSome coding standards prohibit instance initializers and recommend using constructors or field initializers for initialization.\nAlso, deleting the `static` keyword may accidentally create non-`static` initializers and result in obscure bugs.\n\nThis inspection doesn't report instance initializers in anonymous classes.\n\n\nUse the **Only warn when the class has one or more constructors** option to ignore instance initializers in classes that don't have any constructors.\n\nInspection ID: ClassInitializer"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NonStaticInitializer",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Class structure",
                      "index": 17,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ContinueOrBreakFromFinallyBlock",
                "shortDescription": {
                  "text": "'continue' or 'break' inside 'finally' block"
                },
                "fullDescription": {
                  "text": "Reports 'break' or 'continue' statements inside of 'finally' blocks. While occasionally intended, such statements are very confusing, may mask thrown exceptions, and complicate debugging. Example: 'while (true) {\n        try {\n          throwingMethod();\n        } finally {\n            continue;\n        }\n    }' Inspection ID: ContinueOrBreakFromFinallyBlock",
                  "markdown": "Reports `break` or `continue` statements inside of `finally` blocks.\n\nWhile occasionally intended, such statements are very confusing, may mask thrown exceptions, and complicate debugging.\n\n**Example:**\n\n\n        while (true) {\n            try {\n              throwingMethod();\n            } finally {\n                continue;\n            }\n        }\n\nInspection ID: ContinueOrBreakFromFinallyBlock"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ContinueOrBreakFromFinallyBlock",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Error handling",
                      "index": 10,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LengthOneStringsInConcatenation",
                "shortDescription": {
                  "text": "Single character string concatenation"
                },
                "fullDescription": {
                  "text": "Reports concatenation with string literals that consist of one character. These literals may be replaced with equivalent character literals, gaining some performance enhancement. Example: 'String hello = hell + \"o\";' After the quick-fix is applied: 'String hello = hell + 'o';' Inspection ID: LengthOneStringsInConcatenation",
                  "markdown": "Reports concatenation with string literals that consist of one character.\n\nThese literals may be replaced with equivalent character literals, gaining some performance enhancement.\n\n**Example:**\n\n\n      String hello = hell + \"o\";\n\nAfter the quick-fix is applied:\n\n\n      String hello = hell + 'o';\n\n\nInspection ID: LengthOneStringsInConcatenation"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "SingleCharacterStringConcatenation",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Performance",
                      "index": 4,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryThis",
                "shortDescription": {
                  "text": "Unnecessary 'this' qualifier"
                },
                "fullDescription": {
                  "text": "Reports unnecessary 'this' qualifier. Using 'this' to disambiguate a code reference is discouraged by many coding styles and may easily become unnecessary via automatic refactorings. Example: 'class Foo {\n    int x;\n    void foo() {\n      this.x = 2;\n    }\n  }' After the quick-fix is applied: 'class Foo {\n    int x;\n    void foo() {\n      x = 2;\n    }\n  }' Use the inspection settings to ignore assignments to fields. For instance, 'this.x = 2;' won't be reported, but 'int y = this.x;' will be. Inspection ID: UnnecessaryThis",
                  "markdown": "Reports unnecessary `this` qualifier.\n\n\nUsing `this` to disambiguate a code reference is discouraged by many coding styles\nand may easily become unnecessary\nvia automatic refactorings.\n\n**Example:**\n\n\n      class Foo {\n        int x;\n        void foo() {\n          this.x = 2;\n        }\n      }\n\nAfter the quick-fix is applied:\n\n\n      class Foo {\n        int x;\n        void foo() {\n          x = 2;\n        }\n      }\n\n\nUse the inspection settings to ignore assignments to fields.\nFor instance, `this.x = 2;` won't be reported, but `int y = this.x;` will be.\n\n\nInspection ID: UnnecessaryThis"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnnecessaryThis",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ClassWithTooManyTransitiveDependencies",
                "shortDescription": {
                  "text": "Class with too many transitive dependencies"
                },
                "fullDescription": {
                  "text": "Reports classes that are directly or indirectly dependent on too many other classes. Modifications to any dependency of such a class may require changing the class thus making it prone to instability. Only top-level classes are reported. Use the Maximum number of transitive dependencies field to specify the maximum allowed number of direct or indirect dependencies for a class. Available only from Code | Inspect Code or Code | Analyze Code | Run Inspection by Name and isn't reported in the editor. Inspection ID: ClassWithTooManyTransitiveDependencies",
                  "markdown": "Reports classes that are directly or indirectly dependent on too many other classes.\n\nModifications to any dependency of such a class may require changing the class thus making it prone to instability.\n\nOnly top-level classes are reported.\n\nUse the **Maximum number of transitive dependencies** field to specify the maximum allowed number of direct or indirect dependencies\nfor a class.\n\nAvailable only from **Code \\| Inspect Code** or\n**Code \\| Analyze Code \\| Run Inspection by Name** and isn't reported in the editor.\n\nInspection ID: ClassWithTooManyTransitiveDependencies"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ClassWithTooManyTransitiveDependencies",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Dependency issues",
                      "index": 118,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LoopWithImplicitTerminationCondition",
                "shortDescription": {
                  "text": "Loop with implicit termination condition"
                },
                "fullDescription": {
                  "text": "Reports any 'while', 'do-while', and 'for' loops that have the 'true' constant as their only condition. At the same time, such loops can be still terminated by a containing 'if' statement which can break out of the loop. Such an 'if' statement must be the first or the only statement in a 'while' or 'for' loop and the last or the only statement in a 'do-while' loop. Removing the 'if' statement and making its condition an explicit loop condition simplifies the loop. Inspection ID: LoopWithImplicitTerminationCondition",
                  "markdown": "Reports any `while`, `do-while`, and `for` loops that have the `true` constant as their only condition. At the same time, such loops can be still terminated by a containing `if` statement which can break out of the loop.\n\nSuch an `if` statement must be the first or the only statement\nin a `while` or `for`\nloop and the last or the only statement in a `do-while` loop.\n\nRemoving the `if` statement and making its condition an explicit\nloop condition simplifies the loop.\n\n\nInspection ID: LoopWithImplicitTerminationCondition"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "LoopWithImplicitTerminationCondition",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Control flow issues",
                      "index": 24,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ExplicitArrayFilling",
                "shortDescription": {
                  "text": "Explicit array filling"
                },
                "fullDescription": {
                  "text": "Reports loops that can be replaced with 'Arrays.setAll()' or 'Arrays.fill()' calls. This inspection suggests replacing loops with 'Arrays.setAll()' if the language level of the project or module is 8 or higher. Replacing loops with 'Arrays.fill()' is possible with any language level. Example: 'for (int i=0; i<array.length; i++) {\n     array[i] = calc(i);\n  }' After the quick-fix is applied: 'Arrays.setAll(array, this::calc);' Inspection ID: ExplicitArrayFilling New in 2017.1",
                  "markdown": "Reports loops that can be replaced with `Arrays.setAll()` or `Arrays.fill()` calls.\n\nThis inspection suggests replacing loops with `Arrays.setAll()` if the language level of the project or module is 8 or higher.\nReplacing loops with `Arrays.fill()` is possible with any language level.\n\nExample:\n\n\n      for (int i=0; i<array.length; i++) {\n         array[i] = calc(i);\n      }\n\nAfter the quick-fix is applied:\n\n\n      Arrays.setAll(array, this::calc);\n\nInspection ID: ExplicitArrayFilling\n\nNew in 2017.1"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ExplicitArrayFilling",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Verbose or redundant code constructs",
                      "index": 37,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BadExceptionDeclared",
                "shortDescription": {
                  "text": "Prohibited exception declared"
                },
                "fullDescription": {
                  "text": "Reports methods that declare an inappropriate exception in their 'throws' clause. For example an exception can be inappropriate because it is overly generic, such as 'java.lang.Exception' or 'java.lang.Throwable'. Example: 'void describeModule(String module) throws Exception {} // warning: Prohibited exception 'Exception' declared' Configure the inspection: Use the Prohibited exceptions list to specify which exceptions should be reported. Use the Ignore exceptions declared on methods overriding a library method option to ignore exceptions declared by methods that override a library method. Inspection ID: BadExceptionDeclared",
                  "markdown": "Reports methods that declare an inappropriate exception in their `throws` clause. For example an exception can be inappropriate because it is overly generic, such as `java.lang.Exception` or `java.lang.Throwable`.\n\n**Example:**\n\n\n      void describeModule(String module) throws Exception {} // warning: Prohibited exception 'Exception' declared\n\nConfigure the inspection:\n\n* Use the **Prohibited exceptions** list to specify which exceptions should be reported.\n* Use the **Ignore exceptions declared on methods overriding a library method** option to ignore exceptions declared by methods that override a library method.\n\nInspection ID: BadExceptionDeclared"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ProhibitedExceptionDeclared",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Error handling",
                      "index": 10,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IntegerMultiplicationImplicitCastToLong",
                "shortDescription": {
                  "text": "Integer multiplication or shift implicitly cast to 'long'"
                },
                "fullDescription": {
                  "text": "Reports integer multiplications and left shifts that are implicitly cast to long. Example: 'void f(int i) {\n    long val = 65536 * i;\n  }' After the quick-fix is applied, the code changes to: 'void x(int i) {\n    long val = 65536L * i;\n  }' Example: 'void f(int i) {\n    long value = i << 24;\n  }' After the quick-fix is applied, the code changes to: 'void f(int i) {\n    long value = (long) i << 24;\n  }' Such multiplications are often a mistake, as overflow truncation may occur unexpectedly. Converting an 'int' literal to a 'long' literal ('65536L') fixes the problem. Inspection ID: IntegerMultiplicationImplicitCastToLong",
                  "markdown": "Reports integer multiplications and left shifts that are implicitly cast to long.\n\n**Example:**\n\n\n      void f(int i) {\n        long val = 65536 * i;\n      }\n\nAfter the quick-fix is applied, the code changes to:\n\n\n      void x(int i) {\n        long val = 65536L * i;\n      }\n\n**Example:**\n\n\n      void f(int i) {\n        long value = i << 24;\n      }\n\nAfter the quick-fix is applied, the code changes to:\n\n\n      void f(int i) {\n        long value = (long) i << 24;\n      }\n\n\nSuch multiplications are often a mistake, as overflow truncation may occur unexpectedly.\nConverting an `int` literal to a `long` literal (`65536`**L**) fixes the problem.\n\nInspection ID: IntegerMultiplicationImplicitCastToLong"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "IntegerMultiplicationImplicitCastToLong",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Numeric issues/Cast",
                      "index": 112,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceAssignmentWithOperatorAssignment",
                "shortDescription": {
                  "text": "Assignment can be replaced with operator assignment"
                },
                "fullDescription": {
                  "text": "Reports assignment operations which can be replaced by operator-assignment. Code using operator assignment is shorter and may be clearer. Example: 'x = x + 3;\n  x = x / 3;' After the quick fix is applied: 'x += 3;\n  x /= 3;' Use the Ignore conditional operators option to ignore '&&' and '||'. Replacing conditional operators with operator assignment would change the evaluation from lazy to eager, which may change the semantics of the expression. Use the Ignore obscure operators option to ignore '^' and '%', which are less known. Inspection ID: ReplaceAssignmentWithOperatorAssignment",
                  "markdown": "Reports assignment operations which can be replaced by operator-assignment.\n\nCode using operator assignment is shorter and may be clearer.\n\n**Example:**\n\n      x = x + 3;\n      x = x / 3;\n\nAfter the quick fix is applied:\n\n      x += 3;\n      x /= 3;\n\n\nUse the **Ignore conditional operators** option to ignore `&&`\nand `||`. Replacing conditional operators with operator\nassignment would change the evaluation from lazy to eager, which may change the semantics of the expression.\n\n\nUse the **Ignore obscure operators** option to ignore `^` and `%`, which are less known.\n\nInspection ID: ReplaceAssignmentWithOperatorAssignment"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "AssignmentReplaceableWithOperatorAssignment",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Assignment issues",
                      "index": 64,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReturnFromFinallyBlock",
                "shortDescription": {
                  "text": "'return' inside 'finally' block"
                },
                "fullDescription": {
                  "text": "Reports 'return' statements inside of 'finally' blocks. While occasionally intended, such 'return' statements may mask thrown exceptions and complicate debugging. Example: 'try {\n    foo();\n  } finally {\n    if (bar()) return;\n  }' Inspection ID: ReturnFromFinallyBlock",
                  "markdown": "Reports `return` statements inside of `finally` blocks.\n\nWhile occasionally intended, such `return` statements may mask thrown exceptions\nand complicate debugging.\n\n**Example:**\n\n\n      try {\n        foo();\n      } finally {\n        if (bar()) return;\n      }\n\nInspection ID: ReturnFromFinallyBlock"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ReturnInsideFinallyBlock",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Error handling",
                      "index": 10,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantExplicitClose",
                "shortDescription": {
                  "text": "Redundant 'close()'"
                },
                "fullDescription": {
                  "text": "Reports unnecessary calls to 'close()' at the end of a try-with-resources block and suggests removing them. Example: 'try(MyAutoCloseable ac = new MyAutoCloseable()) {\n    foo();\n    ac.close();\n  }' After the quick-fix is applied: 'try(MyAutoCloseable ac = new MyAutoCloseable()) {\n    foo();\n  }' Inspection ID: RedundantExplicitClose New in 2018.1",
                  "markdown": "Reports unnecessary calls to `close()` at the end of a try-with-resources block and suggests removing them.\n\n**Example**:\n\n\n      try(MyAutoCloseable ac = new MyAutoCloseable()) {\n        foo();\n        ac.close();\n      }\n\nAfter the quick-fix is applied:\n\n\n      try(MyAutoCloseable ac = new MyAutoCloseable()) {\n        foo();\n      }\n\nInspection ID: RedundantExplicitClose\n\nNew in 2018.1"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RedundantExplicitClose",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Declaration redundancy",
                      "index": 9,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AssertStatement",
                "shortDescription": {
                  "text": "'assert' statement"
                },
                "fullDescription": {
                  "text": "Reports 'assert' statements. By default, 'assert' statements are disabled during execution in the production environment. Consider using logger or exceptions instead. The 'assert' statements are not supported in Java 1.3 and earlier JVM. This inspection depends on the Java feature 'Assertions', which is available since Java 1.4. Inspection ID: AssertStatement",
                  "markdown": "Reports `assert` statements. By default, `assert` statements are disabled during execution in the production environment. Consider using logger or exceptions instead.\n\nThe `assert` statements are not supported in Java 1.3 and earlier JVM.\n\n\nThis inspection depends on the Java feature 'Assertions', which is available since Java 1.4.\n\nInspection ID: AssertStatement"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AssertStatement",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level issues",
                      "index": 119,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessarySemicolon",
                "shortDescription": {
                  "text": "Unnecessary semicolon"
                },
                "fullDescription": {
                  "text": "Reports any unnecessary semicolons, including semicolons that are used between class members, inside block statements, or after class definitions. Even though these semicolons are valid in Java, they are redundant and may be removed. Example: 'class C {\n    ;\n    void m() throws Exception {\n        try (AutoCloseable r1 = createAutoCloseable();) {\n          ;\n        }\n    }\n    ;\n  }' After the quick-fix is applied: 'class C {\n    void m() throws Exception {\n      try (AutoCloseable r1 = createAutoCloseable()) {\n      }\n    }\n  }' Inspection ID: UnnecessarySemicolon",
                  "markdown": "Reports any unnecessary semicolons, including semicolons that are used between class members, inside block statements, or after class definitions.\n\nEven though these semicolons are valid in Java, they are redundant and may be removed.\n\nExample:\n\n\n      class C {\n        ;\n        void m() throws Exception {\n            try (AutoCloseable r1 = createAutoCloseable();) {\n              ;\n            }\n        }\n        ;\n      }\n\nAfter the quick-fix is applied:\n\n\n      class C {\n        void m() throws Exception {\n          try (AutoCloseable r1 = createAutoCloseable()) {\n          }\n        }\n      }\n\n\nInspection ID: UnnecessarySemicolon"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnnecessarySemicolon",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JavadocBlankLines",
                "shortDescription": {
                  "text": "Blank line should be replaced with <p> to break lines"
                },
                "fullDescription": {
                  "text": "Reports blank lines in Javadoc comments. Blank lines in Javadoc may signal an intention split the text to different paragraphs. However, the Javadoc tool and IntelliJ IDEA will ignore them when rendering documentation comments. The quick-fix suggests to replace the blank line with a paragraph tag (<p>). Example: 'class Main {\n    /**\n     * Doesn't do anything.\n     *\n     * Does absolutely nothing\n     */\n    void foo() {}\n  }' After the quick-fix is applied: 'class Main {\n    /**\n     * Doesn't do anything.\n     * <p>\n     * Does absolutely nothing\n     */\n    void foo() {}\n  }' Inspection ID: JavadocBlankLines New in 2022.1",
                  "markdown": "Reports blank lines in Javadoc comments.\n\n\nBlank lines in Javadoc may signal an intention split the text to different paragraphs. However, the Javadoc tool and IntelliJ IDEA will\nignore them when rendering documentation comments.\n\n\nThe quick-fix suggests to replace the blank line with a paragraph tag (\\<p\\>).\n\n**Example:**\n\n\n      class Main {\n        /**\n         * Doesn't do anything.\n         *\n         * Does absolutely nothing\n         */\n        void foo() {}\n      }\n\nAfter the quick-fix is applied:\n\n\n      class Main {\n        /**\n         * Doesn't do anything.\n         * <p>\n         * Does absolutely nothing\n         */\n        void foo() {}\n      }\n\nInspection ID: JavadocBlankLines\n\nNew in 2022.1"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JavadocBlankLines",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Javadoc",
                      "index": 58,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UtilityClassWithPublicConstructor",
                "shortDescription": {
                  "text": "Utility class with 'public' constructor"
                },
                "fullDescription": {
                  "text": "Reports utility classes with 'public' constructors. Utility classes have all fields and methods declared as 'static'. Creating a 'public' constructor in such classes is confusing and may cause accidental class instantiation. Example: 'public final class UtilityClass {\n    public UtilityClass(){\n    }\n    public static void foo() {}\n  }' After the quick-fix is applied: 'public final class UtilityClass {\n    private UtilityClass(){\n    }\n    public static void foo() {}\n  }' Inspection ID: UtilityClassWithPublicConstructor",
                  "markdown": "Reports utility classes with `public` constructors.\n\nUtility classes have all fields and methods declared as `static`. Creating a `public`\nconstructor in such classes is confusing and may cause accidental class instantiation.\n\n**Example:**\n\n\n      public final class UtilityClass {\n        public UtilityClass(){\n        }\n        public static void foo() {}\n      }\n\nAfter the quick-fix is applied:\n\n\n      public final class UtilityClass {\n        private UtilityClass(){\n        }\n        public static void foo() {}\n      }\n\nInspection ID: UtilityClassWithPublicConstructor"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UtilityClassWithPublicConstructor",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Class structure",
                      "index": 17,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeParameterExtendsFinalClass",
                "shortDescription": {
                  "text": "Type parameter extends 'final' class"
                },
                "fullDescription": {
                  "text": "Reports type parameters declared to extend a 'final' class. Suggests replacing the type parameter with the type of the specified 'final' class since 'final' classes cannot be extended. Example: 'void foo() {\n    List<? extends Integer> list; // Warning: the Integer class is a final class\n  }' After the quick-fix is applied: 'void foo() {\n    List<Integer> list;\n  }' This inspection depends on the Java feature 'Generics', which is available since Java 5. Inspection ID: TypeParameterExtendsFinalClass",
                  "markdown": "Reports type parameters declared to extend a `final` class.\n\nSuggests replacing the type parameter with the type of the specified `final` class since\n`final` classes cannot be extended.\n\n**Example:**\n\n\n      void foo() {\n        List<? extends Integer> list; // Warning: the Integer class is a final class\n      }\n\nAfter the quick-fix is applied:\n\n\n      void foo() {\n        List<Integer> list;\n      }\n\nThis inspection depends on the Java feature 'Generics', which is available since Java 5.\n\nInspection ID: TypeParameterExtendsFinalClass"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "TypeParameterExtendsFinalClass",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Inheritance issues",
                      "index": 121,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TrivialIf",
                "shortDescription": {
                  "text": "Redundant 'if' statement"
                },
                "fullDescription": {
                  "text": "Reports 'if' statements that can be simplified to a single assignment, 'return', or 'assert' statement. Example: 'if (foo()) {\n    return true;\n  } else {\n    return false;\n  }' After the quick-fix is applied: 'return foo();' Configure the inspection: Use the Ignore chained 'if' statements option if you want to hide a warning for chained 'if' statements. For example, in the following code the warning will be hidden, but the quick-fix will still be available: 'if (condition1) return true;\n  if (condition2) return false;\n  return true;' Note that replacing 'if (isTrue()) assert false;' with 'assert isTrue();' may change the program semantics when asserts are disabled if condition has side effects. Use the Ignore 'if' statements with trivial 'assert' option if you want to hide a warning for 'if' statements containing only 'assert' statement in their bodies. Inspection ID: TrivialIf",
                  "markdown": "Reports `if` statements that can be simplified to a single assignment, `return`, or `assert` statement.\n\nExample:\n\n\n      if (foo()) {\n        return true;\n      } else {\n        return false;\n      }\n\nAfter the quick-fix is applied:\n\n\n      return foo();\n\nConfigure the inspection:\n\nUse the **Ignore chained 'if' statements** option if you want to hide a warning for chained `if` statements.\n\nFor example, in the following code the warning will be hidden, but the quick-fix will still be available:\n\n\n      if (condition1) return true;\n      if (condition2) return false;\n      return true;\n\nNote that replacing `if (isTrue()) assert false;` with `assert isTrue();` may change the program semantics\nwhen asserts are disabled if condition has side effects.\nUse the **Ignore 'if' statements with trivial 'assert'** option if you want to hide a warning for `if` statements\ncontaining only `assert` statement in their bodies.\n\nInspection ID: TrivialIf"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RedundantIfStatement",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Control flow issues",
                      "index": 24,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BooleanMethodIsAlwaysInverted",
                "shortDescription": {
                  "text": "Boolean method is always inverted"
                },
                "fullDescription": {
                  "text": "Reports methods with a 'boolean' return type that are always negated when called. A quick-fix is provided to invert and optionally rename the method. For performance reasons, not all problematic methods may be highlighted in the editor. Example: 'class C {\n    boolean alwaysTrue() {\n      return true;\n    }\n\n    void f() {\n      if (!alwaysTrue()) {\n        return;\n      }\n    }\n    boolean member = !alwaysTrue();\n  }' After the quick-fix is applied: 'class C {\n    boolean alwaysFalse() {\n      return false;\n    }\n\n    void f() {\n      if (alwaysFalse()) {\n        return;\n      }\n    }\n    boolean member = alwaysFalse();\n  }' Inspection ID: BooleanMethodIsAlwaysInverted",
                  "markdown": "Reports methods with a `boolean` return type that are always negated when called.\n\nA quick-fix is provided to invert and optionally rename the method.\nFor performance reasons, not all problematic methods may be highlighted in the editor.\n\nExample:\n\n\n      class C {\n        boolean alwaysTrue() {\n          return true;\n        }\n\n        void f() {\n          if (!alwaysTrue()) {\n            return;\n          }\n        }\n        boolean member = !alwaysTrue();\n      }\n\nAfter the quick-fix is applied:\n\n\n      class C {\n        boolean alwaysFalse() {\n          return false;\n        }\n\n        void f() {\n          if (alwaysFalse()) {\n            return;\n          }\n        }\n        boolean member = alwaysFalse();\n      }\n\nInspection ID: BooleanMethodIsAlwaysInverted"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "BooleanMethodIsAlwaysInverted",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Data flow",
                      "index": 51,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InstanceGuardedByStatic",
                "shortDescription": {
                  "text": "Instance member guarded by static field"
                },
                "fullDescription": {
                  "text": "Reports '@GuardedBy' annotations on instance fields or methods in which the guard is a 'static' field. Guarding a non-static by a static may result in excessive lock contention, as access to each locked field in any object instance will prevent simultaneous access to that field in every object instance. Example: 'private static ReadWriteLock lock = new ReentrantReadWriteLock(); //static guarding field\n    private Object state;\n\n    @GuardedBy(\"lock\")\n    public void bar() {\n        state = new Object();\n    }' Supported '@GuardedBy' annotations are: 'net.jcip.annotations.GuardedBy' 'javax.annotation.concurrent.GuardedBy' 'org.apache.http.annotation.GuardedBy' 'com.android.annotations.concurrency.GuardedBy' 'androidx.annotation.GuardedBy' 'com.google.errorprone.annotations.concurrent.GuardedBy' Inspection ID: InstanceGuardedByStatic",
                  "markdown": "Reports `@GuardedBy` annotations on instance fields or methods in which the guard is a `static` field. Guarding a non-static by a static may result in excessive lock contention, as access to each locked field in any object instance will prevent simultaneous access to that field in every object instance.\n\nExample:\n\n\n        private static ReadWriteLock lock = new ReentrantReadWriteLock(); //static guarding field\n        private Object state;\n\n        @GuardedBy(\"lock\")\n        public void bar() {\n            state = new Object();\n        }\n\nSupported `@GuardedBy` annotations are:\n\n* `net.jcip.annotations.GuardedBy`\n* `javax.annotation.concurrent.GuardedBy`\n* `org.apache.http.annotation.GuardedBy`\n* `com.android.annotations.concurrency.GuardedBy`\n* `androidx.annotation.GuardedBy`\n* `com.google.errorprone.annotations.concurrent.GuardedBy`\n\nInspection ID: InstanceGuardedByStatic"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "InstanceGuardedByStatic",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Concurrency annotation issues",
                      "index": 75,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AutoCloseableResource",
                "shortDescription": {
                  "text": "AutoCloseable used without 'try'-with-resources"
                },
                "fullDescription": {
                  "text": "Reports 'AutoCloseable' instances which are not used in a try-with-resources statement, also known as Automatic Resource Management. This means that the \"open resource before/in 'try', close in 'finally'\" style that had been used before try-with-resources became available, is also reported. This inspection is meant to replace all opened but not safely closed inspections when developing in Java 7 and higher. Example: 'private static void foo() throws IOException {\n    InputStream profile = Thread.currentThread().getContextClassLoader().getResourceAsStream(\"/someFile\");\n    System.out.println(profile.read());\n  }' Use the following options to configure the inspection: List subclasses of 'AutoCloseable' that do not need to be closed and should be ignored by this inspection. Note: The inspection will still report streams returned from the 'java.nio.file.Files' methods 'lines()', 'walk()', 'list()' and 'find()', even when 'java.util.stream.Stream' is listed to be ignored. These streams contain an associated I/O resource that needs to be closed. List methods returning 'AutoCloseable' that should be ignored when called. Whether to ignore an 'AutoCloseable' if it is the result of a method call. When this option is enabled, the results of factory methods will also be ignored. Whether the inspection should report if an 'AutoCloseable' instance is passed as a method call argument. If this option is enabled, the inspection assumes the resource is closed in the called method. Method calls inside a 'finally' block with 'close' in the name and an 'AutoCloseable' argument will not be ignored. Whether to ignore method references to constructors of resource classes. Whether to ignore methods that return a resource and whose name starts with 'get'. This can reduce false positives because most of the getters do not transfer the ownership of the resource, and their call sites are not responsible for closing the resource. This inspection depends on the Java feature 'Try-with-resources', which is available since Java 7. Inspection ID: AutoCloseableResource",
                  "markdown": "Reports `AutoCloseable` instances which are not used in a try-with-resources statement, also known as *Automatic Resource Management* .\n\n\nThis means that the \"open resource before/in `try`, close in `finally`\" style that had been used before\ntry-with-resources became available, is also reported.\nThis inspection is meant to replace all *opened but not safely closed* inspections when developing in Java 7 and higher.\n\n**Example:**\n\n\n      private static void foo() throws IOException {\n        InputStream profile = Thread.currentThread().getContextClassLoader().getResourceAsStream(\"/someFile\");\n        System.out.println(profile.read());\n      }\n\n\nUse the following options to configure the inspection:\n\n* List subclasses of `AutoCloseable` that do not need to be closed and should be ignored by this inspection.   \n  **Note** : The inspection will still report streams returned from the `java.nio.file.Files` methods `lines()`, `walk()`, `list()` and `find()`, even when `java.util.stream.Stream` is listed to be ignored. These streams contain an associated I/O resource that needs to be closed.\n* List methods returning `AutoCloseable` that should be ignored when called.\n* Whether to ignore an `AutoCloseable` if it is the result of a method call. When this option is enabled, the results of factory methods will also be ignored.\n* Whether the inspection should report if an `AutoCloseable` instance is passed as a method call argument. If this option is enabled, the inspection assumes the resource is closed in the called method. Method calls inside a `finally` block with 'close' in the name and an `AutoCloseable` argument will not be ignored.\n* Whether to ignore method references to constructors of resource classes.\n* Whether to ignore methods that return a resource and whose name starts with 'get'. This can reduce false positives because most of the getters do not transfer the ownership of the resource, and their call sites are not responsible for closing the resource.\n\nThis inspection depends on the Java feature 'Try-with-resources', which is available since Java 7.\n\nInspection ID: AutoCloseableResource"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "resource",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Resource management",
                      "index": 109,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SingleStatementInBlock",
                "shortDescription": {
                  "text": "Code block contains single statement"
                },
                "fullDescription": {
                  "text": "Reports control flow statements with a single statement in their code block and suggests removing the braces from the control flow statement body. Example: 'if (x > 0) {\n    System.out.println(\"x is positive\");\n  }' After the quick-fix is applied: 'if (x > 0) System.out.println(\"x is positive\");' Inspection ID: SingleStatementInBlock",
                  "markdown": "Reports control flow statements with a single statement in their code block and suggests removing the braces from the control flow statement body.\n\nExample:\n\n\n      if (x > 0) {\n        System.out.println(\"x is positive\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      if (x > 0) System.out.println(\"x is positive\");\n\nInspection ID: SingleStatementInBlock"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "SingleStatementInBlock",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TestCaseWithConstructor",
                "shortDescription": {
                  "text": "TestCase with non-trivial constructors"
                },
                "fullDescription": {
                  "text": "Reports test cases with initialization logic in their constructors. If a constructor fails, the '@After' annotated or 'tearDown()' method won't be called. This can leave the test environment partially initialized, which can adversely affect other tests. Instead, initialization of test cases should be done in a 'setUp()' or '@Before' annotated method. Bad example: 'public class ImportantTest {\n    private File file;\n\n    public ImportantTest() throws IOException {\n      file = File.createTempFile(\"xyz\", \".tmp\");\n    }\n\n    // ... tests go here\n  }' Inspection ID: TestCaseWithConstructor",
                  "markdown": "Reports test cases with initialization logic in their constructors. If a constructor fails, the `@After` annotated or `tearDown()` method won't be called. This can leave the test environment partially initialized, which can adversely affect other tests. Instead, initialization of test cases should be done in a `setUp()` or `@Before` annotated method.\n\nBad example:\n\n\n      public class ImportantTest {\n        private File file;\n\n        public ImportantTest() throws IOException {\n          file = File.createTempFile(\"xyz\", \".tmp\");\n        }\n\n        // ... tests go here\n      }\n\nInspection ID: TestCaseWithConstructor"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JUnitTestCaseWithNonTrivialConstructors",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JVM languages/Test frameworks",
                      "index": 95,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReadObjectAndWriteObjectPrivate",
                "shortDescription": {
                  "text": "'readObject()' or 'writeObject()' not declared 'private'"
                },
                "fullDescription": {
                  "text": "Reports 'Serializable' classes where the 'readObject' or 'writeObject' methods are not declared private. There is no reason these methods should ever have a higher visibility than 'private'. A quick-fix is suggested to make the corresponding method 'private'. Example: 'public class Test implements Serializable {\n    public void readObject(ObjectInputStream stream) {\n      /* ... */\n    }\n  }' After the quick-fix is applied: 'public class Test implements Serializable {\n    private void readObject(ObjectInputStream stream) {\n      /* ... */\n    }\n  }' Inspection ID: ReadObjectAndWriteObjectPrivate",
                  "markdown": "Reports `Serializable` classes where the `readObject` or `writeObject` methods are not declared private. There is no reason these methods should ever have a higher visibility than `private`.\n\n\nA quick-fix is suggested to make the corresponding method `private`.\n\n**Example:**\n\n\n      public class Test implements Serializable {\n        public void readObject(ObjectInputStream stream) {\n          /* ... */\n        }\n      }\n\nAfter the quick-fix is applied:\n\n\n      public class Test implements Serializable {\n        private void readObject(ObjectInputStream stream) {\n          /* ... */\n        }\n      }\n\nInspection ID: ReadObjectAndWriteObjectPrivate"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NonPrivateSerializationMethod",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Serialization issues",
                      "index": 18,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantFileCreation",
                "shortDescription": {
                  "text": "Redundant 'File' instance creation"
                },
                "fullDescription": {
                  "text": "Reports redundant 'File' creation in one of the following constructors when only 'String' path can be used: 'FileInputStream', 'FileOutputStream', 'FileReader', 'FileWriter', 'PrintStream', 'PrintWriter', 'Formatter'. Example: 'InputStream is = new FileInputStream(new File(\"in.txt\"));' After quick-fix is applied: 'InputStream is = new FileInputStream(\"in.txt\");' Inspection ID: RedundantFileCreation New in 2020.3",
                  "markdown": "Reports redundant `File` creation in one of the following constructors when only `String` path can be used: `FileInputStream`, `FileOutputStream`, `FileReader`, `FileWriter`, `PrintStream`, `PrintWriter`, `Formatter`.\n\nExample:\n\n\n    InputStream is = new FileInputStream(new File(\"in.txt\"));\n\nAfter quick-fix is applied:\n\n\n    InputStream is = new FileInputStream(\"in.txt\");\n\nInspection ID: RedundantFileCreation\n\nNew in 2020.3"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RedundantFileCreation",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Verbose or redundant code constructs",
                      "index": 37,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PointlessBooleanExpression",
                "shortDescription": {
                  "text": "Pointless boolean expression"
                },
                "fullDescription": {
                  "text": "Reports unnecessary or overly complicated boolean expressions. Such expressions include '&&'-ing with 'true', '||'-ing with 'false', equality comparison with a boolean literal, or negation of a boolean literal. Such expressions can be simplified. Example: 'boolean a = !(x && false);\n  boolean b = false || x;\n  boolean c = x != true;' After the quick-fix is applied: 'boolean a = true;\n  boolean b = x;\n  boolean c = !x;' Configure the inspection: Use the Ignore named constants in determining pointless expressions option to ignore named constants when determining if an expression is pointless. Inspection ID: PointlessBooleanExpression",
                  "markdown": "Reports unnecessary or overly complicated boolean expressions.\n\nSuch expressions include `&&`-ing with `true`,\n`||`-ing with `false`,\nequality comparison with a boolean literal, or negation of a boolean literal. Such expressions can be simplified.\n\nExample:\n\n\n      boolean a = !(x && false);\n      boolean b = false || x;\n      boolean c = x != true;\n\nAfter the quick-fix is applied:\n\n\n      boolean a = true;\n      boolean b = x;\n      boolean c = !x;\n\n\nConfigure the inspection:\nUse the **Ignore named constants in determining pointless expressions** option to ignore named constants when determining if an expression is pointless.\n\n\nInspection ID: PointlessBooleanExpression"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PointlessBooleanExpression",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Control flow issues",
                      "index": 24,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ListenerMayUseAdapter",
                "shortDescription": {
                  "text": "Class may extend adapter instead of implementing listener"
                },
                "fullDescription": {
                  "text": "Reports classes implementing listeners instead of extending corresponding adapters. A quick-fix is available to remove any redundant empty methods left after replacing a listener implementation with an adapter extension. Use the Only warn when empty implementing methods are found option to configure the inspection to warn even if no empty methods are found. Inspection ID: ListenerMayUseAdapter",
                  "markdown": "Reports classes implementing listeners instead of extending corresponding adapters.\n\nA quick-fix is available to\nremove any redundant empty methods left after replacing a listener implementation with an adapter extension.\n\n\nUse the **Only warn when empty implementing methods are found** option to configure the inspection to warn even if no empty methods are found.\n\nInspection ID: ListenerMayUseAdapter"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ListenerMayUseAdapter",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Class structure",
                      "index": 17,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ExpressionComparedToItself",
                "shortDescription": {
                  "text": "Expression is compared to itself"
                },
                "fullDescription": {
                  "text": "Reports comparisons where left and right operand represent the identical expression. While sometimes comparing an expression with itself could be intended, in most cases, it is an oversight. Example: '// Probably left.getLength() == right.getLength() was intended\n  boolean result = left.getLength() == left.getLength();' To ignore comparisons that may produce side effects, use the Ignore conditions with side effects option. Disabling this option may lead to false-positives, for example, when the same method returns different values on subsequent invocations. Example: 'native int unknownMethod();\n  \n  ...\n  \n  if (unknownMethod() > unknownMethod()) {\n    System.out.println(\"Got it\");\n  }' Due to possible side effects of 'unknownMethod()' (on the example), the warning will only be triggered if the Ignore conditions with side effects option is disabled. Inspection ID: ExpressionComparedToItself New in 2024.2",
                  "markdown": "Reports comparisons where left and right operand represent the identical expression. While sometimes comparing an expression with itself could be intended, in most cases, it is an oversight.\n\nExample:\n\n\n      // Probably left.getLength() == right.getLength() was intended\n      boolean result = left.getLength() == left.getLength();\n\n\nTo ignore comparisons that may produce side effects, use the **Ignore conditions with side effects** option.\nDisabling this option may lead to false-positives, for example, when the same method returns different values on subsequent invocations.\n\nExample:\n\n\n      native int unknownMethod();\n      \n      ...\n      \n      if (unknownMethod() > unknownMethod()) {\n        System.out.println(\"Got it\");\n      }\n\nDue to possible side effects of `unknownMethod()` (on the example), the warning will only be\ntriggered if the **Ignore conditions with side effects** option is disabled.\n\nInspection ID: ExpressionComparedToItself\n\nNew in 2024.2"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ExpressionComparedToItself",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RefusedBequest",
                "shortDescription": {
                  "text": "Method does not call super method"
                },
                "fullDescription": {
                  "text": "Reports methods that override a super method without calling it. This is also known as a refused bequest. Such methods may represent a failure of abstraction and cause hard-to-trace bugs. The inspection doesn't report methods overridden from 'java.lang.Object', except for 'clone()'. The 'clone()' method should by convention call its super method, which will return an object of the correct type. Example 1: 'class A {\n    @Override\n    public Object clone() {\n      // does not call 'super.clone()'\n      return new A();\n    }\n  }' Example 2: 'interface I {\n    default void foo() {}\n  }\n\n  class A implements I {\n    // warning on method when\n    // 'Ignore 'default' super methods' is disabled\n    @Override\n    public void foo(){}\n  }' Configure the inspection: Use the Only report when super method is annotated by option to ignore super methods marked with the annotations from the provided list. You can manually add annotations to the list. Use the Ignore empty super methods option to ignore super methods that are either empty or only throw an exception. Use the Ignore 'default' super methods option to ignore 'default' super methods from interfaces. Inspection ID: RefusedBequest",
                  "markdown": "Reports methods that override a super method without calling it. This is also known as a *refused bequest* . Such methods may represent a failure of abstraction and cause hard-to-trace bugs.\n\n\nThe inspection doesn't report methods overridden from `java.lang.Object`, except for `clone()`.\nThe `clone()` method should by convention call its super method,\nwhich will return an object of the correct type.\n\n**Example 1:**\n\n\n      class A {\n        @Override\n        public Object clone() {\n          // does not call 'super.clone()'\n          return new A();\n        }\n      }\n\n**Example 2:**\n\n\n      interface I {\n        default void foo() {}\n      }\n\n      class A implements I {\n        // warning on method when\n        // 'Ignore 'default' super methods' is disabled\n        @Override\n        public void foo(){}\n      }\n\nConfigure the inspection:\n\n* Use the **Only report when super method is annotated by** option to ignore super methods marked with the annotations from the provided list. You can manually add annotations to the list.\n* Use the **Ignore empty super methods** option to ignore super methods that are either empty or only throw an exception.\n* Use the **Ignore 'default' super methods** option to ignore `default` super methods from interfaces.\n\nInspection ID: RefusedBequest"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MethodDoesntCallSuperMethod",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Inheritance issues",
                      "index": 121,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryReturn",
                "shortDescription": {
                  "text": "Unnecessary 'return' statement"
                },
                "fullDescription": {
                  "text": "Reports 'return' statements at the end of constructors and methods returning 'void'. These statements are redundant and may be safely removed. This inspection does not report in JSP files. Example: 'void message() {\n    System.out.println(\"Hello World\");\n    return;\n  }' After the quick-fix is applied: 'void message() {\n    System.out.println(\"Hello World\");\n  }' Use the Ignore in then branch of 'if' statement with 'else' branch option to ignore 'return' statements in the then branch of 'if' statements which also have an 'else' branch. Inspection ID: UnnecessaryReturn",
                  "markdown": "Reports `return` statements at the end of constructors and methods returning `void`. These statements are redundant and may be safely removed.\n\nThis inspection does not report in JSP files.\n\nExample:\n\n\n      void message() {\n        System.out.println(\"Hello World\");\n        return;\n      }\n\nAfter the quick-fix is applied:\n\n\n      void message() {\n        System.out.println(\"Hello World\");\n      }\n\n\nUse the **Ignore in then branch of 'if' statement with 'else' branch** option to ignore `return` statements in the then branch of `if` statements\nwhich also have an `else` branch.\n\nInspection ID: UnnecessaryReturn"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnnecessaryReturnStatement",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Verbose or redundant code constructs",
                      "index": 37,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PublicInnerClass",
                "shortDescription": {
                  "text": "'public' nested class"
                },
                "fullDescription": {
                  "text": "Reports 'public' nested classes. Example: 'public class Outer {\n    public static class Nested {} // warning\n    public class Inner {}         // warning\n    public enum Mode {}           // warning depends on the setting\n    public interface I {}         // warning depends on the setting\n  }' Configure the inspection: Use the Ignore 'public' inner enums option to ignore 'public' inner enums. Use the Ignore 'public' inner interfaces option to ignore 'public' inner interfaces. Inspection ID: PublicInnerClass",
                  "markdown": "Reports `public` nested classes.\n\n**Example:**\n\n\n      public class Outer {\n        public static class Nested {} // warning\n        public class Inner {}         // warning\n        public enum Mode {}           // warning depends on the setting\n        public interface I {}         // warning depends on the setting\n      }\n\nConfigure the inspection:\n\n* Use the **Ignore 'public' inner enums** option to ignore `public` inner enums.\n* Use the **Ignore 'public' inner interfaces** option to ignore `public` inner interfaces.\n\nInspection ID: PublicInnerClass"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PublicInnerClass",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Encapsulation",
                      "index": 100,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NonFinalGuard",
                "shortDescription": {
                  "text": "Non-final '@GuardedBy' field"
                },
                "fullDescription": {
                  "text": "Reports '@GuardedBy' annotations in which the guarding field is not 'final'. Guarding on a non-final field may result in unexpected race conditions, as locks will be held on the value of the field (which may change), rather than the field itself. Example: 'private ReadWriteLock lock = new ReentrantReadWriteLock(); //not final guarding field\n    private Object state;\n\n    @GuardedBy(\"lock\")\n    public void bar() {\n        state = new Object();\n    }' Supported '@GuardedBy' annotations are: 'net.jcip.annotations.GuardedBy' 'javax.annotation.concurrent.GuardedBy' 'org.apache.http.annotation.GuardedBy' 'com.android.annotations.concurrency.GuardedBy' 'androidx.annotation.GuardedBy' 'com.google.errorprone.annotations.concurrent.GuardedBy' Inspection ID: NonFinalGuard",
                  "markdown": "Reports `@GuardedBy` annotations in which the guarding field is not `final`.\n\nGuarding on a non-final field may result in unexpected race conditions, as locks will\nbe held on the value of the field (which may change), rather than the field itself.\n\nExample:\n\n\n        private ReadWriteLock lock = new ReentrantReadWriteLock(); //not final guarding field\n        private Object state;\n\n        @GuardedBy(\"lock\")\n        public void bar() {\n            state = new Object();\n        }\n\nSupported `@GuardedBy` annotations are:\n\n* `net.jcip.annotations.GuardedBy`\n* `javax.annotation.concurrent.GuardedBy`\n* `org.apache.http.annotation.GuardedBy`\n* `com.android.annotations.concurrency.GuardedBy`\n* `androidx.annotation.GuardedBy`\n* `com.google.errorprone.annotations.concurrent.GuardedBy`\n\nInspection ID: NonFinalGuard"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NonFinalGuard",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Concurrency annotation issues",
                      "index": 75,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CollectionAddedToSelf",
                "shortDescription": {
                  "text": "Collection added to itself"
                },
                "fullDescription": {
                  "text": "Reports cases where the argument of a method call on a 'java.util.Collection' or 'java.util.Map' is the collection or map itself. Such situations may occur as a result of copy-paste in code with raw types. Example: 'ArrayList list = new ArrayList<>();\n  list.add(list); // warning here\n  return list.hashCode(); // throws StackOverflowError' Inspection ID: CollectionAddedToSelf",
                  "markdown": "Reports cases where the argument of a method call on a `java.util.Collection` or `java.util.Map` is the collection or map itself. Such situations may occur as a result of copy-paste in code with raw types.\n\n**Example:**\n\n\n      ArrayList list = new ArrayList<>();\n      list.add(list); // warning here\n      return list.hashCode(); // throws StackOverflowError\n\nInspection ID: CollectionAddedToSelf"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CollectionAddedToSelf",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessarySuperQualifier",
                "shortDescription": {
                  "text": "Unnecessary 'super' qualifier"
                },
                "fullDescription": {
                  "text": "Reports unnecessary 'super' qualifiers in method calls and field references. A 'super' qualifier is unnecessary when the field or method of the superclass is not hidden/overridden in the calling class. Example: 'class Foo {\n    void foo() {}\n  }\n\n  class Bar extends Foo {\n    void bar() {\n      super.foo();\n    }\n  }' After the quick-fix is applied: 'class Foo {\n    void foo() {}\n  }\n\n  class Bar extends Foo {\n    void bar() {\n      foo();\n    }\n  }' Use the inspection settings to ignore qualifiers that help to distinguish superclass members access from the identically named members of the outer class. See also the following inspections: Java | Visibility | Access to inherited field looks like access to element from surrounding code Java | Visibility | Call to inherited method looks like call to local method Inspection ID: UnnecessarySuperQualifier",
                  "markdown": "Reports unnecessary `super` qualifiers in method calls and field references.\n\n\nA `super` qualifier is unnecessary\nwhen the field or method of the superclass is not hidden/overridden in the calling class.\n\n**Example:**\n\n\n      class Foo {\n        void foo() {}\n      }\n\n      class Bar extends Foo {\n        void bar() {\n          super.foo();\n        }\n      }\n\nAfter the quick-fix is applied:\n\n\n      class Foo {\n        void foo() {}\n      }\n\n      class Bar extends Foo {\n        void bar() {\n          foo();\n        }\n      }\n\n\nUse the inspection settings to ignore qualifiers that help to distinguish superclass members access\nfrom the identically named members of the outer class.\n\n\nSee also the following inspections:\n\n* *Java \\| Visibility \\| Access to inherited field looks like access to element from surrounding code*\n* *Java \\| Visibility \\| Call to inherited method looks like call to local method*\n\nInspection ID: UnnecessarySuperQualifier"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnnecessarySuperQualifier",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EqualsOnSuspiciousObject",
                "shortDescription": {
                  "text": "'equals()' called on classes which don't override it"
                },
                "fullDescription": {
                  "text": "Reports 'equals()' calls on 'StringBuilder', 'StringBuffer' and instances of 'java.util.concurrent.atomic' package. The 'equals()' method is not overridden in these classes, so it may return 'false' even when the contents of the two objects are the same. If the reference equality is intended, it's better to use '==' to avoid confusion. A quick-fix for 'StringBuilder', 'StringBuffer', 'AtomicBoolean', 'AtomicInteger', 'AtomicBoolean' and 'AtomicLong' is available to transform into a comparison of contents. The quick-fix may change the semantics when one of the instances is null. Example: 'public void test(StringBuilder sb1, StringBuilder sb2) {\n    boolean result = sb1.equals(sb2); // Suspicious\n  }' After the quick-fix is applied: 'public void test(StringBuilder sb1, StringBuilder sb2) {\n      boolean result = sb1.toString().equals(sb2.toString());\n  }' Inspection ID: EqualsOnSuspiciousObject New in 2017.2",
                  "markdown": "Reports `equals()` calls on `StringBuilder`, `StringBuffer` and instances of `java.util.concurrent.atomic` package.\n\nThe `equals()` method is not overridden in these classes, so it may return `false` even when the contents of the\ntwo objects are the same.\nIf the reference equality is intended, it's better to use `==` to avoid confusion.\nA quick-fix for `StringBuilder`, `StringBuffer`, `AtomicBoolean`, `AtomicInteger`, `AtomicBoolean` and `AtomicLong` is available to transform into a comparison of contents. The quick-fix may change the semantics when one of the instances is null.\n\nExample:\n\n\n      public void test(StringBuilder sb1, StringBuilder sb2) {\n        boolean result = sb1.equals(sb2); // Suspicious\n      }\n\nAfter the quick-fix is applied:\n\n\n      public void test(StringBuilder sb1, StringBuilder sb2) {\n          boolean result = sb1.toString().equals(sb2.toString());\n      }\n\nInspection ID: EqualsOnSuspiciousObject\n\nNew in 2017.2"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EqualsOnSuspiciousObject",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseOfPropertiesAsHashtable",
                "shortDescription": {
                  "text": "Use of 'Properties' object as a 'Hashtable'"
                },
                "fullDescription": {
                  "text": "Reports calls to the following methods on 'java.util.Properties' objects: 'put()' 'putIfAbsent()' 'putAll()' 'get()' For historical reasons, 'java.util.Properties' inherits from 'java.util.Hashtable', but using these methods is discouraged to prevent pollution of properties with values of types other than 'String'. Calls to 'java.util.Properties.putAll()' won't get reported when both the key and the value parameters in the map are of the 'String' type. Such a call is safe and no better alternative exists. Example: 'Object f(Properties props) {\n    props.put(\"hello\", \"world\");\n    props.putIfAbsent(\"hello\", \"world\");\n    props.putAll(new HashMap<>());\n    return props.get(\"Hello\");\n  }' After the quick-fix is applied: 'Object f(Properties props) {\n    props.setProperty(\"hello\", \"world\");\n    props.putIfAbsent(\"hello\", \"world\");\n    props.putAll(new HashMap<>());\n    return props.getProperty(\"hello\");\n  }' Inspection ID: UseOfPropertiesAsHashtable",
                  "markdown": "Reports calls to the following methods on `java.util.Properties` objects:\n\n* `put()`\n* `putIfAbsent()`\n* `putAll()`\n* `get()`\n\n\nFor historical reasons, `java.util.Properties` inherits from `java.util.Hashtable`,\nbut using these methods is discouraged to prevent pollution of properties with values of types other than `String`.\n\n\nCalls to `java.util.Properties.putAll()` won't get reported when\nboth the key and the value parameters in the map are of the `String` type.\nSuch a call is safe and no better alternative exists.\n\n**Example:**\n\n\n      Object f(Properties props) {\n        props.put(\"hello\", \"world\");\n        props.putIfAbsent(\"hello\", \"world\");\n        props.putAll(new HashMap<>());\n        return props.get(\"Hello\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      Object f(Properties props) {\n        props.setProperty(\"hello\", \"world\");\n        props.putIfAbsent(\"hello\", \"world\");\n        props.putAll(new HashMap<>());\n        return props.getProperty(\"hello\");\n      }\n\nInspection ID: UseOfPropertiesAsHashtable"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UseOfPropertiesAsHashtable",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MethodCoupling",
                "shortDescription": {
                  "text": "Overly coupled method"
                },
                "fullDescription": {
                  "text": "Reports methods that reference too many other classes. Methods with too high coupling can be very fragile and should be probably split into smaller methods. Each referenced class is counted only once no matter how many times it is referenced. Configure the inspection: Use the Method coupling limit field to specify the maximum allowed coupling for a method. Use the Include couplings to java system classes option to count references to classes from 'java'or 'javax' packages. Use the Include couplings to library classes option to count references to third-party library classes. Inspection ID: MethodCoupling",
                  "markdown": "Reports methods that reference too many other classes. Methods with too high coupling can be very fragile and should be probably split into smaller methods.\n\nEach referenced class is counted only once no matter how many times it is referenced.\n\nConfigure the inspection:\n\n* Use the **Method coupling limit** field to specify the maximum allowed coupling for a method.\n* Use the **Include couplings to java system classes** option to count references to classes from `java`or `javax` packages.\n* Use the **Include couplings to library classes** option to count references to third-party library classes.\n\nInspection ID: MethodCoupling"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "OverlyCoupledMethod",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Method metrics",
                      "index": 108,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AccessToStaticFieldLockedOnInstance",
                "shortDescription": {
                  "text": "Access to 'static' field locked on instance data"
                },
                "fullDescription": {
                  "text": "Reports access to non-constant static fields that are locked on either 'this' or an instance field of 'this'. Locking a static field on instance data does not prevent the field from being modified by other instances, and thus may result in unexpected race conditions. Example: 'static String test;\n  public void foo() {\n      synchronized (this) {\n          System.out.println(test); // warning\n      }\n  }' There is a quick-fix that allows ignoring static fields of specific types. You can manage those ignored types in the inspection options. Use the inspection options to specify which classes used for static fields should be ignored. Inspection ID: AccessToStaticFieldLockedOnInstance",
                  "markdown": "Reports access to non-constant static fields that are locked on either `this` or an instance field of `this`.\n\n\nLocking a static field on instance data does not prevent the field from being\nmodified by other instances, and thus may result in unexpected race conditions.\n\n**Example:**\n\n\n      static String test;\n      public void foo() {\n          synchronized (this) {\n              System.out.println(test); // warning\n          }\n      }\n\n\nThere is a quick-fix that allows ignoring static fields of specific types.\nYou can manage those ignored types in the inspection options.\n\n\nUse the inspection options to specify which classes used for static fields should be ignored.\n\n\nInspection ID: AccessToStaticFieldLockedOnInstance"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AccessToStaticFieldLockedOnInstance",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Threading issues",
                      "index": 23,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VariableTypeCanBeExplicit",
                "shortDescription": {
                  "text": "Variable type can be explicit"
                },
                "fullDescription": {
                  "text": "Reports local variables of the 'var' type that can be replaced with an explicit type. Example: 'var str = \"Hello\";' After the quick-fix is applied: 'String str = \"Hello\";' This inspection depends on the Java feature 'Local variable type inference', which is available since Java 10. Inspection ID: VariableTypeCanBeExplicit",
                  "markdown": "Reports local variables of the `var` type that can be replaced with an explicit type.\n\n**Example:**\n\n\n      var str = \"Hello\";\n\nAfter the quick-fix is applied:\n\n\n      String str = \"Hello\";\n\nThis inspection depends on the Java feature 'Local variable type inference', which is available since Java 10.\n\nInspection ID: VariableTypeCanBeExplicit"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "VariableTypeCanBeExplicit",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level migration aids/Java 10",
                      "index": 126,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Java8ListSort",
                "shortDescription": {
                  "text": "'Collections.sort()' can be replaced with 'List.sort()'"
                },
                "fullDescription": {
                  "text": "Reports calls of 'Collections.sort(list, comparator)' which can be replaced with 'list.sort(comparator)'. 'Collections.sort' is just a wrapper, so it is better to use an instance method directly. This inspection depends on the Java feature 'Lambda methods in collections', which is available since Java 8. Inspection ID: Java8ListSort",
                  "markdown": "Reports calls of `Collections.sort(list, comparator)` which can be replaced with `list.sort(comparator)`.\n\n`Collections.sort` is just a wrapper, so it is better to use an instance method directly.\n\nThis inspection depends on the Java feature 'Lambda methods in collections', which is available since Java 8.\n\nInspection ID: Java8ListSort"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "Java8ListSort",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level migration aids/Java 8",
                      "index": 94,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ComparatorCombinators",
                "shortDescription": {
                  "text": "'Comparator' combinator can be used"
                },
                "fullDescription": {
                  "text": "Reports 'Comparator' instances defined as lambda expressions that could be expressed using 'Comparator.comparing()' calls. Chained comparisons which can be replaced by 'Comparator.thenComparing()' expression are also reported. Example: 'myList.sort((person1, person2) -> person1.getName().compareTo(person2.getName()));\n\n  myList2.sort((person1, person2) -> {\n      int res = person1.first().compareTo(person2.first());\n      if(res == 0) res = person1.second().compareTo(person2.second());\n      if(res == 0) res = person1.third() - person2.third();\n      return res;\n  });' After the quick-fixes are applied: 'myList.sort(Comparator.comparing(Person::getName));\n\n  myList2.sort(Comparator.comparing(Person::first)\n                         .thenComparing(Person::second)\n                         .thenComparingInt(Person::third));' This inspection depends on the Java feature 'Lambda expressions', which is available since Java 8. Inspection ID: ComparatorCombinators",
                  "markdown": "Reports `Comparator` instances defined as lambda expressions that could be expressed using `Comparator.comparing()` calls. Chained comparisons which can be replaced by `Comparator.thenComparing()` expression are also reported.\n\nExample:\n\n\n      myList.sort((person1, person2) -> person1.getName().compareTo(person2.getName()));\n\n      myList2.sort((person1, person2) -> {\n          int res = person1.first().compareTo(person2.first());\n          if(res == 0) res = person1.second().compareTo(person2.second());\n          if(res == 0) res = person1.third() - person2.third();\n          return res;\n      });\n\nAfter the quick-fixes are applied:\n\n\n      myList.sort(Comparator.comparing(Person::getName));\n\n      myList2.sort(Comparator.comparing(Person::first)\n                             .thenComparing(Person::second)\n                             .thenComparingInt(Person::third));\n\nThis inspection depends on the Java feature 'Lambda expressions', which is available since Java 8.\n\nInspection ID: ComparatorCombinators"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ComparatorCombinators",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level migration aids/Java 8",
                      "index": 94,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AbstractMethodCallInConstructor",
                "shortDescription": {
                  "text": "Abstract method called during object construction"
                },
                "fullDescription": {
                  "text": "Reports calls to 'abstract' methods of the current class during object construction. A method is called during object construction if it is inside a: Constructor Non-static instance initializer Non-static field initializer 'clone()' method 'readObject()' method 'readObjectNoData()' method Such calls may result in subtle bugs, as object initialization may happen before the method call. Example: 'abstract class Parent {\n    abstract void abstractMethod();\n  }\n\n  class Child extends Parent {\n    Child() {\n      abstractMethod();\n    }\n  }' This inspection shares the functionality with the following inspections: Overridable method called during object construction Overridden method called during object construction Only one inspection should be enabled at once to prevent warning duplication. Inspection ID: AbstractMethodCallInConstructor",
                  "markdown": "Reports calls to `abstract` methods of the current class during object construction.\n\nA method is called during object construction if it is inside a:\n\n* Constructor\n* Non-static instance initializer\n* Non-static field initializer\n* `clone()` method\n* `readObject()` method\n* `readObjectNoData()` method\n\nSuch calls may result in subtle bugs, as object initialization may happen before the method call.\n\n**Example:**\n\n\n      abstract class Parent {\n        abstract void abstractMethod();\n      }\n\n      class Child extends Parent {\n        Child() {\n          abstractMethod();\n        }\n      }\n\nThis inspection shares the functionality with the following inspections:\n\n* Overridable method called during object construction\n* Overridden method called during object construction\n\nOnly one inspection should be enabled at once to prevent warning duplication.\n\nInspection ID: AbstractMethodCallInConstructor"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AbstractMethodCallInConstructor",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Initialization",
                      "index": 27,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EqualsReplaceableByObjectsCall",
                "shortDescription": {
                  "text": "'equals()' expression replaceable by 'Objects.equals()' expression"
                },
                "fullDescription": {
                  "text": "Reports expressions that can be replaced with a call to 'java.util.Objects#equals'. Example: 'void f(Object a, Object b) {\n    boolean result = a != null && a.equals(b);\n  }' After the quick-fix is applied: 'void f(Object a, Object b) {\n    boolean result = Objects.equals(a, b);\n  }' Replacing expressions like 'a != null && a.equals(b)' with 'Objects.equals(a, b)' slightly changes the semantics. Use the Highlight expressions like 'a != null && a.equals(b)' option to enable or disable this behavior. This inspection depends on the Java feature 'java.util.Objects API', which is available since Java 7. Inspection ID: EqualsReplaceableByObjectsCall",
                  "markdown": "Reports expressions that can be replaced with a call to `java.util.Objects#equals`.\n\n**Example:**\n\n\n      void f(Object a, Object b) {\n        boolean result = a != null && a.equals(b);\n      }\n\nAfter the quick-fix is applied:\n\n\n      void f(Object a, Object b) {\n        boolean result = Objects.equals(a, b);\n      }\n\n\nReplacing expressions like `a != null && a.equals(b)` with `Objects.equals(a, b)`\nslightly changes the semantics. Use the **Highlight expressions like 'a != null \\&\\& a.equals(b)'** option to enable or disable this behavior.\n\nThis inspection depends on the Java feature 'java.util.Objects API', which is available since Java 7.\n\nInspection ID: EqualsReplaceableByObjectsCall"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "EqualsReplaceableByObjectsCall",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level migration aids/Java 7",
                      "index": 128,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TailRecursion",
                "shortDescription": {
                  "text": "Tail recursion"
                },
                "fullDescription": {
                  "text": "Reports tail recursion, that is, when a method calls itself as its last action before returning. Tail recursion can always be replaced by looping, which will be considerably faster. Some JVMs perform tail-call optimization, while others do not. Thus, tail-recursive solutions may have considerably different performance characteristics on different virtual machines. Example: 'int factorial(int val, int runningVal) {\n    if (val == 1) {\n      return runningVal;\n    } else {\n      return factorial(val - 1, runningVal * val);\n    }\n  }' After the quick-fix is applied: 'int factorial(int val, int runningVal) {\n    while (true) {\n      if (val == 1) {\n        return runningVal;\n      } else {\n        runningVal = runningVal * val;\n        val = val - 1;\n      }\n    }\n  }' Inspection ID: TailRecursion",
                  "markdown": "Reports tail recursion, that is, when a method calls itself as its last action before returning.\n\n\nTail recursion can always be replaced by looping, which will be considerably faster.\nSome JVMs perform tail-call optimization, while others do not. Thus, tail-recursive solutions may have considerably different\nperformance characteristics on different virtual machines.\n\nExample:\n\n\n      int factorial(int val, int runningVal) {\n        if (val == 1) {\n          return runningVal;\n        } else {\n          return factorial(val - 1, runningVal * val);\n        }\n      }\n\nAfter the quick-fix is applied:\n\n\n      int factorial(int val, int runningVal) {\n        while (true) {\n          if (val == 1) {\n            return runningVal;\n          } else {\n            runningVal = runningVal * val;\n            val = val - 1;\n          }\n        }\n      }\n\nInspection ID: TailRecursion"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "TailRecursion",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Performance",
                      "index": 4,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StringEqualsEmptyString",
                "shortDescription": {
                  "text": "'String.equals()' can be replaced with 'String.isEmpty()'"
                },
                "fullDescription": {
                  "text": "Reports 'equals()' being called to compare a 'String' with an empty string. In this case, using '.isEmpty()' is better as it shows you exactly what you're checking. Example: 'void checkString(String s){\n    if (\"\".equals(s)) throw new IllegalArgumentException();\n  }' After the quick-fix is applied: 'void checkString(String s){\n    if (s != null && s.isEmpty()) throw new IllegalArgumentException();\n  }' '\"\".equals(str)' returns false when 'str' is null. For safety, this inspection's quick-fix inserts an explicit null-check when the 'equals()' argument is nullable. Use the option to make the inspection ignore such cases. Inspection ID: StringEqualsEmptyString",
                  "markdown": "Reports `equals()` being called to compare a `String` with an empty string. In this case, using `.isEmpty()` is better as it shows you exactly what you're checking.\n\n**Example:**\n\n\n      void checkString(String s){\n        if (\"\".equals(s)) throw new IllegalArgumentException();\n      }\n\nAfter the quick-fix is applied:\n\n\n      void checkString(String s){\n        if (s != null && s.isEmpty()) throw new IllegalArgumentException();\n      }\n\n\n`\"\".equals(str)` returns false when `str` is null. For safety, this inspection's quick-fix inserts an explicit\nnull-check when\nthe `equals()` argument is nullable. Use the option to make the inspection ignore such cases.\n\nInspection ID: StringEqualsEmptyString"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "StringEqualsEmptyString",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Performance",
                      "index": 4,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PreviewFeature",
                "shortDescription": {
                  "text": "Preview Feature warning"
                },
                "fullDescription": {
                  "text": "Reports usages of Preview Feature APIs, i.e. of a module, package, class, interface, method, constructor, field, or enum constant in the 'java.*' or 'javax.*' namespace annotated with '@PreviewFeature'. A preview feature is a new feature of the Java language, Java Virtual Machine, or Java SE API that is fully specified, fully implemented, and is yet impermanent. The notion of a preview feature is defined in JEP 12. If some piece of code depends on a preview API, it may stop compiling in future JDK versions if the feature is changed or removed. The inspection only reports if the language level of the project or module is Preview. Inspection ID: PreviewFeature New in 2021.1",
                  "markdown": "Reports usages of Preview Feature APIs, i.e. of a module, package, class, interface, method, constructor, field, or enum constant in the `java.*` or `javax.*` namespace annotated with `@PreviewFeature`.\n\n\nA preview feature is a new feature of the Java language, Java Virtual Machine, or Java SE API that is fully specified, fully implemented,\nand is yet impermanent. The notion of a preview feature is defined in [JEP 12](https://openjdk.org/jeps/12).\n\n\nIf some piece of code depends on a preview API, it may stop compiling in future JDK versions if the feature is changed or removed.\n\nThe inspection only reports if the language level of the project or module is **Preview**.\n\nInspection ID: PreviewFeature\n\nNew in 2021.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "preview",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Compiler issues",
                      "index": 129,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TooBroadThrows",
                "shortDescription": {
                  "text": "Overly broad 'throws' clause"
                },
                "fullDescription": {
                  "text": "Reports 'throws' clauses with exceptions that are more generic than the exceptions that the method actually throws. Example: 'public void createFile() throws Exception { // warning: 'throws Exception' is too broad, masking exception 'IOException'\n    File file = new File(\"pathToFile\");\n    file.createNewFile();\n  }' After the quick-fix is applied: 'public void createFile() throws IOException {\n    File file = new File(\"pathToFile\");\n    file.createNewFile();\n  }' Configure the inspection: Use the Maximum number of hidden exceptions to warn field to ignore exceptions, that hide a larger number of other exceptions than specified. Use the Only warn on RuntimeException, Exception, Error or Throwable option to have this inspection warn only on the most generic exceptions. Use the Ignore exceptions declared on methods overriding a library method option to ignore overly broad 'throws' clauses in methods that override a library method. Use the Ignore exceptions which hide others but are themselves thrown option to ignore any exceptions that hide other exceptions but still may be thrown from the method body and thus are technically not overly broad. Inspection ID: TooBroadThrows",
                  "markdown": "Reports `throws` clauses with exceptions that are more generic than the exceptions that the method actually throws.\n\n**Example:**\n\n\n      public void createFile() throws Exception { // warning: 'throws Exception' is too broad, masking exception 'IOException'\n        File file = new File(\"pathToFile\");\n        file.createNewFile();\n      }\n\nAfter the quick-fix is applied:\n\n\n      public void createFile() throws IOException {\n        File file = new File(\"pathToFile\");\n        file.createNewFile();\n      }\n\nConfigure the inspection:\n\n* Use the **Maximum number of hidden exceptions to warn** field to ignore exceptions, that hide a larger number of other exceptions than specified.\n* Use the **Only warn on RuntimeException, Exception, Error or Throwable** option to have this inspection warn only on the most generic exceptions.\n* Use the **Ignore exceptions declared on methods overriding a library method** option to ignore overly broad `throws` clauses in methods that override a library method.\n* Use the **Ignore exceptions which hide others but are themselves thrown** option to ignore any exceptions that hide other exceptions but still may be thrown from the method body and thus are technically not overly broad.\n\nInspection ID: TooBroadThrows"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "OverlyBroadThrowsClause",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Error handling",
                      "index": 10,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ImplicitSubclassInspection",
                "shortDescription": {
                  "text": "Final declaration can't be overridden at runtime"
                },
                "fullDescription": {
                  "text": "Reports cases when your code prevents a class from being subclassed by some framework (for example, Spring or Hibernate) at runtime. Typical examples of necessary but impossible subclassing: 'final' classes marked with framework-specific annotations (for example, Spring '@Configuration') 'final', 'static' or 'private' methods marked with framework-specific annotations (for example, Spring '@Transactional') methods marked with framework-specific annotations inside 'final' classes The list of reported cases depends on the frameworks used. Inspection ID: ImplicitSubclassInspection",
                  "markdown": "Reports cases when your code prevents a class from being subclassed by some framework (for example, Spring or Hibernate) at runtime.\n\nTypical examples of necessary but impossible subclassing:\n\n* `final` classes marked with framework-specific annotations (for example, Spring `@Configuration`)\n* `final`, `static` or `private` methods marked with framework-specific annotations (for example, Spring `@Transactional`)\n* methods marked with framework-specific annotations inside `final` classes\n\nThe list of reported cases depends on the frameworks used.\n\nInspection ID: ImplicitSubclassInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "ImplicitSubclassInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Inheritance issues",
                      "index": 121,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ObjectEqualsCanBeEquality",
                "shortDescription": {
                  "text": "'equals()' call can be replaced with '=='"
                },
                "fullDescription": {
                  "text": "Reports calls to 'equals()' that can be replaced by '==' or '!=' expressions without a change in semantics. These calls can be replaced when they are used to compare 'final' classes that don't have their own 'equals()' implementation but use the default 'Object.equals()'. This replacement may result in better performance. There is a separate inspection for 'equals()' calls on 'enum' values: 'equals()' called on Enum value. Inspection ID: ObjectEqualsCanBeEquality",
                  "markdown": "Reports calls to `equals()` that can be replaced by `==` or `!=` expressions without a change in semantics.\n\nThese calls can be replaced when they are used to compare `final` classes that don't have their own `equals()` implementation but use the default `Object.equals()`.\nThis replacement may result in better performance.\n\nThere is a separate inspection for `equals()` calls on `enum` values: 'equals()' called on Enum value.\n\nInspection ID: ObjectEqualsCanBeEquality"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ObjectEqualsCanBeEquality",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Performance",
                      "index": 4,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JDBCPrepareStatementWithNonConstantString",
                "shortDescription": {
                  "text": "Call to 'Connection.prepare*()' with non-constant string"
                },
                "fullDescription": {
                  "text": "Reports calls to 'java.sql.Connection.prepareStatement()', 'java.sql.Connection.prepareCall()', or any of their variants which take a dynamically-constructed string as the statement to prepare. Constructed SQL statements are a common source of security breaches. By default, this inspection ignores compile-time constants. Example: 'String bar() { return \"bar\"; }\n\n  Connection connection = DriverManager.getConnection(\"\", \"\", \"\");\n  connection.(\"SELECT * FROM user WHERE name='\" + bar() + \"'\");' Use the inspection settings to consider any 'static' 'final' fields as constants. Be careful, because strings like the following will be ignored when the option is enabled: 'static final String SQL = \"SELECT * FROM user WHERE name='\" + getUserInput() + \"'\";' Inspection ID: JDBCPrepareStatementWithNonConstantString",
                  "markdown": "Reports calls to `java.sql.Connection.prepareStatement()`, `java.sql.Connection.prepareCall()`, or any of their variants which take a dynamically-constructed string as the statement to prepare.\n\n\nConstructed SQL statements are a common source of\nsecurity breaches. By default, this inspection ignores compile-time constants.\n\n**Example:**\n\n\n      String bar() { return \"bar\"; }\n\n      Connection connection = DriverManager.getConnection(\"\", \"\", \"\");\n      connection.(\"SELECT * FROM user WHERE name='\" + bar() + \"'\");\n\nUse the inspection settings to consider any `static` `final` fields as constants. Be careful, because strings like the following will be ignored when the option is enabled:\n\n\n      static final String SQL = \"SELECT * FROM user WHERE name='\" + getUserInput() + \"'\";\n\nInspection ID: JDBCPrepareStatementWithNonConstantString"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JDBCPrepareStatementWithNonConstantString",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Security",
                      "index": 31,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SystemProperties",
                "shortDescription": {
                  "text": "Access of system properties"
                },
                "fullDescription": {
                  "text": "Reports code that accesses system properties using one of the following methods: 'System.getProperties()', 'System.setProperty()', 'System.setProperties()', 'System.clearProperties()' 'Integer.getInteger()' 'Boolean.getBoolean()' While accessing the system properties is not a security risk in itself, it is often found in malicious code. Code that accesses system properties should be closely examined in any security audit. Inspection ID: SystemProperties",
                  "markdown": "Reports code that accesses system properties using one of the following methods:\n\n* `System.getProperties()`, `System.setProperty()`, `System.setProperties()`, `System.clearProperties()`\n* `Integer.getInteger()`\n* `Boolean.getBoolean()`\n\n\nWhile accessing the system properties is not a security risk in itself, it is often found in malicious code.\nCode that accesses system properties should be closely examined in any security audit.\n\nInspection ID: SystemProperties"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AccessOfSystemProperties",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Security",
                      "index": 31,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InvalidComparatorMethodReference",
                "shortDescription": {
                  "text": "Invalid method reference used for 'Comparator'"
                },
                "fullDescription": {
                  "text": "Reports method references mapped to the 'Comparator' interface that don't fulfill its contract. Some method references, like 'Integer::max', can be mapped to the 'Comparator' interface. However, using them as 'Comparator' is meaningless and the result might be unpredictable. Example: 'ArrayList<Integer> ints = foo();\n  ints.sort(Math::min);' After the quick-fix is applied: 'ArrayList<Integer> ints = foo();\n  ints.sort(Comparator.reverseOrder());' Inspection ID: InvalidComparatorMethodReference",
                  "markdown": "Reports method references mapped to the `Comparator` interface that don't fulfill its contract.\n\n\nSome method references, like `Integer::max`, can be mapped to the `Comparator` interface.\nHowever, using them as `Comparator` is meaningless and the result might be unpredictable.\n\nExample:\n\n\n      ArrayList<Integer> ints = foo();\n      ints.sort(Math::min);\n\nAfter the quick-fix is applied:\n\n\n      ArrayList<Integer> ints = foo();\n      ints.sort(Comparator.reverseOrder());\n\nInspection ID: InvalidComparatorMethodReference"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "InvalidComparatorMethodReference",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ToArrayCallWithZeroLengthArrayArgument",
                "shortDescription": {
                  "text": "'Collection.toArray()' call style"
                },
                "fullDescription": {
                  "text": "Reports 'Collection.toArray()' calls that are not in the preferred style, and suggests applying the preferred style. There are two styles to convert a collection to an array: A pre-sized array, for example, 'c.toArray(new String[c.size()])' An empty array, for example, 'c.toArray(new String[0])' In older Java versions, using a pre-sized array was recommended, as the reflection call necessary to create an array of proper size was quite slow. However, since late updates of OpenJDK 6, this call was intrinsified, making the performance of the empty array version the same, and sometimes even better, compared to the pre-sized version. Also, passing a pre-sized array is dangerous for a concurrent or synchronized collection as a data race is possible between the 'size' and 'toArray' calls. This may result in extra 'null's at the end of the array if the collection was concurrently shrunk during the operation. Use the inspection options to select the preferred style. Inspection ID: ToArrayCallWithZeroLengthArrayArgument",
                  "markdown": "Reports `Collection.toArray()` calls that are not in the preferred style, and suggests applying the preferred style.\n\nThere are two styles to convert a collection to an array:\n\n* A pre-sized array, for example, `c.toArray(new String[c.size()])`\n* An empty array, for example, `c.toArray(new String[0])`\n\nIn older Java versions, using a pre-sized array was recommended, as the reflection\ncall necessary to create an array of proper size was quite slow.\n\nHowever, since late updates of OpenJDK 6, this call was intrinsified, making\nthe performance of the empty array version the same, and sometimes even better, compared\nto the pre-sized version. Also, passing a pre-sized array is dangerous for a concurrent or\nsynchronized collection as a data race is possible between the `size` and `toArray`\ncalls. This may result in extra `null`s at the end of the array if the collection was concurrently\nshrunk during the operation.\n\nUse the inspection options to select the preferred style.\n\nInspection ID: ToArrayCallWithZeroLengthArrayArgument"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ToArrayCallWithZeroLengthArrayArgument",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Performance",
                      "index": 4,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Java9ModuleExportsPackageToItself",
                "shortDescription": {
                  "text": "Module exports/opens package to itself"
                },
                "fullDescription": {
                  "text": "Reports packages that are exported to, or opened in the same Java 9 module in which they are defined. The quick-fix removes such directives from 'module-info.java'. Example: 'module com.mycomp {\n    exports com.mycomp.main to com.mycomp;\n  }' After the quick-fix is applied: 'module main {\n  }' This inspection depends on the Java feature 'Modules', which is available since Java 9. Inspection ID: Java9ModuleExportsPackageToItself",
                  "markdown": "Reports packages that are exported to, or opened in the same Java 9 module in which they are defined. The quick-fix removes such directives from `module-info.java`.\n\nExample:\n\n\n      module com.mycomp {\n        exports com.mycomp.main to com.mycomp;\n      }\n\nAfter the quick-fix is applied:\n\n\n      module main {\n      }\n\nThis inspection depends on the Java feature 'Modules', which is available since Java 9.\n\nInspection ID: Java9ModuleExportsPackageToItself"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "Java9ModuleExportsPackageToItself",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Visibility",
                      "index": 73,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LoggerInitializedWithForeignClass",
                "shortDescription": {
                  "text": "Logger initialized with foreign class"
                },
                "fullDescription": {
                  "text": "Reports 'Logger' instances that are initialized with a 'class' literal from a different class than the 'Logger' is contained in. This can easily happen when copy-pasting some code from another class and may result in logging events under an unexpected category and cause filters to be applied incorrectly. A quick-fix is provided to replace the foreign class literal with one from the surrounding class. Example: 'public class Paramount {\n    protected static final Logger LOG = Logger.getLogger(Critical.class);\n\n    // ... other fields and methods\n  }' After the quick-fix is applied: 'public class Paramount {\n    protected static final Logger LOG = Logger.getLogger(Paramount.class);\n\n    // ... other fields and methods\n  }' Configure the inspection: Use the table to specify the logger factory classes and logger factory methods recognized by this inspection. Use the Ignore loggers initialized with a superclass option to ignore loggers that are initialized with a superclass of the class containing the logger. Use the Ignore loggers in non-public classes to only warn on loggers in 'public' classes. Use the Ignore loggers not initialized in a final field to only report loggers initialized in a final field, other cases will be ignored. Inspection ID: LoggerInitializedWithForeignClass",
                  "markdown": "Reports `Logger` instances that are initialized with a `class` literal from a different class than the `Logger` is contained in. This can easily happen when copy-pasting some code from another class and may result in logging events under an unexpected category and cause filters to be applied incorrectly.\n\nA quick-fix is provided to replace the foreign class literal with one from the surrounding class.\n\n**Example:**\n\n\n      public class Paramount {\n        protected static final Logger LOG = Logger.getLogger(Critical.class);\n\n        // ... other fields and methods\n      }\n\nAfter the quick-fix is applied:\n\n\n      public class Paramount {\n        protected static final Logger LOG = Logger.getLogger(Paramount.class);\n\n        // ... other fields and methods\n      }\n\n\nConfigure the inspection:\n\n* Use the table to specify the logger factory classes and logger factory methods recognized by this inspection.\n* Use the **Ignore loggers initialized with a superclass** option to ignore loggers that are initialized with a superclass of the class containing the logger.\n* Use the **Ignore loggers in non-public classes** to only warn on loggers in `public` classes.\n* Use the **Ignore loggers not initialized in a final field** to only report loggers initialized in a final field, other cases will be ignored.\n\nInspection ID: LoggerInitializedWithForeignClass"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "LoggerInitializedWithForeignClass",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Logging",
                      "index": 91,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MarkerInterface",
                "shortDescription": {
                  "text": "Marker interface"
                },
                "fullDescription": {
                  "text": "Reports marker interfaces without any methods or fields. Such interfaces may be confusing and typically indicate a design failure. The inspection ignores interfaces that extend two or more interfaces and interfaces that specify the generic type of their superinterface. Inspection ID: MarkerInterface",
                  "markdown": "Reports marker interfaces without any methods or fields.\n\nSuch interfaces may be confusing and typically indicate a design failure.\n\nThe inspection ignores interfaces that extend two or more interfaces and interfaces\nthat specify the generic type of their superinterface.\n\nInspection ID: MarkerInterface"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MarkerInterface",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Class structure",
                      "index": 17,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SortedCollectionWithNonComparableKeys",
                "shortDescription": {
                  "text": "Sorted collection with non-comparable elements"
                },
                "fullDescription": {
                  "text": "Reports construction of sorted collections, for example 'TreeSet', that rely on natural ordering, whose element type doesn't implement the 'Comparable' interface. It's unlikely that such a collection will work properly. A false positive is possible if the collection element type is a non-comparable super-type, but the collection is intended to only hold comparable sub-types. Even if this is the case, it's better to narrow the collection element type or declare the super-type as 'Comparable' because the mentioned approach is error-prone. The inspection also reports cases when the collection element is a type parameter which is not declared as 'extends Comparable'. You can suppress the warnings on type parameters using the provided option (for example, to keep the API compatibility). New in 2018.3 Inspection ID: SortedCollectionWithNonComparableKeys",
                  "markdown": "Reports construction of sorted collections, for example `TreeSet`, that rely on natural ordering, whose element type doesn't implement the `Comparable` interface.\n\nIt's unlikely that such a collection will work properly.\n\n\nA false positive is possible if the collection element type is a non-comparable super-type,\nbut the collection is intended to only hold comparable sub-types. Even if this is the case,\nit's better to narrow the collection element type or declare the super-type as `Comparable` because the mentioned approach is error-prone.\n\n\nThe inspection also reports cases when the collection element is a type parameter which is not declared as `extends Comparable`.\nYou can suppress the warnings on type parameters using the provided option (for example, to keep the API compatibility).\n\n\nNew in 2018.3\n\nInspection ID: SortedCollectionWithNonComparableKeys"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SortedCollectionWithNonComparableKeys",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CommentedOutCode",
                "shortDescription": {
                  "text": "Commented out code"
                },
                "fullDescription": {
                  "text": "Reports comments that contain Java code. Usually, code that is commented out gets outdated very quickly and becomes misleading. As most projects use some kind of version control system, it is better to delete commented out code completely and use the VCS history instead. New in 2020.3 Inspection ID: CommentedOutCode",
                  "markdown": "Reports comments that contain Java code.\n\nUsually, code that is commented out gets outdated very quickly and becomes misleading.\nAs most projects use some kind of version control system,\nit is better to delete commented out code completely and use the VCS history instead.\n\nNew in 2020.3\n\nInspection ID: CommentedOutCode"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "CommentedOutCode",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code maturity",
                      "index": 46,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ClassWithoutLogger",
                "shortDescription": {
                  "text": "Class without logger"
                },
                "fullDescription": {
                  "text": "Reports classes which do not have a declared logger. Ensuring that every class has a dedicated logger is an important step in providing a unified logging implementation for an application. Interfaces, enumerations, annotations, inner classes, and abstract classes are not reported by this inspection. For example: 'public class NoLoggerDeclared {\n\n    int calculateNthDigitOfPi(int n) {\n      // todo\n      return 1;\n    }\n  }' Use the table in the Options section to specify logger class names. Classes which do not declare a field with the type of one of the specified classes will be reported by this inspection. Inspection ID: ClassWithoutLogger",
                  "markdown": "Reports classes which do not have a declared logger.\n\nEnsuring that every class has a dedicated logger is an important step in providing a unified logging\nimplementation for an application. Interfaces, enumerations, annotations, inner classes, and abstract classes are not reported by this inspection.\n\nFor example:\n\n\n      public class NoLoggerDeclared {\n\n        int calculateNthDigitOfPi(int n) {\n          // todo\n          return 1;\n        }\n      }\n\n\nUse the table in the **Options** section to specify logger class names.\nClasses which do not declare a field with the type of one of the specified classes will be reported by this inspection.\n\nInspection ID: ClassWithoutLogger"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ClassWithoutLogger",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Logging",
                      "index": 91,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReturnOfInnerClass",
                "shortDescription": {
                  "text": "Return of instance of anonymous, local or inner class"
                },
                "fullDescription": {
                  "text": "Reports 'return' statements that return an instance of an anonymous, local, or inner class. Such instances keep an implicit reference to the outer instance, which can prevent the outer instance from being garbage-collected. Any caller of a method returning such an instance might cause a memory leak by holding on to the instance returned. Configure the inspection: Use the Ignore returns from non-public methods option to ignore returns from 'protected' or package-private methods. Returns from 'private' methods are always ignored. Inspection ID: ReturnOfInnerClass",
                  "markdown": "Reports `return` statements that return an instance of an anonymous, local, or inner class. Such instances keep an implicit reference to the outer instance, which can prevent the outer instance from being garbage-collected. Any caller of a method returning such an instance might cause a memory leak by holding on to the instance returned.\n\n\nConfigure the inspection:\n\n* Use the **Ignore returns from non-public methods** option to ignore returns from `protected` or package-private methods. Returns from `private` methods are always ignored.\n\nInspection ID: ReturnOfInnerClass"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ReturnOfInnerClass",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Memory",
                      "index": 132,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AnonymousClassComplexity",
                "shortDescription": {
                  "text": "Overly complex anonymous class"
                },
                "fullDescription": {
                  "text": "Reports anonymous inner classes whose total complexity exceeds the specified maximum. The total complexity of a class is the sum of cyclomatic complexities of all the methods and initializers the class declares. Inherited methods and initializers are not counted toward the total complexity. Anonymous classes should have very low complexity otherwise they are hard to understand and should be promoted to become named inner classes. Use the Cyclomatic complexity limit field to specify the maximum allowed complexity for a class. Inspection ID: AnonymousClassComplexity",
                  "markdown": "Reports anonymous inner classes whose total complexity exceeds the specified maximum.\n\nThe total complexity of a class is the sum of cyclomatic complexities of all the methods\nand initializers the class declares. Inherited methods and initializers are not counted\ntoward the total complexity.\n\nAnonymous classes should have very low complexity otherwise they are hard to understand and should be promoted to become named inner classes.\n\nUse the **Cyclomatic complexity limit** field to specify the maximum allowed complexity for a class.\n\nInspection ID: AnonymousClassComplexity"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "OverlyComplexAnonymousInnerClass",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Class metrics",
                      "index": 96,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "WaitWithoutCorrespondingNotify",
                "shortDescription": {
                  "text": "'wait()' without corresponding 'notify()'"
                },
                "fullDescription": {
                  "text": "Reports calls to 'Object.wait()', for which no call to the corresponding 'Object.notify()' or 'Object.notifyAll()' can be found. This inspection only reports calls with qualifiers referencing fields of the current class. Example: 'public class Foo {\n    public Object foo = new Object();\n\n    void bar() throws InterruptedException {\n      this.foo.wait();\n    }\n  }' Inspection ID: WaitWithoutCorrespondingNotify",
                  "markdown": "Reports calls to `Object.wait()`, for which no call to the corresponding `Object.notify()` or `Object.notifyAll()` can be found.\n\nThis inspection only reports calls with qualifiers referencing fields of the current class.\n\n**Example:**\n\n\n      public class Foo {\n        public Object foo = new Object();\n\n        void bar() throws InterruptedException {\n          this.foo.wait();\n        }\n      }\n\nInspection ID: WaitWithoutCorrespondingNotify"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "WaitWithoutCorrespondingNotify",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Threading issues",
                      "index": 23,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseOfAWTPeerClass",
                "shortDescription": {
                  "text": "Use of AWT peer class"
                },
                "fullDescription": {
                  "text": "Reports uses of AWT peer classes. Such classes represent native windowing system widgets, and will be non-portable between different windowing systems. Example: 'import java.awt.peer.ButtonPeer;\n\n  abstract class Sample implements ButtonPeer {\n    public void foo() {\n        Sample sample;\n    }\n  }' Inspection ID: UseOfAWTPeerClass",
                  "markdown": "Reports uses of AWT peer classes. Such classes represent native windowing system widgets, and will be non-portable between different windowing systems.\n\n**Example:**\n\n\n      import java.awt.peer.ButtonPeer;\n\n      abstract class Sample implements ButtonPeer {\n        public void foo() {\n            Sample sample;\n        }\n      }\n\nInspection ID: UseOfAWTPeerClass"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UseOfAWTPeerClass",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Portability",
                      "index": 69,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantExplicitVariableType",
                "shortDescription": {
                  "text": "Local variable type can be omitted"
                },
                "fullDescription": {
                  "text": "Reports redundant local variable types. These types can be inferred from the context and thus replaced with 'var'. Example: 'void test(InputStream s) {\n    try (InputStream in = s) {}\n  }' After the fix is applied: 'void test(InputStream s) {\n    try (var in = s) {}\n  }' This inspection depends on the Java feature 'Local variable type inference', which is available since Java 10. Inspection ID: RedundantExplicitVariableType",
                  "markdown": "Reports redundant local variable types.\n\nThese types can be inferred from the context and thus replaced with `var`.\n\n**Example:**\n\n\n      void test(InputStream s) {\n        try (InputStream in = s) {}\n      }\n\nAfter the fix is applied:\n\n\n      void test(InputStream s) {\n        try (var in = s) {}\n      }\n\n\nThis inspection depends on the Java feature 'Local variable type inference', which is available since Java 10.\n\nInspection ID: RedundantExplicitVariableType"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "RedundantExplicitVariableType",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level migration aids/Java 10",
                      "index": 126,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SerializableWithUnconstructableAncestor",
                "shortDescription": {
                  "text": "Serializable class with unconstructable ancestor"
                },
                "fullDescription": {
                  "text": "Reports 'Serializable' classes whose closest non-serializable ancestor doesn't have a no-argument constructor. Such classes cannot be deserialized and will fail with an 'InvalidClassException'. Example: 'class Ancestor {\n    private String name;\n    Ancestor(String name) {\n      this.name = name;\n    }\n  }\n\n  // warning on this class because the superclass is not\n  // serializable, and its constructor takes arguments\n  class Descendant extends Ancestor implements Serializable {\n    Descendant() {\n      super(\"Bob\");\n    }\n  }' Inspection ID: SerializableWithUnconstructableAncestor",
                  "markdown": "Reports `Serializable` classes whose closest non-serializable ancestor doesn't have a no-argument constructor. Such classes cannot be deserialized and will fail with an `InvalidClassException`.\n\n**Example:**\n\n\n      class Ancestor {\n        private String name;\n        Ancestor(String name) {\n          this.name = name;\n        }\n      }\n\n      // warning on this class because the superclass is not\n      // serializable, and its constructor takes arguments\n      class Descendant extends Ancestor implements Serializable {\n        Descendant() {\n          super(\"Bob\");\n        }\n      }\n\nInspection ID: SerializableWithUnconstructableAncestor"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SerializableClassWithUnconstructableAncestor",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Serialization issues",
                      "index": 18,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ExcessiveLambdaUsage",
                "shortDescription": {
                  "text": "Excessive lambda usage"
                },
                "fullDescription": {
                  "text": "Reports if a trivial lambda expression is used in cases in which there's an alternative method that behaves in the same way, but accepts a concrete value instead of a lambda. This inspection helps simplify the code. Example: 'Optional.orElseGet(() -> null)' After the quick-fix is applied: 'Optional.orElse(null)' This inspection depends on the Java feature 'Lambda expressions', which is available since Java 8. Inspection ID: ExcessiveLambdaUsage New in 2017.1",
                  "markdown": "Reports if a trivial lambda expression is used in cases in which there's an alternative method that behaves in the same way, but accepts a concrete value instead of a lambda.\n\nThis inspection helps simplify the code.\n\nExample:\n\n\n      Optional.orElseGet(() -> null)\n\nAfter the quick-fix is applied:\n\n\n      Optional.orElse(null)\n\nThis inspection depends on the Java feature 'Lambda expressions', which is available since Java 8.\n\nInspection ID: ExcessiveLambdaUsage\n\nNew in 2017.1"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ExcessiveLambdaUsage",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Verbose or redundant code constructs",
                      "index": 37,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LambdaBodyCanBeCodeBlock",
                "shortDescription": {
                  "text": "Lambda body can be code block"
                },
                "fullDescription": {
                  "text": "Reports lambdas whose body is an expression and suggests converting expression bodies to code blocks. Example: 'n -> n + 1' After the quick-fix is applied: 'n -> {\n  return n + 1;\n}' This inspection depends on the Java feature 'Lambda expressions', which is available since Java 8. Inspection ID: LambdaBodyCanBeCodeBlock",
                  "markdown": "Reports lambdas whose body is an expression and suggests converting expression bodies to code blocks.\n\nExample:\n\n\n      n -> n + 1\n\nAfter the quick-fix is applied:\n\n    n -> {\n      return n + 1;\n    }\n\nThis inspection depends on the Java feature 'Lambda expressions', which is available since Java 8.\n\nInspection ID: LambdaBodyCanBeCodeBlock"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "LambdaBodyCanBeCodeBlock",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ParameterHidingMemberVariable",
                "shortDescription": {
                  "text": "Parameter hides field"
                },
                "fullDescription": {
                  "text": "Reports method parameters named identically to a field of a surrounding class. As a result of such naming, you may accidentally use the parameter when using the identically named field is intended. A quick-fix is suggested to rename the parameter. Example: 'class Main {\n    private String value;\n\n    public Main(String value) {\n      value = value.toUpperCase();\n    }\n  }' You can configure the following options for this inspection: Ignore for property setters - ignore parameters of simple setters. Ignore superclass fields not visible from subclass - ignore 'private' fields in a superclass, which are not visible from the method. Ignore for constructors - ignore parameters of constructors. Ignore for abstract methods - ignore parameters of abstract methods. Ignore for static method parameters hiding instance fields - ignore parameters of 'static' methods hiding an instance field and to ignore parameters of instance methods in static inner classes hiding an instance field of an outer class. While not strictly hiding, such parameters can still be confusing. Inspection ID: ParameterHidingMemberVariable",
                  "markdown": "Reports method parameters named identically to a field of a surrounding class. As a result of such naming, you may accidentally use the parameter when using the identically named field is intended.\n\nA quick-fix is suggested to rename the parameter.\n\n**Example:**\n\n\n      class Main {\n        private String value;\n\n        public Main(String value) {\n          value = value.toUpperCase();\n        }\n      }\n      \n\nYou can configure the following options for this inspection:\n\n1. **Ignore for property setters** - ignore parameters of simple setters.\n2. **Ignore superclass fields not visible from subclass** - ignore `private` fields in a superclass, which are not visible from the method.\n3. **Ignore for constructors** - ignore parameters of constructors.\n4. **Ignore for abstract methods** - ignore parameters of abstract methods.\n5. **Ignore for static method parameters hiding instance fields** - ignore parameters of `static` methods hiding an instance field and to ignore parameters of instance methods in static inner classes hiding an instance field of an outer class. While not strictly hiding, such parameters can still be confusing.\n\nInspection ID: ParameterHidingMemberVariable"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ParameterHidesMemberVariable",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Visibility",
                      "index": 73,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CustomSecurityManager",
                "shortDescription": {
                  "text": "Custom 'SecurityManager'"
                },
                "fullDescription": {
                  "text": "Reports user-defined subclasses of 'java.lang.SecurityManager'. While not necessarily representing a security hole, such classes should be thoroughly and professionally inspected for possible security issues. Example: 'class CustomSecurityManager extends SecurityManager {\n  }' Inspection ID: CustomSecurityManager",
                  "markdown": "Reports user-defined subclasses of `java.lang.SecurityManager`.\n\n\nWhile not necessarily representing a security hole, such classes should be thoroughly\nand professionally inspected for possible security issues.\n\n**Example:**\n\n\n      class CustomSecurityManager extends SecurityManager {\n      }\n\nInspection ID: CustomSecurityManager"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CustomSecurityManager",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Security",
                      "index": 31,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TimeToString",
                "shortDescription": {
                  "text": "Call to 'Time.toString()'"
                },
                "fullDescription": {
                  "text": "Reports 'toString()' calls on 'java.sql.Time' objects. Such calls are usually incorrect in an internationalized environment. Inspection ID: TimeToString",
                  "markdown": "Reports `toString()` calls on `java.sql.Time` objects. Such calls are usually incorrect in an internationalized environment.\n\nInspection ID: TimeToString"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CallToTimeToString",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Internationalization",
                      "index": 3,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ObjectEquality",
                "shortDescription": {
                  "text": "Object comparison using '==', instead of 'equals()'"
                },
                "fullDescription": {
                  "text": "Reports code that uses '==' or '!=' rather than 'equals()' to test for object equality. Comparing objects using '==' or '!=' is often a bug, because it compares objects by identity instead of equality. Comparisons to 'null' are not reported. Array, 'String' and 'Number' comparisons are reported by separate inspections. Example: 'if (list1 == list2) {\n    return;\n  }' After the quick-fix is applied: 'if (Objects.equals(list1, list2)) {\n    return;\n  }' Use the inspection settings to configure exceptions for this inspection. Inspection ID: ObjectEquality",
                  "markdown": "Reports code that uses `==` or `!=` rather than `equals()` to test for object equality.\n\n\nComparing objects using `==` or `!=` is often a bug,\nbecause it compares objects by identity instead of equality.\nComparisons to `null` are not reported.\n\n\nArray, `String` and `Number` comparisons are reported by separate inspections.\n\n**Example:**\n\n      if (list1 == list2) {\n        return;\n      }\n\nAfter the quick-fix is applied:\n\n      if (Objects.equals(list1, list2)) {\n        return;\n      }\n\nUse the inspection settings to configure exceptions for this inspection.\n\nInspection ID: ObjectEquality"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ObjectEquality",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PatternVariablesCanBeReplacedWithCast",
                "shortDescription": {
                  "text": "Using 'instanceof' with patterns"
                },
                "fullDescription": {
                  "text": "Reports 'instanceof' with patterns and suggests converting them to ordinary 'instanceof' with casts. This inspection makes it possible to move 'instanceof' with patterns to a codebase using an earlier Java version by applying the quick-fix. Note that the result can be not completely equivalent to the original 'instanceof' with patterns when a complex expression before 'instanceof' is used. In this case this expression will be reevaluated. Example: 'if (object instanceof String txt && txt.length() == 1) {\n      System.out.println(txt);\n  } else {\n      return;\n  }\n  System.out.println(txt);' After the quick-fix is applied: 'if (object instanceof String && ((String) object).length() ==1) {\n      String txt = (String) object;\n      System.out.println(txt);\n  } else {\n      return;\n  }\n  String txt = (String) object;\n  System.out.println(txt);' Inspection ID: PatternVariablesCanBeReplacedWithCast New in 2023.1",
                  "markdown": "Reports `instanceof` with patterns and suggests converting them to ordinary `instanceof` with casts.\n\nThis inspection makes it possible to move `instanceof` with patterns to a codebase using an earlier Java version\nby applying the quick-fix.\n\n\nNote that the result can be not completely equivalent to the original `instanceof` with patterns when\na complex expression before `instanceof` is used. In this case this expression will be reevaluated.\n\nExample:\n\n\n      if (object instanceof String txt && txt.length() == 1) {\n          System.out.println(txt);\n      } else {\n          return;\n      }\n      System.out.println(txt);\n\nAfter the quick-fix is applied:\n\n\n      if (object instanceof String && ((String) object).length() ==1) {\n          String txt = (String) object;\n          System.out.println(txt);\n      } else {\n          return;\n      }\n      String txt = (String) object;\n      System.out.println(txt);\n\nInspection ID: PatternVariablesCanBeReplacedWithCast\n\nNew in 2023.1"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "PatternVariablesCanBeReplacedWithCast",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ManualArrayToCollectionCopy",
                "shortDescription": {
                  "text": "Manual array to collection copy"
                },
                "fullDescription": {
                  "text": "Reports code that uses a loop to copy the contents of an array into a collection. A shorter and potentially faster (depending on the collection implementation) way to do this is using 'Collection.addAll(Arrays.asList())' or 'Collections.addAll()'. Only loops without additional statements inside are reported. Example: 'void addAll(List<String> list, String[] arr) {\n    for (int i = 0; i < arr.length; i++) {\n      String s = arr[i];\n      list.add(s);\n    }\n  }' After the quick-fix is applied: 'void addAll(List<String> list, String[] arr) {\n    Collections.addAll(list, arr);\n  }' Inspection ID: ManualArrayToCollectionCopy",
                  "markdown": "Reports code that uses a loop to copy the contents of an array into a collection.\n\n\nA shorter and potentially faster (depending on the collection implementation) way to do this is using `Collection.addAll(Arrays.asList())` or `Collections.addAll()`.\n\n\nOnly loops without additional statements inside are reported.\n\n**Example:**\n\n\n      void addAll(List<String> list, String[] arr) {\n        for (int i = 0; i < arr.length; i++) {\n          String s = arr[i];\n          list.add(s);\n        }\n      }\n\nAfter the quick-fix is applied:\n\n\n      void addAll(List<String> list, String[] arr) {\n        Collections.addAll(list, arr);\n      }\n\n\nInspection ID: ManualArrayToCollectionCopy"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ManualArrayToCollectionCopy",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Performance",
                      "index": 4,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SwitchLabeledRuleCanBeCodeBlock",
                "shortDescription": {
                  "text": "Labeled switch rule can have code block"
                },
                "fullDescription": {
                  "text": "Reports rules of 'switch' expressions or enhanced 'switch' statements with an expression body. These can be converted to code blocks. Example: 'String message = switch (errorCode) {\n    case 404 -> \"Not found!\";\n    ...\n  };' After the quick-fix is applied: 'String message = switch (errorCode) {\n    case 404 -> {\n                yield \"Not found!\";\n            }\n    ...\n  };' This inspection depends on the Java feature 'Enhanced 'switch' blocks', which is available since Java 14. Inspection ID: SwitchLabeledRuleCanBeCodeBlock New in 2019.1",
                  "markdown": "Reports rules of `switch` expressions or enhanced `switch` statements with an expression body. These can be converted to code blocks.\n\nExample:\n\n\n      String message = switch (errorCode) {\n        case 404 -> \"Not found!\";\n        ...\n      };\n\nAfter the quick-fix is applied:\n\n\n      String message = switch (errorCode) {\n        case 404 -> {\n                    yield \"Not found!\";\n                }\n        ...\n      };\n\nThis inspection depends on the Java feature 'Enhanced 'switch' blocks', which is available since Java 14.\n\nInspection ID: SwitchLabeledRuleCanBeCodeBlock\n\nNew in 2019.1"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "SwitchLabeledRuleCanBeCodeBlock",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JavaReflectionMemberAccess",
                "shortDescription": {
                  "text": "Reflective access to non-existent or not visible class member"
                },
                "fullDescription": {
                  "text": "Reports reflective access to fields and methods that don't exist or aren't visible. Example: 'Field stringHashField() throws NoSuchFieldException {\n    return String.class.getField(\"hash\");\n  }' After the quick-fix is applied: 'Field stringHashField() throws NoSuchFieldException {\n    return String.class.getDeclaredField(\"hash\");\n  }' With a 'final' class, it's clear if there is a field or method with the specified name in the class. With non-'final' classes, it's possible that a subclass has a field or method with that name, so there could be false positives. Use the inspection's settings to get rid of such false positives everywhere or with specific classes. Inspection ID: JavaReflectionMemberAccess New in 2017.2",
                  "markdown": "Reports reflective access to fields and methods that don't exist or aren't visible.\n\nExample:\n\n\n      Field stringHashField() throws NoSuchFieldException {\n        return String.class.getField(\"hash\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      Field stringHashField() throws NoSuchFieldException {\n        return String.class.getDeclaredField(\"hash\");\n      }\n\n\nWith a `final` class, it's clear if there is a field or method with the specified name in the class.\n\n\nWith non-`final` classes, it's possible that a subclass has a field or method with that name, so there could be false positives.\nUse the inspection's settings to get rid of such false positives everywhere or with specific classes.\n\nInspection ID: JavaReflectionMemberAccess\n\nNew in 2017.2"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JavaReflectionMemberAccess",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Reflective access",
                      "index": 103,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ObviousNullCheck",
                "shortDescription": {
                  "text": "Null-check method is called with obviously non-null argument"
                },
                "fullDescription": {
                  "text": "Reports if a null-checking method (for example, 'Objects.requireNonNull' or 'Assert.assertNotNull') is called on a value that is obviously non-null (for example, a newly created object). Such a check is redundant and may indicate a programming error. Example: 'final String greeting = Objects.requireNonNull(\"Hi!\");' After the quick-fix is applied: 'final String greeting = \"Hi!\";' New in 2017.2 Inspection ID: ObviousNullCheck",
                  "markdown": "Reports if a null-checking method (for example, `Objects.requireNonNull` or `Assert.assertNotNull`) is called on a value that is obviously non-null (for example, a newly created object). Such a check is redundant and may indicate a programming error.\n\n**Example:**\n\n\n      final String greeting = Objects.requireNonNull(\"Hi!\");\n\nAfter the quick-fix is applied:\n\n\n      final String greeting = \"Hi!\";\n\nNew in 2017.2\n\nInspection ID: ObviousNullCheck"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ObviousNullCheck",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Verbose or redundant code constructs",
                      "index": 37,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SerialVersionUIDNotStaticFinal",
                "shortDescription": {
                  "text": "'serialVersionUID' field not declared 'private static final long'"
                },
                "fullDescription": {
                  "text": "Reports 'Serializable' classes whose 'serialVersionUID' field is not declared 'private static final long'. Example: 'class SampleClass implements Serializable {\n    private long serialVersionUID = 1; // field of a Serializable class is not declared 'private static final long'\n\n    public SampleClass() {\n        System.out.println(serialVersionUID);\n    }\n  }' Inspection ID: SerialVersionUIDNotStaticFinal",
                  "markdown": "Reports `Serializable` classes whose `serialVersionUID` field is not declared `private static final long`.\n\n**Example:**\n\n\n      class SampleClass implements Serializable {\n        private long serialVersionUID = 1; // field of a Serializable class is not declared 'private static final long'\n\n        public SampleClass() {\n            System.out.println(serialVersionUID);\n        }\n      }\n\nInspection ID: SerialVersionUIDNotStaticFinal"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SerialVersionUIDWithWrongSignature",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Serialization issues",
                      "index": 18,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InnerClassOnInterface",
                "shortDescription": {
                  "text": "Inner class of interface"
                },
                "fullDescription": {
                  "text": "Reports inner classes in 'interface' classes. Some coding standards discourage the use of such classes. The inspection doesn't report enum classes and annotation interfaces. Use the Ignore inner interfaces of interfaces option to ignore inner interfaces. For example: 'interface I {\n    interface Inner {\n    }\n  }' Inspection ID: InnerClassOnInterface",
                  "markdown": "Reports inner classes in `interface` classes.\n\nSome coding standards\ndiscourage the use of such classes. The inspection doesn't report enum classes and annotation interfaces.\n\n\nUse the **Ignore inner interfaces of interfaces** option to ignore inner interfaces. For example:\n\n\n      interface I {\n        interface Inner {\n        }\n      }\n\nInspection ID: InnerClassOnInterface"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "InnerClassOfInterface",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Class structure",
                      "index": 17,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedLabel",
                "shortDescription": {
                  "text": "Unused label"
                },
                "fullDescription": {
                  "text": "Reports labels that are not targets of any 'break' or 'continue' statements. Example: 'label: for (int i = 0; i < 10; i++) {\n    if (i == 3) {\n      break;\n    }\n  }' After the quick-fix is applied, the label is removed: 'for (int i = 0; i < 10; i++) {\n    if (i == 3) {\n      break;\n    }\n  }' Inspection ID: UnusedLabel",
                  "markdown": "Reports labels that are not targets of any `break` or `continue` statements.\n\n**Example:**\n\n\n      label: for (int i = 0; i < 10; i++) {\n        if (i == 3) {\n          break;\n        }\n      }\n\nAfter the quick-fix is applied, the label is removed:\n\n\n      for (int i = 0; i < 10; i++) {\n        if (i == 3) {\n          break;\n        }\n      }\n\nInspection ID: UnusedLabel"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnusedLabel",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Declaration redundancy",
                      "index": 9,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PublicFieldAccessedInSynchronizedContext",
                "shortDescription": {
                  "text": "Non-private field accessed in 'synchronized' context"
                },
                "fullDescription": {
                  "text": "Reports non-'final', non-'private' fields that are accessed in a synchronized context. A non-'private' field cannot be guaranteed to always be accessed in a synchronized manner, and such \"partially synchronized\" access may result in unexpectedly inconsistent data structures. Example: 'class Bar {\n    public String field1;\n  }\n  public Bar myBar;\n\n  synchronized public void sample() {\n   myBar.field1 = \"bar\";\n  }' Inspection ID: PublicFieldAccessedInSynchronizedContext",
                  "markdown": "Reports non-`final`, non-`private` fields that are accessed in a synchronized context.\n\n\nA non-`private` field cannot be guaranteed to always be accessed in a synchronized manner, and such \"partially synchronized\"\naccess may result in unexpectedly inconsistent data structures.\n\n**Example:**\n\n\n      class Bar {\n        public String field1;\n      }\n      public Bar myBar;\n\n      synchronized public void sample() {\n       myBar.field1 = \"bar\";\n      }\n\nInspection ID: PublicFieldAccessedInSynchronizedContext"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NonPrivateFieldAccessedInSynchronizedContext",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Threading issues",
                      "index": 23,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ForeachStatement",
                "shortDescription": {
                  "text": "Enhanced 'for' statement"
                },
                "fullDescription": {
                  "text": "Reports enhanced 'for' statements. Example: 'for (int x: Arrays.asList(1, 2, 3)) {\n    System.out.println(x);\n  }' After the quick-fix is applied: 'for (Iterator<Integer> iterator = Arrays.asList(1, 2, 3).iterator(); iterator.hasNext(); ) {\n    final int x = iterator.next();\n    System.out.println(x);\n  }' Enhanced 'for' statement appeared in Java 5. This inspection can help to downgrade for backward compatibility with earlier Java versions. Inspection ID: ForeachStatement",
                  "markdown": "Reports enhanced `for` statements.\n\nExample:\n\n\n      for (int x: Arrays.asList(1, 2, 3)) {\n        System.out.println(x);\n      }\n\nAfter the quick-fix is applied:\n\n\n      for (Iterator<Integer> iterator = Arrays.asList(1, 2, 3).iterator(); iterator.hasNext(); ) {\n        final int x = iterator.next();\n        System.out.println(x);\n      }\n\n\n*Enhanced* `for` *statement* appeared in Java 5.\nThis inspection can help to downgrade for backward compatibility with earlier Java versions.\n\nInspection ID: ForeachStatement"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ForeachStatement",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level issues",
                      "index": 119,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OptionalUsedAsFieldOrParameterType",
                "shortDescription": {
                  "text": "'Optional' used as field or parameter type"
                },
                "fullDescription": {
                  "text": "Reports any cases in which 'java.util.Optional<T>', 'java.util.OptionalDouble', 'java.util.OptionalInt', 'java.util.OptionalLong', or 'com.google.common.base.Optional' are used as types for fields or parameters. 'Optional' was designed to provide a limited mechanism for library method return types in which a clear way to represent \"no result\" was needed. Using a field with the 'java.util.Optional' type is also problematic if the class needs to be 'Serializable', as 'java.util.Optional' is not serializable. Example: 'class MyClass {\n    Optional<String> name; // Optional field\n\n    // Optional parameter\n    void setName(Optional<String> name) {\n      this.name = name;\n    }\n  }' Inspection ID: OptionalUsedAsFieldOrParameterType",
                  "markdown": "Reports any cases in which `java.util.Optional<T>`, `java.util.OptionalDouble`, `java.util.OptionalInt`, `java.util.OptionalLong`, or `com.google.common.base.Optional` are used as types for fields or parameters.\n\n`Optional` was designed to provide a limited mechanism for library method return types in which a clear way to represent \"no result\"\nwas needed.\n\nUsing a field with the `java.util.Optional` type is also problematic if the class needs to be\n`Serializable`, as `java.util.Optional` is not serializable.\n\nExample:\n\n\n      class MyClass {\n        Optional<String> name; // Optional field\n\n        // Optional parameter\n        void setName(Optional<String> name) {\n          this.name = name;\n        }\n      }\n\nInspection ID: OptionalUsedAsFieldOrParameterType"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "OptionalUsedAsFieldOrParameterType",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Abstraction issues",
                      "index": 63,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceAllDot",
                "shortDescription": {
                  "text": "Suspicious regex expression argument"
                },
                "fullDescription": {
                  "text": "Reports calls to 'String.replaceAll()' or 'String.split()' where the first argument is a single regex meta character argument. The regex meta characters are one of '.$|()[{^?*+\\'. They have a special meaning in regular expressions. For example, calling '\"ab.cd\".replaceAll(\".\", \"-\")' produces '\"-----\"', because the dot matches any character. Most likely the escaped variant '\"\\\\.\"' was intended instead. Using 'File.separator' as a regex is also reported. The 'File.separator' has a platform specific value. It equals to '/' on Linux and Mac but equals to '\\' on Windows, which is not a valid regular expression, so such code is not portable. Example: 's.replaceAll(\".\", \"-\");' After the quick-fix is applied: 's.replaceAll(\"\\\\.\", \"-\");' Inspection ID: ReplaceAllDot",
                  "markdown": "Reports calls to `String.replaceAll()` or `String.split()` where the first argument is a single regex meta character argument.\n\n\nThe regex meta characters are one of `.$|()[{^?*+\\`. They have a special meaning in regular expressions.\nFor example, calling `\"ab.cd\".replaceAll(\".\", \"-\")` produces `\"-----\"`, because the dot matches any character.\nMost likely the escaped variant `\"\\\\.\"` was intended instead.\n\n\nUsing `File.separator` as a regex is also reported. The `File.separator` has a platform specific value. It\nequals to `/` on Linux and Mac but equals to `\\` on Windows, which is not a valid regular expression, so\nsuch code is not portable.\n\n**Example:**\n\n\n      s.replaceAll(\".\", \"-\");\n\nAfter the quick-fix is applied:\n\n\n      s.replaceAll(\"\\\\.\", \"-\");\n\n\nInspection ID: ReplaceAllDot"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SuspiciousRegexArgument",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ForCanBeForeach",
                "shortDescription": {
                  "text": "'for' loop can be replaced with enhanced for loop"
                },
                "fullDescription": {
                  "text": "Reports 'for' loops that iterate over collections or arrays, and can be automatically replaced with an enhanced 'for' loop (foreach iteration syntax). Example: 'for (Iterator<String> iterator = list.iterator(); iterator.hasNext(); ) {\n    String item = iterator.next();\n    System.out.println(item);\n  }' After the quick-fix is applied: 'for (String item : list) {\n    System.out.println(item);\n  }' Use the Report indexed 'java.util.List' loops option to find loops involving 'list.get(index)' calls. Generally, these loops can be replaced with enhanced 'for' loops, unless they modify an underlying list in the process, for example, by calling 'list.remove(index)'. If the latter is the case, the enhanced 'for' loop may throw 'ConcurrentModificationException'. Also, in some cases, 'list.get(index)' loops may work a little bit faster. Use the Do not report iterations over untyped collections option to ignore collections without type parameters. This prevents the creation of enhanced 'for' loop variables of the 'java.lang.Object' type and the insertion of casts where the loop variable is used. This inspection depends on the Java feature 'For-each loops', which is available since Java 5. Inspection ID: ForCanBeForeach",
                  "markdown": "Reports `for` loops that iterate over collections or arrays, and can be automatically replaced with an enhanced `for` loop (foreach iteration syntax).\n\n**Example:**\n\n\n      for (Iterator<String> iterator = list.iterator(); iterator.hasNext(); ) {\n        String item = iterator.next();\n        System.out.println(item);\n      }\n\nAfter the quick-fix is applied:\n\n\n      for (String item : list) {\n        System.out.println(item);\n      }\n\n\nUse the **Report indexed 'java.util.List' loops** option to find loops involving `list.get(index)` calls.\nGenerally, these loops can be replaced with enhanced `for` loops,\nunless they modify an underlying list in the process, for example, by calling `list.remove(index)`.\nIf the latter is the case, the enhanced `for` loop may throw `ConcurrentModificationException`.\nAlso, in some cases, `list.get(index)` loops may work a little bit faster.\n\n\nUse the **Do not report iterations over untyped collections** option to ignore collections without type parameters.\nThis prevents the creation of enhanced `for` loop variables of the `java.lang.Object` type and the insertion of casts\nwhere the loop variable is used.\n\nThis inspection depends on the Java feature 'For-each loops', which is available since Java 5.\n\nInspection ID: ForCanBeForeach"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ForLoopReplaceableByForEach",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level migration aids/Java 5",
                      "index": 93,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PackageVisibleField",
                "shortDescription": {
                  "text": "Package-visible field"
                },
                "fullDescription": {
                  "text": "Reports fields that are declared without any access modifier (also known as package-private). Constants (that is, fields marked 'static' and 'final') are not reported. Example: 'public class A {\n    Object object;             // warning\n    final static int MODE = 0; // constant, no warning\n  }' Inspection ID: PackageVisibleField",
                  "markdown": "Reports fields that are declared without any access modifier (also known as package-private).\n\nConstants (that is, fields marked `static` and `final`) are not reported.\n\n**Example:**\n\n\n      public class A {\n        Object object;             // warning\n        final static int MODE = 0; // constant, no warning\n      }\n\nInspection ID: PackageVisibleField"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PackageVisibleField",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Encapsulation",
                      "index": 100,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InstantiationOfUtilityClass",
                "shortDescription": {
                  "text": "Instantiation of utility class"
                },
                "fullDescription": {
                  "text": "Reports instantiation of utility classes using the 'new' keyword. In utility classes, all fields and methods are 'static'. Instantiation of such classes is most likely unnecessary and indicates a mistake. Example: 'class MyUtils {\n    public static double cube(double x) {\n      return x * x * x;\n    }\n  }\n  class Main {\n    public static void main(String[] args) {\n      // Instantiation of utility class\n      MyUtils utils = new MyUtils();\n    }\n  }' To prevent utility classes from being instantiated, it's recommended to use a 'private' constructor. Inspection ID: InstantiationOfUtilityClass",
                  "markdown": "Reports instantiation of utility classes using the `new` keyword.\n\n\nIn utility classes, all fields and methods are `static`.\nInstantiation of such classes is most likely unnecessary and indicates a mistake.\n\n**Example:**\n\n\n      class MyUtils {\n        public static double cube(double x) {\n          return x * x * x;\n        }\n      }\n      class Main {\n        public static void main(String[] args) {\n          // Instantiation of utility class\n          MyUtils utils = new MyUtils();\n        }\n      }\n\n\nTo prevent utility classes from being instantiated,\nit's recommended to use a `private` constructor.\n\nInspection ID: InstantiationOfUtilityClass"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "InstantiationOfUtilityClass",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TrailingWhitespacesInTextBlock",
                "shortDescription": {
                  "text": "Trailing whitespace in text block"
                },
                "fullDescription": {
                  "text": "Reports text blocks with trailing whitespace characters. Trailing whitespace is considered incidental and will be stripped away by the Java compiler. Example (where spaces are indicated with dots): '..String.count.=.\"\"\"\n....one\n....two....\n....three\n....\"\"\";' Two quick-fixes are provided. One to remove the trailing whitespace, and one to escape the trailing whitespace so that it will not be removed by the compiler: '..String.count.=.\"\"\"\n....one\n....two...\\s\n....three\n....\"\"\";' This inspection depends on the Java feature 'Text block literals', which is available since Java 15. Inspection ID: TrailingWhitespacesInTextBlock New in 2021.1",
                  "markdown": "Reports text blocks with trailing whitespace characters. Trailing whitespace is considered incidental and will be stripped away by the Java compiler.\n\n**Example (where spaces are indicated with dots):**\n\n\n    ..String.count.=.\"\"\"\n    ....one\n    ....two....\n    ....three\n    ....\"\"\";\n\nTwo quick-fixes are provided.\nOne to remove the trailing whitespace, and one to escape the trailing whitespace so that it will not be removed by the compiler:\n\n\n    ..String.count.=.\"\"\"\n    ....one\n    ....two...\\s\n    ....three\n    ....\"\"\";\n\nThis inspection depends on the Java feature 'Text block literals', which is available since Java 15.\n\nInspection ID: TrailingWhitespacesInTextBlock\n\nNew in 2021.1"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "TrailingWhitespacesInTextBlock",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NewClassNamingConvention",
                "shortDescription": {
                  "text": "Class naming convention"
                },
                "fullDescription": {
                  "text": "Reports classes whose names are too short, too long, or do not follow the specified regular expression pattern. Example: if the inspection is enabled for tests, and the specified length for the minimum class name is 8 (the default), the following test class produces a warning because the length of its name is 6, which is less than 8: 'public class MyTest{}'. A quick-fix that renames such classes is available only in the editor. Configure the inspection: Use the list in the Options section to specify which classes should be checked. Deselect the checkboxes for the classes for which you want to skip the check. For each class type, specify the minimum length, maximum length, and the regular expression expected for class names using the provided input fields. Specify 0 in the length fields to skip corresponding checks. Regular expressions should be specified in the standard 'java.util.regex' format. Inspection ID: NewClassNamingConvention",
                  "markdown": "Reports classes whose names are too short, too long, or do not follow the specified regular expression pattern.\n\n**Example:** if the inspection is enabled for tests, and the specified length for the minimum class name is 8 (the default), the following test class\nproduces a warning because the length of its name is 6, which is less than 8: `public class MyTest{}`.\n\nA quick-fix that renames such classes is available only in the editor.\n\nConfigure the inspection:\n\n\nUse the list in the **Options** section to specify which classes should be checked. Deselect the checkboxes for the classes for which\nyou want to skip the check.\n\nFor each class type, specify the minimum length, maximum length, and the regular expression expected for class names using the\nprovided input fields. Specify **0** in the length fields to skip corresponding checks.\n\nRegular expressions should be specified in the standard `java.util.regex` format.\n\nInspection ID: NewClassNamingConvention"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NewClassNamingConvention",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Naming conventions/Class",
                      "index": 60,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseCompareMethod",
                "shortDescription": {
                  "text": "'compare()' method can be used to compare numbers"
                },
                "fullDescription": {
                  "text": "Reports expressions that can be replaced by a call to the 'Integer.compare()' method or a similar method from the 'Long', 'Short', 'Byte', 'Double' or 'Float' classes, instead of more verbose or less efficient constructs. If 'x' and 'y' are boxed integers, then 'x.compareTo(y)' is suggested, if they are primitives 'Integer.compare(x, y)' is suggested. Example: 'public int compare(int x, int y) {\n    return x > y ? 1 : x < y ? -1 : 0;\n  }' After the quick-fix is applied: 'public int compare(int x, int y) {\n    return Integer.compare(x, y);\n  }' Note that 'Double.compare' and 'Float.compare' slightly change the code semantics. In particular, they make '-0.0' and '0.0' distinguishable ('Double.compare(-0.0, 0.0)' yields -1). Also, they consistently process 'NaN' value. In most of the cases, this semantics change actually improves the code. Use the checkbox to disable this inspection for floating point numbers if semantics change is unacceptable in your case. Inspection ID: UseCompareMethod New in 2017.2",
                  "markdown": "Reports expressions that can be replaced by a call to the `Integer.compare()` method or a similar method from the `Long`, `Short`, `Byte`, `Double` or `Float` classes, instead of more verbose or less efficient constructs.\n\nIf `x` and `y` are boxed integers, then `x.compareTo(y)` is suggested,\nif they are primitives `Integer.compare(x, y)` is suggested.\n\n**Example:**\n\n\n      public int compare(int x, int y) {\n        return x > y ? 1 : x < y ? -1 : 0;\n      }\n\nAfter the quick-fix is applied:\n\n\n      public int compare(int x, int y) {\n        return Integer.compare(x, y);\n      }\n\n\nNote that `Double.compare` and `Float.compare` slightly change the code semantics. In particular,\nthey make `-0.0` and `0.0` distinguishable (`Double.compare(-0.0, 0.0)` yields -1).\nAlso, they consistently process `NaN` value. In most of the cases, this semantics change actually improves the\ncode. Use the checkbox to disable this inspection for floating point numbers if semantics change is unacceptable\nin your case.\n\nInspection ID: UseCompareMethod\n\nNew in 2017.2"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UseCompareMethod",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level migration aids",
                      "index": 65,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MoveFieldAssignmentToInitializer",
                "shortDescription": {
                  "text": "Field assignment can be moved to initializer"
                },
                "fullDescription": {
                  "text": "Suggests replacing initialization of fields using assignment with initialization in the field declaration. Only reports if the field assignment is located in an instance or static initializer, and joining it with the field declaration is likely to be safe. In other cases, like assignment inside a constructor, the quick-fix is provided without highlighting, as the fix may change the semantics. Example: 'class MyClass {\n    static final int intConstant;\n    \n    static {\n      intConstant = 10;\n    }\n  }' The quick fix moves the assigned value to the field initializer removing the class initializer if possible: 'class MyClass {\n    static final int intConstant = 10;\n  }' Since 2017.2 Inspection ID: MoveFieldAssignmentToInitializer",
                  "markdown": "Suggests replacing initialization of fields using assignment with initialization in the field declaration.\n\nOnly reports if the field assignment is located in an instance or static initializer, and\njoining it with the field declaration is likely to be safe.\nIn other cases, like assignment inside a constructor, the quick-fix is provided without highlighting,\nas the fix may change the semantics.\n\nExample:\n\n\n      class MyClass {\n        static final int intConstant;\n        \n        static {\n          intConstant = 10;\n        }\n      }\n\nThe quick fix moves the assigned value to the field initializer removing the class initializer if possible:\n\n\n      class MyClass {\n        static final int intConstant = 10;\n      }\n\nSince 2017.2\n\nInspection ID: MoveFieldAssignmentToInitializer"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "MoveFieldAssignmentToInitializer",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StringConcatenationInFormatCall",
                "shortDescription": {
                  "text": "String concatenation as argument to 'format()' call"
                },
                "fullDescription": {
                  "text": "Reports non-constant string concatenations used as a format string argument. While occasionally intended, this is usually a misuse of a formatting method and may even cause security issues if the variables used in the concatenated string contain special characters like '%'. Also, sometimes this could be the result of mistakenly concatenating a string format argument by typing a '+' when a ',' was meant. Example: 'static String formatGreeting(String userName) {\n    return String.format(\"Hello, \" + userName);\n  }' Here, the 'userName' will be interpreted as a part of format string, which may result in 'IllegalFormatException' (for example, if 'userName' is '\"%\"') or in using an enormous amount of memory (for example, if 'userName' is '\"%2000000000%\"'). The call should be probably replaced with 'String.format(\"Hello, %s\", userName);'. This inspection checks calls to formatting methods on 'java.util.Formatter', 'java.lang.String', 'java.io.PrintWriter', or 'java.io.PrintStream'. Inspection ID: StringConcatenationInFormatCall",
                  "markdown": "Reports non-constant string concatenations used as a format string argument.\n\n\nWhile occasionally intended, this is usually a misuse of a formatting method\nand may even cause security issues if the variables used in the concatenated string\ncontain special characters like `%`.\n\n\nAlso, sometimes this could be the result\nof mistakenly concatenating a string format argument by typing a `+` when a `,` was meant.\n\n**Example:**\n\n\n      static String formatGreeting(String userName) {\n        return String.format(\"Hello, \" + userName);\n      }\n\n\nHere, the `userName` will be interpreted as a part of format string, which may result\nin `IllegalFormatException` (for example, if `userName` is `\"%\"`) or\nin using an enormous amount of memory (for example, if `userName` is `\"%2000000000%\"`).\nThe call should be probably replaced with `String.format(\"Hello, %s\", userName);`.\n\n\nThis inspection checks calls to formatting methods on\n`java.util.Formatter`,\n`java.lang.String`,\n`java.io.PrintWriter`,\nor `java.io.PrintStream`.\n\nInspection ID: StringConcatenationInFormatCall"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "StringConcatenationInFormatCall",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "WaitWhileHoldingTwoLocks",
                "shortDescription": {
                  "text": "'wait()' while holding two locks"
                },
                "fullDescription": {
                  "text": "Reports calls to 'wait()' methods that may occur while the current thread is holding two locks. Since calling 'wait()' only releases one lock on its target, waiting with two locks held can easily lead to a deadlock. Example: 'synchronized (lockA) {\n    synchronized (lockB) {\n      lockB.wait(); //warning\n      //thread A is stuck here holding lockA\n    }\n  }\n\n  synchronized (lockA) { //thread B can't enter the block and release thread A\n    lockB.notify();\n  }' Inspection ID: WaitWhileHoldingTwoLocks",
                  "markdown": "Reports calls to `wait()` methods that may occur while the current thread is holding two locks.\n\n\nSince calling `wait()` only releases one lock on its target,\nwaiting with two locks held can easily lead to a deadlock.\n\n**Example:**\n\n\n      synchronized (lockA) {\n        synchronized (lockB) {\n          lockB.wait(); //warning\n          //thread A is stuck here holding lockA\n        }\n      }\n\n      synchronized (lockA) { //thread B can't enter the block and release thread A\n        lockB.notify();\n      }\n\nInspection ID: WaitWhileHoldingTwoLocks"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "WaitWhileHoldingTwoLocks",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Threading issues",
                      "index": 23,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SerializableInnerClassWithNonSerializableOuterClass",
                "shortDescription": {
                  "text": "Serializable non-'static' inner class with non-Serializable outer class"
                },
                "fullDescription": {
                  "text": "Reports non-static inner classes that implement 'Serializable' and are declared inside a class that doesn't implement 'Serializable'. Such classes are unlikely to serialize correctly due to implicit references to the outer class. Example: 'class A {\n    class Main implements Serializable {\n    }\n  }' Use the following options to configure the inspection: List classes whose inheritors should not be reported by this inspection. This is meant for classes that inherit 'Serializable' from a superclass but are not intended for serialization. Whether to ignore 'Serializable' anonymous classes. Inspection ID: SerializableInnerClassWithNonSerializableOuterClass",
                  "markdown": "Reports non-static inner classes that implement `Serializable` and are declared inside a class that doesn't implement `Serializable`.\n\n\nSuch classes are unlikely to serialize correctly due to implicit references to the outer class.\n\n**Example:**\n\n\n      class A {\n        class Main implements Serializable {\n        }\n      }\n\nUse the following options to configure the inspection:\n\n* List classes whose inheritors should not be reported by this inspection. This is meant for classes that inherit `Serializable` from a superclass but are not intended for serialization.\n* Whether to ignore `Serializable` anonymous classes.\n\nInspection ID: SerializableInnerClassWithNonSerializableOuterClass"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SerializableInnerClassWithNonSerializableOuterClass",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Serialization issues",
                      "index": 18,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SuspiciousListRemoveInLoop",
                "shortDescription": {
                  "text": "Suspicious 'List.remove()' in loop"
                },
                "fullDescription": {
                  "text": "Reports 'list.remove(index)' calls inside an ascending counted loop. This is suspicious as the list becomes shorter after the removal, and the next element gets skipped. A simple fix is to decrease the index variable after the removal, but probably removing via an iterator or using the 'removeIf()' method (Java 8 and later) is a more robust alternative. If you don't expect that 'remove()' will be called more than once in a loop, consider adding a 'break' after it. Example: 'public static void main(String[] args) {\n    process(new ArrayList<>(\n      Arrays.asList(\"1\", \"2\", \"|\", \"3\", \"4\")));\n  }\n\n  static void process(List<String> list) {\n    for (int i = 0; i < list.size(); i++) {\n      if (list.get(i).equals(\"|\")) {\n        list.remove(i);\n        continue;\n      }\n      System.out.println(list.get(i));\n    }\n  }' The code looks like '1 2 3 4' is going to be printed, but in reality, '3' will be skipped in the output. Inspection ID: SuspiciousListRemoveInLoop New in 2018.2",
                  "markdown": "Reports `list.remove(index)` calls inside an ascending counted loop.\n\n\nThis is suspicious as the list becomes\nshorter after the removal, and the next element gets skipped. A simple fix is to decrease the index variable\nafter the removal,\nbut probably removing via an iterator or using the `removeIf()` method (Java 8 and later) is a more robust alternative.\nIf you don't expect that `remove()` will be called more than once in a loop, consider adding a `break` after it.\n\n**Example:**\n\n      public static void main(String[] args) {\n        process(new ArrayList<>(\n          Arrays.asList(\"1\", \"2\", \"|\", \"3\", \"4\")));\n      }\n\n      static void process(List<String> list) {\n        for (int i = 0; i < list.size(); i++) {\n          if (list.get(i).equals(\"|\")) {\n            list.remove(i);\n            continue;\n          }\n          System.out.println(list.get(i));\n        }\n      }\n\nThe code looks like `1 2 3 4` is going to be printed, but in reality, `3` will be skipped in the output.\n\nInspection ID: SuspiciousListRemoveInLoop\n\nNew in 2018.2"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SuspiciousListRemoveInLoop",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NegativeIntConstantInLongContext",
                "shortDescription": {
                  "text": "Negative int hexadecimal constant in long context"
                },
                "fullDescription": {
                  "text": "Reports negative int hexadecimal constants in long context. Such constants are implicitly widened to long, which means their higher bits will become 1 rather than 0 (e.g., 0xFFFF_FFFF will become 0xFFFF_FFFF_FFFF_FFFFL). Unlikely this is intended, and even if it is, using an explicit long constant would be less confusing. Example: '// Warning: this is int constant -1 which is widened to long\n  // becoming 0xFFFF_FFFF_FFFF_FFFFL.\n  long mask = 0xFFFF_FFFF;' Inspection ID: NegativeIntConstantInLongContext New in 2022.3",
                  "markdown": "Reports negative int hexadecimal constants in long context. Such constants are implicitly widened to long, which means their higher bits will become 1 rather than 0 (e.g., 0xFFFF_FFFF will become 0xFFFF_FFFF_FFFF_FFFFL). Unlikely this is intended, and even if it is, using an explicit long constant would be less confusing.\n\n**Example:**\n\n\n      // Warning: this is int constant -1 which is widened to long\n      // becoming 0xFFFF_FFFF_FFFF_FFFFL.\n      long mask = 0xFFFF_FFFF;\n\nInspection ID: NegativeIntConstantInLongContext\n\nNew in 2022.3"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NegativeIntConstantInLongContext",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Numeric issues",
                      "index": 25,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DefaultAnnotationParam",
                "shortDescription": {
                  "text": "Default annotation parameter value"
                },
                "fullDescription": {
                  "text": "Reports annotation parameters that are assigned to their 'default' value. Example: '@interface Test {\n      Class<?> expected() default Throwable.class;\n  }\n\n  @Test(expected = Throwable.class)\n  void testSmth() {}' After the quick-fix is applied: '@Test()\n  void testSmth() {}' Inspection ID: DefaultAnnotationParam",
                  "markdown": "Reports annotation parameters that are assigned to their `default` value.\n\nExample:\n\n\n      @interface Test {\n          Class<?> expected() default Throwable.class;\n      }\n\n      @Test(expected = Throwable.class)\n      void testSmth() {}\n\nAfter the quick-fix is applied:\n\n\n      @Test()\n      void testSmth() {}\n\nInspection ID: DefaultAnnotationParam"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "DefaultAnnotationParam",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Declaration redundancy",
                      "index": 9,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "WhileLoopSpinsOnField",
                "shortDescription": {
                  "text": "'while' loop spins on field"
                },
                "fullDescription": {
                  "text": "Reports 'while' loops that spin on the value of a non-'volatile' field, waiting for it to be changed by another thread. In addition to being potentially extremely CPU intensive when little work is done inside the loop, such loops are likely to have different semantics from what was intended. The Java Memory Model allows such loops to never complete even if another thread changes the field's value. Additionally, since Java 9 it's recommended to call 'Thread.onSpinWait()' inside a spin loop on a 'volatile' field, which may significantly improve performance on some hardware. Example: 'class SpinsOnField {\n    boolean ready = false;\n\n    void run() {\n      while (!ready) {\n      }\n      // do some work\n    }\n\n    void markAsReady() {\n      ready = true;\n    }\n  }' After the quick-fix is applied: 'class SpinsOnField {\n    volatile boolean ready = false;\n\n    void run() {\n      while (!ready) {\n        Thread.onSpinWait();\n      }\n      // do some work\n    }\n\n    void markAsReady() {\n      ready = true;\n    }\n  }' Use the inspection options to only report empty 'while' loops. Inspection ID: WhileLoopSpinsOnField",
                  "markdown": "Reports `while` loops that spin on the value of a non-`volatile` field, waiting for it to be changed by another thread.\n\n\nIn addition to being potentially extremely CPU intensive when little work is done inside the loop, such\nloops are likely to have different semantics from what was intended.\nThe Java Memory Model allows such loops to never complete even if another thread changes the field's value.\n\n\nAdditionally, since Java 9 it's recommended to call `Thread.onSpinWait()` inside a spin loop\non a `volatile` field, which may significantly improve performance on some hardware.\n\n**Example:**\n\n\n      class SpinsOnField {\n        boolean ready = false;\n\n        void run() {\n          while (!ready) {\n          }\n          // do some work\n        }\n\n        void markAsReady() {\n          ready = true;\n        }\n      }\n\nAfter the quick-fix is applied:\n\n\n      class SpinsOnField {\n        volatile boolean ready = false;\n\n        void run() {\n          while (!ready) {\n            Thread.onSpinWait();\n          }\n          // do some work\n        }\n\n        void markAsReady() {\n          ready = true;\n        }\n      }\n\n\nUse the inspection options to only report empty `while` loops.\n\n\nInspection ID: WhileLoopSpinsOnField"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "WhileLoopSpinsOnField",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Threading issues",
                      "index": 23,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SynchronizeOnLock",
                "shortDescription": {
                  "text": "Synchronization on a 'Lock' object"
                },
                "fullDescription": {
                  "text": "Reports 'synchronized' blocks that lock on an instance of 'java.util.concurrent.locks.Lock'. Such synchronization is almost certainly unintended, and appropriate versions of '.lock()' and '.unlock()' should be used instead. Example: 'final ReentrantLock lock = new ReentrantLock();\n\n  public void foo() {\n    synchronized (lock) {}\n  }' Inspection ID: SynchronizeOnLock",
                  "markdown": "Reports `synchronized` blocks that lock on an instance of `java.util.concurrent.locks.Lock`. Such synchronization is almost certainly unintended, and appropriate versions of `.lock()` and `.unlock()` should be used instead.\n\n**Example:**\n\n\n      final ReentrantLock lock = new ReentrantLock();\n\n      public void foo() {\n        synchronized (lock) {}\n      }\n\nInspection ID: SynchronizeOnLock"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SynchroniziationOnLockObject",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Threading issues",
                      "index": 23,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BadExceptionCaught",
                "shortDescription": {
                  "text": "Prohibited 'Exception' caught"
                },
                "fullDescription": {
                  "text": "Reports 'catch' clauses that catch an inappropriate exception. Some exceptions, for example 'java.lang.NullPointerException' or 'java.lang.IllegalMonitorStateException', represent programming errors and therefore almost certainly should not be caught in production code. Example: 'try {\n    return component.getMousePosition(true) != null;\n  } catch (NullPointerException e) { // warning: Prohibited exception 'NullPointerException' caught\n    return false;\n  }' Use the Prohibited exceptions list to specify which exceptions should be reported. Inspection ID: BadExceptionCaught",
                  "markdown": "Reports `catch` clauses that catch an inappropriate exception.\n\nSome exceptions, for example\n`java.lang.NullPointerException` or\n`java.lang.IllegalMonitorStateException`, represent programming errors\nand therefore almost certainly should not be caught in production code.\n\n**Example:**\n\n\n      try {\n        return component.getMousePosition(true) != null;\n      } catch (NullPointerException e) { // warning: Prohibited exception 'NullPointerException' caught\n        return false;\n      }\n\nUse the **Prohibited exceptions** list to specify which exceptions should be reported.\n\n\nInspection ID: BadExceptionCaught"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ProhibitedExceptionCaught",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Error handling",
                      "index": 10,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InstanceofCatchParameter",
                "shortDescription": {
                  "text": "'instanceof' on 'catch' parameter"
                },
                "fullDescription": {
                  "text": "Reports cases in which an 'instanceof' expression is used for testing the type of a parameter in a 'catch' block. Testing the type of 'catch' parameters is usually better done by having separate 'catch' blocks instead of using 'instanceof'. Example: 'void foo(Runnable runnable) {\n    try {\n        runnable.run();\n    } catch (Throwable throwable) {\n        if (throwable instanceof NoClassDefFoundError) { // warning: 'instanceof' on 'catch' parameter 'throwable'\n            System.out.println(\"Class not found!\");\n        }\n    }\n  }' Inspection ID: InstanceofCatchParameter",
                  "markdown": "Reports cases in which an `instanceof` expression is used for testing the type of a parameter in a `catch` block.\n\nTesting the type of `catch` parameters is usually better done by having separate\n`catch` blocks instead of using `instanceof`.\n\n**Example:**\n\n\n      void foo(Runnable runnable) {\n        try {\n            runnable.run();\n        } catch (Throwable throwable) {\n            if (throwable instanceof NoClassDefFoundError) { // warning: 'instanceof' on 'catch' parameter 'throwable'\n                System.out.println(\"Class not found!\");\n            }\n        }\n      }\n\nInspection ID: InstanceofCatchParameter"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "InstanceofCatchParameter",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Error handling",
                      "index": 10,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantScheduledForRemovalAnnotation",
                "shortDescription": {
                  "text": "Redundant @ScheduledForRemoval annotation"
                },
                "fullDescription": {
                  "text": "Reports usages of '@ApiStatus.ScheduledForRemoval' annotation without 'inVersion' attribute in code which targets Java 9 or newer version. Such usages can be replaced by 'forRemoval' attribute in '@Deprecated' annotation to simplify code. Inspection ID: RedundantScheduledForRemovalAnnotation New in 2022.1",
                  "markdown": "Reports usages of `@ApiStatus.ScheduledForRemoval` annotation without `inVersion` attribute in code which targets Java 9 or newer version.\n\n\nSuch usages can be replaced by `forRemoval` attribute in `@Deprecated` annotation to simplify code.\n\nInspection ID: RedundantScheduledForRemovalAnnotation\n\nNew in 2022.1"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RedundantScheduledForRemovalAnnotation",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code maturity",
                      "index": 46,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OptionalGetWithoutIsPresent",
                "shortDescription": {
                  "text": "Optional.get() is called without isPresent() check"
                },
                "fullDescription": {
                  "text": "Reports calls to 'get()' on an 'Optional' without checking that it has a value. Calling 'Optional.get()' on an empty 'Optional' instance will throw an exception. Example: 'void x(List<Integer> list) {\n    final Optional<Integer> optional =\n      list.stream().filter(x -> x > 10).findFirst();\n    final Integer result = optional.get(); // problem here\n  }' This inspection depends on the Java feature 'Stream and Optional API', which is available since Java 8. Inspection ID: OptionalGetWithoutIsPresent",
                  "markdown": "Reports calls to `get()` on an `Optional` without checking that it has a value.\n\nCalling `Optional.get()` on an empty `Optional` instance will throw an exception.\n\n**Example:**\n\n\n      void x(List<Integer> list) {\n        final Optional<Integer> optional =\n          list.stream().filter(x -> x > 10).findFirst();\n        final Integer result = optional.get(); // problem here\n      }\n\nThis inspection depends on the Java feature 'Stream and Optional API', which is available since Java 8.\n\nInspection ID: OptionalGetWithoutIsPresent"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "OptionalGetWithoutIsPresent",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OnDemandImport",
                "shortDescription": {
                  "text": "'*' import"
                },
                "fullDescription": {
                  "text": "Reports any 'import' statements that cover entire packages ('* imports'). Some coding standards prohibit such 'import' statements. You can configure IntelliJ IDEA to detect and fix such statements with its Optimize Imports command. Go to Settings | Editor | Code Style | Java | Imports, make sure that the Use single class import option is enabled, and specify values in the Class count to use import with '*' and Names count to use static import with '*' fields. Thus this inspection is mostly useful for offline reporting on code bases that you don't intend to change. Inspection ID: OnDemandImport",
                  "markdown": "Reports any `import` statements that cover entire packages ('\\* imports').\n\nSome coding standards prohibit such `import` statements.\n\n\nYou can configure IntelliJ IDEA to detect and fix such statements with its **Optimize Imports**\ncommand. Go to [Settings \\| Editor \\| Code Style \\| Java \\| Imports](settings://preferences.sourceCode.Java?Use%20single%20class%20import),\nmake sure that the **Use single class import** option is enabled, and specify values in the\n**Class count to use import with '\\*'** and **Names count to use static import with '\\*'** fields.\nThus this inspection is mostly useful for offline reporting on code bases that you don't\nintend to change.\n\nInspection ID: OnDemandImport"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "OnDemandImport",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Imports",
                      "index": 19,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FallthruInSwitchStatement",
                "shortDescription": {
                  "text": "Fallthrough in 'switch' statement"
                },
                "fullDescription": {
                  "text": "Reports 'fall-through' in a 'switch' statement. Fall-through occurs when a series of executable statements after a 'case' label is not guaranteed to transfer control before the next 'case' label. For example, this can happen if the branch is missing a 'break' statement. In that case, control falls through to the statements after that 'switch' label, even though the 'switch' expression is not equal to the value of the fallen-through label. While occasionally intended, this construction is confusing and is often the result of a typo. This inspection ignores any fall-through commented with a text matching the regex pattern '(?i)falls?\\s*thro?u'. There is a fix that adds a 'break' to the branch that can fall through to the next branch. Example: 'switch(x) {\n      case (4):\n          if (condition) {\n              System.out.println(\"3\");\n              // no break here\n          } else {\n              break;\n          }\n      case (6):\n          System.out.println(\"4\");\n    }' After the quick-fix is applied: 'switch(x) {\n        case (4):\n            if (condition) {\n                System.out.println(\"3\");\n            } else {\n                break;\n            }\n            break;\n        case (6):\n            System.out.println(\"4\");\n    }' Inspection ID: FallthruInSwitchStatement",
                  "markdown": "Reports 'fall-through' in a `switch` statement.\n\nFall-through occurs when a series of executable statements after a `case` label is not guaranteed\nto transfer control before the next `case` label. For example, this can happen if the branch is missing a `break` statement.\nIn that case, control falls through to the statements after\nthat `switch` label, even though the `switch` expression is not equal to\nthe value of the fallen-through label. While occasionally intended, this construction is confusing and is often the result of a typo.\n\n\nThis inspection ignores any fall-through commented with a text matching the regex pattern `(?i)falls?\\s*thro?u`.\n\nThere is a fix that adds a `break` to the branch that can fall through to the next branch.\n\nExample:\n\n\n        switch(x) {\n          case (4):\n              if (condition) {\n                  System.out.println(\"3\");\n                  // no break here\n              } else {\n                  break;\n              }\n          case (6):\n              System.out.println(\"4\");\n        }\n\nAfter the quick-fix is applied:\n\n\n        switch(x) {\n            case (4):\n                if (condition) {\n                    System.out.println(\"3\");\n                } else {\n                    break;\n                }\n                break;\n            case (6):\n                System.out.println(\"4\");\n        }\n\n\nInspection ID: FallthruInSwitchStatement"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "fallthrough",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Control flow issues",
                      "index": 24,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OptionalIsPresent",
                "shortDescription": {
                  "text": "Non functional style 'Optional.isPresent()' usage"
                },
                "fullDescription": {
                  "text": "Reports 'Optional' expressions used as 'if' or conditional expression conditions, that can be rewritten in a functional style. The result is often shorter and easier to read. Example: 'if (str.isPresent()) str.get().trim();' After the quick-fix is applied: 'str.ifPresent(String::trim);' This inspection depends on the Java feature 'Stream and Optional API', which is available since Java 8. Inspection ID: OptionalIsPresent",
                  "markdown": "Reports `Optional` expressions used as `if` or conditional expression conditions, that can be rewritten in a functional style. The result is often shorter and easier to read.\n\nExample:\n\n\n      if (str.isPresent()) str.get().trim();\n\nAfter the quick-fix is applied:\n\n\n      str.ifPresent(String::trim);\n\nThis inspection depends on the Java feature 'Stream and Optional API', which is available since Java 8.\n\nInspection ID: OptionalIsPresent"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "OptionalIsPresent",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantOperationOnEmptyContainer",
                "shortDescription": {
                  "text": "Redundant operation on empty container"
                },
                "fullDescription": {
                  "text": "Reports redundant operations on empty collections, maps or arrays. Iterating, removing elements, sorting, and some other operations on empty collections have no effect and can be removed. Also, they may be a signal of a bug. Example: 'if (numbers.isEmpty()){\n    //error due to the missed negation\n    int max = numbers.stream().max(Comparator.naturalOrder()).get();\n    ...\n  }' Inspection ID: RedundantOperationOnEmptyContainer New in 2019.1",
                  "markdown": "Reports redundant operations on empty collections, maps or arrays.\n\n\nIterating, removing elements, sorting,\nand some other operations on empty collections have no effect and can be removed. Also, they may be a signal of a bug.\n\n**Example:**\n\n\n      if (numbers.isEmpty()){\n        //error due to the missed negation\n        int max = numbers.stream().max(Comparator.naturalOrder()).get();\n        ...\n      }\n\nInspection ID: RedundantOperationOnEmptyContainer\n\nNew in 2019.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RedundantOperationOnEmptyContainer",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AtomicFieldUpdaterNotStaticFinal",
                "shortDescription": {
                  "text": "'AtomicFieldUpdater' field not declared 'static final'"
                },
                "fullDescription": {
                  "text": "Reports fields of types: 'java.util.concurrent.atomic.AtomicLongFieldUpdater' 'java.util.concurrent.atomic.AtomicIntegerFieldUpdater' 'java.util.concurrent.atomic.AtomicReferenceFieldUpdater' that are not 'static final'. Because only one atomic field updater is needed for updating a 'volatile' field in all instances of a class, it can almost always be 'static'. Making the updater 'final' allows the JVM to optimize access for improved performance. Example: 'class Main {\n    private volatile int id;\n    private AtomicIntegerFieldUpdater<Main> idFieldUpdater = AtomicIntegerFieldUpdater.newUpdater(Main.class, \"id\");\n  }' After the quick-fix is applied: 'class Main {\n    private volatile int id;\n    private static final AtomicIntegerFieldUpdater<Main> idFieldUpdater = AtomicIntegerFieldUpdater.newUpdater(Main.class, \"id\");\n  }' Inspection ID: AtomicFieldUpdaterNotStaticFinal",
                  "markdown": "Reports fields of types:\n\n* `java.util.concurrent.atomic.AtomicLongFieldUpdater`\n* `java.util.concurrent.atomic.AtomicIntegerFieldUpdater`\n* `java.util.concurrent.atomic.AtomicReferenceFieldUpdater`\n\nthat are not `static final`. Because only one atomic field updater is needed for updating a `volatile` field in all instances of a class, it can almost always be `static`.\n\nMaking the updater `final` allows the JVM to optimize access for improved performance.\n\n**Example:**\n\n\n      class Main {\n        private volatile int id;\n        private AtomicIntegerFieldUpdater<Main> idFieldUpdater = AtomicIntegerFieldUpdater.newUpdater(Main.class, \"id\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      class Main {\n        private volatile int id;\n        private static final AtomicIntegerFieldUpdater<Main> idFieldUpdater = AtomicIntegerFieldUpdater.newUpdater(Main.class, \"id\");\n      }\n\nInspection ID: AtomicFieldUpdaterNotStaticFinal"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AtomicFieldUpdaterNotStaticFinal",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Threading issues",
                      "index": 23,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Java8MapForEach",
                "shortDescription": {
                  "text": "Map.forEach() can be used"
                },
                "fullDescription": {
                  "text": "Suggests replacing 'for(Entry<?,?> entry : map.entrySet()) {...}' or 'map.entrySet().forEach(entry -> ...)' with 'map.forEach((key, value) -> ...)'. Example 'void print(Map<String, Integer> map) {\n    map.entrySet().forEach(entry -> {\n      String str = entry.getKey();\n      System.out.println(str + \":\" + entry.getValue());\n    });\n  }' After the quick-fix is applied: 'void print(Map<String, Integer> map) {\n    map.forEach((str, value) -> System.out.println(str + \":\" + value));\n  }' When the Do not report loops option is enabled, only 'entrySet().forEach()' cases will be reported. However, the quick-fix action will be available for 'for'-loops as well. This inspection depends on the Java feature 'Lambda methods in collections', which is available since Java 8. Inspection ID: Java8MapForEach New in 2017.1",
                  "markdown": "Suggests replacing `for(Entry<?,?> entry : map.entrySet()) {...}` or `map.entrySet().forEach(entry -> ...)` with `map.forEach((key, value) -> ...)`.\n\nExample\n\n\n      void print(Map<String, Integer> map) {\n        map.entrySet().forEach(entry -> {\n          String str = entry.getKey();\n          System.out.println(str + \":\" + entry.getValue());\n        });\n      }\n\nAfter the quick-fix is applied:\n\n\n      void print(Map<String, Integer> map) {\n        map.forEach((str, value) -> System.out.println(str + \":\" + value));\n      }\n\n\nWhen the **Do not report loops** option is enabled, only `entrySet().forEach()` cases will be reported.\nHowever, the quick-fix action will be available for `for`-loops as well.\n\nThis inspection depends on the Java feature 'Lambda methods in collections', which is available since Java 8.\n\nInspection ID: Java8MapForEach\n\nNew in 2017.1"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "Java8MapForEach",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level migration aids/Java 8",
                      "index": 94,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RecordStoreResource",
                "shortDescription": {
                  "text": "'RecordStore' opened but not safely closed"
                },
                "fullDescription": {
                  "text": "Reports Java ME 'javax.microedition.rms.RecordStore' resources that are not opened in front of a 'try' block and closed in the corresponding 'finally' block. Such resources may be inadvertently leaked if an exception is thrown before the resource is closed. This inspection is intended for Java ME and other highly resource constrained environments. Applying the results of this inspection without consideration might have negative effects on code clarity and design. Example: 'void foo1() throws RecordStoreException {\n      RecordStore rs = RecordStore.openRecordStore(\"bar\", true); // warning\n  }\n  void foo2() throws RecordStoreException {\n      RecordStore rs = RecordStore.openRecordStore(\"bar\", true); // no warning\n      try {\n          /* ... */\n      } finally {\n          rs.closeRecordStore();\n      }\n  }' Inspection ID: RecordStoreResource",
                  "markdown": "Reports Java ME `javax.microedition.rms.RecordStore` resources that are not opened in front of a `try` block and closed in the corresponding `finally` block.\n\nSuch resources may be inadvertently leaked if an exception is thrown before the resource is closed.\n\n\nThis inspection is intended for Java ME and other highly resource constrained environments.\nApplying the results of this inspection without consideration might have negative effects on code clarity and design.\n\n**Example:**\n\n\n      void foo1() throws RecordStoreException {\n          RecordStore rs = RecordStore.openRecordStore(\"bar\", true); // warning\n      }\n      void foo2() throws RecordStoreException {\n          RecordStore rs = RecordStore.openRecordStore(\"bar\", true); // no warning\n          try {\n              /* ... */\n          } finally {\n              rs.closeRecordStore();\n          }\n      }\n\nInspection ID: RecordStoreResource"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RecordStoreOpenedButNotSafelyClosed",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Performance/Embedded",
                      "index": 137,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ObjectsEqualsCanBeSimplified",
                "shortDescription": {
                  "text": "'Objects.equals()' can be replaced with 'equals()'"
                },
                "fullDescription": {
                  "text": "Reports calls to 'Objects.equals(a, b)' in which the first argument is statically known to be non-null. Such a call can be safely replaced with 'a.equals(b)' or 'a == b' if both arguments are primitives. Example: 'String defaultName = \"default\";\n  boolean isDefault = Objects.equals(defaultName, name);' After the quick-fix is applied: 'String defaultName = \"default\";\n  boolean isDefault = defaultName.equals(name);' This inspection depends on the Java feature 'java.util.Objects API', which is available since Java 7. Inspection ID: ObjectsEqualsCanBeSimplified New in 2018.3",
                  "markdown": "Reports calls to `Objects.equals(a, b)` in which the first argument is statically known to be non-null.\n\nSuch a call can be safely replaced with `a.equals(b)` or `a == b` if both arguments are primitives.\n\nExample:\n\n\n      String defaultName = \"default\";\n      boolean isDefault = Objects.equals(defaultName, name);\n\nAfter the quick-fix is applied:\n\n\n      String defaultName = \"default\";\n      boolean isDefault = defaultName.equals(name);\n\nThis inspection depends on the Java feature 'java.util.Objects API', which is available since Java 7.\n\nInspection ID: ObjectsEqualsCanBeSimplified\n\nNew in 2018.3"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ObjectsEqualsCanBeSimplified",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ClassLoaderInstantiation",
                "shortDescription": {
                  "text": "'ClassLoader' instantiation"
                },
                "fullDescription": {
                  "text": "Reports instantiations of the 'java.lang.ClassLoader' class. While often benign, any instantiations of 'ClassLoader' should be closely examined in any security audit. Example: 'Class<?> loadExtraClass(String name) throws Exception {\n      try(URLClassLoader loader =\n          new URLClassLoader(new URL[]{new URL(\"extraClasses/\")})) {\n        return loader.loadClass(name);\n      }\n    }'\n Inspection ID: ClassLoaderInstantiation",
                  "markdown": "Reports instantiations of the `java.lang.ClassLoader` class.\n\nWhile often benign, any instantiations of `ClassLoader` should be closely examined in any security audit.\n\n**Example:**\n\n        Class<?> loadExtraClass(String name) throws Exception {\n          try(URLClassLoader loader =\n              new URLClassLoader(new URL[]{new URL(\"extraClasses/\")})) {\n            return loader.loadClass(name);\n          }\n        }\n      \nInspection ID: ClassLoaderInstantiation"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ClassLoaderInstantiation",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Security",
                      "index": 31,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MigrateToJavaLangIo",
                "shortDescription": {
                  "text": "Method from 'java.lang.IO' class can be used"
                },
                "fullDescription": {
                  "text": "Reports 'System.out.println()' and 'System.out.print()' calls and suggests replacing them with methods from 'java.lang.IO' class. This inspection helps migrate code to use the newer 'java.lang.IO' class Example: 'System.out.println(\"Hello, World!\");' After the quick-fix is applied: 'IO.println(\"Hello, World!\");' Configure the inspection: Use the Report in regular classes option to report and suggest fixes in regular classes Use the Report in compact source files option to report and suggest fixes in compact source files This inspection depends on the Java feature 'java.lang.IO utility class', which is available since Java 25. Inspection ID: MigrateToJavaLangIo New in 2025.2",
                  "markdown": "Reports `System.out.println()` and `System.out.print()` calls and suggests replacing them with methods from `java.lang.IO` class.\n\n\nThis inspection helps migrate code to use the newer `java.lang.IO` class\n\n\n**Example:**\n\n    System.out.println(\"Hello, World!\");\n\nAfter the quick-fix is applied:\n\n    IO.println(\"Hello, World!\");\n\nConfigure the inspection:\n\n* Use the **Report in regular classes** option to report and suggest fixes in regular classes\n* Use the **Report in compact source files** option to report and suggest fixes in compact source files\n\nThis inspection depends on the Java feature 'java.lang.IO utility class', which is available since Java 25.\n\nInspection ID: MigrateToJavaLangIo\n\nNew in 2025.2"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "MigrateToJavaLangIo",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level migration aids/Java 25",
                      "index": 138,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NativeMethods",
                "shortDescription": {
                  "text": "Native method"
                },
                "fullDescription": {
                  "text": "Reports methods declared 'native'. Native methods are inherently unportable. Inspection ID: NativeMethods",
                  "markdown": "Reports methods declared `native`. Native methods are inherently unportable.\n\nInspection ID: NativeMethods"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NativeMethod",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Portability",
                      "index": 69,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EqualsWithItself",
                "shortDescription": {
                  "text": "'equals()' called on itself"
                },
                "fullDescription": {
                  "text": "Reports calls to 'equals()', 'compareTo()' or similar, that compare an object for equality with itself. The method contracts of these methods specify that such calls will always return 'true' for 'equals()' or '0' for 'compareTo()'. The inspection also checks calls to 'Objects.equals()', 'Objects.deepEquals()', 'Arrays.equals()', 'Comparator.compare()', 'assertEquals()' methods of test frameworks (JUnit, TestNG, AssertJ), 'Integer.compare()', 'Integer.compareUnsigned()' and similar methods. Note that in rare cases, the inspection may report 'equals()' calls that return false, because while the expressions on the both sides are the same, they produce separate objects, and comparison is performed on references, rather than on content. The simplest example is 'new Object().equals(new Object())'. In any case, such calls are suspicious, and likely something else was intended. Example: 'class Foo {\n    boolean foo(Object o) {\n        return o.equals(o); // warning\n    }\n\n    boolean bar(String[] ss) {\n        return Arrays.equals(ss, ss); // warning\n    }\n}' Inspection ID: EqualsWithItself",
                  "markdown": "Reports calls to `equals()`, `compareTo()` or similar, that compare an object for equality with itself. The method contracts of these methods specify that such calls will always return `true` for `equals()` or `0` for `compareTo()`. The inspection also checks calls to `Objects.equals()`, `Objects.deepEquals()`, `Arrays.equals()`, `Comparator.compare()`, `assertEquals()` methods of test frameworks (JUnit, TestNG, AssertJ), `Integer.compare()`, `Integer.compareUnsigned()` and similar methods.\n\n\nNote that in rare cases, the inspection may report `equals()` calls that return false, because while the expressions\non the both sides are the same, they produce separate objects, and comparison is performed on references, rather than on content.\nThe simplest example is `new Object().equals(new Object())`. In any case, such calls are suspicious, and likely\nsomething else was intended.\n\n**Example:**\n\n\n      class Foo {\n        boolean foo(Object o) {\n            return o.equals(o); // warning\n        }\n\n        boolean bar(String[] ss) {\n            return Arrays.equals(ss, ss); // warning\n        }\n    }\n\nInspection ID: EqualsWithItself"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EqualsWithItself",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ClassInheritanceDepth",
                "shortDescription": {
                  "text": "Class too deep in inheritance tree"
                },
                "fullDescription": {
                  "text": "Reports classes that are too deep in the inheritance hierarchy. Classes that are too deeply inherited may be confusing and indicate that a refactoring is necessary. All superclasses from a library are treated as a single superclass, libraries are considered unmodifiable. Use the Inheritance depth limit field to specify the maximum inheritance depth for a class. Inspection ID: ClassInheritanceDepth",
                  "markdown": "Reports classes that are too deep in the inheritance hierarchy.\n\nClasses that are too deeply inherited may be confusing and indicate that a refactoring is necessary.\n\nAll superclasses from a library are treated as a single superclass, libraries are considered unmodifiable.\n\nUse the **Inheritance depth limit** field to specify the maximum inheritance depth for a class.\n\nInspection ID: ClassInheritanceDepth"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ClassTooDeepInInheritanceTree",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Class metrics",
                      "index": 96,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MarkedForRemoval",
                "shortDescription": {
                  "text": "Usage of API marked for removal"
                },
                "fullDescription": {
                  "text": "Reports usages of deprecated APIs (classes, fields, and methods) that are marked for removal with '@Deprecated(forRemoval=true)'. The code that uses an API marked for removal may cause a runtime error with a future version of the API. That is why the recommended severity for this inspection is Error. You can change the severity to Warning if you want to use the same code highlighting as in ordinary deprecation. Inspection ID: MarkedForRemoval New in 2017.3",
                  "markdown": "Reports usages of deprecated APIs (classes, fields, and methods) that are marked for removal with `@Deprecated(`**forRemoval**`=true)`.\n\n\nThe code that uses an API marked for removal may cause a runtime error with a future version of the API. That is why\nthe recommended severity for this inspection is *Error*.\n\n\nYou can change the severity to *Warning* if you want to use the same code highlighting as in ordinary deprecation.\n\nInspection ID: MarkedForRemoval\n\nNew in 2017.3"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "removal",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code maturity",
                      "index": 46,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NestedConditionalExpression",
                "shortDescription": {
                  "text": "Nested conditional expression"
                },
                "fullDescription": {
                  "text": "Reports nested conditional expressions as they may result in extremely confusing code. Example: 'int y = a == 10 ? b == 20 ? 10 : a : b;' Inspection ID: NestedConditionalExpression",
                  "markdown": "Reports nested conditional expressions as they may result in extremely confusing code.\n\nExample:\n\n\n      int y = a == 10 ? b == 20 ? 10 : a : b;\n\n\nInspection ID: NestedConditionalExpression"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NestedConditionalExpression",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Control flow issues",
                      "index": 24,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ImplicitNumericConversion",
                "shortDescription": {
                  "text": "Implicit numeric conversion"
                },
                "fullDescription": {
                  "text": "Reports implicit conversion between numeric types. Implicit numeric conversion is not a problem in itself but, if unexpected, may cause difficulties when tracing bugs. Example: 'double m(int i) {\n    return i * 10;\n  }' After the quick-fix is applied: 'double m(int i) {\n    return (double) (i * 10);\n  }' Configure the inspection: Use the Ignore widening conversions option to ignore implicit conversion that cannot result in data loss (for example, 'int'->'long'). Use the Ignore conversions from and to 'char' option to ignore conversion from and to 'char'. The inspection will still report conversion from and to floating-point numbers. Use the Ignore conversion from constants and literals to make the inspection ignore conversion from literals and compile-time constants. Inspection ID: ImplicitNumericConversion",
                  "markdown": "Reports implicit conversion between numeric types.\n\nImplicit numeric conversion is not a problem in itself but, if unexpected, may cause difficulties when tracing bugs.\n\n**Example:**\n\n\n      double m(int i) {\n        return i * 10;\n      }\n\nAfter the quick-fix is applied:\n\n\n      double m(int i) {\n        return (double) (i * 10);\n      }\n\nConfigure the inspection:\n\n* Use the **Ignore widening conversions** option to ignore implicit conversion that cannot result in data loss (for example, `int`-\\>`long`).\n* Use the **Ignore conversions from and to 'char'** option to ignore conversion from and to `char`. The inspection will still report conversion from and to floating-point numbers.\n* Use the **Ignore conversion from constants and literals** to make the inspection ignore conversion from literals and compile-time constants.\n\nInspection ID: ImplicitNumericConversion"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ImplicitNumericConversion",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Numeric issues",
                      "index": 25,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "WhileCanBeForeach",
                "shortDescription": {
                  "text": "'while' loop can be replaced with enhanced 'for' loop"
                },
                "fullDescription": {
                  "text": "Reports 'while' loops that iterate over collections and can be replaced with enhanced 'for' loops (foreach iteration syntax). Example: 'Iterator it = c.iterator();\n  while(it.hasNext()) {\n    Object obj = it.next();\n    System.out.println(obj);\n  }' Can be replaced with: 'for (Object obj : c) {\n    System.out.println(obj);\n  }' This inspection depends on the Java feature 'For-each loops', which is available since Java 5. Inspection ID: WhileCanBeForeach",
                  "markdown": "Reports `while` loops that iterate over collections and can be replaced with enhanced `for` loops (foreach iteration syntax).\n\n**Example:**\n\n\n      Iterator it = c.iterator();\n      while(it.hasNext()) {\n        Object obj = it.next();\n        System.out.println(obj);\n      }\n\nCan be replaced with:\n\n\n      for (Object obj : c) {\n        System.out.println(obj);\n      }\n\nThis inspection depends on the Java feature 'For-each loops', which is available since Java 5.\n\nInspection ID: WhileCanBeForeach"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "WhileLoopReplaceableByForEach",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level migration aids/Java 5",
                      "index": 93,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BulkFileAttributesRead",
                "shortDescription": {
                  "text": "Bulk 'Files.readAttributes()' call can be used"
                },
                "fullDescription": {
                  "text": "Reports multiple sequential 'java.io.File' attribute checks, such as: 'isDirectory()' 'isFile()' 'lastModified()' 'length()' Such calls can be replaced with a bulk 'Files.readAttributes()' call. This is usually more performant than multiple separate attribute checks. Example: 'boolean isNewFile(File file, long lastModified) throws IOException {\n    return file.isFile() && file.lastModified() > lastModified;\n  }' After the quick-fix is applied: 'boolean isNewFile(File file, long lastModified) throws IOException {\n    var fileAttributes = Files.readAttributes(file.toPath(), BasicFileAttributes.class);\n    return fileAttributes.isRegularFile() && fileAttributes.lastModifiedTime().toMillis() > lastModified;\n  }' This inspection does not show a warning if 'IOException' is not handled in the current context, but the quick-fix is still available. Note that the replacements are usually not completely equivalent and should be applied with care. In particular, the behavior could differ if the file does not exist at all. This inspection only reports if the language level of the project or module is 7 or higher. Inspection ID: BulkFileAttributesRead New in 2022.1",
                  "markdown": "Reports multiple sequential `java.io.File` attribute checks, such as:\n\n* `isDirectory()`\n* `isFile()`\n* `lastModified()`\n* `length()`\n\nSuch calls can be replaced with a bulk `Files.readAttributes()` call. This is usually more performant than multiple separate attribute checks.\n\nExample:\n\n\n      boolean isNewFile(File file, long lastModified) throws IOException {\n        return file.isFile() && file.lastModified() > lastModified;\n      }\n\nAfter the quick-fix is applied:\n\n\n      boolean isNewFile(File file, long lastModified) throws IOException {\n        var fileAttributes = Files.readAttributes(file.toPath(), BasicFileAttributes.class);\n        return fileAttributes.isRegularFile() && fileAttributes.lastModifiedTime().toMillis() > lastModified;\n      }\n\nThis inspection does not show a warning if `IOException` is not handled in the current context, but the quick-fix is still available.\n\nNote that the replacements are usually not completely equivalent and should be applied with care. In particular, the behavior could differ if\nthe file does not exist at all.\n\nThis inspection only reports if the language level of the project or module is 7 or higher.\n\nInspection ID: BulkFileAttributesRead\n\nNew in 2022.1"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "BulkFileAttributesRead",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Performance",
                      "index": 4,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NotNullFieldNotInitialized",
                "shortDescription": {
                  "text": "@NotNull field is not initialized"
                },
                "fullDescription": {
                  "text": "Reports fields annotated as not-null that are not initialized in the constructor. Example: 'public class MyClass {\n  private @NotNull String value;\n\n  public void setValue(@NotNull String value) {\n    this.value = value;\n  }\n\n  public @NotNull String getValue() {\n    return value;\n  }\n}' Such fields may violate the not-null constraint. In the example above, the 'setValue' parameter is annotated as not-null, but 'getValue' may return null if the setter was not called. Inspection ID: NotNullFieldNotInitialized",
                  "markdown": "Reports fields annotated as not-null that are not initialized in the constructor.\n\nExample:\n\n    public class MyClass {\n      private @NotNull String value;\n\n      public void setValue(@NotNull String value) {\n        this.value = value;\n      }\n\n      public @NotNull String getValue() {\n        return value;\n      }\n    }\n\n\nSuch fields may violate the not-null constraint. In the example above, the `setValue` parameter is annotated as not-null, but\n`getValue` may return null if the setter was not called.\n\nInspection ID: NotNullFieldNotInitialized"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NotNullFieldNotInitialized",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs/Nullability problems",
                      "index": 141,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OverlyComplexBooleanExpression",
                "shortDescription": {
                  "text": "Overly complex boolean expression"
                },
                "fullDescription": {
                  "text": "Reports boolean expressions with too many terms. Such expressions may be confusing and bug-prone. Example: 'cond(x1) && cond(x2) ^ cond(x3) && cond(x4);' Configure the inspection: Use the Maximum number of terms field to specify the maximum number of terms allowed in a boolean expression. Use the Ignore pure conjunctions and disjunctions option to ignore boolean expressions which use only a single boolean operator repeatedly. Inspection ID: OverlyComplexBooleanExpression",
                  "markdown": "Reports boolean expressions with too many terms. Such expressions may be confusing and bug-prone.\n\nExample:\n\n\n      cond(x1) && cond(x2) ^ cond(x3) && cond(x4);\n\nConfigure the inspection:\n\n* Use the **Maximum number of terms** field to specify the maximum number of terms allowed in a boolean expression.\n* Use the **Ignore pure conjunctions and disjunctions** option to ignore boolean expressions which use only a single boolean operator repeatedly.\n\nInspection ID: OverlyComplexBooleanExpression"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "OverlyComplexBooleanExpression",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Control flow issues",
                      "index": 24,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NotifyCalledOnCondition",
                "shortDescription": {
                  "text": "'notify()' or 'notifyAll()' called on 'java.util.concurrent.locks.Condition' object"
                },
                "fullDescription": {
                  "text": "Reports calls to 'notify()' or 'notifyAll()' made on 'java.util.concurrent.locks.Condition' object. This is probably a programming error, and some variant of the 'signal()' or 'signalAll()' method was intended instead, otherwise 'IllegalMonitorStateException' may occur. Example: 'class C {\n    final Lock l = new ReentrantLock();\n    final Condition c = l.newCondition();\n\n    void release() {\n      l.lock();\n      try {\n        c.notifyAll(); // probably 'signalAll()' was intended here\n      } finally {\n        l.unlock();\n      }\n    }\n  }' Inspection ID: NotifyCalledOnCondition",
                  "markdown": "Reports calls to `notify()` or `notifyAll()` made on `java.util.concurrent.locks.Condition` object.\n\n\nThis is probably a programming error, and some variant of the `signal()` or\n`signalAll()` method was intended instead, otherwise `IllegalMonitorStateException` may occur.\n\n**Example:**\n\n\n      class C {\n        final Lock l = new ReentrantLock();\n        final Condition c = l.newCondition();\n\n        void release() {\n          l.lock();\n          try {\n            c.notifyAll(); // probably 'signalAll()' was intended here\n          } finally {\n            l.unlock();\n          }\n        }\n      }\n\nInspection ID: NotifyCalledOnCondition"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NotifyCalledOnCondition",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Threading issues",
                      "index": 23,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NewMethodNamingConvention",
                "shortDescription": {
                  "text": "Method naming convention"
                },
                "fullDescription": {
                  "text": "Reports methods whose names are too short, too long, or do not follow the specified regular expression pattern. Instance methods that override library methods and constructors are ignored by this inspection. Example: if the inspection is enabled for static methods, and the minimum specified method name length is 4 (the default), the following static method produces a warning, because the length of its name is 3, which is less than 4: 'public static int max(int a, int b)'. A quick-fix that renames such methods is available only in the editor. Configure the inspection: Use the list in the Options section to specify which methods should be checked. Deselect the checkboxes for the method types for which you want to skip the check. Specify 0 in the length fields to skip the corresponding checks. Regular expressions should be specified in the standard 'java.util.regex' format. Inspection ID: NewMethodNamingConvention",
                  "markdown": "Reports methods whose names are too short, too long, or do not follow the specified regular expression pattern.\n\nInstance methods that override library\nmethods and constructors are ignored by this inspection.\n\n**Example:** if the inspection is enabled for static methods, and the minimum specified method name length is 4 (the default),\nthe following static method produces a warning, because the length of its name is 3, which is less\nthan 4: `public static int max(int a, int b)`.\n\nA quick-fix that renames such methods is available only in the editor.\n\nConfigure the inspection:\n\nUse the list in the **Options** section to specify which methods should be checked. Deselect the checkboxes for the method types for which\nyou want to skip the check. Specify **0** in the length fields to skip the corresponding checks.\n\nRegular expressions should be specified in the standard `java.util.regex` format.\n\nInspection ID: NewMethodNamingConvention"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NewMethodNamingConvention",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Naming conventions/Method",
                      "index": 83,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OverlyStrongTypeCast",
                "shortDescription": {
                  "text": "Overly strong type cast"
                },
                "fullDescription": {
                  "text": "Reports type casts that are overly strong. For instance, casting an object to 'ArrayList' when casting it to 'List' would do just as well. Note: much like the Redundant type cast inspection, applying the fix for this inspection may change the semantics of your program if you are intentionally using an overly strong cast to cause a 'ClassCastException' to be generated. Example: 'interface Super {\n    void doSmth();\n  }\n  interface Sub extends Super { }\n\n  void use(Object obj) {\n    // Warning: ((Super)obj).doSmth() could be used\n    ((Sub)obj).doSmth();\n  }' Use the checkbox below to ignore casts when there's a matching 'instanceof' check in the code. Inspection ID: OverlyStrongTypeCast",
                  "markdown": "Reports type casts that are overly strong. For instance, casting an object to `ArrayList` when casting it to `List` would do just as well.\n\n\n**Note:** much like the *Redundant type cast*\ninspection, applying the fix for this inspection may change the semantics of your program if you are\nintentionally using an overly strong cast to cause a `ClassCastException` to be generated.\n\nExample:\n\n\n      interface Super {\n        void doSmth();\n      }\n      interface Sub extends Super { }\n\n      void use(Object obj) {\n        // Warning: ((Super)obj).doSmth() could be used\n        ((Sub)obj).doSmth();\n      }\n\n\nUse the checkbox below to ignore casts when there's a matching `instanceof` check in the code.\n\nInspection ID: OverlyStrongTypeCast"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "OverlyStrongTypeCast",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Abstraction issues",
                      "index": 63,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JavaLangImport",
                "shortDescription": {
                  "text": "Unnecessary import from the 'java.lang' package"
                },
                "fullDescription": {
                  "text": "Reports 'import' statements that refer to the 'java.lang' package. 'java.lang' classes are always implicitly imported, so such import statements are redundant and confusing. Since IntelliJ IDEA can automatically detect and fix such statements with its Optimize Imports command, this inspection is mostly useful for offline reporting on code bases that you don't intend to change. Inspection ID: JavaLangImport",
                  "markdown": "Reports `import` statements that refer to the `java.lang` package.\n\n\n`java.lang` classes are always implicitly imported, so such import statements are\nredundant and confusing.\n\n\nSince IntelliJ IDEA can automatically detect and fix such statements with its **Optimize Imports** command, this inspection is mostly useful for offline reporting on code bases that you don't intend to change.\n\nInspection ID: JavaLangImport"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JavaLangImport",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Imports",
                      "index": 19,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UtilityClass",
                "shortDescription": {
                  "text": "Utility class"
                },
                "fullDescription": {
                  "text": "Reports utility classes. Utility classes have all fields and methods declared as 'static' and their presence may indicate a lack of object-oriented design. Use the Ignore if annotated by option to specify special annotations. The inspection ignores classes annotated with one of these annotations. Inspection ID: UtilityClass",
                  "markdown": "Reports utility classes.\n\nUtility classes have all fields and methods declared as `static` and their\npresence may indicate a lack of object-oriented design.\n\n\nUse the **Ignore if annotated by** option to specify special annotations. The inspection ignores classes annotated with one of\nthese annotations.\n\n\nInspection ID: UtilityClass"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UtilityClass",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Class structure",
                      "index": 17,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ClassNameDiffersFromFileName",
                "shortDescription": {
                  "text": "Class name differs from file name"
                },
                "fullDescription": {
                  "text": "Reports top-level class names that don't match the name of a file containing them. While the Java specification allows for naming non-'public' classes this way, files with unmatched names may be confusing and decrease usefulness of various software tools. Inspection ID: ClassNameDiffersFromFileName",
                  "markdown": "Reports top-level class names that don't match the name of a file containing them.\n\nWhile the Java specification allows for naming non-`public` classes this way,\nfiles with unmatched names may be confusing and decrease usefulness of various software tools.\n\nInspection ID: ClassNameDiffersFromFileName"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ClassNameDiffersFromFileName",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Class structure",
                      "index": 17,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IndexOfReplaceableByContains",
                "shortDescription": {
                  "text": "'String.indexOf()' expression can be replaced with 'contains()'"
                },
                "fullDescription": {
                  "text": "Reports comparisons with 'String.indexOf()' calls that can be replaced with a call to the 'String.contains()' method. Example: 'boolean b = \"abcd\".indexOf('e') >= 0;' After the quick-fix is applied: 'boolean b = \"abcd\".contains('e');' This inspection only reports if the language level of the project or module is 5 or higher. Inspection ID: IndexOfReplaceableByContains",
                  "markdown": "Reports comparisons with `String.indexOf()` calls that can be replaced with a call to the `String.contains()` method.\n\n**Example:**\n\n\n      boolean b = \"abcd\".indexOf('e') >= 0;\n\nAfter the quick-fix is applied:\n\n\n      boolean b = \"abcd\".contains('e');\n\nThis inspection only reports if the language level of the project or module is 5 or higher.\n\nInspection ID: IndexOfReplaceableByContains"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "IndexOfReplaceableByContains",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level migration aids/Java 5",
                      "index": 93,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StringConcatenationArgumentToLogCall",
                "shortDescription": {
                  "text": "Non-constant string concatenation as argument to logging call"
                },
                "fullDescription": {
                  "text": "Reports non-constant string concatenations that are used as arguments to SLF4J and Log4j 2 logging methods. Non-constant concatenations are evaluated at runtime even when the logging message is not logged; this can negatively impact performance. It is recommended to use a parameterized log message instead, which will not be evaluated when logging is disabled. Example: 'public class Vital {\n    private static final Logger LOG = LoggerFactory.getLogger(Vital.class);\n\n    public void saveTheWorld(int i, String s, boolean b) {\n      LOG.info(\"saveTheWorld(\" + i + \", \" + s + \", \"  + b + \")\");\n      // todo\n    }\n  }' After the quick-fix is applied: 'public class Vital {\n    private static final Logger LOG = LoggerFactory.getLogger(Vital.class);\n\n    public void saveTheWorld(int i, String s, boolean b) {\n      LOG.info(\"saveTheWorld({}, {}, {})\", i, s, b);\n      // todo\n    }\n  }' Configure the inspection: Use the Warn on list to ignore certain higher logging levels. Higher logging levels may be enabled even in production, and the arguments will always be evaluated. Inspection ID: StringConcatenationArgumentToLogCall",
                  "markdown": "Reports non-constant string concatenations that are used as arguments to **SLF4J** and **Log4j 2** logging methods. Non-constant concatenations are evaluated at runtime even when the logging message is not logged; this can negatively impact performance. It is recommended to use a parameterized log message instead, which will not be evaluated when logging is disabled.\n\n**Example:**\n\n\n      public class Vital {\n        private static final Logger LOG = LoggerFactory.getLogger(Vital.class);\n\n        public void saveTheWorld(int i, String s, boolean b) {\n          LOG.info(\"saveTheWorld(\" + i + \", \" + s + \", \"  + b + \")\");\n          // todo\n        }\n      }\n\nAfter the quick-fix is applied:\n\n\n      public class Vital {\n        private static final Logger LOG = LoggerFactory.getLogger(Vital.class);\n\n        public void saveTheWorld(int i, String s, boolean b) {\n          LOG.info(\"saveTheWorld({}, {}, {})\", i, s, b);\n          // todo\n        }\n      }\n\n\nConfigure the inspection:\n\n* Use the **Warn on** list to ignore certain higher logging levels. Higher logging levels may be enabled even in production, and the arguments will always be evaluated.\n\nInspection ID: StringConcatenationArgumentToLogCall"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "StringConcatenationArgumentToLogCall",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Logging",
                      "index": 91,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OptionalContainsCollection",
                "shortDescription": {
                  "text": "'Optional' contains array or collection"
                },
                "fullDescription": {
                  "text": "Reports 'java.util.Optional' or 'com.google.common.base.Optional' types with an array or collection type parameter. In such cases, it is more clear to just use an empty array or collection to indicate the absence of result. Example: 'Optional<List<Integer>> foo() {\n    return Optional.empty();\n  }' This code could look like: 'List<Integer> foo() {\n    return List.of();\n  }' This inspection depends on the Java feature 'Stream and Optional API', which is available since Java 8. Inspection ID: OptionalContainsCollection",
                  "markdown": "Reports `java.util.Optional` or `com.google.common.base.Optional` types with an array or collection type parameter.\n\nIn such cases, it is more clear to just use an empty array or collection to indicate the absence of result.\n\n**Example:**\n\n\n      Optional<List<Integer>> foo() {\n        return Optional.empty();\n      }\n\nThis code could look like:\n\n\n      List<Integer> foo() {\n        return List.of();\n      }\n      \nThis inspection depends on the Java feature 'Stream and Optional API', which is available since Java 8.\n\nInspection ID: OptionalContainsCollection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "OptionalContainsCollection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SimplifiableAssertion",
                "shortDescription": {
                  "text": "Simplifiable assertion"
                },
                "fullDescription": {
                  "text": "Reports any 'assert' calls that can be replaced with simpler and equivalent calls. Example → Replacement 'assertEquals(true, x());' 'assertTrue(x());' 'assertTrue(y() != null);' 'assertNotNull(y());' 'assertTrue(z == z());' 'assertSame(z, z());' 'assertTrue(a.equals(a()));' 'assertEquals(a, a());' 'assertTrue(false);' 'fail();' Inspection ID: SimplifiableAssertion",
                  "markdown": "Reports any `assert` calls that can be replaced with simpler and equivalent calls.\n\n|             Example              | → |       Replacement       |\n|----------------------------------|---|-------------------------|\n| `assertEquals(`**true**`, x());` |   | `assertTrue(x());`      |\n| `assertTrue(y() != null);`       |   | `assertNotNull(y());`   |\n| `assertTrue(z == z());`          |   | `assertSame(z, z());`   |\n| `assertTrue(a.equals(a()));`     |   | `assertEquals(a, a());` |\n| `assertTrue(`**false**`);`       |   | `fail();`               |\n\nInspection ID: SimplifiableAssertion"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SimplifiableAssertion",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Test frameworks",
                      "index": 102,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InterfaceMethodClashesWithObject",
                "shortDescription": {
                  "text": "Interface method clashes with method in 'Object'"
                },
                "fullDescription": {
                  "text": "Reports interface methods that clash with the protected methods 'clone()' and 'finalize()' from the 'java.lang.Object' class. In an interface, it is possible to declare these methods with a return type that is incompatible with the 'java.lang.Object' methods. A class that implements such an interface will not be compilable. When the interface is functional, it remains possible to create a lambda from it, but this is not recommended. Example: '// Warning: this interface cannot be implemented\n  // by any class, only by a lambda or method reference\n  interface MyInterface {\n    double clone();\n  }' Inspection ID: InterfaceMethodClashesWithObject",
                  "markdown": "Reports interface methods that clash with the **protected** methods `clone()` and `finalize()` from the `java.lang.Object` class.\n\nIn an interface, it is possible to declare these methods with a return type that is incompatible with the `java.lang.Object` methods.\nA class that implements such an interface will not be compilable.\nWhen the interface is functional, it remains possible to create a lambda from it, but this is not recommended.\n\nExample:\n\n\n      // Warning: this interface cannot be implemented\n      // by any class, only by a lambda or method reference\n      interface MyInterface {\n        double clone();\n      }\n\nInspection ID: InterfaceMethodClashesWithObject"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "InterfaceMethodClashesWithObject",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Abstraction issues",
                      "index": 63,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LoadLibraryWithNonConstantString",
                "shortDescription": {
                  "text": "Call to 'System.loadLibrary()' with non-constant string"
                },
                "fullDescription": {
                  "text": "Reports calls to 'java.lang.System.loadLibrary()', 'java.lang.System.load()', 'java.lang.Runtime.loadLibrary()' and 'java.lang.Runtime.load()' which take a dynamically-constructed string as the name of the library. Constructed library name strings are a common source of security breaches. By default, this inspection ignores compile-time constants. Example: 'void test(int i) {\n    System.loadLibrary(\"foo\" + i);\n  }' Use the inspection settings to consider any 'static final' fields as constant. Be careful, because strings like the following will be ignored when the option is enabled: 'private static final String LIBRARY = getUserInput();' Inspection ID: LoadLibraryWithNonConstantString",
                  "markdown": "Reports calls to `java.lang.System.loadLibrary()`, `java.lang.System.load()`, `java.lang.Runtime.loadLibrary()` and `java.lang.Runtime.load()` which take a dynamically-constructed string as the name of the library.\n\n\nConstructed library name strings are a common source of security breaches.\nBy default, this inspection ignores compile-time constants.\n\n**Example:**\n\n\n      void test(int i) {\n        System.loadLibrary(\"foo\" + i);\n      }\n\n\nUse the inspection settings to consider any `static final` fields as constant.\nBe careful, because strings like the following will be ignored when the option is enabled:\n\n\n      private static final String LIBRARY = getUserInput();\n\nInspection ID: LoadLibraryWithNonConstantString"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "LoadLibraryWithNonConstantString",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Security",
                      "index": 31,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StaticMethodOnlyUsedInOneClass",
                "shortDescription": {
                  "text": "Static member only used from one other class"
                },
                "fullDescription": {
                  "text": "Reports 'static' methods and fields that are only used from a class other than the containing class. Such members could be moved into the using class. Factory methods and members accessed from an anonymous class inside the member's class are ignored by this inspection. Convenience overloads, which call a method with the same name in the same class but have fewer parameters, are also ignored. Use the first checkbox to suppress this inspection when the static member is only used from a test class. Use the second checkbox below to ignore member usages from inside anonymous, local, or non-static inner classes. Use the third checkbox below to not warn on members that cannot be moved without problems, for example, because a method with an identical signature is already present in the target class, or because a field or a method used inside the method will not be accessible when this method is moved. Use the fourth checkbox to ignore members located in utility classes. Inspection ID: StaticMethodOnlyUsedInOneClass",
                  "markdown": "Reports `static` methods and fields that are only used from a class other than the containing class. Such members could be moved into the using class. Factory methods and members accessed from an anonymous class inside the member's class are ignored by this inspection. Convenience overloads, which call a method with the same name in the same class but have fewer parameters, are also ignored.\n\n\nUse the first checkbox to suppress this inspection when the static member is only used from a test class.\n\n\nUse the second checkbox below to ignore member usages from inside anonymous, local, or non-static inner classes.\n\n\nUse the third checkbox below to not warn on members that cannot be moved without problems,\nfor example, because a method with an identical signature is already present in the target class,\nor because a field or a method used inside the method will not be accessible when this method is moved.\n\n\nUse the fourth checkbox to ignore members located in utility classes.\n\nInspection ID: StaticMethodOnlyUsedInOneClass"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "StaticMethodOnlyUsedInOneClass",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Abstraction issues",
                      "index": 63,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantEscapeInRegexReplacement",
                "shortDescription": {
                  "text": "Redundant escape in regex replacement string"
                },
                "fullDescription": {
                  "text": "Reports redundant escapes in the replacement string of regex methods. It is allowed to escape any character in a regex replacement string, but only for the '$' and '\\' characters is escaping necessary. Example: 'string.replaceAll(\"a\", \"\\\\b\");' After the quick-fix is applied: 'string.replaceAll(\"a\", \"b\");' New in 2022.3 Inspection ID: RedundantEscapeInRegexReplacement",
                  "markdown": "Reports redundant escapes in the replacement string of regex methods. It is allowed to escape any character in a regex replacement string, but only for the `$` and `\\` characters is escaping necessary.\n\n**Example:**\n\n\n      string.replaceAll(\"a\", \"\\\\b\");\n\nAfter the quick-fix is applied:\n\n\n      string.replaceAll(\"a\", \"b\");\n\nNew in 2022.3\n\nInspection ID: RedundantEscapeInRegexReplacement"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RedundantEscapeInRegexReplacement",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Verbose or redundant code constructs",
                      "index": 37,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SynchronizedOnLiteralObject",
                "shortDescription": {
                  "text": "Synchronization on an object initialized with a literal"
                },
                "fullDescription": {
                  "text": "Reports 'synchronized' blocks that lock on an object initialized with a literal. String literals are interned and 'Character', 'Boolean' and 'Number' literals can be allocated from a cache. Because of this, it is possible that some other part of the system, which uses an object initialized with the same literal, is actually holding a reference to the exact same object. This can create unexpected dead-lock situations, if the lock object was thought to be private. Example: 'class Main {\n    final String mutex = \"Mutex\";\n    void method() {\n      synchronized (mutex) {\n      }\n    }\n  }' Use the Warn on all possible literals option to report any synchronization on 'String', 'Character', 'Boolean' and 'Number' objects. Inspection ID: SynchronizedOnLiteralObject",
                  "markdown": "Reports `synchronized` blocks that lock on an object initialized with a literal.\n\n\nString literals are interned and `Character`, `Boolean` and `Number` literals can be allocated from a cache.\nBecause of this, it is possible that some other part of the system, which uses an object initialized with the same literal, is actually\nholding a reference to the exact same object. This can create unexpected dead-lock situations, if the lock object was thought to be private.\n\n**Example:**\n\n\n      class Main {\n        final String mutex = \"Mutex\";\n        void method() {\n          synchronized (mutex) {\n          }\n        }\n      }\n\n\nUse the **Warn on all possible literals** option to report any synchronization on\n`String`, `Character`, `Boolean` and `Number` objects.\n\nInspection ID: SynchronizedOnLiteralObject"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SynchronizedOnLiteralObject",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Threading issues",
                      "index": 23,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Java9ReflectionClassVisibility",
                "shortDescription": {
                  "text": "Reflective access across modules issues"
                },
                "fullDescription": {
                  "text": "Reports 'Class.forName()' and 'ClassLoader.loadClass()' calls which try to access classes that aren't visible in the current scope due to Java 9 module accessibility rules. This inspection depends on the Java feature 'Modules', which is available since Java 9. Inspection ID: Java9ReflectionClassVisibility",
                  "markdown": "Reports `Class.forName()` and `ClassLoader.loadClass()` calls which try to access classes that aren't visible in the current scope due to Java 9 module accessibility rules.\n\nThis inspection depends on the Java feature 'Modules', which is available since Java 9.\n\nInspection ID: Java9ReflectionClassVisibility"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "Java9ReflectionClassVisibility",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Reflective access",
                      "index": 103,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CharsetObjectCanBeUsed",
                "shortDescription": {
                  "text": "Standard 'Charset' object can be used"
                },
                "fullDescription": {
                  "text": "Reports methods and constructors in which constant charset 'String' literal (for example, '\"UTF-8\"') can be replaced with the predefined 'StandardCharsets.UTF_8' code. The code after the fix may work faster, because the charset lookup becomes unnecessary. Also, catching 'UnsupportedEncodingException' may become unnecessary as well. In this case, the catch block will be removed automatically. Example: 'try {\n    byte[] bytes = \"str\".getBytes(\"UTF-8\");\n  } catch (UnsupportedEncodingException e) {\n  }' After quick-fix is applied: 'byte[] bytes = \"str\".getBytes(StandardCharsets.UTF_8);' The inspection is available in Java 7 and later. Inspection ID: CharsetObjectCanBeUsed New in 2018.2",
                  "markdown": "Reports methods and constructors in which constant charset `String` literal (for example, `\"UTF-8\"`) can be replaced with the predefined `StandardCharsets.UTF_8` code.\n\nThe code after the fix may work faster, because the charset lookup becomes unnecessary.\nAlso, catching `UnsupportedEncodingException` may become unnecessary as well. In this case,\nthe catch block will be removed automatically.\n\nExample:\n\n\n      try {\n        byte[] bytes = \"str\".getBytes(\"UTF-8\");\n      } catch (UnsupportedEncodingException e) {\n      }\n\nAfter quick-fix is applied:\n\n\n      byte[] bytes = \"str\".getBytes(StandardCharsets.UTF_8);\n\nThe inspection is available in Java 7 and later.\n\nInspection ID: CharsetObjectCanBeUsed\n\nNew in 2018.2"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CharsetObjectCanBeUsed",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseOfSunClasses",
                "shortDescription": {
                  "text": "Use of 'sun.*' classes"
                },
                "fullDescription": {
                  "text": "Reports uses of classes from the 'sun.*' hierarchy. Such classes are non-portable between different JVMs. Inspection ID: UseOfSunClasses",
                  "markdown": "Reports uses of classes from the `sun.*` hierarchy. Such classes are non-portable between different JVMs.\n\nInspection ID: UseOfSunClasses"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UseOfSunClasses",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Portability",
                      "index": 69,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantCast",
                "shortDescription": {
                  "text": "Redundant type cast"
                },
                "fullDescription": {
                  "text": "Reports unnecessary cast expressions. Example: 'static Object toObject(String s) {\n    return (Object) s;\n  }' After the quick-fix is applied: 'static Object toObject(String s) {\n    return s;\n  }' Use the checkbox below to ignore clarifying casts, for example casts in collection calls where 'Object' is expected: 'static void removeFromList(List<String> l, Object o) {\n    l.remove((String)o);\n  }' Inspection ID: RedundantCast",
                  "markdown": "Reports unnecessary cast expressions.\n\n**Example:**\n\n\n      static Object toObject(String s) {\n        return (Object) s;\n      }\n\nAfter the quick-fix is applied:\n\n\n        static Object toObject(String s) {\n        return s;\n      }\n\n\nUse the checkbox below to ignore clarifying casts, for example casts in collection calls where `Object` is expected:\n\n\n      static void removeFromList(List<String> l, Object o) {\n        l.remove((String)o);\n      } \n\nInspection ID: RedundantCast"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RedundantCast",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Verbose or redundant code constructs",
                      "index": 37,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AnonymousInnerClass",
                "shortDescription": {
                  "text": "Anonymous class can be replaced with inner class"
                },
                "fullDescription": {
                  "text": "Reports anonymous classes. Occasionally replacing anonymous classes with inner classes can lead to more readable and maintainable code. Some code standards discourage anonymous classes. Example: 'class Example {\n    public static void main(String[] args) {\n      new Thread() {\n        public void run() {\n          work()\n        }\n\n        private void work() {}\n      }.start();\n    }\n  }' After the quick-fix is applied: 'class Example {\n    public static void main(String[] args) {\n      new MyThread().start();\n    }\n\n    private static class MyThread extends Thread {\n      public void run() {\n        work();\n      }\n\n      private void work() {}\n    }\n  }' Inspection ID: AnonymousInnerClass",
                  "markdown": "Reports anonymous classes.\n\nOccasionally replacing anonymous classes with inner classes can lead to more readable and maintainable code.\nSome code standards discourage anonymous classes.\n\n**Example:**\n\n\n      class Example {\n        public static void main(String[] args) {\n          new Thread() {\n            public void run() {\n              work()\n            }\n\n            private void work() {}\n          }.start();\n        }\n      }\n\nAfter the quick-fix is applied:\n\n\n      class Example {\n        public static void main(String[] args) {\n          new MyThread().start();\n        }\n\n        private static class MyThread extends Thread {\n          public void run() {\n            work();\n          }\n\n          private void work() {}\n        }\n      }\n\nInspection ID: AnonymousInnerClass"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "AnonymousInnerClass",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Class structure",
                      "index": 17,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SimplifyCollector",
                "shortDescription": {
                  "text": "Simplifiable collector"
                },
                "fullDescription": {
                  "text": "Reports collectors that can be simplified. In particular, some cascaded 'groupingBy()' collectors can be expressed by using a simpler 'toMap()' collector, which is also likely to be more performant. Example: 'Collectors.groupingByConcurrent(String::length, Collectors.collectingAndThen(Collectors.maxBy(String::compareTo), Optional::get));' After the quick-fix is applied: 'Collectors.toConcurrentMap(String::length, Function.identity(), BinaryOperator.maxBy(String::compareTo));' This inspection depends on the Java feature 'Stream and Optional API', which is available since Java 8. Inspection ID: SimplifyCollector New in 2017.1",
                  "markdown": "Reports collectors that can be simplified.\n\nIn particular, some cascaded `groupingBy()` collectors can be expressed by using a\nsimpler `toMap()` collector, which is also likely to be more performant.\n\nExample:\n\n\n      Collectors.groupingByConcurrent(String::length, Collectors.collectingAndThen(Collectors.maxBy(String::compareTo), Optional::get));\n\nAfter the quick-fix is applied:\n\n\n      Collectors.toConcurrentMap(String::length, Function.identity(), BinaryOperator.maxBy(String::compareTo));\n\nThis inspection depends on the Java feature 'Stream and Optional API', which is available since Java 8.\n\nInspection ID: SimplifyCollector\n\nNew in 2017.1"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SimplifyCollector",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Verbose or redundant code constructs",
                      "index": 37,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MultipleTopLevelClassesInFile",
                "shortDescription": {
                  "text": "Multiple top level classes in single file"
                },
                "fullDescription": {
                  "text": "Reports multiple top-level classes in a single Java file. Putting multiple top-level classes in one file may be confusing and degrade the usefulness of various software tools. Inspection ID: MultipleTopLevelClassesInFile",
                  "markdown": "Reports multiple top-level classes in a single Java file.\n\nPutting multiple\ntop-level classes in one file may be confusing and degrade the usefulness of various\nsoftware tools.\n\nInspection ID: MultipleTopLevelClassesInFile"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MultipleTopLevelClassesInFile",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Class structure",
                      "index": 17,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IteratorNextDoesNotThrowNoSuchElementException",
                "shortDescription": {
                  "text": "'Iterator.next()' which can't throw 'NoSuchElementException'"
                },
                "fullDescription": {
                  "text": "Reports implementations of 'Iterator.next()' that cannot throw 'java.util.NoSuchElementException'. Such implementations violate the contract of 'java.util.Iterator', and may result in subtle bugs if the iterator is used in a non-standard way. Example: 'class Numbers implements Iterator<Integer> {\n    @Override\n    public Integer next() { //warning\n        if (hasNext()) {\n            return generateNext();\n        } else {\n            return null; //throw NoSuchElementException instead\n        }\n    }\n\n    ...\n  }' Inspection ID: IteratorNextDoesNotThrowNoSuchElementException",
                  "markdown": "Reports implementations of `Iterator.next()` that cannot throw `java.util.NoSuchElementException`.\n\n\nSuch implementations violate the contract of `java.util.Iterator`,\nand may result in subtle bugs if the iterator is used in a non-standard way.\n\n**Example:**\n\n\n      class Numbers implements Iterator<Integer> {\n        @Override\n        public Integer next() { //warning\n            if (hasNext()) {\n                return generateNext();\n            } else {\n                return null; //throw NoSuchElementException instead\n            }\n        }\n\n        ...\n      }\n\nInspection ID: IteratorNextDoesNotThrowNoSuchElementException"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "IteratorNextCanNotThrowNoSuchElementException",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IncorrectMessageFormat",
                "shortDescription": {
                  "text": "Incorrect 'MessageFormat' pattern"
                },
                "fullDescription": {
                  "text": "Reports incorrect message format patterns or incorrect indexes of placeholders The following errors are reported: Unparsed or negative index Unclosed brace Unpaired quote. In this case, a part of a pattern may not be used Probably incorrect number of quotes Incorrect lower bound of nested choice patterns Incorrect indexes of placeholders. In this case, a placeholder may not be substituted or an argument may not be used Examples: 'MessageFormat.format(\"{wrong}\", 1); // incorrect index\n  MessageFormat.format(\"{0\", 1); // Unmatched brace\n  MessageFormat.format(\"'{0}\", 1); // Unpaired quote\n  MessageFormat.format(\"It''''s {0}\", 1); // \"It''s\" will be printed, instead of \"It's\"\n  MessageFormat.format(\"{0}\", 1, 2); // The argument with index '1' is not used in the pattern' Use the Custom MessageFormat methods table to specify method calls that should have their arguments checked as MessageFormat patterns. The table contains pairs of fully qualified class name and method name regular expression to match the containing class and name of the method calls. Class names also match subclasses. New in 2023.2 Inspection ID: IncorrectMessageFormat",
                  "markdown": "Reports incorrect message format patterns or incorrect indexes of placeholders\n\nThe following errors are reported:\n\n* Unparsed or negative index\n* Unclosed brace\n* Unpaired quote. In this case, a part of a pattern may not be used\n* Probably incorrect number of quotes\n* Incorrect lower bound of nested choice patterns\n* Incorrect indexes of placeholders. In this case, a placeholder may not be substituted or an argument may not be used\n\nExamples:\n\n\n      MessageFormat.format(\"{wrong}\", 1); // incorrect index\n      MessageFormat.format(\"{0\", 1); // Unmatched brace\n      MessageFormat.format(\"'{0}\", 1); // Unpaired quote\n      MessageFormat.format(\"It''''s {0}\", 1); // \"It''s\" will be printed, instead of \"It's\"\n      MessageFormat.format(\"{0}\", 1, 2); // The argument with index '1' is not used in the pattern\n\n\nUse the **Custom MessageFormat methods** table\nto specify method calls that should have their arguments checked as MessageFormat patterns.\nThe table contains pairs of fully qualified class name and method name regular expression\nto match the containing class and name of the method calls.\nClass names also match subclasses.\n\nNew in 2023.2\n\nInspection ID: IncorrectMessageFormat"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "IncorrectMessageFormat",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SuspiciousTernaryOperatorInVarargsCall",
                "shortDescription": {
                  "text": "Suspicious ternary operator in varargs method call"
                },
                "fullDescription": {
                  "text": "Reports vararg method calls that use a ternary operator with mixed array and non-array branches. When compiled, both branches are wrapped in arrays. As a result, the array branch is turned into a two-dimensional array, which may indicate a problem. The quick-fix wraps the non-array branch in an array to prevent the compiler from doing the conversion. Example: 'static void bar(boolean flag) {\n        Object[] a = {1, 2};\n        Object b = \"hello\";\n        foo(flag ? a : b);\n    }\n    static void foo(Object... obj) {\n    }' After the quick-fix: 'static void bar(boolean flag) {\n        Object[] a = {1, 2};\n        Object b = \"hello\";\n        foo(flag ? a : new Object[]{b});\n    }\n    static void foo(Object... obj) {\n    }' This inspection depends on the Java feature 'Variable arity methods', which is available since Java 5. Inspection ID: SuspiciousTernaryOperatorInVarargsCall New in 2020.3",
                  "markdown": "Reports vararg method calls that use a ternary operator with mixed array and non-array branches.\n\n\nWhen compiled, both branches are wrapped in arrays. As a result, the array branch is turned into\na two-dimensional array, which may indicate a problem.\n\n\nThe quick-fix wraps the non-array branch in an array to prevent the compiler from doing the conversion.\n\n**Example:**\n\n\n        static void bar(boolean flag) {\n            Object[] a = {1, 2};\n            Object b = \"hello\";\n            foo(flag ? a : b);\n        }\n        static void foo(Object... obj) {\n        }\n\nAfter the quick-fix:\n\n\n        static void bar(boolean flag) {\n            Object[] a = {1, 2};\n            Object b = \"hello\";\n            foo(flag ? a : new Object[]{b});\n        }\n        static void foo(Object... obj) {\n        }\n\nThis inspection depends on the Java feature 'Variable arity methods', which is available since Java 5.\n\nInspection ID: SuspiciousTernaryOperatorInVarargsCall\n\nNew in 2020.3"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SuspiciousTernaryOperatorInVarargsCall",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SerializableInnerClassHasSerialVersionUIDField",
                "shortDescription": {
                  "text": "Serializable non-static inner class without 'serialVersionUID'"
                },
                "fullDescription": {
                  "text": "Reports non-static inner classes that implement 'java.io.Serializable', but do not define a 'serialVersionUID' field. Without a 'serialVersionUID' field, any change to the class will make previously serialized versions unreadable. It is strongly recommended that 'Serializable' non-static inner classes have a 'serialVersionUID' field, otherwise the default serialization algorithm may result in serialized versions being incompatible between compilers due to differences in synthetic accessor methods. A quick-fix is suggested to add the missing 'serialVersionUID' field. Example: 'class Outer {\n      class Inner implements Serializable {}\n  }' After the quick-fix is applied: 'class Outer {\n      class Inner implements Serializable {\n          private static final long serialVersionUID = -7004458730436243902L;\n      }\n  }' Use the following options to configure the inspection: List classes whose inheritors should not be reported by this inspection. This is meant for classes that inherit 'Serializable' from a superclass but are not intended for serialization. Whether to ignore 'Serializable' anonymous classes. Inspection ID: SerializableInnerClassHasSerialVersionUIDField",
                  "markdown": "Reports non-static inner classes that implement `java.io.Serializable`, but do not define a `serialVersionUID` field.\n\n\nWithout a `serialVersionUID` field, any change to the class will make previously\nserialized versions unreadable. It is strongly recommended that `Serializable`\nnon-static inner classes have a `serialVersionUID` field, otherwise the default\nserialization algorithm may result in serialized versions being incompatible between\ncompilers due to differences in synthetic accessor methods.\n\n\nA quick-fix is suggested to add the missing `serialVersionUID` field.\n\n**Example:**\n\n\n      class Outer {\n          class Inner implements Serializable {}\n      }\n\nAfter the quick-fix is applied:\n\n\n      class Outer {\n          class Inner implements Serializable {\n              private static final long serialVersionUID = -7004458730436243902L;\n          }\n      }\n\nUse the following options to configure the inspection:\n\n* List classes whose inheritors should not be reported by this inspection. This is meant for classes that inherit `Serializable` from a superclass but are not intended for serialization.\n* Whether to ignore `Serializable` anonymous classes.\n\nInspection ID: SerializableInnerClassHasSerialVersionUIDField"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SerializableNonStaticInnerClassWithoutSerialVersionUID",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Serialization issues",
                      "index": 18,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ParameterNameDiffersFromOverriddenParameter",
                "shortDescription": {
                  "text": "Parameter name differs from parameter in overridden or overloaded method"
                },
                "fullDescription": {
                  "text": "Reports parameters whose names differ from the corresponding parameters of the methods they override or overload. While legal in Java, such inconsistent names may be confusing and decrease the documentation benefits of good naming practices. Example: 'class Person {\n    Person(String fullName) {}\n  }\n  class Child extends Person {\n    Child(String name) { super(name); }\n  }' After the quick-fix is applied: 'class Person {\n    Person(String fullName) {}\n  }\n  class Child extends Person {\n    Child(String fullName) { super(fullName); }\n  }' Use the options to indicate whether to ignore overridden parameter names that are only a single character long or come from a library method. Both can be useful if you do not wish to be bound by dubious naming conventions used in libraries. Inspection ID: ParameterNameDiffersFromOverriddenParameter",
                  "markdown": "Reports parameters whose names differ from the corresponding parameters of the methods they override or overload. While legal in Java, such inconsistent names may be confusing and decrease the documentation benefits of good naming practices.\n\n**Example:**\n\n\n      class Person {\n        Person(String fullName) {}\n      }\n      class Child extends Person {\n        Child(String name) { super(name); }\n      }\n\nAfter the quick-fix is applied:\n\n\n      class Person {\n        Person(String fullName) {}\n      }\n      class Child extends Person {\n        Child(String fullName) { super(fullName); }\n      }\n\n\nUse the options to indicate whether to ignore overridden parameter names that are only\na single character long or come from a library method. Both can be useful if\nyou do not wish to be bound by dubious naming conventions used in libraries.\n\nInspection ID: ParameterNameDiffersFromOverriddenParameter"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ParameterNameDiffersFromOverriddenParameter",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Naming conventions",
                      "index": 59,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OctalLiteral",
                "shortDescription": {
                  "text": "Octal integer"
                },
                "fullDescription": {
                  "text": "Reports octal integer literals. Some coding standards prohibit the use of octal literals, as they may be easily confused with decimal literals. Example: 'int i = 015;\n  int j = 0_777;' This inspection has two different quick-fixes. After the Convert octal literal to decimal literal quick-fix is applied, the code changes to: 'int i = 13;\n  int j = 511;' After the Remove leading zero to make decimal quick-fix is applied, the code changes to: 'int i = 15;\n  int j = 777;' Inspection ID: OctalLiteral",
                  "markdown": "Reports octal integer literals. Some coding standards prohibit the use of octal literals, as they may be easily confused with decimal literals.\n\nExample:\n\n\n      int i = 015;\n      int j = 0_777;\n\nThis inspection has two different quick-fixes.\nAfter the **Convert octal literal to decimal literal** quick-fix is applied, the code changes to:\n\n\n      int i = 13;\n      int j = 511;\n\nAfter the **Remove leading zero to make decimal** quick-fix is applied, the code changes to:\n\n\n      int i = 15;\n      int j = 777;\n\nInspection ID: OctalLiteral"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "OctalInteger",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Numeric issues",
                      "index": 25,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReadWriteStringCanBeUsed",
                "shortDescription": {
                  "text": "'Files.readString()' or 'Files.writeString()' can be used"
                },
                "fullDescription": {
                  "text": "Reports method calls that read or write a 'String' as bytes using 'java.nio.file.Files'. Such calls can be replaced with a call to a 'Files.readString()' or 'Files.writeString()' method introduced in Java 11. Example: 'String s = \"example\";\n  Files.write(Paths.get(\"out.txt\"), s.getBytes(StandardCharsets.UTF_8), StandardOpenOption.WRITE);\n  s = new String(Files.readAllBytes(Paths.get(\"in.txt\")), StandardCharsets.ISO_8859_1);' After the quick fix is applied: 'String s = \"example\";\n  Files.writeString(Paths.get(\"out.txt\"), s, StandardOpenOption.WRITE);\n  s = Files.readString(Paths.get(\"in.txt\"), StandardCharsets.ISO_8859_1);' Note that the 'readString()' behavior differs from the 'new String(bytes, charset)' behavior when it comes to handling of invalid (unmappable) characters. The 'readString()' method throws an exception in such cases, while the 'new String(bytes, charset)' method silently replaces invalid characters with the replacement character. If silent replacement is desired, it would be better to suppress the inspection warning. Inspection ID: ReadWriteStringCanBeUsed New in 2018.3",
                  "markdown": "Reports method calls that read or write a `String` as bytes using `java.nio.file.Files`. Such calls can be replaced with a call to a `Files.readString()` or `Files.writeString()` method introduced in Java 11.\n\n**Example:**\n\n\n      String s = \"example\";\n      Files.write(Paths.get(\"out.txt\"), s.getBytes(StandardCharsets.UTF_8), StandardOpenOption.WRITE);\n      s = new String(Files.readAllBytes(Paths.get(\"in.txt\")), StandardCharsets.ISO_8859_1);\n\nAfter the quick fix is applied:\n\n\n      String s = \"example\";\n      Files.writeString(Paths.get(\"out.txt\"), s, StandardOpenOption.WRITE);\n      s = Files.readString(Paths.get(\"in.txt\"), StandardCharsets.ISO_8859_1);\n\n\nNote that the `readString()` behavior differs from the `new String(bytes, charset)` behavior when it comes to\nhandling of invalid (unmappable) characters. The `readString()` method throws an exception in such cases, while the\n`new String(bytes, charset)` method silently replaces invalid characters with the replacement character.\nIf silent replacement is desired, it would be better to suppress the inspection warning.\n\nInspection ID: ReadWriteStringCanBeUsed\n\nNew in 2018.3"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ReadWriteStringCanBeUsed",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level migration aids/Java 11",
                      "index": 146,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CyclomaticComplexity",
                "shortDescription": {
                  "text": "Overly complex method"
                },
                "fullDescription": {
                  "text": "Reports methods that have too many branch points. A branch point is one of the following: loop statement 'if' statement ternary expression 'catch' section expression with one or more '&&' or '||' operators inside 'switch' block with non-default branches Methods with too high cyclomatic complexity may be confusing and hard to test. Use the Method complexity limit field to specify the maximum allowed cyclomatic complexity for a method. Inspection ID: CyclomaticComplexity",
                  "markdown": "Reports methods that have too many branch points.\n\nA branch point is one of the following:\n\n* loop statement\n* `if` statement\n* ternary expression\n* `catch` section\n* expression with one or more `&&` or `||` operators inside\n* `switch` block with non-default branches\n\nMethods with too high cyclomatic complexity may be confusing and hard to test.\n\nUse the **Method complexity limit** field to specify the maximum allowed cyclomatic complexity for a method.\n\n\nInspection ID: CyclomaticComplexity"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "OverlyComplexMethod",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Method metrics",
                      "index": 108,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AwaitNotInLoop",
                "shortDescription": {
                  "text": "'await()' not called in loop"
                },
                "fullDescription": {
                  "text": "Reports 'java.util.concurrent.locks.Condition.await()' not being called inside a loop. 'await()' and related methods are normally used to suspend a thread until some condition becomes true. As the thread could have been woken up for a different reason, the condition should be checked after the 'await()' call returns. A loop is a simple way to achieve this. Example: 'void acquire(Condition released) throws InterruptedException {\n    released.await();\n  }' Good code should look like this: 'void acquire(Condition released) throws InterruptedException {\n    while (acquired) {\n      released.await();\n    }\n  }' Inspection ID: AwaitNotInLoop",
                  "markdown": "Reports `java.util.concurrent.locks.Condition.await()` not being called inside a loop.\n\n\n`await()` and related methods are normally used to suspend a thread until some condition becomes true.\nAs the thread could have been woken up for a different reason,\nthe condition should be checked after the `await()` call returns.\nA loop is a simple way to achieve this.\n\n**Example:**\n\n\n      void acquire(Condition released) throws InterruptedException {\n        released.await();\n      }\n\nGood code should look like this:\n\n\n      void acquire(Condition released) throws InterruptedException {\n        while (acquired) {\n          released.await();\n        }\n      }\n\nInspection ID: AwaitNotInLoop"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AwaitNotInLoop",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Threading issues",
                      "index": 23,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StaticVariableUninitializedUse",
                "shortDescription": {
                  "text": "Static field used before initialization"
                },
                "fullDescription": {
                  "text": "Reports 'static' variables that are read before initialization. The inspection ignores equality checks with 'null'. Example: 'class Foo {\n    public static int bar;\n\n    public static void main(String[] args) {\n      System.out.println(bar);\n    }\n  }' Note that this inspection uses a very conservative dataflow algorithm and may incorrectly report 'static' variables as uninitialized. Variables reported as initialized will always be initialized. Use the Ignore primitive fields option to ignore uninitialized primitive fields. Inspection ID: StaticVariableUninitializedUse",
                  "markdown": "Reports `static` variables that are read before initialization.\n\nThe inspection ignores equality checks with `null`.\n\n**Example:**\n\n\n      class Foo {\n        public static int bar;\n\n        public static void main(String[] args) {\n          System.out.println(bar);\n        }\n      }\n\nNote that this inspection uses a very conservative dataflow algorithm and may incorrectly report `static` variables as uninitialized. Variables\nreported as initialized will always be initialized.\n\nUse the **Ignore primitive fields** option to ignore uninitialized primitive fields.\n\nInspection ID: StaticVariableUninitializedUse"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "StaticVariableUsedBeforeInitialization",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Initialization",
                      "index": 27,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CyclicClassDependency",
                "shortDescription": {
                  "text": "Cyclic class dependency"
                },
                "fullDescription": {
                  "text": "Reports classes that are mutually or cyclically dependent on other classes. Such cyclic dependencies make code fragile and hard to maintain. Available only from Code | Inspect Code or Code | Analyze Code | Run Inspection by Name and isn't reported in the editor. Inspection ID: CyclicClassDependency",
                  "markdown": "Reports classes that are mutually or cyclically dependent on other classes.\n\nSuch cyclic dependencies make code fragile and hard to maintain.\n\nAvailable only from **Code \\| Inspect Code** or\n**Code \\| Analyze Code \\| Run Inspection by Name** and isn't reported in the editor.\n\nInspection ID: CyclicClassDependency"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CyclicClassDependency",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Dependency issues",
                      "index": 118,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StringBufferReplaceableByStringBuilder",
                "shortDescription": {
                  "text": "'StringBuffer' may be 'StringBuilder'"
                },
                "fullDescription": {
                  "text": "Reports variables declared as 'StringBuffer' and suggests replacing them with 'StringBuilder'. 'StringBuilder' is a non-thread-safe replacement for 'StringBuffer'. This inspection only reports if the language level of the project or module is 5 or higher. Inspection ID: StringBufferReplaceableByStringBuilder",
                  "markdown": "Reports variables declared as `StringBuffer` and suggests replacing them with `StringBuilder`. `StringBuilder` is a non-thread-safe replacement for `StringBuffer`.\n\nThis inspection only reports if the language level of the project or module is 5 or higher.\n\nInspection ID: StringBufferReplaceableByStringBuilder"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "StringBufferMayBeStringBuilder",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level migration aids/Java 5",
                      "index": 93,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SynchronizedMethod",
                "shortDescription": {
                  "text": "'synchronized' method"
                },
                "fullDescription": {
                  "text": "Reports the 'synchronized' modifier on methods. There are several reasons a 'synchronized' modifier on a method may be a bad idea: As little work as possible should be performed under a lock. Therefore it is often better to use a 'synchronized' block and keep there only the code that works with shared state. Synchronization becomes a part of a method's interface. This makes a transition to a different locking mechanism difficult. Keeping track of what is locking a particular object gets harder. The DoS (denial-of-service) attack becomes feasible either on purpose or unknowingly when inheriting the method's class. As an alternative, consider synchronizing on a 'private final' lock object, access to which can be completely controlled. A quick-fix is provided to wrap the method body with 'synchronized(this)'. Example: 'class Main {\n    public synchronized void fooBar() {\n    }\n  }' After the quick-fix is applied: 'class Main {\n    public void fooBar() {\n      synchronized (this) {\n      }\n    }\n  }' You can configure the following options for this inspection: Include native methods - include native methods into the inspection's scope. Ignore methods overriding a synchronized method - do not report methods that override a 'synchronized' method. Inspection ID: SynchronizedMethod",
                  "markdown": "Reports the `synchronized` modifier on methods.\n\n\nThere are several reasons a `synchronized` modifier on a method may be a bad idea:\n\n1. As little work as possible should be performed under a lock. Therefore it is often better to use a `synchronized` block and keep there only the code that works with shared state.\n2. Synchronization becomes a part of a method's interface. This makes a transition to a different locking mechanism difficult.\n3. Keeping track of what is locking a particular object gets harder.\n4. The DoS (denial-of-service) attack becomes feasible either on purpose or unknowingly when inheriting the method's class.\n\n\nAs an alternative, consider synchronizing on a `private final` lock object, access to which can be completely controlled.\n\nA quick-fix is provided to wrap the method body with `synchronized(this)`.\n\n**Example:**\n\n\n      class Main {\n        public synchronized void fooBar() {\n        }\n      }\n\nAfter the quick-fix is applied:\n\n\n      class Main {\n        public void fooBar() {\n          synchronized (this) {\n          }\n        }\n      }\n\nYou can configure the following options for this inspection:\n\n1. **Include native methods** - include native methods into the inspection's scope.\n2. **Ignore methods overriding a synchronized method** - do not report methods that override a `synchronized` method.\n\nInspection ID: SynchronizedMethod"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SynchronizedMethod",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Threading issues",
                      "index": 23,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AbstractMethodWithMissingImplementations",
                "shortDescription": {
                  "text": "Abstract method with missing implementations"
                },
                "fullDescription": {
                  "text": "Reports 'abstract' methods that are not implemented in every concrete subclass. This results in a compile-time error on the subclasses; the inspection reports the problem at the point of the abstract method, allowing faster detection of the problem. Inspection ID: AbstractMethodWithMissingImplementations",
                  "markdown": "Reports `abstract` methods that are not implemented in every concrete subclass.\n\n\nThis results in a compile-time error on the subclasses;\nthe inspection reports the problem at the point of the abstract method, allowing faster detection of the problem.\n\nInspection ID: AbstractMethodWithMissingImplementations"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AbstractMethodWithMissingImplementations",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Inheritance issues",
                      "index": 121,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Convert2MethodRef",
                "shortDescription": {
                  "text": "Lambda can be replaced with method reference"
                },
                "fullDescription": {
                  "text": "Reports lambdas that can be replaced with method references. While often it could be a matter of taste, method references are more clear and readable compared to lambdas. Example: 'Runnable r = () -> System.out.println();' After the quick-fix is applied: 'Runnable r = System.out::println;' The inspection may suggest method references even if a lambda doesn't call any method, like replacing 'obj -> obj != null' with 'Objects::nonNull'. Use the Settings | Editor | Code Style | Java | Code Generation settings to configure special method references. This inspection depends on the following Java features: Lambda expressions Method references These features are available since Java 8. Inspection ID: Convert2MethodRef",
                  "markdown": "Reports lambdas that can be replaced with method references. While often it could be a matter of taste, method references are more clear and readable compared to lambdas.\n\nExample:\n\n\n      Runnable r = () -> System.out.println();\n\nAfter the quick-fix is applied:\n\n\n      Runnable r = System.out::println;\n\n\nThe inspection may suggest method references even if a lambda doesn't call any method, like replacing `obj -> obj != null`\nwith `Objects::nonNull`.\nUse the [Settings \\| Editor \\| Code Style \\| Java \\| Code Generation](settings://preferences.sourceCode.Java?Lambda%20Body)\nsettings to configure special method references.\n\nThis inspection depends on the following Java features:\n\n* Lambda expressions\n* Method references\n\nThese features are available since Java 8.\n\nInspection ID: Convert2MethodRef"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "Convert2MethodRef",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level migration aids/Java 8",
                      "index": 94,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryToStringCall",
                "shortDescription": {
                  "text": "Unnecessary call to 'toString()'"
                },
                "fullDescription": {
                  "text": "Reports calls to 'toString()' that are used in the following cases: In string concatenations In the 'java.lang.StringBuilder#append()' or 'java.lang.StringBuffer#append()' methods In the methods of 'java.io.PrintWriter' or 'java.io.PrintStream' in the methods 'org.slf4j.Logger' In these cases, conversion to string will be handled by the underlying library methods, and the explicit call to 'toString()' is not needed. Removing redundant 'toString()' calls can occasionally even improve performance and reduce object allocations. Example: 'System.out.println(this.toString())' After the quick-fix is applied: 'System.out.println(this)' Note that without the 'toString()' call, the code semantics might be different: if the expression is null, then the 'null' string will be used instead of throwing a 'NullPointerException'. Use the Report only when qualifier is known to be not-null option to avoid warnings for the values that could potentially be null. Removing the explicit 'toString()' in these cases will change the runtime semantics from throwing a 'NullPointException' to silently accepting the value when it is 'null'. Inspection ID: UnnecessaryToStringCall",
                  "markdown": "Reports calls to `toString()` that are used in the following cases:\n\n* In string concatenations\n* In the `java.lang.StringBuilder#append()` or `java.lang.StringBuffer#append()` methods\n* In the methods of `java.io.PrintWriter` or `java.io.PrintStream`\n* in the methods `org.slf4j.Logger`\n\nIn these cases, conversion to string will be handled by the underlying library methods,\nand the explicit call to `toString()` is not needed.\nRemoving redundant `toString()` calls can occasionally even improve performance and reduce object allocations.\n\nExample:\n\n\n      System.out.println(this.toString())\n\nAfter the quick-fix is applied:\n\n\n      System.out.println(this)\n\n\nNote that without the `toString()` call, the code semantics might be different: if the expression is null,\nthen the `null` string will be used instead of throwing a `NullPointerException`.\n\nUse the **Report only when qualifier is known to be not-null** option to avoid warnings for the values that could potentially be null.\nRemoving the explicit `toString()` in these cases will change the runtime semantics\nfrom throwing a `NullPointException` to silently accepting the value when it is `null`.\n\nInspection ID: UnnecessaryToStringCall"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnnecessaryToStringCall",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ClassOnlyUsedInOnePackage",
                "shortDescription": {
                  "text": "Class only used from one other package"
                },
                "fullDescription": {
                  "text": "Reports classes that don't depend on any other class in their package, depend on classes from another package, and are themselves a dependency only for classes from this other package. Consider moving such classes to the package on which they depend. Available only from Code | Inspect Code or Code | Analyze Code | Run Inspection by Name and isn't reported in the editor. Inspection ID: ClassOnlyUsedInOnePackage",
                  "markdown": "Reports classes that don't depend on any other class in their package, depend on classes from another package, and are themselves a dependency only for classes from this other package. Consider moving such classes to the package on which they depend.\n\nAvailable only from **Code \\| Inspect Code** or\n**Code \\| Analyze Code \\| Run Inspection by Name** and isn't reported in the editor.\n\nInspection ID: ClassOnlyUsedInOnePackage"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ClassOnlyUsedInOnePackage",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Packaging issues",
                      "index": 36,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SuppressionAnnotation",
                "shortDescription": {
                  "text": "Inspection suppression annotation"
                },
                "fullDescription": {
                  "text": "Reports comments or annotations suppressing inspections. This inspection can be useful when leaving suppressions intentionally for further review. Example: '@SuppressWarnings(\"unused\")\nstatic Stream<String> stringProvider() {\n    return Stream.of(\"foo\", \"bar\");\n}' Inspection ID: SuppressionAnnotation",
                  "markdown": "Reports comments or annotations suppressing inspections.\n\nThis inspection can be useful when leaving suppressions intentionally for further review.\n\n**Example:**\n\n\n    @SuppressWarnings(\"unused\")\n    static Stream<String> stringProvider() {\n        return Stream.of(\"foo\", \"bar\");\n    }\n\nInspection ID: SuppressionAnnotation"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SuppressionAnnotation",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JVM languages",
                      "index": 1,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReturnSeparatedFromComputation",
                "shortDescription": {
                  "text": "'return' separated from the result computation"
                },
                "fullDescription": {
                  "text": "Reports 'return' statements that return a local variable where the value of the variable is computed somewhere else within the same method. The quick-fix inlines the returned variable by moving the return statement to the location in which the value of the variable is computed. When the returned value can't be inlined into the 'return' statement, the quick-fix attempts to move the return statement as close to the computation of the returned value as possible. Example: 'int n = -1;\n  for (int i = 0; i < a.length; i++) {\n    if (a[i] == b) {\n      n = i;\n      break;\n    }\n  }\n  return n;' After the quick-fix is applied: 'int n = -1;\n  for (int i = 0; i < a.length; i++) {\n    if (a[i] == b) {\n      return i;\n    }\n  }\n  return n;' Inspection ID: ReturnSeparatedFromComputation",
                  "markdown": "Reports `return` statements that return a local variable where the value of the variable is computed somewhere else within the same method.\n\nThe quick-fix inlines the returned variable by moving the return statement to the location in which the value\nof the variable is computed.\nWhen the returned value can't be inlined into the `return` statement,\nthe quick-fix attempts to move the return statement as close to the computation of the returned value as possible.\n\nExample:\n\n\n      int n = -1;\n      for (int i = 0; i < a.length; i++) {\n        if (a[i] == b) {\n          n = i;\n          break;\n        }\n      }\n      return n;\n\nAfter the quick-fix is applied:\n\n\n      int n = -1;\n      for (int i = 0; i < a.length; i++) {\n        if (a[i] == b) {\n          return i;\n        }\n      }\n      return n;\n\nInspection ID: ReturnSeparatedFromComputation"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ReturnSeparatedFromComputation",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SynchronizeOnNonFinalField",
                "shortDescription": {
                  "text": "Synchronization on a non-final field"
                },
                "fullDescription": {
                  "text": "Reports 'synchronized' statement lock expressions that consist of a non-'final' field reference. Such statements are unlikely to have useful semantics, as different threads may acquire different locks even when operating on the same object. Example: 'private Object o;\n  public void foo() {\n    synchronized (o) // synchronization on a non-final field\n    { }\n  }' Inspection ID: SynchronizeOnNonFinalField",
                  "markdown": "Reports `synchronized` statement lock expressions that consist of a non-`final` field reference. Such statements are unlikely to have useful semantics, as different threads may acquire different locks even when operating on the same object.\n\n**Example:**\n\n\n      private Object o;\n      public void foo() {\n        synchronized (o) // synchronization on a non-final field\n        { }\n      }\n\nInspection ID: SynchronizeOnNonFinalField"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SynchronizeOnNonFinalField",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Threading issues",
                      "index": 23,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ArrayObjectsEquals",
                "shortDescription": {
                  "text": "Use of shallow or 'Objects' methods with arrays"
                },
                "fullDescription": {
                  "text": "Reports expressions that seem to use an inappropriate method for determining array equality or calculating their hashcode. The following method calls are reported: 'Object.equals()' for any arrays 'Arrays.equals()' for multidimensional arrays 'Arrays.hashCode()' for multidimensional arrays Inspection ID: ArrayObjectsEquals",
                  "markdown": "Reports expressions that seem to use an inappropriate method for determining array equality or calculating their hashcode.\n\nThe following method calls are reported:\n\n* `Object.equals()` for any arrays\n* `Arrays.equals()` for multidimensional arrays\n* `Arrays.hashCode()` for multidimensional arrays\n\n\nInspection ID: ArrayObjectsEquals"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ArrayObjectsEquals",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EqualsWhichDoesntCheckParameterClass",
                "shortDescription": {
                  "text": "'equals()' method that does not check the class of its parameter"
                },
                "fullDescription": {
                  "text": "Reports 'equals()' methods that do not check the type of their parameter. Failure to check the type of the parameter in the 'equals()' method may result in latent errors if the object is used in an untyped collection. Example: 'class MyClass {\n    int x;\n\n    @Override\n    public boolean equals(Object obj) {\n      // equals method should return false if obj is not MyClass\n      return ((MyClass)obj).x == x;\n    }\n  }' Inspection ID: EqualsWhichDoesntCheckParameterClass",
                  "markdown": "Reports `equals()` methods that do not check the type of their parameter.\n\nFailure to check the type of the parameter\nin the `equals()` method may result in latent errors if the object is used in an untyped collection.\n\n**Example:**\n\n\n      class MyClass {\n        int x;\n\n        @Override\n        public boolean equals(Object obj) {\n          // equals method should return false if obj is not MyClass\n          return ((MyClass)obj).x == x;\n        }\n      }\n\nInspection ID: EqualsWhichDoesntCheckParameterClass"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EqualsDoesntCheckParameterClass",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseHashCodeMethodInspection",
                "shortDescription": {
                  "text": "Standard 'hashCode()' method can be used"
                },
                "fullDescription": {
                  "text": "Reports bitwise operations that can be replaced with a call to the 'Long.hashCode()' or 'Double.hashCode()' methods. It detects the construct '(int)(x ^ (x >>> 32))' where 'x' is a variable of type 'long' or the result of a previous 'Double.doubleToLongBits()' call. The replacement shortens the code, improving its readability. Example: 'int result = (int)(var ^ (var >>> 32));' After applying the quick-fix: 'int result = Long.hashCode(var);' This inspection only reports if the language level of the project or module is 8 or higher. Inspection ID: UseHashCodeMethodInspection New in 2024.1",
                  "markdown": "Reports bitwise operations that can be replaced with a call to the `Long.hashCode()` or `Double.hashCode()` methods. It detects the construct `(int)(x ^ (x >>> 32))` where `x` is a variable of type `long` or the result of a previous `Double.doubleToLongBits()` call. The replacement shortens the code, improving its readability.\n\n**Example:**\n\n\n      int result = (int)(var ^ (var >>> 32));\n\nAfter applying the quick-fix:\n\n\n      int result = Long.hashCode(var);\n\nThis inspection only reports if the language level of the project or module is 8 or higher.\n\nInspection ID: UseHashCodeMethodInspection\n\nNew in 2024.1"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UseHashCodeMethodInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level migration aids/Java 8",
                      "index": 94,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NumericOverflow",
                "shortDescription": {
                  "text": "Numeric overflow"
                },
                "fullDescription": {
                  "text": "Reports expressions that overflow during computation. Usually, this happens by accident and indicates a bug. For example, a wrong type is used or a shift should be done in an opposite direction . Examples: 'float a = 1.0f/0.0f;\n  long b = 30 * 24 * 60 * 60 * 1000;\n  long c = 1000L << 62;' Inspection ID: NumericOverflow",
                  "markdown": "Reports expressions that overflow during computation. Usually, this happens by accident and indicates a bug. For example, a wrong type is used or a shift should be done in an opposite direction .\n\n**Examples:**\n\n\n      float a = 1.0f/0.0f;\n      long b = 30 * 24 * 60 * 60 * 1000;\n      long c = 1000L << 62;\n\nInspection ID: NumericOverflow"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NumericOverflow",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Numeric issues",
                      "index": 25,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SuspiciousIndentAfterControlStatement",
                "shortDescription": {
                  "text": "Suspicious indentation after control statement without braces"
                },
                "fullDescription": {
                  "text": "Reports suspicious indentation of statements after a control statement without braces. Such indentation can make it look like the statement is inside the control statement, when in fact it will be executed unconditionally after the control statement. Example: 'class Bar {\n      void foo(int i) {\n          if (i == 0)\n              System.out.println(\"foo\");\n              System.out.println(\"bar\"); // warning\n          if (i == 1);\n              System.out.println(\"great\"); // warning\n          if (i == 42)\n              System.out.println(\"answer\");\n                  System.out.println(\"question\"); // warning\n      }\n  }' Inspection ID: SuspiciousIndentAfterControlStatement",
                  "markdown": "Reports suspicious indentation of statements after a control statement without braces.\n\n\nSuch indentation can make it look like the statement is inside the control statement,\nwhen in fact it will be executed unconditionally after the control statement.\n\n**Example:**\n\n\n      class Bar {\n          void foo(int i) {\n              if (i == 0)\n                  System.out.println(\"foo\");\n                  System.out.println(\"bar\"); // warning\n              if (i == 1);\n                  System.out.println(\"great\"); // warning\n              if (i == 42)\n                  System.out.println(\"answer\");\n                      System.out.println(\"question\"); // warning\n          }\n      }\n\nInspection ID: SuspiciousIndentAfterControlStatement"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SuspiciousIndentAfterControlStatement",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AssignmentToSuperclassField",
                "shortDescription": {
                  "text": "Constructor assigns value to field defined in superclass"
                },
                "fullDescription": {
                  "text": "Reports assignment to, or modification of fields that are declared in a superclass from within a subclass constructor. It is considered preferable to initialize the fields of a superclass in its own constructor and delegate to that constructor in a subclass. This will also allow declaring a field 'final' if it isn't changed after the construction. Example: 'class Super {\n    int x;\n  }\n  class Sub extends Super {\n    Sub(int _x) {\n      // Warning: x is declared in a superclass\n      x = _x;\n    }\n  }' To avoid the problem, declare a superclass constructor: 'class Super {\n    final int x;\n\n    Super(int _x) {\n      x = _x;\n    }\n  }\n  class Sub extends Super {\n    Sub(int _x) {\n      super(_x);\n    }\n  }' Inspection ID: AssignmentToSuperclassField",
                  "markdown": "Reports assignment to, or modification of fields that are declared in a superclass from within a subclass constructor.\n\nIt is considered preferable to initialize the fields of a superclass in its own constructor and\ndelegate to that constructor in a subclass. This will also allow declaring a field `final`\nif it isn't changed after the construction.\n\n**Example:**\n\n\n      class Super {\n        int x;\n      }\n      class Sub extends Super {\n        Sub(int _x) {\n          // Warning: x is declared in a superclass\n          x = _x;\n        }\n      }\n\nTo avoid the problem, declare a superclass constructor:\n\n\n      class Super {\n        final int x;\n\n        Super(int _x) {\n          x = _x;\n        }\n      }\n      class Sub extends Super {\n        Sub(int _x) {\n          super(_x);\n        }\n      }\n\nInspection ID: AssignmentToSuperclassField"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AssignmentToSuperclassField",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Assignment issues",
                      "index": 64,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ClassNewInstance",
                "shortDescription": {
                  "text": "Unsafe call to 'Class.newInstance()'"
                },
                "fullDescription": {
                  "text": "Reports calls to 'java.lang.Class.newInstance()'. This method propagates exceptions thrown by the no-arguments constructor, including checked exceptions. Usages of this method effectively bypass the compile-time exception checking that would otherwise be performed by the compiler. A quick-fix is suggested to replace the call with a call to the 'java.lang.reflect.Constructor.newInstance()' method, which avoids this problem by wrapping any exception thrown by the constructor in a (checked) 'java.lang.reflect.InvocationTargetException'. Example: 'clazz.newInstance()' After the quick-fix is applied: 'clazz.getConstructor().newInstance();' Inspection ID: ClassNewInstance",
                  "markdown": "Reports calls to `java.lang.Class.newInstance()`.\n\n\nThis method propagates exceptions thrown by\nthe no-arguments constructor, including checked exceptions. Usages of this method\neffectively bypass the compile-time exception checking that would\notherwise be performed by the compiler.\n\n\nA quick-fix is suggested to replace the call with a call to the\n`java.lang.reflect.Constructor.newInstance()` method, which\navoids this problem by wrapping any exception thrown by the constructor in a\n(checked) `java.lang.reflect.InvocationTargetException`.\n\n**Example:**\n\n\n      clazz.newInstance()\n\nAfter the quick-fix is applied:\n\n\n      clazz.getConstructor().newInstance();\n\nInspection ID: ClassNewInstance"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ClassNewInstance",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LimitedScopeInnerClass",
                "shortDescription": {
                  "text": "Local class"
                },
                "fullDescription": {
                  "text": "Reports local classes. A local class is a named nested class declared inside a code block. Local classes are uncommon and may therefore be confusing. In addition, some code standards discourage the use of local classes. Example: 'class Example {\n    void test() {\n      class Local { // here\n      }\n      new Local();\n    }\n  }' After the quick-fix is applied: 'class Example {\n    void test() {\n      new Local();\n    }\n\n    private static class Local { // here\n    }\n  }' Inspection ID: LimitedScopeInnerClass",
                  "markdown": "Reports local classes.\n\nA local class is a named nested class declared inside a code block.\nLocal classes are uncommon and may therefore be confusing.\nIn addition, some code standards discourage the use of local classes.\n\n**Example:**\n\n\n      class Example {\n        void test() {\n          class Local { // here\n          }\n          new Local();\n        }\n      }\n\nAfter the quick-fix is applied:\n\n\n      class Example {\n        void test() {\n          new Local();\n        }\n\n        private static class Local { // here\n        }\n      }\n\nInspection ID: LimitedScopeInnerClass"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "LimitedScopeInnerClass",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Class structure",
                      "index": 17,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MultiplyOrDivideByPowerOfTwo",
                "shortDescription": {
                  "text": "Multiplication or division by power of two"
                },
                "fullDescription": {
                  "text": "Reports multiplication of an integer value by a constant integer that can be represented as a power of two. Such expressions can be replaced with right or left shift operations for a possible performance improvement. Note that this inspection is not relevant for modern JVMs (e. g., HotSpot or OpenJ9) because their JIT compilers will perform this optimization. It might only be useful in some embedded systems where no JIT compilation is performed. Example: 'int y = x * 4;' A quick-fix is suggested to replace the multiplication or division operation with the shift operation: 'int y = x << 2;' Use the option to make the inspection also report division by a power of two. Note that replacing a power of two division with a shift does not work for negative numbers. Inspection ID: MultiplyOrDivideByPowerOfTwo",
                  "markdown": "Reports multiplication of an integer value by a constant integer that can be represented as a power of two. Such expressions can be replaced with right or left shift operations for a possible performance improvement.\n\n\nNote that this inspection is not relevant for modern JVMs (e. g.,\nHotSpot or OpenJ9) because their JIT compilers will perform this optimization.\nIt might only be useful in some embedded systems where no JIT compilation is performed.\n\n**Example:**\n\n\n      int y = x * 4;\n\nA quick-fix is suggested to replace the multiplication or division operation with the shift operation:\n\n\n      int y = x << 2;\n\n\nUse the option to make the inspection also report division by a power of two.\nNote that replacing a power of two division with a shift does not work for negative numbers.\n\nInspection ID: MultiplyOrDivideByPowerOfTwo"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MultiplyOrDivideByPowerOfTwo",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Performance/Embedded",
                      "index": 137,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MethodCallInLoopCondition",
                "shortDescription": {
                  "text": "Method call in loop condition"
                },
                "fullDescription": {
                  "text": "Reports method calls in the condition part of a loop statement. In highly resource constrained environments, such calls may have adverse performance implications. Applying the results of this inspection without consideration might have negative effects on code clarity and design. This inspection is intended for Java ME and other highly resource constrained environments. Example: 'String s = \"example\";\n  for (int i = 0; i < s.length(); i++) {\n    System.out.println(s.charAt(i));\n  }' After the quick-fix is applied: 'String s = \"example\";\n  int length = s.length();\n  for (int i = 0; i < length; i++) {\n    System.out.println(s.charAt(i));\n  }' Use the option to ignore calls to common Java iteration methods like 'Iterator.hasNext()' and known methods with side-effects like 'Atomic*.compareAndSet'. Inspection ID: MethodCallInLoopCondition",
                  "markdown": "Reports method calls in the condition part of a loop statement. In highly resource constrained environments, such calls may have adverse performance implications.\n\n\nApplying the results of this inspection without consideration might have negative effects on code clarity and design.\nThis inspection is intended for Java ME and other highly resource constrained environments.\n\n**Example:**\n\n\n      String s = \"example\";\n      for (int i = 0; i < s.length(); i++) {\n        System.out.println(s.charAt(i));\n      }\n\nAfter the quick-fix is applied:\n\n\n      String s = \"example\";\n      int length = s.length();\n      for (int i = 0; i < length; i++) {\n        System.out.println(s.charAt(i));\n      }\n\n\nUse the option to ignore calls to common Java iteration methods like `Iterator.hasNext()`\nand known methods with side-effects like `Atomic*.compareAndSet`.\n\nInspection ID: MethodCallInLoopCondition"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MethodCallInLoopCondition",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Performance/Embedded",
                      "index": 137,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MethodCount",
                "shortDescription": {
                  "text": "Class with too many methods"
                },
                "fullDescription": {
                  "text": "Reports classes whose number of methods exceeds the specified maximum. Classes with too many methods are often trying to 'do too much'. Consider splitting such a class into multiple smaller classes. Configure the inspection: Use the Method count limit field to specify the maximum allowed number of methods in a class. Use the Ignore simple getter and setter methods option to ignore simple getters and setters in method count. Use the Ignore methods overriding/implementing a super method to ignore methods that override or implement a method from a superclass. Inspection ID: MethodCount",
                  "markdown": "Reports classes whose number of methods exceeds the specified maximum.\n\nClasses with too many methods are often trying to 'do too much'. Consider splitting such a class into multiple smaller classes.\n\nConfigure the inspection:\n\n* Use the **Method count limit** field to specify the maximum allowed number of methods in a class.\n* Use the **Ignore simple getter and setter methods** option to ignore simple getters and setters in method count.\n* Use the **Ignore methods overriding/implementing a super method** to ignore methods that override or implement a method from a superclass.\n\nInspection ID: MethodCount"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ClassWithTooManyMethods",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Class metrics",
                      "index": 96,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ForLoopReplaceableByWhile",
                "shortDescription": {
                  "text": "'for' loop may be replaced by 'while' loop"
                },
                "fullDescription": {
                  "text": "Reports 'for' loops that contain neither initialization nor update components, and suggests converting them to 'while' loops. This makes the code easier to read. Example: 'for(; exitCondition(); ) {\n    process();\n  }' After the quick-fix is applied: 'while(exitCondition()) {\n    process();\n  }' The quick-fix is also available for other 'for' loops, so you can replace any 'for' loop with a 'while' loop. Use the Ignore 'infinite' for loops without conditions option if you want to ignore 'for' loops with trivial or non-existent conditions. Inspection ID: ForLoopReplaceableByWhile",
                  "markdown": "Reports `for` loops that contain neither initialization nor update components, and suggests converting them to `while` loops. This makes the code easier to read.\n\nExample:\n\n\n      for(; exitCondition(); ) {\n        process();\n      }\n\nAfter the quick-fix is applied:\n\n\n      while(exitCondition()) {\n        process();\n      }\n\nThe quick-fix is also available for other `for` loops, so you can replace any `for` loop with a\n`while` loop.\n\nUse the **Ignore 'infinite' for loops without conditions** option if you want to ignore `for`\nloops with trivial or non-existent conditions.\n\n\nInspection ID: ForLoopReplaceableByWhile"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ForLoopReplaceableByWhile",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Control flow issues",
                      "index": 24,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StaticFieldReferenceOnSubclass",
                "shortDescription": {
                  "text": "Static field referenced via subclass"
                },
                "fullDescription": {
                  "text": "Reports accesses to static fields where the call is qualified by a subclass of the declaring class, rather than by the declaring class itself. Java allows such qualification, but such accesses may indicate a subtle confusion of inheritance and overriding. Example: 'class Parent {\n    static int foo = 0;\n  }\n\n  class Child extends Parent { }\n\n  void bar() {\n    System.out.println(Child.foo);\n  }' After the quick-fix is applied, the result looks like this: 'class Parent {\n    static int foo = 0;\n  }\n\n  class Child extends Parent { }\n\n  void bar() {\n    System.out.println(Parent.foo);\n  }' Inspection ID: StaticFieldReferenceOnSubclass",
                  "markdown": "Reports accesses to static fields where the call is qualified by a subclass of the declaring class, rather than by the declaring class itself.\n\n\nJava allows such qualification, but such accesses may indicate a subtle confusion of inheritance and overriding.\n\n**Example:**\n\n\n      class Parent {\n        static int foo = 0;\n      }\n\n      class Child extends Parent { }\n\n      void bar() {\n        System.out.println(Child.foo);\n      }\n\nAfter the quick-fix is applied, the result looks like this:\n\n\n      class Parent {\n        static int foo = 0;\n      }\n\n      class Child extends Parent { }\n\n      void bar() {\n        System.out.println(Parent.foo);\n      }\n\nInspection ID: StaticFieldReferenceOnSubclass"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "StaticFieldReferencedViaSubclass",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IgnoreResultOfCall",
                "shortDescription": {
                  "text": "Result of method call ignored"
                },
                "fullDescription": {
                  "text": "Reports method calls whose result is ignored. For many methods, ignoring the result is perfectly legitimate, but for some it is almost certainly an error. Examples of methods where ignoring the result is likely an error include 'java.io.inputStream.read()', which returns the number of bytes actually read, and any method on 'java.lang.String' or 'java.math.BigInteger'. These methods do not produce side-effects and thus pointless if their result is ignored. The calls to the following methods are inspected: Simple getters (which do nothing except return a field) Methods specified in the settings of this inspection Methods annotated with 'org.jetbrains.annotations.Contract(pure=true)' Methods annotated with .*.'CheckReturnValue' Methods in a class or package annotated with 'javax.annotation.CheckReturnValue' Optionally, all non-library methods Calls to methods annotated with Error Prone's or AssertJ's '@CanIgnoreReturnValue' annotation are not reported. Use the inspection settings to specify the classes to check. Methods are matched by name or name pattern using Java regular expression syntax. For classes, use fully-qualified names. Each entry applies to both the class and all its inheritors. Inspection ID: IgnoreResultOfCall",
                  "markdown": "Reports method calls whose result is ignored.\n\nFor many methods, ignoring the result is perfectly\nlegitimate, but for some it is almost certainly an error. Examples of methods where ignoring\nthe result is likely an error include `java.io.inputStream.read()`,\nwhich returns the number of bytes actually read, and any method on\n`java.lang.String` or `java.math.BigInteger`. These methods do not produce side-effects and thus pointless\nif their result is ignored.\n\nThe calls to the following methods are inspected:\n\n* Simple getters (which do nothing except return a field)\n* Methods specified in the settings of this inspection\n* Methods annotated with `org.jetbrains.annotations.Contract(pure=true)`\n* Methods annotated with .\\*.`CheckReturnValue`\n* Methods in a class or package annotated with `javax.annotation.CheckReturnValue`\n* Optionally, all non-library methods\n\nCalls to methods annotated with Error Prone's or AssertJ's `@CanIgnoreReturnValue` annotation are not reported.\n\n\nUse the inspection settings to specify the classes to check.\nMethods are matched by name or name pattern using Java regular expression syntax.\nFor classes, use fully-qualified names. Each entry applies to both the class and all its inheritors.\n\n\nInspection ID: IgnoreResultOfCall"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ResultOfMethodCallIgnored",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BlockingMethodInNonBlockingContext",
                "shortDescription": {
                  "text": "Possibly blocking call in non-blocking context"
                },
                "fullDescription": {
                  "text": "Reports thread-blocking method calls in code fragments where threads should not be blocked. Example (Project Reactor): 'Flux.just(\"1\").flatMap(f -> {\n    Flux<String> just = loadUsersFromDatabase();\n    just.toIterable(); // Error: blocking operator call in non-blocking scope\n    return just;\n  }\n);' Consider running blocking code with a proper scheduler, for example 'Schedulers.boundedElastic()', or try to find an alternative non-blocking API. Example (Kotlin Coroutines): 'suspend fun exampleFun() {\n    Thread.sleep(100); // Error: blocking method call inside suspend function\n}' Consider running blocking code with a special dispatcher, for example 'Dispatchers.IO', or try to find an alternative non-blocking API. Configure the inspection: In the Blocking Annotations list, specify annotations that mark thread-blocking methods. In the Non-Blocking Annotations list, specify annotations that mark non-blocking methods. Specified annotations can be used as External Annotations Inspection ID: BlockingMethodInNonBlockingContext",
                  "markdown": "Reports thread-blocking method calls in code fragments where threads should not be blocked.\n\n**Example (Project Reactor):**\n\n\n    Flux.just(\"1\").flatMap(f -> {\n        Flux<String> just = loadUsersFromDatabase();\n        just.toIterable(); // Error: blocking operator call in non-blocking scope\n        return just;\n      }\n    );\n\nConsider running blocking code [with a proper\nscheduler](https://projectreactor.io/docs/core/release/reference/#faq.wrap-blocking), for example `Schedulers.boundedElastic()`, or try to find an alternative non-blocking API.\n\n**Example (Kotlin Coroutines):**\n\n\n    suspend fun exampleFun() {\n        Thread.sleep(100); // Error: blocking method call inside suspend function\n    }\n\nConsider running blocking code [with a special dispatcher](https://kotlinlang.org/docs/coroutine-context-and-dispatchers.html),\nfor example `Dispatchers.IO`, or try to find an alternative non-blocking API.\n\nConfigure the inspection:\n\n* In the **Blocking Annotations** list, specify annotations that mark thread-blocking methods.\n* In the **Non-Blocking Annotations** list, specify annotations that mark non-blocking methods.\n\nSpecified annotations can be used as [External Annotations](https://www.jetbrains.com/help/idea/external-annotations.html)\n\nInspection ID: BlockingMethodInNonBlockingContext"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "BlockingMethodInNonBlockingContext",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Performance"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JVM languages",
                      "index": 1,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AssertBetweenInconvertibleTypes",
                "shortDescription": {
                  "text": "'assertEquals()' between objects of inconvertible types"
                },
                "fullDescription": {
                  "text": "Reports calls to assertion methods where the \"expected\" and \"actual\" arguments are of incompatible types. Such calls often indicate that there is a bug in the test. This inspection checks the relevant JUnit, TestNG, and AssertJ methods. Examples: 'assertEquals(\"1\", 1);\n  assertNotSame(new int[0], 0);\n\n  // weak warning, may just test the equals() contract\n  assertThat(foo).as(\"user type\").isNotEqualTo(bar);' Inspection ID: AssertBetweenInconvertibleTypes",
                  "markdown": "Reports calls to assertion methods where the \"expected\" and \"actual\" arguments are of incompatible types.\n\nSuch calls often indicate that there is a bug in the test.\nThis inspection checks the relevant JUnit, TestNG, and AssertJ methods.\n\n**Examples:**\n\n\n      assertEquals(\"1\", 1);\n      assertNotSame(new int[0], 0);\n\n      // weak warning, may just test the equals() contract\n      assertThat(foo).as(\"user type\").isNotEqualTo(bar);\n\nInspection ID: AssertBetweenInconvertibleTypes"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AssertBetweenInconvertibleTypes",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JVM languages/Test frameworks",
                      "index": 95,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SwitchExpressionCanBePushedDown",
                "shortDescription": {
                  "text": "Common subexpression can be extracted from 'switch'"
                },
                "fullDescription": {
                  "text": "Reports switch expressions and statements where every branch has a common subexpression, and the 'switch' can be moved inside. This action shortens the code. In many cases, it's reasonable to extract the resulting switch expression to a separate variable or method. Example: 'switch (value) {\n    case 0 -> System.out.println(\"zero\");\n    case 1 -> System.out.println(\"one\");\n    case 2, 3, 4 -> System.out.println(\"few\");\n    default -> System.out.println(\"many\");\n  }' After the quick-fix is applied: 'System.out.println(switch (value) {\n    case 0 -> \"zero\";\n    case 1 -> \"one\";\n    case 2, 3, 4 -> \"few\";\n    default -> \"many\";\n  });' This inspection is applicable only for enhanced switches with arrow syntax. This inspection depends on the Java feature ''switch' expressions', which is available since Java 14. Inspection ID: SwitchExpressionCanBePushedDown New in 2022.3",
                  "markdown": "Reports switch expressions and statements where every branch has a common subexpression, and the `switch` can be moved inside. This action shortens the code. In many cases, it's reasonable to extract the resulting switch expression to a separate variable or method.\n\nExample:\n\n\n      switch (value) {\n        case 0 -> System.out.println(\"zero\");\n        case 1 -> System.out.println(\"one\");\n        case 2, 3, 4 -> System.out.println(\"few\");\n        default -> System.out.println(\"many\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      System.out.println(switch (value) {\n        case 0 -> \"zero\";\n        case 1 -> \"one\";\n        case 2, 3, 4 -> \"few\";\n        default -> \"many\";\n      });\n\n\nThis inspection is applicable only for enhanced switches with arrow syntax.\n\nThis inspection depends on the Java feature ''switch' expressions', which is available since Java 14.\n\nInspection ID: SwitchExpressionCanBePushedDown\n\nNew in 2022.3"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "SwitchExpressionCanBePushedDown",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Control flow issues",
                      "index": 24,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InnerClassReferencedViaSubclass",
                "shortDescription": {
                  "text": "Inner class referenced via subclass"
                },
                "fullDescription": {
                  "text": "Reports accesses of inner and nested classes where the call is qualified by a subclass of the declaring class, rather than the declaring class itself. Java allows such qualification, but such accesses may indicate a subtle confusion of inheritance and overriding. Example: 'class Super {\n    static class Inner {}\n  }\n\n  class Sub extends Super {\n    void test() {\n      Sub.Inner s = new Sub.Inner(); // 'Inner' class is declared in 'Super' class, but referenced via 'Sub' class\n    }\n  }' After the quick-fix is applied: 'class Super {\n    static class Inner {}\n  }\n\n  class Sub extends Super {\n    void test() {\n      Super.Inner s = new Super.Inner();\n    }\n  }' Inspection ID: InnerClassReferencedViaSubclass",
                  "markdown": "Reports accesses of inner and nested classes where the call is qualified by a subclass of the declaring class, rather than the declaring class itself.\n\n\nJava allows such qualification, but such accesses may indicate a subtle confusion of inheritance and overriding.\n\n**Example:**\n\n\n      class Super {\n        static class Inner {}\n      }\n\n      class Sub extends Super {\n        void test() {\n          Sub.Inner s = new Sub.Inner(); // 'Inner' class is declared in 'Super' class, but referenced via 'Sub' class\n        }\n      }\n\nAfter the quick-fix is applied:\n\n\n      class Super {\n        static class Inner {}\n      }\n\n      class Sub extends Super {\n        void test() {\n          Super.Inner s = new Super.Inner();\n        }\n      }\n\nInspection ID: InnerClassReferencedViaSubclass"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "InnerClassReferencedViaSubclass",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConfusingElse",
                "shortDescription": {
                  "text": "Redundant 'else'"
                },
                "fullDescription": {
                  "text": "Reports redundant 'else' keywords in 'if'—'else' statements and statement chains. The 'else' keyword is redundant when all previous branches end with a 'return', 'throw', 'break', or 'continue' statement. In this case, the statements from the 'else' branch can be placed after the 'if' statement, and the 'else' keyword can be removed. Example: 'if (name == null) {\n      throw new IllegalArgumentException();\n  } else {\n      System.out.println(name);\n  }' After the quick-fix is applied: 'if (name == null) {\n      throw new IllegalArgumentException();\n  }\n  System.out.println(name);' Disable the Report when there are no more statements after the 'if' statement option to ignore cases where the 'if'—'else' statement is the last statement in a code block. Inspection ID: ConfusingElse",
                  "markdown": "Reports redundant `else` keywords in `if`---`else` statements and statement chains.\n\n\nThe `else` keyword is redundant when all previous branches end with a\n`return`, `throw`, `break`, or `continue` statement. In this case,\nthe statements from the `else` branch can be placed after the `if` statement, and the\n`else` keyword can be removed.\n\n**Example:**\n\n\n      if (name == null) {\n          throw new IllegalArgumentException();\n      } else {\n          System.out.println(name);\n      }\n\nAfter the quick-fix is applied:\n\n\n      if (name == null) {\n          throw new IllegalArgumentException();\n      }\n      System.out.println(name);\n\nDisable the **Report when there are no more statements after the 'if' statement** option to ignore cases where the `if`---`else` statement is the last statement in a code block.\n\nInspection ID: ConfusingElse"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ConfusingElseBranch",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Control flow issues",
                      "index": 24,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ChannelResource",
                "shortDescription": {
                  "text": "'Channel' opened but not safely closed"
                },
                "fullDescription": {
                  "text": "Reports 'Channel' resources that are not safely closed, including any instances created by calling 'getChannel()' on a file or socket resource. By default, the inspection assumes that the resources can be closed by any method with 'close' or 'cleanup' in its name. Example: 'void send(Socket socket) throws IOException {\n    SocketChannel channel = socket.getChannel(); //warning\n    channel.write(ByteBuffer.wrap(\"message\".getBytes()));\n  }' Use the following options to configure the inspection: Whether a 'Channel' resource is allowed to be opened inside a 'try' block. This style is less desirable because it is more verbose than opening a 'Channel' in front of a 'try' block. Whether the resource can be closed by any method call with the resource passed as argument. Inspection ID: ChannelResource",
                  "markdown": "Reports `Channel` resources that are not safely closed, including any instances created by calling `getChannel()` on a file or socket resource.\n\n\nBy default, the inspection assumes that the resources can be closed by any method with\n'close' or 'cleanup' in its name.\n\n**Example:**\n\n\n      void send(Socket socket) throws IOException {\n        SocketChannel channel = socket.getChannel(); //warning\n        channel.write(ByteBuffer.wrap(\"message\".getBytes()));\n      }\n\n\nUse the following options to configure the inspection:\n\n* Whether a `Channel` resource is allowed to be opened inside a `try` block. This style is less desirable because it is more verbose than opening a `Channel` in front of a `try` block.\n* Whether the resource can be closed by any method call with the resource passed as argument.\n\nInspection ID: ChannelResource"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ChannelOpenedButNotSafelyClosed",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Resource management",
                      "index": 109,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ScheduledThreadPoolExecutorWithZeroCoreThreads",
                "shortDescription": {
                  "text": "'ScheduledThreadPoolExecutor' with zero core threads"
                },
                "fullDescription": {
                  "text": "Reports any 'java.util.concurrent.ScheduledThreadPoolExecutor' instances in which 'corePoolSize' is set to zero via the 'setCorePoolSize' method or the object constructor. A 'ScheduledThreadPoolExecutor' with zero core threads will run nothing. Example: 'void foo(int corePoolSize) {\n      if (corePoolSize != 0) return;\n      ThreadPoolExecutor executor = new ScheduledThreadPoolExecutor(corePoolSize); // warning\n      executor.setCorePoolSize(corePoolSize); // warning\n  }' Inspection ID: ScheduledThreadPoolExecutorWithZeroCoreThreads",
                  "markdown": "Reports any `java.util.concurrent.ScheduledThreadPoolExecutor` instances in which `corePoolSize` is set to zero via the `setCorePoolSize` method or the object constructor.\n\n\nA `ScheduledThreadPoolExecutor` with zero core threads will run nothing.\n\n**Example:**\n\n\n      void foo(int corePoolSize) {\n          if (corePoolSize != 0) return;\n          ThreadPoolExecutor executor = new ScheduledThreadPoolExecutor(corePoolSize); // warning\n          executor.setCorePoolSize(corePoolSize); // warning\n      }\n\nInspection ID: ScheduledThreadPoolExecutorWithZeroCoreThreads"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ScheduledThreadPoolExecutorWithZeroCoreThreads",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JavaEmptyModuleInfoFile",
                "shortDescription": {
                  "text": "Empty 'module-info.java' file"
                },
                "fullDescription": {
                  "text": "Reports an empty 'module-info.java' file, indicating unresolved module dependencies. Automatically adds necessary 'requires' statements by inspecting imports. To suppress this warning, you may write any comment inside the module statement body, like this: 'module module.name {\n    // no dependencies\n}' Quick Fix: Fill in module dependencies fills in missing 'requires' based on source code imports. New in 2024.1 Inspection ID: JavaEmptyModuleInfoFile",
                  "markdown": "Reports an empty `module-info.java` file, indicating unresolved module dependencies. Automatically adds necessary `requires` statements by inspecting imports. To suppress this warning, you may write any comment inside the module statement body, like this:\n\n\n    module module.name {\n        // no dependencies\n    }\n\n**Quick Fix:** *Fill in module dependencies* fills in missing `requires` based on source code imports. New in 2024.1\n\nInspection ID: JavaEmptyModuleInfoFile"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JavaEmptyModuleInfoFile",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Visibility",
                      "index": 73,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ClassMayBeInterface",
                "shortDescription": {
                  "text": "Abstract 'class' may be 'interface'"
                },
                "fullDescription": {
                  "text": "Reports 'abstract' classes that can be converted to interfaces. Using interfaces instead of classes is preferable as Java doesn't support multiple class inheritance, while a class can implement multiple interfaces. A class may be converted to an interface if it has no superclasses (other than Object), has only 'public static final' fields, 'public abstract' methods, and 'public' inner classes. Example: 'abstract class Example {\n    public static final int MY_CONST = 42;\n    public abstract void foo();\n}\n\nclass Inheritor extends Example {\n    @Override\n    public void foo() {\n        System.out.println(MY_CONST);\n    }\n}' After the quick-fix is applied: 'interface Example {\n    int MY_CONST = 42;\n    void foo();\n}\n\nclass Inheritor implements Example {\n    @Override\n    public void foo() {\n        System.out.println(MY_CONST);\n    }\n}' Configure the inspection: Use the Report classes containing non-abstract methods when using Java 8 option to report only the classes with 'static' methods and non-abstract methods that can be converted to 'default' methods (only applicable to language level of 8 or higher). Inspection ID: ClassMayBeInterface",
                  "markdown": "Reports `abstract` classes that can be converted to interfaces.\n\nUsing interfaces instead of classes is preferable as Java doesn't support multiple class inheritance,\nwhile a class can implement multiple interfaces.\n\nA class may be converted to an interface if it has no superclasses (other\nthan Object), has only `public static final` fields,\n`public abstract` methods, and `public` inner classes.\n\n\nExample:\n\n\n    abstract class Example {\n        public static final int MY_CONST = 42;\n        public abstract void foo();\n    }\n\n    class Inheritor extends Example {\n        @Override\n        public void foo() {\n            System.out.println(MY_CONST);\n        }\n    }\n\nAfter the quick-fix is applied:\n\n\n    interface Example {\n        int MY_CONST = 42;\n        void foo();\n    }\n\n    class Inheritor implements Example {\n        @Override\n        public void foo() {\n            System.out.println(MY_CONST);\n        }\n    }\n\nConfigure the inspection:\n\n\nUse the **Report classes containing non-abstract methods when using Java 8** option to report only the classes with `static` methods and non-abstract methods that can be converted to\n`default` methods (only applicable to language level of 8 or higher).\n\n\nInspection ID: ClassMayBeInterface"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ClassMayBeInterface",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Class structure",
                      "index": 17,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryCallToStringValueOf",
                "shortDescription": {
                  "text": "Unnecessary conversion to 'String'"
                },
                "fullDescription": {
                  "text": "Reports unnecessary calls to static methods that convert their parameters to a string, e.g. 'String.valueOf()' or 'Integer.toString()'. Such calls are unnecessary when used in string concatenations. Example: 'System.out.println(\"Number: \" + Integer.toString(count));' After the quick-fix is applied: 'System.out.println(\"Number: \" + count);' Additionally such calls are unnecessary when used as arguments to library methods that do their own string conversion. Some examples of library methods that do their own string conversion are: Classes 'java.io.PrintWriter', 'java.io.PrintStream' 'print()', 'println()' Classes 'java.lang.StringBuilder', 'java.lang.StringBuffer' 'append()' Class 'org.slf4j.Logger' 'trace()', 'debug()', 'info()', 'warn()', 'error()' Use the Report calls that can be replaced with a concatenation with the empty string option to also report cases where concatenations with the empty string can be used instead of a call to 'String.valueOf()'. Inspection ID: UnnecessaryCallToStringValueOf",
                  "markdown": "Reports unnecessary calls to static methods that convert their parameters to a string, e.g. `String.valueOf()` or `Integer.toString()`. Such calls are unnecessary when used in string concatenations.\n\nExample:\n\n\n      System.out.println(\"Number: \" + Integer.toString(count));\n\nAfter the quick-fix is applied:\n\n\n      System.out.println(\"Number: \" + count);\n\nAdditionally such calls are unnecessary when used as arguments to library methods that do their own string conversion. Some examples of library methods that do their own string conversion are:\n\n* Classes `java.io.PrintWriter`, `java.io.PrintStream`\n  * `print()`, `println()`\n* Classes `java.lang.StringBuilder`, `java.lang.StringBuffer`\n  * `append()`\n* Class `org.slf4j.Logger`\n  * `trace()`, `debug()`, `info()`, `warn()`, `error()`\n\n\nUse the **Report calls that can be replaced with a concatenation with the empty string**\noption to also report cases where concatenations with the empty string can be used instead of a call to `String.valueOf()`.\n\nInspection ID: UnnecessaryCallToStringValueOf"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnnecessaryCallToStringValueOf",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StringReplaceableByStringBuffer",
                "shortDescription": {
                  "text": "Non-constant 'String' can be replaced with 'StringBuilder'"
                },
                "fullDescription": {
                  "text": "Reports variables declared as 'java.lang.String' that are repeatedly appended to. Such variables could be declared more efficiently as 'java.lang.StringBuffer' or 'java.lang.StringBuilder'. Example: 'String s = \"\";\n  for (int i = 0; i < names.length; i++) {\n    String name = names[i] + (i == names.length - 1 ? \"\" : \" \");\n    s = s + name;\n  }' Such a loop can be replaced with: 'StringBuilder s = new StringBuilder();\n  for (int i = 0; i < names.length; i++) {\n    String name = names[i] + (i == names.length - 1 ? \"\" : \" \");\n    s.append(name);\n  }' Or even with: 'String s = String.join(\" \", names);' Use the option to make this inspection only report when the variable is appended to in a loop. Inspection ID: StringReplaceableByStringBuffer",
                  "markdown": "Reports variables declared as `java.lang.String` that are repeatedly appended to. Such variables could be declared more efficiently as `java.lang.StringBuffer` or `java.lang.StringBuilder`.\n\n**Example:**\n\n\n      String s = \"\";\n      for (int i = 0; i < names.length; i++) {\n        String name = names[i] + (i == names.length - 1 ? \"\" : \" \");\n        s = s + name;\n      }\n\nSuch a loop can be replaced with:\n\n\n      StringBuilder s = new StringBuilder();\n      for (int i = 0; i < names.length; i++) {\n        String name = names[i] + (i == names.length - 1 ? \"\" : \" \");\n        s.append(name);\n      }\n\nOr even with:\n\n\n      String s = String.join(\" \", names);\n\n\nUse the option to make this inspection only report when the variable is appended to in a loop.\n\nInspection ID: StringReplaceableByStringBuffer"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NonConstantStringShouldBeStringBuffer",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Performance",
                      "index": 4,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FinallyBlockCannotCompleteNormally",
                "shortDescription": {
                  "text": "'finally' block which can not complete normally"
                },
                "fullDescription": {
                  "text": "Reports 'return', 'throw', 'break', 'continue', and 'yield' statements that are used inside 'finally' blocks. These cause the 'finally' block to not complete normally but to complete abruptly. Any exceptions thrown from the 'try' and 'catch' blocks of the same 'try'-'catch' statement will be suppressed. Example: 'void x() {\n    try {\n      throw new RuntimeException();\n    } finally {\n      // if bar() returns true, the RuntimeException will be suppressed\n      if (bar()) return;\n    }\n  }' Inspection ID: FinallyBlockCannotCompleteNormally",
                  "markdown": "Reports `return`, `throw`, `break`, `continue`, and `yield` statements that are used inside `finally` blocks. These cause the `finally` block to not complete normally but to complete abruptly. Any exceptions thrown from the `try` and `catch` blocks of the same `try`-`catch` statement will be suppressed.\n\n**Example:**\n\n\n      void x() {\n        try {\n          throw new RuntimeException();\n        } finally {\n          // if bar() returns true, the RuntimeException will be suppressed\n          if (bar()) return;\n        }\n      }\n\nInspection ID: FinallyBlockCannotCompleteNormally"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "finally",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Error handling",
                      "index": 10,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConstantOnWrongSideOfComparison",
                "shortDescription": {
                  "text": "Constant on wrong side of comparison"
                },
                "fullDescription": {
                  "text": "Reports comparison operations where the constant value is on the wrong side. Some coding conventions specify that constants should be on a specific side of a comparison, either left or right. Example: 'boolean compare(int x) {\n    return 1 > x; // Constant '1' on the left side of the comparison\n  }' After the quick-fix is applied: 'boolean compare(int x) {\n    return x < 1;\n  }' Use the inspection settings to choose the side of constants in comparisons and whether to warn if 'null' literals are on the wrong side. Inspection ID: ConstantOnWrongSideOfComparison New in 2019.2",
                  "markdown": "Reports comparison operations where the constant value is on the wrong side.\n\nSome coding conventions specify that constants should be on a specific side of a comparison, either left or right.\n\n**Example:**\n\n\n      boolean compare(int x) {\n        return 1 > x; // Constant '1' on the left side of the comparison\n      }\n\nAfter the quick-fix is applied:\n\n\n      boolean compare(int x) {\n        return x < 1;\n      }\n\n\nUse the inspection settings to choose the side of constants in comparisons\nand whether to warn if `null` literals are on the wrong side.\n\nInspection ID: ConstantOnWrongSideOfComparison\n\nNew in 2019.2"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ConstantOnWrongSideOfComparison",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessarilyQualifiedStaticallyImportedElement",
                "shortDescription": {
                  "text": "Unnecessarily qualified statically imported element"
                },
                "fullDescription": {
                  "text": "Reports usage of statically imported members qualified with their containing class name. Such qualification is unnecessary and can be removed because statically imported members can be accessed directly by member name. Example: 'import static foo.Test.WIDTH;\n\n  class Bar {\n    void bar() {\n      System.out.println(Test.WIDTH);\n    }\n  }' After the quick-fix is applied: 'import static foo.Test.WIDTH;\n\n  class Bar {\n    void bar() {\n      System.out.println(WIDTH);\n    }\n  }' Inspection ID: UnnecessarilyQualifiedStaticallyImportedElement",
                  "markdown": "Reports usage of statically imported members qualified with their containing class name.\n\nSuch qualification is unnecessary and can be removed\nbecause statically imported members can be accessed directly by member name.\n\n**Example:**\n\n\n      import static foo.Test.WIDTH;\n\n      class Bar {\n        void bar() {\n          System.out.println(Test.WIDTH);\n        }\n      }\n\nAfter the quick-fix is applied:\n\n\n      import static foo.Test.WIDTH;\n\n      class Bar {\n        void bar() {\n          System.out.println(WIDTH);\n        }\n      }\n\nInspection ID: UnnecessarilyQualifiedStaticallyImportedElement"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnnecessarilyQualifiedStaticallyImportedElement",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ObjectToString",
                "shortDescription": {
                  "text": "Call to default 'toString()'"
                },
                "fullDescription": {
                  "text": "Reports calls to 'toString()' that use the default implementation from 'java.lang.Object'. The default implementation is rarely intended but may be used by accident. Calls to 'toString()' on objects with 'java.lang.Object', interface or abstract class type are ignored by this inspection. Example: 'class Bar {\n      void foo1(Bar bar) {\n          String s = bar.toString(); // warning\n          /* ... */\n      }\n\n      void foo2(Object obj) {\n          String s = obj.toString(); // no warning here\n          /* ... */\n      }\n  }' Inspection ID: ObjectToString",
                  "markdown": "Reports calls to `toString()` that use the default implementation from `java.lang.Object`.\n\nThe default implementation is rarely intended but may be used by accident.\n\n\nCalls to `toString()` on objects with `java.lang.Object`,\ninterface or abstract class type are ignored by this inspection.\n\n**Example:**\n\n\n      class Bar {\n          void foo1(Bar bar) {\n              String s = bar.toString(); // warning\n              /* ... */\n          }\n\n          void foo2(Object obj) {\n              String s = obj.toString(); // no warning here\n              /* ... */\n          }\n      }\n\nInspection ID: ObjectToString"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ObjectToString",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseOfJDBCDriverClass",
                "shortDescription": {
                  "text": "Use of concrete JDBC driver class"
                },
                "fullDescription": {
                  "text": "Reports uses of specific JDBC driver classes. Use of such classes will bind your project to a specific database and driver, defeating the purpose of JDBC and resulting in loss of portability. Example: 'import java.sql.Driver;\n\n  abstract class Sample implements Driver {\n    public void foo() {\n        Sample sample;\n    }\n  }' Inspection ID: UseOfJDBCDriverClass",
                  "markdown": "Reports uses of specific JDBC driver classes. Use of such classes will bind your project to a specific database and driver, defeating the purpose of JDBC and resulting in loss of portability.\n\n**Example:**\n\n\n      import java.sql.Driver;\n\n      abstract class Sample implements Driver {\n        public void foo() {\n            Sample sample;\n        }\n      }\n\nInspection ID: UseOfJDBCDriverClass"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UseOfJDBCDriverClass",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Portability",
                      "index": 69,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JDBCResource",
                "shortDescription": {
                  "text": "JDBC resource opened but not safely closed"
                },
                "fullDescription": {
                  "text": "Reports JDBC resources that are not safely closed. JDBC resources reported by this inspection include 'java.sql.Connection', 'java.sql.Statement', 'java.sql.PreparedStatement', 'java.sql.CallableStatement', and 'java.sql.ResultSet'. By default, the inspection assumes that the resources can be closed by any method with 'close' or 'cleanup' in its name. Example: 'ResultSet findAllElements(Connection connection) throws SQLException {\n    PreparedStatement statement = connection.prepareStatement(\"SELECT * FROM TABLE\");//statement is not closed\n    statement.execute();\n    return statement.getResultSet();\n  }' Use the following options to configure the inspection: Whether a JDBC resource is allowed to be opened inside a 'try' block. This style is less desirable because it is more verbose than opening a resource in front of a 'try' block. Whether the resource can be closed by any method call with the resource passed as argument. Inspection ID: JDBCResource",
                  "markdown": "Reports JDBC resources that are not safely closed. JDBC resources reported by this inspection include `java.sql.Connection`, `java.sql.Statement`, `java.sql.PreparedStatement`, `java.sql.CallableStatement`, and `java.sql.ResultSet`.\n\n\nBy default, the inspection assumes that the resources can be closed by any method with\n'close' or 'cleanup' in its name.\n\n**Example:**\n\n\n      ResultSet findAllElements(Connection connection) throws SQLException {\n        PreparedStatement statement = connection.prepareStatement(\"SELECT * FROM TABLE\");//statement is not closed\n        statement.execute();\n        return statement.getResultSet();\n      }\n\n\nUse the following options to configure the inspection:\n\n* Whether a JDBC resource is allowed to be opened inside a `try` block. This style is less desirable because it is more verbose than opening a resource in front of a `try` block.\n* Whether the resource can be closed by any method call with the resource passed as argument.\n\nInspection ID: JDBCResource"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JDBCResourceOpenedButNotSafelyClosed",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Resource management",
                      "index": 109,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LoggingSimilarMessage",
                "shortDescription": {
                  "text": "Non-distinguishable logging calls"
                },
                "fullDescription": {
                  "text": "Reports SLF4J, Log4j2 logging calls in one class, such as 'logger.info(\"message: {}\", key)' with similar log messages. These calls can be non-distinguishable from each other, and this introduces difficulties to understand where a certain log message is coming from. Example (for Java): 'private static void request1(String text) {\n      log.info(\"Message: {}\", text); //similar call\n      doSomething1();\n  }\n\n  private static void request2(int i) {\n      log.info(\"Message: {}\", i); //similar call\n      doSomething2();\n  }' Use the Minimum length of a similar sequence option to set the minimum length of similar sequences after which calls will be reported Use the Do not report calls with the 'error' log level option to ignore messages with `error` log level and when there is an exception. It may be useful to hide the warnings, because call sites can still be located using stack traces Inspection ID: LoggingSimilarMessage New in 2024.1",
                  "markdown": "Reports SLF4J, Log4j2 logging calls in one class, such as `logger.info(\"message: {}\", key)` with similar log messages. These calls can be non-distinguishable from each other, and this introduces difficulties to understand where a certain log message is coming from.\n\n**Example (for Java):**\n\n\n      private static void request1(String text) {\n          log.info(\"Message: {}\", text); //similar call\n          doSomething1();\n      }\n\n      private static void request2(int i) {\n          log.info(\"Message: {}\", i); //similar call\n          doSomething2();\n      }\n\n* Use the **Minimum length of a similar sequence** option to set the minimum length of similar sequences after which calls will be reported\n* Use the **Do not report calls with the 'error' log level** option to ignore messages with \\`error\\` log level and when there is an exception. It may be useful to hide the warnings, because call sites can still be located using stack traces\n\nInspection ID: LoggingSimilarMessage\n\nNew in 2024.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "LoggingSimilarMessage",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JVM languages/Logging",
                      "index": 41,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IfCanBeAssertion",
                "shortDescription": {
                  "text": "Statement can be replaced with 'assert' or 'Objects.requireNonNull'"
                },
                "fullDescription": {
                  "text": "Reports 'if' statements that throw only 'java.lang.Throwable' from a 'then' branch and do not have an 'else' branch. Such statements can be converted to more compact 'assert' statements. The inspection also reports Guava's 'Preconditions.checkNotNull()'. They can be replaced with a 'Objects.requireNonNull()' call for which a library may not be needed. Example: 'if (x == 2) throw new RuntimeException(\"fail\");\n  if (y == null) throw new AssertionError();\n  Preconditions.checkNotNull(z, \"z\");' After the quick-fix is applied: 'assert x != 2 : \"fail\";\n  Objects.requireNonNull(y);\n  Objects.requireNonNull(z, \"z\");' By default, this inspection provides a quick-fix in the editor without code highlighting. This inspection depends on the Java feature 'Assertions', which is available since Java 1.4. Inspection ID: IfCanBeAssertion",
                  "markdown": "Reports `if` statements that throw only `java.lang.Throwable` from a `then` branch and do not have an `else` branch. Such statements can be converted to more compact `assert` statements.\n\n\nThe inspection also reports Guava's `Preconditions.checkNotNull()`.\nThey can be replaced with a `Objects.requireNonNull()` call for which a library may not be needed.\n\nExample:\n\n\n      if (x == 2) throw new RuntimeException(\"fail\");\n      if (y == null) throw new AssertionError();\n      Preconditions.checkNotNull(z, \"z\");\n\nAfter the quick-fix is applied:\n\n\n      assert x != 2 : \"fail\";\n      Objects.requireNonNull(y);\n      Objects.requireNonNull(z, \"z\");\n\nBy default, this inspection provides a quick-fix in the editor without code highlighting.\n\nThis inspection depends on the Java feature 'Assertions', which is available since Java 1.4.\n\nInspection ID: IfCanBeAssertion"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "IfCanBeAssertion",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Control flow issues",
                      "index": 24,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JavadocDeclaration",
                "shortDescription": {
                  "text": "Javadoc declaration problems"
                },
                "fullDescription": {
                  "text": "Reports Javadoc comments and tags with the following problems: invalid tag names incomplete tag descriptions duplicated tags missing Javadoc descriptions Example: '/**\n   * Invalid tag name\n   * @poram param description\n   */\n  public void sample(int param){\n  }' Example: '/**\n   * Pointing to itself {@link #sample(int)}\n   */\n  public void sample(int param){\n  }' Quick-fix adds the unknown Javadoc tag to the list of user defined additional tags. Inspection ID: JavadocDeclaration",
                  "markdown": "Reports Javadoc comments and tags with the following problems:\n\n* invalid tag names\n* incomplete tag descriptions\n* duplicated tags\n* missing Javadoc descriptions\n\nExample:\n\n\n      /**\n       * Invalid tag name\n       * @poram param description\n       */\n      public void sample(int param){\n      }\n\nExample:\n\n\n      /**\n       * Pointing to itself {@link #sample(int)}\n       */\n      public void sample(int param){\n      }\n\nQuick-fix adds the unknown Javadoc tag to the list of user defined additional tags.\n\nInspection ID: JavadocDeclaration"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JavadocDeclaration",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Javadoc",
                      "index": 58,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AssignmentToMethodParameter",
                "shortDescription": {
                  "text": "Assignment to method parameter"
                },
                "fullDescription": {
                  "text": "Reports assignment to, or modification of method parameters. Although occasionally intended, this construct may be confusing and is therefore prohibited in some Java projects. The quick-fix adds a declaration of a new variable. Example: 'void printTrimmed(String s) {\n    s = s.trim();\n    System.out.println(s);\n  }' After the quick-fix is applied: 'void printTrimmed(String s) {\n    String trimmed = s.trim();\n    System.out.println(trimmed);\n  }' Use the Ignore if assignment is a transformation of the original parameter option to ignore assignments that modify the parameter value based on its previous value. Inspection ID: AssignmentToMethodParameter",
                  "markdown": "Reports assignment to, or modification of method parameters.\n\nAlthough occasionally intended, this construct may be confusing\nand is therefore prohibited in some Java projects.\n\nThe quick-fix adds a declaration of a new variable.\n\n**Example:**\n\n\n      void printTrimmed(String s) {\n        s = s.trim();\n        System.out.println(s);\n      }\n\nAfter the quick-fix is applied:\n\n\n      void printTrimmed(String s) {\n        String trimmed = s.trim();\n        System.out.println(trimmed);\n      }\n\n\nUse the **Ignore if assignment is a transformation of the original parameter** option to ignore assignments that modify\nthe parameter value based on its previous value.\n\nInspection ID: AssignmentToMethodParameter"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AssignmentToMethodParameter",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Assignment issues",
                      "index": 64,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LocalVariableHidingMemberVariable",
                "shortDescription": {
                  "text": "Local variable hides field"
                },
                "fullDescription": {
                  "text": "Reports local variables named identically to a field of a surrounding class. As a result of such naming, you may accidentally use the variable where the identically named field is intended. A quick-fix is suggested to rename the variable. Example: 'public class Foo {\n    public Object foo;\n\n    void bar() {\n      Object o = new Object() {\n        void baz() {\n          Object foo; // Local variable 'foo' hides field in class 'Foo'\n        }\n      };\n    }\n  }' You can configure the following options for this inspection: Ignore non-accessible fields - ignore local variables named identically to superclass fields that are not visible (for example, because they are private). Ignore local variables in a static context hiding non-static fields - for example when the local variable is inside a static method or inside a method which is inside a static inner class. Inspection ID: LocalVariableHidingMemberVariable",
                  "markdown": "Reports local variables named identically to a field of a surrounding class. As a result of such naming, you may accidentally use the variable where the identically named field is intended.\n\nA quick-fix is suggested to rename the variable.\n\n**Example:**\n\n\n      public class Foo {\n        public Object foo;\n\n        void bar() {\n          Object o = new Object() {\n            void baz() {\n              Object foo; // Local variable 'foo' hides field in class 'Foo'\n            }\n          };\n        }\n      }\n\n\nYou can configure the following options for this inspection:\n\n1. **Ignore non-accessible fields** - ignore local variables named identically to superclass fields that are not visible (for example, because they are private).\n2. **Ignore local variables in a static context hiding non-static fields** - for example when the local variable is inside a static method or inside a method which is inside a static inner class.\n\nInspection ID: LocalVariableHidingMemberVariable"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "LocalVariableHidesMemberVariable",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Visibility",
                      "index": 73,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryTemporaryOnConversionToString",
                "shortDescription": {
                  "text": "Unnecessary temporary object in conversion to 'String'"
                },
                "fullDescription": {
                  "text": "Reports unnecessary creation of temporary objects when converting from a primitive type to 'String'. Example: 'String foo = new Integer(3).toString();' After the quick-fix is applied: 'String foo = Integer.toString(3);' Inspection ID: UnnecessaryTemporaryOnConversionToString",
                  "markdown": "Reports unnecessary creation of temporary objects when converting from a primitive type to `String`.\n\n**Example:**\n\n\n      String foo = new Integer(3).toString();\n\nAfter the quick-fix is applied:\n\n\n      String foo = Integer.toString(3);\n\nInspection ID: UnnecessaryTemporaryOnConversionToString"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnnecessaryTemporaryOnConversionToString",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Performance",
                      "index": 4,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InterfaceMayBeAnnotatedFunctional",
                "shortDescription": {
                  "text": "Interface may be annotated as '@FunctionalInterface'"
                },
                "fullDescription": {
                  "text": "Reports interfaces that can be annotated with '@FunctionalInterface'. Annotating an interface with '@FunctionalInterface' indicates that the interface is functional and no more 'abstract' methods can be added to it. Example: 'interface FileProcessor {\n    void execute(File file);\n  }' After the quick-fix is applied: '@FunctionalInterface\n  interface FileProcessor {\n    void execute(File file);\n  }' This inspection depends on the Java feature 'Lambda expressions', which is available since Java 8. Inspection ID: InterfaceMayBeAnnotatedFunctional",
                  "markdown": "Reports interfaces that can be annotated with `@FunctionalInterface`.\n\nAnnotating an interface with `@FunctionalInterface` indicates that the interface\nis functional and no more `abstract` methods can be added to it.\n\n**Example:**\n\n\n      interface FileProcessor {\n        void execute(File file);\n      }\n\nAfter the quick-fix is applied:\n\n\n      @FunctionalInterface\n      interface FileProcessor {\n        void execute(File file);\n      }\n\nThis inspection depends on the Java feature 'Lambda expressions', which is available since Java 8.\n\nInspection ID: InterfaceMayBeAnnotatedFunctional"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "InterfaceMayBeAnnotatedFunctional",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Class structure",
                      "index": 17,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BreakStatementWithLabel",
                "shortDescription": {
                  "text": "'break' statement with label"
                },
                "fullDescription": {
                  "text": "Reports 'break' statements with labels. Labeled 'break' statements complicate refactoring and can be confusing. Example: 'void handle(List<String> strs) {\n    outer:\n    for (String s: strs) {\n      for (char ch : s.toCharArray()) {\n        if ('s' == ch) break outer;\n        handleChar(ch);\n      }\n    }\n  }' Inspection ID: BreakStatementWithLabel",
                  "markdown": "Reports `break` statements with labels.\n\nLabeled `break` statements complicate refactoring and can be confusing.\n\nExample:\n\n\n      void handle(List<String> strs) {\n        outer:\n        for (String s: strs) {\n          for (char ch : s.toCharArray()) {\n            if ('s' == ch) break outer;\n            handleChar(ch);\n          }\n        }\n      }\n\n\nInspection ID: BreakStatementWithLabel"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "BreakStatementWithLabel",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Control flow issues",
                      "index": 24,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StringEquality",
                "shortDescription": {
                  "text": "String comparison using '==', instead of 'equals()'"
                },
                "fullDescription": {
                  "text": "Reports code that uses of == or != to compare strings. These operators determine referential equality instead of comparing content. In most cases, strings should be compared using 'equals()', which does a character-by-character comparison when the strings are different objects. Example: 'void foo(String s, String t) {\n    final boolean b = t == s;\n  }' If 't' is known to be non-null, then it's safe to apply the \"unsafe\" quick-fix and get the result similar to the following: 'void foo(String s, String t) {\n    final boolean b = t.equals(s);\n  }' Inspection ID: StringEquality",
                  "markdown": "Reports code that uses of **==** or **!=** to compare strings.\n\n\nThese operators determine referential equality instead of comparing content.\nIn most cases, strings should be compared using `equals()`,\nwhich does a character-by-character comparison when the strings are different objects.\n\n**Example:**\n\n\n      void foo(String s, String t) {\n        final boolean b = t == s;\n      }\n\nIf `t` is known to be non-null, then it's safe to apply the \"unsafe\" quick-fix and get the result similar to the following:\n\n\n      void foo(String s, String t) {\n        final boolean b = t.equals(s);\n      }\n\n\nInspection ID: StringEquality"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "StringEquality",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SuspiciousLiteralUnderscore",
                "shortDescription": {
                  "text": "Suspicious underscore in number literal"
                },
                "fullDescription": {
                  "text": "Reports decimal number literals that use the underscore numeric separator with groups where the number of digits is not three. Such literals may contain a typo. This inspection will not warn on literals containing two consecutive underscores. It is also allowed to omit underscores in the fractional part of 'double' and 'float' literals. Example: 'int oneMillion = 1_000_0000;' Inspection ID: SuspiciousLiteralUnderscore",
                  "markdown": "Reports decimal number literals that use the underscore numeric separator with groups where the number of digits is not three. Such literals may contain a typo.\n\nThis inspection will not warn on literals containing two consecutive underscores.\nIt is also allowed to omit underscores in the fractional part of `double` and `float` literals.\n\n**Example:** `int oneMillion = 1_000_0000;`\n\n\nInspection ID: SuspiciousLiteralUnderscore"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SuspiciousLiteralUnderscore",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Numeric issues",
                      "index": 25,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StaticCallOnSubclass",
                "shortDescription": {
                  "text": "Static method referenced via subclass"
                },
                "fullDescription": {
                  "text": "Reports static method calls where the call is qualified by a subclass of the declaring class, rather than by the declaring class itself. Java allows such qualification for classes, but such calls may indicate a subtle confusion of inheritance and overriding. Example: 'class Parent {\n    public static void print(String str) {}\n  }\n  class Child extends Parent {}\n\n  Child.print(\"Hello, world!\");' After the quick-fix is applied: 'Parent.print(\"Hello, world!\");' Inspection ID: StaticCallOnSubclass",
                  "markdown": "Reports static method calls where the call is qualified by a subclass of the declaring class, rather than by the declaring class itself.\n\n\nJava allows such qualification for classes, but such calls\nmay indicate a subtle confusion of inheritance and overriding.\n\n**Example:**\n\n\n      class Parent {\n        public static void print(String str) {}\n      }\n      class Child extends Parent {}\n\n      Child.print(\"Hello, world!\");\n\nAfter the quick-fix is applied:\n\n\n      Parent.print(\"Hello, world!\");\n\nInspection ID: StaticCallOnSubclass"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "StaticMethodReferencedViaSubclass",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReadResolveAndWriteReplaceProtected",
                "shortDescription": {
                  "text": "'readResolve()' or 'writeReplace()' not declared 'protected'"
                },
                "fullDescription": {
                  "text": "Reports classes that implement 'java.io.Serializable' where the 'readResolve()' or 'writeReplace()' methods are not declared 'protected'. Declaring 'readResolve()' and 'writeReplace()' methods 'private' can force subclasses to silently ignore them, while declaring them 'public' allows them to be invoked by untrusted code. If the containing class is declared 'final', these methods can be declared 'private'. Example: 'class ClassWithSerialization implements Serializable {\n    public Object writeReplace() { // warning: 'writeReplace()' not declared protected\n        ...\n    }\n  }'\n Inspection ID: ReadResolveAndWriteReplaceProtected",
                  "markdown": "Reports classes that implement `java.io.Serializable` where the `readResolve()` or `writeReplace()` methods are not declared `protected`.\n\n\nDeclaring `readResolve()` and `writeReplace()` methods `private`\ncan force subclasses to silently ignore them, while declaring them\n`public` allows them to be invoked by untrusted code.\n\n\nIf the containing class is declared `final`, these methods can be declared `private`.\n\n**Example:**\n\n\n      class ClassWithSerialization implements Serializable {\n        public Object writeReplace() { // warning: 'writeReplace()' not declared protected\n            ...\n        }\n      }\n      \nInspection ID: ReadResolveAndWriteReplaceProtected"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ReadResolveAndWriteReplaceProtected",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Serialization issues",
                      "index": 18,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryLabelOnContinueStatement",
                "shortDescription": {
                  "text": "Unnecessary label on 'continue' statement"
                },
                "fullDescription": {
                  "text": "Reports 'continue' statements with unnecessary labels. Example: 'LABEL:\n  while (a > b) {\n    System.out.println(\"Hello\");\n    //the code below is the last statement in a loop,\n    //so unnecessary label and continue can be removed\n    continue LABEL;\n  }' Inspection ID: UnnecessaryLabelOnContinueStatement",
                  "markdown": "Reports `continue` statements with unnecessary labels.\n\nExample:\n\n\n      LABEL:\n      while (a > b) {\n        System.out.println(\"Hello\");\n        //the code below is the last statement in a loop,\n        //so unnecessary label and continue can be removed\n        continue LABEL;\n      }\n\nInspection ID: UnnecessaryLabelOnContinueStatement"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnnecessaryLabelOnContinueStatement",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Verbose or redundant code constructs",
                      "index": 37,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ParameterNamingConvention",
                "shortDescription": {
                  "text": "Method parameter naming convention"
                },
                "fullDescription": {
                  "text": "Reports method parameters whose names are too short, too long, or do not follow the specified regular expression pattern. Example: 'void fooBar(int X)' should be reported if the inspection is enabled with the default settings in which a parameter name should start with a lowercase letter. Configure the inspection: Use the fields in the Options section to specify the minimum length, maximum length, and a regular expression expected for method parameter names. Specify 0 in order not to check the length of names. Regular expressions should be specified in the standard 'java.util.regex' format. Inspection ID: ParameterNamingConvention",
                  "markdown": "Reports method parameters whose names are too short, too long, or do not follow the specified regular expression pattern.\n\n**Example:** `void fooBar(int X)`\nshould be reported if the inspection is enabled with the default settings in which a parameter name should start with a lowercase letter.\n\nConfigure the inspection:\n\n\nUse the fields in the **Options** section to specify the minimum length, maximum length, and a regular expression expected for\nmethod parameter names. Specify **0** in order not to check the length of names.\n\nRegular expressions should be specified in the standard `java.util.regex` format.\n\nInspection ID: ParameterNamingConvention"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MethodParameterNamingConvention",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Naming conventions",
                      "index": 59,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MethodCanBeVariableArityMethod",
                "shortDescription": {
                  "text": "Method can have varargs parameter"
                },
                "fullDescription": {
                  "text": "Reports methods that can be converted to variable arity methods. Example: 'void process(String name, Object[] objects);' After the quick-fix is applied: 'void process(String name, Object... objects);' This inspection depends on the Java feature 'Variable arity methods', which is available since Java 5. Inspection ID: MethodCanBeVariableArityMethod",
                  "markdown": "Reports methods that can be converted to variable arity methods.\n\n**Example:**\n\n\n      void process(String name, Object[] objects);\n\nAfter the quick-fix is applied:\n\n\n      void process(String name, Object... objects);\n\nThis inspection depends on the Java feature 'Variable arity methods', which is available since Java 5.\n\nInspection ID: MethodCanBeVariableArityMethod"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "MethodCanBeVariableArityMethod",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level migration aids/Java 5",
                      "index": 93,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AbstractClassNeverImplemented",
                "shortDescription": {
                  "text": "Abstract class which has no concrete subclass"
                },
                "fullDescription": {
                  "text": "Reports 'abstract' classes that have no concrete subclasses. Deprecated abstract classes are not reported. Inspection ID: AbstractClassNeverImplemented",
                  "markdown": "Reports `abstract` classes that have no concrete subclasses. Deprecated abstract classes are not reported.\n\nInspection ID: AbstractClassNeverImplemented"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AbstractClassNeverImplemented",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Inheritance issues",
                      "index": 121,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StreamToLoop",
                "shortDescription": {
                  "text": "Stream API call chain can be replaced with loop"
                },
                "fullDescription": {
                  "text": "Reports Stream API chains, 'Iterable.forEach()', and 'Map.forEach()' calls that can be automatically converted into classical loops. This can help to downgrade for backward compatibility with earlier Java versions. Example: 'String joinNonEmpty(List<String> list) {\n    return list.stream() // Stream can be converted to loop\n      .filter(s -> !s.isEmpty())\n      .map(String::trim)\n      .collect(Collectors.joining(\", \"));\n  }' After the quick-fix is applied: 'String joinNonEmpty(List<String> list) {\n    StringJoiner joiner = new StringJoiner(\", \");\n    for (String s : list) {\n      if (!s.isEmpty()) {\n        String trim = s.trim();\n        joiner.add(trim);\n      }\n    }\n    return joiner.toString();\n  }' Note that sometimes this inspection might cause slight semantic changes. Special care should be taken when it comes to short-circuiting, as it's not specified how many elements will be actually read when the stream short-circuits. Configure the inspection: Use the Iterate unknown Stream sources via Stream.iterator() option to suggest conversions for streams with unrecognized source. In this case, iterator will be created from the stream. For example, when checkbox is selected, the conversion will be suggested here: 'List<ProcessHandle> handles = ProcessHandle.allProcesses().collect(Collectors.toList());' In this case, the result will be as follows: 'List<ProcessHandle> handles = new ArrayList<>();\n  for (Iterator<ProcessHandle> it = ProcessHandle.allProcesses().iterator(); it.hasNext(); ) {\n    ProcessHandle allProcess = it.next();\n    handles.add(allProcess);\n  }' This inspection depends on the Java feature 'Stream and Optional API', which is available since Java 8. Inspection ID: StreamToLoop New in 2017.1",
                  "markdown": "Reports Stream API chains, `Iterable.forEach()`, and `Map.forEach()` calls that can be automatically converted into classical loops. This can help to downgrade for backward compatibility with earlier Java versions.\n\n**Example:**\n\n\n      String joinNonEmpty(List<String> list) {\n        return list.stream() // Stream can be converted to loop\n          .filter(s -> !s.isEmpty())\n          .map(String::trim)\n          .collect(Collectors.joining(\", \"));\n      }\n\nAfter the quick-fix is applied:\n\n\n      String joinNonEmpty(List<String> list) {\n        StringJoiner joiner = new StringJoiner(\", \");\n        for (String s : list) {\n          if (!s.isEmpty()) {\n            String trim = s.trim();\n            joiner.add(trim);\n          }\n        }\n        return joiner.toString();\n      }\n\n\nNote that sometimes this inspection might cause slight semantic changes.\nSpecial care should be taken when it comes to short-circuiting, as it's not specified how many elements will be actually read when\nthe stream short-circuits.\n\nConfigure the inspection:\n\nUse the **Iterate unknown Stream sources via Stream.iterator()** option to suggest conversions for streams with unrecognized source.\nIn this case, iterator will be created from the stream.\nFor example, when checkbox is selected, the conversion will be suggested here:\n\n\n      List<ProcessHandle> handles = ProcessHandle.allProcesses().collect(Collectors.toList());\n\nIn this case, the result will be as follows:\n\n\n      List<ProcessHandle> handles = new ArrayList<>();\n      for (Iterator<ProcessHandle> it = ProcessHandle.allProcesses().iterator(); it.hasNext(); ) {\n        ProcessHandle allProcess = it.next();\n        handles.add(allProcess);\n      }\n\nThis inspection depends on the Java feature 'Stream and Optional API', which is available since Java 8.\n\nInspection ID: StreamToLoop\n\nNew in 2017.1"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "StreamToLoop",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NotifyWithoutCorrespondingWait",
                "shortDescription": {
                  "text": "'notify()' without corresponding 'wait()'"
                },
                "fullDescription": {
                  "text": "Reports calls to 'Object.notify()' or 'Object.notifyAll()' for which no call to a corresponding 'Object.wait()' can be found. Only calls that target fields of the current class are reported by this inspection. Example: 'synchronized (synList) {\n    synList.notify(); //synList.wait() is never called\n  }' Inspection ID: NotifyWithoutCorrespondingWait",
                  "markdown": "Reports calls to `Object.notify()` or `Object.notifyAll()` for which no call to a corresponding `Object.wait()` can be found.\n\nOnly calls that target fields of the current class are reported by this inspection.\n\n**Example:**\n\n\n      synchronized (synList) {\n        synList.notify(); //synList.wait() is never called\n      }\n\nInspection ID: NotifyWithoutCorrespondingWait"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NotifyWithoutCorrespondingWait",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Threading issues",
                      "index": 23,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ClassInitializerMayBeStatic",
                "shortDescription": {
                  "text": "Instance initializer can be made 'static'"
                },
                "fullDescription": {
                  "text": "Reports instance initializers which can be made 'static' without producing any errors. An instance initializer may be static if it does not reference any of its class' non-static members. Static initializers are executed once when the class is resolved, while instance initializers are executed on each instantiation of the class. This inspection doesn't report instance empty initializers and initializers in anonymous classes. Example: 'class A {\n     public static String CONSTANT;\n     {\n        CONSTANT = \"Hello\";\n     }\n  }' After the quick-fix is applied: 'class A {\n     public static String CONSTANT;\n     static {\n        CONSTANT = \"Hello\"; //now initialized only once per class\n     }\n  }' Inspection ID: ClassInitializerMayBeStatic",
                  "markdown": "Reports instance initializers which can be made `static` without producing any errors.\n\n\nAn instance initializer may be static if it does not reference any of its class' non-static members.\nStatic initializers are executed once when the class is resolved,\nwhile instance initializers are executed on each instantiation of the class.\n\nThis inspection doesn't report instance empty initializers and initializers in anonymous classes.\n\n**Example:**\n\n\n      class A {\n         public static String CONSTANT;\n         {\n            CONSTANT = \"Hello\";\n         }\n      }\n\nAfter the quick-fix is applied:\n\n\n      class A {\n         public static String CONSTANT;\n         static {\n            CONSTANT = \"Hello\"; //now initialized only once per class\n         }\n      }\n\nInspection ID: ClassInitializerMayBeStatic"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ClassInitializerMayBeStatic",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Performance",
                      "index": 4,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MagicCharacter",
                "shortDescription": {
                  "text": "Magic character"
                },
                "fullDescription": {
                  "text": "Reports character literals that are used without constant declaration. These characters might result in bad code readability. Also, there might be errors if a character is changed only in one location but not everywhere in code. Example: 'char c = 'c';' Inspection ID: MagicCharacter",
                  "markdown": "Reports character literals that are used without constant declaration. These characters might result in bad code readability. Also, there might be errors if a character is changed only in one location but not everywhere in code.\n\n**Example:**\n\n    char c = 'c';\n\nInspection ID: MagicCharacter"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MagicCharacter",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Internationalization",
                      "index": 3,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SlowAbstractSetRemoveAll",
                "shortDescription": {
                  "text": "Call to 'set.removeAll(list)' may work slowly"
                },
                "fullDescription": {
                  "text": "Reports calls to 'java.util.Set.removeAll()' with a 'java.util.List' argument. Such a call can be slow when the size of the argument is greater than or equal to the size of the set, and the set is a subclass of 'java.util.AbstractSet'. In this case, 'List.contains()' is called for each element in the set, which will perform a linear search. Example: 'public void check(String... ss) {\n    // possible O(n^2) complexity\n    mySet.removeAll(List.of(ss));\n  }' After the quick fix is applied: 'public void check(String... ss) {\n    // O(n) complexity\n    List.of(ss).forEach(mySet::remove);\n  }' Inspection ID: SlowAbstractSetRemoveAll New in 2020.3",
                  "markdown": "Reports calls to `java.util.Set.removeAll()` with a `java.util.List` argument.\n\n\nSuch a call can be slow when the size of the argument is greater than or equal to the size of the set,\nand the set is a subclass of `java.util.AbstractSet`.\nIn this case, `List.contains()` is called for each element in the set, which will perform a linear search.\n\n**Example:**\n\n\n      public void check(String... ss) {\n        // possible O(n^2) complexity\n        mySet.removeAll(List.of(ss));\n      }\n\nAfter the quick fix is applied:\n\n\n      public void check(String... ss) {\n        // O(n) complexity\n        List.of(ss).forEach(mySet::remove);\n      }\n\nInspection ID: SlowAbstractSetRemoveAll\n\nNew in 2020.3"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SlowAbstractSetRemoveAll",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Performance",
                      "index": 4,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ArrayEquality",
                "shortDescription": {
                  "text": "Array comparison using '==', instead of 'Arrays.equals()'"
                },
                "fullDescription": {
                  "text": "Reports operators '==' and '!=' used to test for array equality. In most cases, testing for the equality of array contents is intended, which can be done with the 'java.util.Arrays.equals()' method. A quick-fix is suggested to replace '==' with 'java.util.Arrays.equals()'. Example: 'void foo(Object[] x, Object[] y) {\n    boolean comparison = x == y;\n  }' After the quick-fix is applied: 'void foo(Object[] x, Object[] y) {\n    boolean comparison = Arrays.equals(x, y);\n  }' Inspection ID: ArrayEquality",
                  "markdown": "Reports operators `==` and `!=` used to test for array equality. In most cases, testing for the equality of array contents is intended, which can be done with the `java.util.Arrays.equals()` method.\n\n\nA quick-fix is suggested to replace `==` with `java.util.Arrays.equals()`.\n\n**Example:**\n\n\n      void foo(Object[] x, Object[] y) {\n        boolean comparison = x == y;\n      }\n\nAfter the quick-fix is applied:\n\n\n      void foo(Object[] x, Object[] y) {\n        boolean comparison = Arrays.equals(x, y);\n      }\n\nInspection ID: ArrayEquality"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ArrayEquality",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StaticCollection",
                "shortDescription": {
                  "text": "Static collection"
                },
                "fullDescription": {
                  "text": "Reports static fields of a 'Collection' type. While it's not necessarily a problem, static collections often cause memory leaks and are therefore prohibited by some coding standards. Example: 'public class Example {\n    static List<String> list = new ArrayList<>();\n\n  }' Configure the inspection: Use the Ignore weak static collections or maps option to ignore the fields of the 'java.util.WeakHashMap' type. Inspection ID: StaticCollection",
                  "markdown": "Reports static fields of a `Collection` type. While it's not necessarily a problem, static collections often cause memory leaks and are therefore prohibited by some coding standards.\n\n**Example:**\n\n\n      public class Example {\n        static List<String> list = new ArrayList<>();\n\n      }\n\n\nConfigure the inspection:\n\n* Use the **Ignore weak static collections or maps** option to ignore the fields of the `java.util.WeakHashMap` type.\n\nInspection ID: StaticCollection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "StaticCollection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Memory",
                      "index": 132,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NonExceptionNameEndsWithException",
                "shortDescription": {
                  "text": "Non-exception class name ends with 'Exception'"
                },
                "fullDescription": {
                  "text": "Reports non-'exception' classes whose names end with 'Exception'. Such classes may cause confusion by breaking a common naming convention and often indicate that the 'extends Exception' clause is missing. Example: 'public class NotStartedException {}' A quick-fix that renames such classes is available only in the editor. Inspection ID: NonExceptionNameEndsWithException",
                  "markdown": "Reports non-`exception` classes whose names end with `Exception`.\n\nSuch classes may cause confusion by breaking a common naming convention and\noften indicate that the `extends Exception` clause is missing.\n\n**Example:**\n\n    public class NotStartedException {}\n\nA quick-fix that renames such classes is available only in the editor.\n\nInspection ID: NonExceptionNameEndsWithException"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NonExceptionNameEndsWithException",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Naming conventions/Class",
                      "index": 60,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ClassComplexity",
                "shortDescription": {
                  "text": "Overly complex class"
                },
                "fullDescription": {
                  "text": "Reports classes whose total complexity exceeds the specified maximum. The total complexity of a class is the sum of cyclomatic complexities of all the methods and initializers the class declares. Inherited methods and initializers are not counted toward the total complexity. Too high complexity indicates that the class should be refactored into several smaller classes. Use the Cyclomatic complexity limit field below to specify the maximum allowed complexity for a class. Inspection ID: ClassComplexity",
                  "markdown": "Reports classes whose total complexity exceeds the specified maximum.\n\nThe total complexity of a class is the sum of cyclomatic complexities of all the methods\nand initializers the class declares. Inherited methods and initializers are not counted\ntoward the total complexity.\n\nToo high complexity indicates that the class should be refactored into several smaller classes.\n\nUse the **Cyclomatic complexity limit** field below to specify the maximum allowed complexity for a class.\n\nInspection ID: ClassComplexity"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "OverlyComplexClass",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Class metrics",
                      "index": 96,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SystemGC",
                "shortDescription": {
                  "text": "Call to 'System.gc()' or 'Runtime.gc()'"
                },
                "fullDescription": {
                  "text": "Reports 'System.gc()' or 'Runtime.gc()' calls. While occasionally useful in testing, explicitly triggering garbage collection via 'System.gc()' is almost never recommended in production code and can result in serious performance issues. Inspection ID: SystemGC",
                  "markdown": "Reports `System.gc()` or `Runtime.gc()` calls. While occasionally useful in testing, explicitly triggering garbage collection via `System.gc()` is almost never recommended in production code and can result in serious performance issues.\n\nInspection ID: SystemGC"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CallToSystemGC",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Memory",
                      "index": 132,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OverflowingLoopIndex",
                "shortDescription": {
                  "text": "Loop executes zero or billions of times"
                },
                "fullDescription": {
                  "text": "Reports loops that cannot be completed without an index overflow or loops that don't loop at all. It usually happens because of a mistake in the update operation. Example: 'void foo(int s) {\n    for (int i = s; i > 12; i++) { // i-- should be here\n      System.out.println(i);\n    }\n  }' Inspection ID: OverflowingLoopIndex New in 2019.1",
                  "markdown": "Reports loops that cannot be completed without an index overflow or loops that don't loop at all. It usually happens because of a mistake in the update operation.\n\nExample:\n\n\n      void foo(int s) {\n        for (int i = s; i > 12; i++) { // i-- should be here\n          System.out.println(i);\n        }\n      }\n\nInspection ID: OverflowingLoopIndex\n\nNew in 2019.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "OverflowingLoopIndex",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SetReplaceableByEnumSet",
                "shortDescription": {
                  "text": "'Set' can be replaced with 'EnumSet'"
                },
                "fullDescription": {
                  "text": "Reports instantiations of 'java.util.Set' objects whose content types are enumerated classes. Such 'Set' objects can be replaced with 'java.util.EnumSet' objects. 'EnumSet' implementations can be much more efficient compared to other sets, as the underlying data structure is a bit vector. Use the quick-fix to replace the initializer with a call to 'EnumSet.noneOf()'. This quick-fix is not available when the type of the variable is a sub-class of 'Set'. Example: 'enum MyEnum { FOO, BAR; }\n\n  Set<MyEnum> enums = new HashSet<MyEnum>();' After the quick-fix is applied: 'enum MyEnum { FOO, BAR; }\n\n  Set<MyEnum> enums = EnumSet.noneOf(MyEnum.class);' Inspection ID: SetReplaceableByEnumSet",
                  "markdown": "Reports instantiations of `java.util.Set` objects whose content types are enumerated classes. Such `Set` objects can be replaced with `java.util.EnumSet` objects.\n\n\n`EnumSet` implementations can be much more efficient compared to\nother sets, as the underlying data structure is a bit vector. Use the quick-fix to replace the initializer with a call to\n`EnumSet.noneOf()`. This quick-fix is not available when the type of the variable is a sub-class of `Set`.\n\n**Example:**\n\n\n      enum MyEnum { FOO, BAR; }\n\n      Set<MyEnum> enums = new HashSet<MyEnum>();\n\nAfter the quick-fix is applied:\n\n\n      enum MyEnum { FOO, BAR; }\n\n      Set<MyEnum> enums = EnumSet.noneOf(MyEnum.class);\n\nInspection ID: SetReplaceableByEnumSet"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SetReplaceableByEnumSet",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Performance",
                      "index": 4,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Java9UndeclaredServiceUsage",
                "shortDescription": {
                  "text": "Usage of service not declared in 'module-info'"
                },
                "fullDescription": {
                  "text": "Reports situations in which a service is loaded with 'java.util.ServiceLoader' but it isn't declared with the 'uses' clause in the 'module-info.java' file and suggests inserting it. This inspection depends on the Java feature 'Modules', which is available since Java 9. Inspection ID: Java9UndeclaredServiceUsage New in 2018.1",
                  "markdown": "Reports situations in which a service is loaded with `java.util.ServiceLoader` but it isn't declared with the `uses` clause in the `module-info.java` file and suggests inserting it.\n\nThis inspection depends on the Java feature 'Modules', which is available since Java 9.\n\nInspection ID: Java9UndeclaredServiceUsage\n\nNew in 2018.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "Java9UndeclaredServiceUsage",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Visibility",
                      "index": 73,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InnerClassMayBeStatic",
                "shortDescription": {
                  "text": "Inner class may be 'static'"
                },
                "fullDescription": {
                  "text": "Reports inner classes that can be made 'static'. A 'static' inner class does not keep an implicit reference to its enclosing instance. When using Java 17 or before, this prevents a common cause of memory leaks and uses less memory per instance of the class. Example: 'public class Outer {\n    class Inner { // not static\n      public void foo() {\n        bar(\"x\");\n      }\n\n      private void bar(String string) {}\n    }\n  }' After the quick-fix is applied: 'public class Outer {\n    static class Inner {\n      public void foo() {\n        bar(\"x\");\n      }\n\n      private void bar(String string) {}\n    }\n  }' Inspection ID: InnerClassMayBeStatic",
                  "markdown": "Reports inner classes that can be made `static`.\n\nA `static` inner class does not keep an implicit reference to its enclosing instance.\nWhen using Java 17 or before,\nthis prevents a common cause of memory leaks and uses less memory per instance of the class.\n\n**Example:**\n\n\n      public class Outer {\n        class Inner { // not static\n          public void foo() {\n            bar(\"x\");\n          }\n\n          private void bar(String string) {}\n        }\n      }\n\nAfter the quick-fix is applied:\n\n\n      public class Outer {\n        static class Inner {\n          public void foo() {\n            bar(\"x\");\n          }\n\n          private void bar(String string) {}\n        }\n      }\n\nInspection ID: InnerClassMayBeStatic"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "InnerClassMayBeStatic",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Memory",
                      "index": 132,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CallToSimpleSetterInClass",
                "shortDescription": {
                  "text": "Call to simple setter from within class"
                },
                "fullDescription": {
                  "text": "Reports calls to a simple property setter from within the property's class. A simple property setter is defined as one which simply assigns the value of its parameter to a field, and does no other calculations. Such simple setter calls can be safely inlined. Some coding standards also suggest against the use of simple setters for code clarity reasons. Example: 'class Foo {\n  private int index;\n    public Foo(int idx) {\n       setIndex(idx);\n    }\n    public void setIndex(int idx) {\n       index = idx;\n    }\n  }' After the quick-fix is applied: 'class Foo {\n    private int index;\n    public Foo(int idx) {\n      index = idx;\n    }\n    public void setIndex(int idx) {\n      index = idx;\n    }\n  }' Use the following options to configure the inspection: Whether to only report setter calls on 'this', not on objects of the same type passed in as a parameter. Whether to ignore non-'private' setters. Inspection ID: CallToSimpleSetterInClass",
                  "markdown": "Reports calls to a simple property setter from within the property's class.\n\n\nA simple property setter is defined as one which simply assigns the value of its parameter to a field,\nand does no other calculations. Such simple setter calls can be safely inlined.\nSome coding standards also suggest against the use of simple setters for code clarity reasons.\n\n**Example:**\n\n\n      class Foo {\n      private int index;\n        public Foo(int idx) {\n           setIndex(idx);\n        }\n        public void setIndex(int idx) {\n           index = idx;\n        }\n      }\n\nAfter the quick-fix is applied:\n\n\n      class Foo {\n        private int index;\n        public Foo(int idx) {\n          index = idx;\n        }\n        public void setIndex(int idx) {\n          index = idx;\n        }\n      }\n\nUse the following options to configure the inspection:\n\n* Whether to only report setter calls on `this`, not on objects of the same type passed in as a parameter.\n* Whether to ignore non-`private` setters.\n\nInspection ID: CallToSimpleSetterInClass"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CallToSimpleSetterFromWithinClass",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Performance",
                      "index": 4,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryFinalOnLocalVariableOrParameter",
                "shortDescription": {
                  "text": "Unnecessary 'final' on local variable or parameter"
                },
                "fullDescription": {
                  "text": "Reports local variables or parameters unnecessarily declared 'final'. Some coding standards frown upon variables declared 'final' for reasons of terseness. Example: 'class Foo {\n    Foo(Object o) {}\n\n    void bar(final Object o) {\n      new Foo(o);\n    }\n  }' After the quick-fix is applied: 'class Foo {\n    Foo(Object o) {}\n\n    void bar(Object o) {\n      new Foo(o);\n    }\n  }' Use the inspection options to toggle the reporting for: local variables parameters (including parameters of 'catch' blocks and enhanced 'for' statements) Also, you can configure the inspection to only report 'final' parameters of 'abstract' or interface methods, which may be considered extra unnecessary as such markings don't affect the implementation of these methods. Inspection ID: UnnecessaryFinalOnLocalVariableOrParameter",
                  "markdown": "Reports local variables or parameters unnecessarily declared `final`.\n\nSome coding standards frown upon variables declared `final` for reasons of terseness.\n\n**Example:**\n\n\n      class Foo {\n        Foo(Object o) {}\n\n        void bar(final Object o) {\n          new Foo(o);\n        }\n      }\n\nAfter the quick-fix is applied:\n\n\n      class Foo {\n        Foo(Object o) {}\n\n        void bar(Object o) {\n          new Foo(o);\n        }\n      }\n\n\nUse the inspection options to toggle the reporting for:\n\n* local variables\n* parameters (including parameters of `catch` blocks and enhanced `for` statements)\n\n\nAlso, you can configure the inspection to only report `final` parameters of `abstract` or interface\nmethods, which may be considered extra unnecessary as such markings don't\naffect the implementation of these methods.\n\nInspection ID: UnnecessaryFinalOnLocalVariableOrParameter"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnnecessaryFinalOnLocalVariableOrParameter",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NonBooleanMethodNameMayNotStartWithQuestion",
                "shortDescription": {
                  "text": "Non-boolean method name must not start with question word"
                },
                "fullDescription": {
                  "text": "Reports non-boolean methods whose names start with a question word. Such method names may be confusing. Non-boolean methods that override library methods are ignored by this inspection. Example: 'public void hasName(String name) {\n    assert names.contains(name);\n  }' A quick-fix that renames such methods is available only in the editor. Configure the inspection: Use the Boolean method name prefixes list to specify the question words that should be used only for boolean methods. Use the Ignore methods with 'java.lang.Boolean' return type option to ignore methods with 'java.lang.Boolean' return type. Use the Ignore methods overriding/implementing a super method option to ignore methods which have supers. Inspection ID: NonBooleanMethodNameMayNotStartWithQuestion",
                  "markdown": "Reports non-boolean methods whose names start with a question word. Such method names may be confusing.\n\nNon-boolean methods that override library methods are ignored by this inspection.\n\n**Example:**\n\n\n      public void hasName(String name) {\n        assert names.contains(name);\n      }\n\nA quick-fix that renames such methods is available only in the editor.\n\nConfigure the inspection:\n\n* Use the **Boolean method name prefixes** list to specify the question words that should be used only for boolean methods.\n* Use the **Ignore methods with 'java.lang.Boolean' return type** option to ignore methods with `java.lang.Boolean` return type.\n* Use the **Ignore methods overriding/implementing a super method** option to ignore methods which have supers.\n\nInspection ID: NonBooleanMethodNameMayNotStartWithQuestion"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NonBooleanMethodNameMayNotStartWithQuestion",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Naming conventions/Method",
                      "index": 83,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "WeakerAccess",
                "shortDescription": {
                  "text": "Declaration access can be weaker"
                },
                "fullDescription": {
                  "text": "Reports fields, methods or classes that may have their access modifier narrowed down. Example: 'class Sample {\n    void foo() {\n        bar(\"foo\", \"foo\");\n    }\n    void bar(String x, String y) { } // can be private\n  }' After the quick-fix is applied: 'class Sample {\n    void foo() {\n        bar(\"foo\", \"foo\");\n    }\n    private void bar(String x, String y) { }\n  }' Use the inspection's options to define the rules for the modifier change suggestions. Inspection ID: WeakerAccess",
                  "markdown": "Reports fields, methods or classes that may have their access modifier narrowed down.\n\nExample:\n\n\n      class Sample {\n        void foo() {\n            bar(\"foo\", \"foo\");\n        }\n        void bar(String x, String y) { } // can be private\n      }\n\nAfter the quick-fix is applied:\n\n\n      class Sample {\n        void foo() {\n            bar(\"foo\", \"foo\");\n        }\n        private void bar(String x, String y) { }\n      }\n\nUse the inspection's options to define the rules for the modifier change suggestions.\n\nInspection ID: WeakerAccess"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "WeakerAccess",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Declaration redundancy",
                      "index": 9,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithJavadoc",
                "shortDescription": {
                  "text": "Comment replaceable with Javadoc"
                },
                "fullDescription": {
                  "text": "Reports a regular comment that belongs to a field, method, or class that can be replaced with a Javadoc comment. Example: 'public class Main {\n    /*\n    * Hello,\n    */\n    // World!\n    void f() {\n    }\n  }' After the quick-fix is applied: 'public class Main {\n    /**\n     * Hello,\n     * World!\n     */\n    void f() {\n    }\n  }' Inspection ID: ReplaceWithJavadoc",
                  "markdown": "Reports a regular comment that belongs to a field, method, or class that can be replaced with a Javadoc comment.\n\n**Example:**\n\n\n      public class Main {\n        /*\n        * Hello,\n        */\n        // World!\n        void f() {\n        }\n      }\n\nAfter the quick-fix is applied:\n\n\n      public class Main {\n        /**\n         * Hello,\n         * World!\n         */\n        void f() {\n        }\n      }\n\nInspection ID: ReplaceWithJavadoc"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ReplaceWithJavadoc",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Javadoc",
                      "index": 58,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "WrapperTypeMayBePrimitive",
                "shortDescription": {
                  "text": "Wrapper type may be primitive"
                },
                "fullDescription": {
                  "text": "Reports local variables of wrapper type that are mostly used as primitive types. In some cases, boxing can be source of significant performance penalty, especially in loops. Heuristics are applied to estimate the number of boxing operations. For example, conversions inside loops are considered as much more numerous. Example: 'public void example() {\n    Integer value = 12;\n    needBox(value);\n    for (int i = 0; i < 10; i++) {\n      // Loop usages considered as happening more often\n      needPrimitive(value);\n    }\n  }\n\n  void needPrimitive(int value) {}\n  void needBox(Integer value) {}' After the quick-fix is applied: 'public void example() {\n    int value = 12;\n    needBox(value);\n    for (int i = 0; i < 10; i++) {\n      // Loop usages considered as happening more often\n      needPrimitive(value);\n    }\n  }\n\n  void needPrimitive(int value) {}\n  void needBox(Integer value) {}' New in 2018.2 Inspection ID: WrapperTypeMayBePrimitive",
                  "markdown": "Reports local variables of wrapper type that are mostly used as primitive types.\n\nIn some cases, boxing can be source of significant performance penalty, especially in loops.\n\nHeuristics are applied to estimate the number of boxing operations. For example, conversions inside loops are considered\nas much more numerous.\n\n**Example:**\n\n      public void example() {\n        Integer value = 12;\n        needBox(value);\n        for (int i = 0; i < 10; i++) {\n          // Loop usages considered as happening more often\n          needPrimitive(value);\n        }\n      }\n\n      void needPrimitive(int value) {}\n      void needBox(Integer value) {}\n\nAfter the quick-fix is applied:\n\n      public void example() {\n        int value = 12;\n        needBox(value);\n        for (int i = 0; i < 10; i++) {\n          // Loop usages considered as happening more often\n          needPrimitive(value);\n        }\n      }\n\n      void needPrimitive(int value) {}\n      void needBox(Integer value) {}\n\n\nNew in 2018.2\n\nInspection ID: WrapperTypeMayBePrimitive"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "WrapperTypeMayBePrimitive",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Performance",
                      "index": 4,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EmptyStatementBody",
                "shortDescription": {
                  "text": "Statement with empty body"
                },
                "fullDescription": {
                  "text": "Reports 'if', 'while', 'do', 'for', and 'switch' statements with empty bodies. While occasionally intended, such code is confusing and is often the result of a typo. This inspection is disabled in JSP files. Inspection ID: EmptyStatementBody",
                  "markdown": "Reports `if`, `while`, `do`, `for`, and `switch` statements with empty bodies.\n\nWhile occasionally intended, such code is confusing and is often the result of a typo.\n\nThis inspection is disabled in JSP files.\n\nInspection ID: EmptyStatementBody"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "StatementWithEmptyBody",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EmptyFinallyBlock",
                "shortDescription": {
                  "text": "Empty 'finally' block"
                },
                "fullDescription": {
                  "text": "Reports empty 'finally' blocks. Empty 'finally' blocks usually indicate coding errors. They may also remain after code refactoring and can safely be removed. This inspection doesn't report empty 'finally' blocks found in JSP files. Example: 'try {\n    Files.readString(Paths.get(\"in.txt\"));\n  } catch (IOException e) {\n    throw new RuntimeException(e);\n  } finally {\n\n  }' After the quick-fix is applied: 'try {\n    Files.readString(Paths.get(\"in.txt\"));\n  } catch (IOException e) {\n    throw new RuntimeException(e);\n  }' Inspection ID: EmptyFinallyBlock",
                  "markdown": "Reports empty `finally` blocks.\n\nEmpty `finally` blocks usually indicate coding errors. They may also remain after code refactoring and can safely be removed.\n\nThis inspection doesn't report empty `finally` blocks found in JSP files.\n\n**Example:**\n\n\n      try {\n        Files.readString(Paths.get(\"in.txt\"));\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      } finally {\n\n      }\n\nAfter the quick-fix is applied:\n\n\n      try {\n        Files.readString(Paths.get(\"in.txt\"));\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n\nInspection ID: EmptyFinallyBlock"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EmptyFinallyBlock",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Error handling",
                      "index": 10,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InconsistentLanguageLevel",
                "shortDescription": {
                  "text": "Inconsistent language level settings"
                },
                "fullDescription": {
                  "text": "Reports modules which depend on other modules with a higher language level. Such dependencies should be removed or the language level of the module be increased. Available only from Code | Inspect Code or Code | Analyze Code | Run Inspection by Name and isn't reported in the editor. Inspection ID: InconsistentLanguageLevel",
                  "markdown": "Reports modules which depend on other modules with a higher language level.\n\nSuch dependencies should be removed or the language level of the module be increased.\n\nAvailable only from **Code \\| Inspect Code** or\n**Code \\| Analyze Code \\| Run Inspection by Name** and isn't reported in the editor.\n\nInspection ID: InconsistentLanguageLevel"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "InconsistentLanguageLevel",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Modularization issues",
                      "index": 57,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EnumerationCanBeIteration",
                "shortDescription": {
                  "text": "Enumeration can be iteration"
                },
                "fullDescription": {
                  "text": "Reports calls to 'Enumeration' methods that are used on collections and may be replaced with equivalent 'Iterator' constructs. Example: 'Enumeration<String> keys = map.keys();\n  while (keys.hasMoreElements()) {\n    String name = keys.nextElement();\n  }' After the quick-fix is applied: 'Iterator<String> iterator = map.keySet().iterator();\n  while (iterator.hasNext()) {\n    String name = iterator.next();\n  }' Inspection ID: EnumerationCanBeIteration",
                  "markdown": "Reports calls to `Enumeration` methods that are used on collections and may be replaced with equivalent `Iterator` constructs.\n\n**Example:**\n\n\n      Enumeration<String> keys = map.keys();\n      while (keys.hasMoreElements()) {\n        String name = keys.nextElement();\n      }\n\nAfter the quick-fix is applied:\n\n\n      Iterator<String> iterator = map.keySet().iterator();\n      while (iterator.hasNext()) {\n        String name = iterator.next();\n      }\n\nInspection ID: EnumerationCanBeIteration"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EnumerationCanBeIteration",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level migration aids",
                      "index": 65,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FinalStaticMethod",
                "shortDescription": {
                  "text": "'static' method declared 'final'"
                },
                "fullDescription": {
                  "text": "Reports static methods that are marked as 'final'. Such code might indicate an error or an incorrect assumption about the effect of the 'final' keyword. Static methods are not subject to runtime polymorphism, so the only purpose of the 'final' keyword used with static methods is to ensure the method will not be hidden in a subclass. Inspection ID: FinalStaticMethod",
                  "markdown": "Reports static methods that are marked as `final`.\n\nSuch code might indicate an error or an incorrect assumption about the effect of the `final` keyword.\nStatic methods are not subject to runtime polymorphism, so the only purpose of the `final` keyword used with static methods\nis to ensure the method will not be hidden in a subclass.\n\n\nInspection ID: FinalStaticMethod"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "FinalStaticMethod",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Class structure",
                      "index": 17,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantTypeArguments",
                "shortDescription": {
                  "text": "Redundant type arguments"
                },
                "fullDescription": {
                  "text": "Reports calls to parametrized methods with explicit argument types that can be omitted since they will be unambiguously inferred by the compiler. Using redundant type arguments is unnecessary and makes the code less readable. Example: 'List<String> list = Arrays.<String>asList(\"Hello\", \"World\");' A quick-fix is provided to remove redundant type arguments: 'List<String> list = Arrays.asList(\"Hello\", \"World\");' Inspection ID: RedundantTypeArguments",
                  "markdown": "Reports calls to parametrized methods with explicit argument types that can be omitted since they will be unambiguously inferred by the compiler.\n\n\nUsing redundant type arguments is unnecessary and makes the code less readable.\n\nExample:\n\n\n      List<String> list = Arrays.<String>asList(\"Hello\", \"World\");\n\nA quick-fix is provided to remove redundant type arguments:\n\n\n      List<String> list = Arrays.asList(\"Hello\", \"World\");\n\nInspection ID: RedundantTypeArguments"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RedundantTypeArguments",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Verbose or redundant code constructs",
                      "index": 37,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FieldHasSetterButNoGetter",
                "shortDescription": {
                  "text": "Field has setter but no getter"
                },
                "fullDescription": {
                  "text": "Reports fields that have setter methods but no getter methods. In certain bean containers, when used within the Java beans specification, such fields might be difficult to work with. Inspection ID: FieldHasSetterButNoGetter",
                  "markdown": "Reports fields that have setter methods but no getter methods.\n\n\nIn certain bean containers, when used within the Java beans specification, such fields might be difficult\nto work with.\n\nInspection ID: FieldHasSetterButNoGetter"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "FieldHasSetterButNoGetter",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/JavaBeans issues",
                      "index": 113,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RuntimeExecWithNonConstantString",
                "shortDescription": {
                  "text": "Call to 'Runtime.exec()' with non-constant string"
                },
                "fullDescription": {
                  "text": "Reports calls to 'java.lang.Runtime.exec()' which take a dynamically-constructed string as the command to execute. Constructed execution strings are a common source of security breaches. By default, this inspection ignores compile-time constants. Example: 'String i = getUserInput();\n  Runtime runtime = Runtime.getRuntime();\n  runtime.exec(\"foo\" + i); // reports warning' Use the inspection settings to consider any 'static' 'final' fields as constant. Be careful, because strings like the following will be ignored when the option is enabled: 'static final String COMMAND = \"ping \" + getDomainFromUserInput() + \"'\";' Inspection ID: RuntimeExecWithNonConstantString",
                  "markdown": "Reports calls to `java.lang.Runtime.exec()` which take a dynamically-constructed string as the command to execute.\n\n\nConstructed execution strings are a common source of security breaches.\nBy default, this inspection ignores compile-time constants.\n\n**Example:**\n\n\n      String i = getUserInput();\n      Runtime runtime = Runtime.getRuntime();\n      runtime.exec(\"foo\" + i); // reports warning\n\n\nUse the inspection settings to consider any `static` `final` fields as constant.\nBe careful, because strings like the following will be ignored when the option is enabled:\n\n\n      static final String COMMAND = \"ping \" + getDomainFromUserInput() + \"'\";\n\n\nInspection ID: RuntimeExecWithNonConstantString"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CallToRuntimeExecWithNonConstantString",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Security",
                      "index": 31,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ErrorRethrown",
                "shortDescription": {
                  "text": "'Error' not rethrown"
                },
                "fullDescription": {
                  "text": "Reports 'try' statements that catch 'java.lang.Error' or any of its subclasses and do not rethrow the error. Statements that catch 'java.lang.ThreadDeath' are not reported. Example: 'try {\n    executeTests(request);\n  }\n  catch (OutOfMemoryError ex) { // warning: Error 'ex' not rethrown\n    return false;\n  }' Inspection ID: ErrorRethrown",
                  "markdown": "Reports `try` statements that catch `java.lang.Error` or any of its subclasses and do not rethrow the error.\n\nStatements that catch `java.lang.ThreadDeath` are not\nreported.\n\n**Example:**\n\n\n      try {\n        executeTests(request);\n      }\n      catch (OutOfMemoryError ex) { // warning: Error 'ex' not rethrown\n        return false;\n      }\n\nInspection ID: ErrorRethrown"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ErrorNotRethrown",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Error handling",
                      "index": 10,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CyclicPackageDependency",
                "shortDescription": {
                  "text": "Cyclic package dependency"
                },
                "fullDescription": {
                  "text": "Reports packages that are mutually or cyclically dependent on other packages. Such cyclic dependencies make code fragile and hard to maintain. Available only from Code | Inspect Code or Code | Analyze Code | Run Inspection by Name and isn't reported in the editor. Inspection ID: CyclicPackageDependency",
                  "markdown": "Reports packages that are mutually or cyclically dependent on other packages.\n\nSuch cyclic dependencies make code fragile and hard to maintain.\n\nAvailable only from **Code \\| Inspect Code** or\n**Code \\| Analyze Code \\| Run Inspection by Name** and isn't reported in the editor.\n\nInspection ID: CyclicPackageDependency"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CyclicPackageDependency",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Dependency issues",
                      "index": 118,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnsatisfiedRange",
                "shortDescription": {
                  "text": "Return value is outside of declared range"
                },
                "fullDescription": {
                  "text": "Reports numeric values returned from methods that don't conform to the declared method return range. You can declare method return range using a number of annotations: 'org.jetbrains.annotations.Range' from JetBrains annotations package (specify 'from' and 'to') 'org.checkerframework.common.value.qual.IntRange' from Checker Framework annotations package (specify 'from' and 'to') 'org.checkerframework.checker.index.qual.GTENegativeOne' from Checker Framework annotations package (range is '>= -1') 'org.checkerframework.checker.index.qual.NonNegative' from Checker Framework annotations package (range is '>= 0') 'org.checkerframework.checker.index.qual.Positive' from Checker Framework annotations package (range is '> 0') 'javax.annotation.Nonnegative' from JSR 305 annotations package (range is '>= 0') 'javax.validation.constraints.Min' (specify minimum value) 'javax.validation.constraints.Max' (specify maximum value) Example: '@Range(from = 0, to = Integer.MAX_VALUE) int getValue() {\n    // Warning: -1 is outside of declared range\n    return -1;\n  }' Inspection ID: UnsatisfiedRange New in 2021.2",
                  "markdown": "Reports numeric values returned from methods that don't conform to the declared method return range. You can declare method return range using a number of annotations:\n\n* `org.jetbrains.annotations.Range` from JetBrains annotations package (specify 'from' and 'to')\n* `org.checkerframework.common.value.qual.IntRange` from Checker Framework annotations package (specify 'from' and 'to')\n* `org.checkerframework.checker.index.qual.GTENegativeOne` from Checker Framework annotations package (range is '\\>= -1')\n* `org.checkerframework.checker.index.qual.NonNegative` from Checker Framework annotations package (range is '\\>= 0')\n* `org.checkerframework.checker.index.qual.Positive` from Checker Framework annotations package (range is '\\> 0')\n* `javax.annotation.Nonnegative` from JSR 305 annotations package (range is '\\>= 0')\n* `javax.validation.constraints.Min` (specify minimum value)\n* `javax.validation.constraints.Max` (specify maximum value)\n\nExample:\n\n\n      @Range(from = 0, to = Integer.MAX_VALUE) int getValue() {\n        // Warning: -1 is outside of declared range\n        return -1;\n      }\n\nInspection ID: UnsatisfiedRange\n\nNew in 2021.2"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnsatisfiedRange",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SystemSetSecurityManager",
                "shortDescription": {
                  "text": "Call to 'System.setSecurityManager()'"
                },
                "fullDescription": {
                  "text": "Reports calls to 'System.setSecurityManager()'. While often benign, any call to 'System.setSecurityManager()' should be closely examined in any security audit. Inspection ID: SystemSetSecurityManager",
                  "markdown": "Reports calls to `System.setSecurityManager()`.\n\nWhile often benign, any call to `System.setSecurityManager()` should be closely examined in any security audit.\n\nInspection ID: SystemSetSecurityManager"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CallToSystemSetSecurityManager",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Security",
                      "index": 31,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ClassWithTooManyDependencies",
                "shortDescription": {
                  "text": "Class with too many dependencies"
                },
                "fullDescription": {
                  "text": "Reports classes that are directly dependent on too many other classes in the project. Modifications to any dependency of such classes may require changing the class, thus making it prone to instability. Only top-level classes are reported. Use the Maximum number of dependencies field to specify the maximum allowed number of dependencies for a class. Available only from Code | Inspect Code or Code | Analyze Code | Run Inspection by Name and isn't reported in the editor. Inspection ID: ClassWithTooManyDependencies",
                  "markdown": "Reports classes that are directly dependent on too many other classes in the project.\n\nModifications to any dependency of such classes may require changing the class, thus making it prone to instability.\n\nOnly top-level classes are reported.\n\nUse the **Maximum number of dependencies** field to specify the maximum allowed number of dependencies for a class.\n\nAvailable only from **Code \\| Inspect Code** or\n**Code \\| Analyze Code \\| Run Inspection by Name** and isn't reported in the editor.\n\nInspection ID: ClassWithTooManyDependencies"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ClassWithTooManyDependencies",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Dependency issues",
                      "index": 118,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ClassWithoutNoArgConstructor",
                "shortDescription": {
                  "text": "Class without no-arg constructor"
                },
                "fullDescription": {
                  "text": "Reports classes without a constructor that takes no arguments (i.e. has no parameters). No-arg constructors are necessary in some contexts. For example, if a class needs to be created using reflection. Example: 'public class Bean {\n    private String name;\n\n    public Bean(String name) {\n      this.name = name;\n    }\n  }' Use the checkbox below to ignore classes without explicit constructors. The compiler provides a default no-arg constructor to such classes. Inspection ID: ClassWithoutNoArgConstructor",
                  "markdown": "Reports classes without a constructor that takes no arguments (i.e. has no parameters). No-arg constructors are necessary in some contexts. For example, if a class needs to be created using reflection.\n\n**Example:**\n\n\n      public class Bean {\n        private String name;\n\n        public Bean(String name) {\n          this.name = name;\n        }\n      }\n\n\nUse the checkbox below to ignore classes without explicit constructors.\nThe compiler provides a default no-arg constructor to such classes.\n\nInspection ID: ClassWithoutNoArgConstructor"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ClassWithoutNoArgConstructor",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/JavaBeans issues",
                      "index": 113,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CastConflictsWithInstanceof",
                "shortDescription": {
                  "text": "Cast conflicts with 'instanceof'"
                },
                "fullDescription": {
                  "text": "Reports type cast expressions that are preceded by an 'instanceof' check for a different type. Although this might be intended, such a construct is most likely an error, and will result in a 'java.lang.ClassCastException' at runtime. Example: 'class Main {\n    int whenCharSequenceCastToNumber(Object o){\n      if (o instanceof CharSequence) {\n        return ((Number) o).intValue();\n      }\n      return 0;\n    }\n\n    int earlyReturnWhenNotCharSequence(Object o){\n      if (!(o instanceof CharSequence)) return 0;\n      return ((Number)o).intValue();\n    }\n  }' Inspection ID: CastConflictsWithInstanceof",
                  "markdown": "Reports type cast expressions that are preceded by an `instanceof` check for a different type.\n\n\nAlthough this might be intended, such a construct is most likely an error, and will\nresult in a `java.lang.ClassCastException` at runtime.\n\n**Example:**\n\n\n      class Main {\n        int whenCharSequenceCastToNumber(Object o){\n          if (o instanceof CharSequence) {\n            return ((Number) o).intValue();\n          }\n          return 0;\n        }\n\n        int earlyReturnWhenNotCharSequence(Object o){\n          if (!(o instanceof CharSequence)) return 0;\n          return ((Number)o).intValue();\n        }\n      }\n\nInspection ID: CastConflictsWithInstanceof"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CastConflictsWithInstanceof",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NewExceptionWithoutArguments",
                "shortDescription": {
                  "text": "Exception constructor called without arguments"
                },
                "fullDescription": {
                  "text": "Reports creation of a exception instance without any arguments specified. When an exception is constructed without any arguments, it contains no information about the problem that occurred, which makes debugging needlessly hard. Example: 'throw new IOException(); // warning: exception without arguments' Inspection ID: NewExceptionWithoutArguments",
                  "markdown": "Reports creation of a exception instance without any arguments specified.\n\nWhen an exception is constructed without any arguments, it contains no information about the problem that occurred, which makes\ndebugging needlessly hard.\n\n**Example:**\n\n\n      throw new IOException(); // warning: exception without arguments\n\nInspection ID: NewExceptionWithoutArguments"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NewExceptionWithoutArguments",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Error handling",
                      "index": 10,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Contract",
                "shortDescription": {
                  "text": "Contract issues"
                },
                "fullDescription": {
                  "text": "Reports issues in method '@Contract' annotations. The types of issues that can be reported are: Errors in contract syntax Contracts that do not conform to the method signature (wrong parameter count) Method implementations that contradict the contract (e.g. return 'true' when the contract says 'false') Example: '// method has no parameters, but contract expects 1\n  @Contract(\"_ -> fail\")\n  void x() {\n    throw new AssertionError();\n  }' Inspection ID: Contract",
                  "markdown": "Reports issues in method `@Contract` annotations. The types of issues that can be reported are:\n\n* Errors in contract syntax\n* Contracts that do not conform to the method signature (wrong parameter count)\n* Method implementations that contradict the contract (e.g. return `true` when the contract says `false`)\n\nExample:\n\n\n      // method has no parameters, but contract expects 1\n      @Contract(\"_ -> fail\")\n      void x() {\n        throw new AssertionError();\n      }\n\nInspection ID: Contract"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "Contract",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EnhancedSwitchBackwardMigration",
                "shortDescription": {
                  "text": "Enhanced 'switch'"
                },
                "fullDescription": {
                  "text": "Reports enhanced 'switch' statements and expressions. Suggests replacing them with regular 'switch' statements. Example: 'boolean even = switch (condition) {\n    case 1, 3, 5, 7, 9 -> false;\n    default -> true;\n  };' After the quick-fix is applied: 'boolean even;\n  switch (condition) {\n    case 1:\n    case 3:\n    case 5:\n    case 7:\n    case 9:\n      even = false;\n      break;\n    default:\n      even = true;\n      break;\n}' Enhanced 'switch' appeared in Java 14. This inspection can help to downgrade for backward compatibility with earlier Java versions. Inspection ID: EnhancedSwitchBackwardMigration New in 2019.1",
                  "markdown": "Reports enhanced `switch` statements and expressions. Suggests replacing them with regular `switch` statements.\n\n**Example:**\n\n\n      boolean even = switch (condition) {\n        case 1, 3, 5, 7, 9 -> false;\n        default -> true;\n      };\n\nAfter the quick-fix is applied:\n\n\n      boolean even;\n      switch (condition) {\n        case 1:\n        case 3:\n        case 5:\n        case 7:\n        case 9:\n          even = false;\n          break;\n        default:\n          even = true;\n          break;\n    }\n\n\n*Enhanced* `switch` appeared in Java 14.\nThis inspection can help to downgrade for backward compatibility with earlier Java versions.\n\nInspection ID: EnhancedSwitchBackwardMigration\n\nNew in 2019.1"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "EnhancedSwitchBackwardMigration",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level migration aids/Java 14",
                      "index": 111,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PackageWithTooManyClasses",
                "shortDescription": {
                  "text": "Package with too many classes"
                },
                "fullDescription": {
                  "text": "Reports packages that contain too many classes. Overly large packages may indicate a lack of design clarity. Available only from Code | Inspect Code or Code | Analyze Code | Run Inspection by Name and isn't reported in the editor. Use the Maximum number of classes field to specify the maximum allowed number of classes in a package. Inspection ID: PackageWithTooManyClasses",
                  "markdown": "Reports packages that contain too many classes.\n\nOverly large packages may indicate a lack of design clarity.\n\nAvailable only from **Code \\| Inspect Code** or\n**Code \\| Analyze Code \\| Run Inspection by Name** and isn't reported in the editor.\n\nUse the **Maximum number of classes** field to specify the maximum allowed number of classes in a package.\n\nInspection ID: PackageWithTooManyClasses"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PackageWithTooManyClasses",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Packaging issues",
                      "index": 36,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LoggingGuardedByCondition",
                "shortDescription": {
                  "text": "Logging calls guarded by log condition"
                },
                "fullDescription": {
                  "text": "Reports logging calls surrounded with a guard condition. This inspection can be used to adjust with a custom code style. Example: 'public class TestObject {\n    void test(Object object) {\n      if(LOG.isDebugEnabled()){\n        LOG.debug(\"some logging \" + expensiveCalculation(1));\n      }\n    }\n  }' After a quick-fix is applied: 'public class TestObject {\n    void test(Object object) {\n      LOG.debug(\"some logging \" + expensiveCalculation(1));\n    }\n  }' This inspection supports Log4j2 and the SLF4J logging frameworks (except builders). Inspection ID: LoggingGuardedByCondition New in 2024.2",
                  "markdown": "Reports logging calls surrounded with a guard condition. This inspection can be used to adjust with a custom code style.\n\n**Example:**\n\n\n      public class TestObject {\n        void test(Object object) {\n          if(LOG.isDebugEnabled()){\n            LOG.debug(\"some logging \" + expensiveCalculation(1));\n          }\n        }\n      }\n\nAfter a quick-fix is applied:\n\n\n      public class TestObject {\n        void test(Object object) {\n          LOG.debug(\"some logging \" + expensiveCalculation(1));\n        }\n      }\n\nThis inspection supports *Log4j2* and the *SLF4J* logging frameworks (except builders).\n\nInspection ID: LoggingGuardedByCondition\n\nNew in 2024.2"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "LoggingGuardedByCondition",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JVM languages/Logging",
                      "index": 41,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TryFinallyCanBeTryWithResources",
                "shortDescription": {
                  "text": "'try finally' can be replaced with 'try' with resources"
                },
                "fullDescription": {
                  "text": "Reports 'try'-'finally' statements that can use Java 7 Automatic Resource Management, which is less error-prone. A quick-fix is available to convert a 'try'-'finally' statement into a 'try'-with-resources statement. Example: 'PrintStream printStream = new PrintStream(fileName);\n  try {\n    printStream.print(true);\n  } finally {\n    printStream.close();\n  }' A quick-fix is provided to pass the cause to a constructor: 'try (PrintStream printStream = new PrintStream(fileName)) {\n    printStream.print(true);\n  }' This inspection depends on the Java feature 'Try-with-resources', which is available since Java 7. Inspection ID: TryFinallyCanBeTryWithResources",
                  "markdown": "Reports `try`-`finally` statements that can use Java 7 Automatic Resource Management, which is less error-prone.\n\nA quick-fix is available to convert a `try`-`finally`\nstatement into a `try`-with-resources statement.\n\n**Example:**\n\n\n      PrintStream printStream = new PrintStream(fileName);\n      try {\n        printStream.print(true);\n      } finally {\n        printStream.close();\n      }\n\nA quick-fix is provided to pass the cause to a constructor:\n\n\n      try (PrintStream printStream = new PrintStream(fileName)) {\n        printStream.print(true);\n      }\n\nThis inspection depends on the Java feature 'Try-with-resources', which is available since Java 7.\n\nInspection ID: TryFinallyCanBeTryWithResources"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "TryFinallyCanBeTryWithResources",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level migration aids/Java 7",
                      "index": 128,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StaticImportCanBeUsed",
                "shortDescription": {
                  "text": "Static import can be used based on the auto-import table"
                },
                "fullDescription": {
                  "text": "Reports qualifiers, which can be replaced with 'on-demand import static' statements. The list of classes that will be checked can be configured in Settings | Editor | General | Auto Import | Java | Include auto-import of static members in completion Inspection ID: StaticImportCanBeUsed New in 2025.1",
                  "markdown": "Reports qualifiers, which can be replaced with `on-demand import static` statements. The list of classes that will be checked can be configured in [Settings \\| Editor \\| General \\| Auto Import \\| Java \\| Include auto-import of static members in\ncompletion](settings://editor.preferences.import)\n\nInspection ID: StaticImportCanBeUsed\n\nNew in 2025.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "StaticImportCanBeUsed",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Imports",
                      "index": 19,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SamePackageImport",
                "shortDescription": {
                  "text": "Unnecessary import from the same package"
                },
                "fullDescription": {
                  "text": "Reports 'import' statements that refer to the same package as the containing file. Same-package files are always implicitly imported, so such 'import' statements are redundant and confusing. Since IntelliJ IDEA can automatically detect and fix such statements with its Optimize Imports command, this inspection is mostly useful for offline reporting on code bases that you don't intend to change. Inspection ID: SamePackageImport",
                  "markdown": "Reports `import` statements that refer to the same package as the containing file.\n\n\nSame-package files are always implicitly imported, so such `import`\nstatements are redundant and confusing.\n\n\nSince IntelliJ IDEA can automatically detect and fix such statements with its **Optimize Imports**\ncommand, this inspection is mostly useful for offline reporting on code bases that you\ndon't intend to change.\n\nInspection ID: SamePackageImport"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SamePackageImport",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Imports",
                      "index": 19,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ThreadLocalSetWithNull",
                "shortDescription": {
                  "text": "'ThreadLocal.set()' with null as an argument"
                },
                "fullDescription": {
                  "text": "Reports 'java.lang.ThreadLocal.set()' with null as an argument. This call does not free the resources, and it may cause a memory leak. It may happen because: Firstly, 'ThreadLocal.set(null)' finds a map associated with the current Thread. If there is no such a map, it will be created It sets key and value: 'map.set(this, value)', where 'this' refers to instance of 'ThreadLocal' 'java.lang.ThreadLocal.remove()' should be used to free the resources. Example: 'ThreadLocal<Integer> threadLocal = new ThreadLocal<>();\n  threadLocal.set(null);' After the quick-fix is applied: 'threadLocal.remove();' Inspection ID: ThreadLocalSetWithNull New in 2023.2",
                  "markdown": "Reports `java.lang.ThreadLocal.set()` with null as an argument.\n\nThis call does not free the resources, and it may cause a memory leak.\nIt may happen because:\n\n* Firstly, `ThreadLocal.set(null)` finds a map associated with the current Thread. If there is no such a map, it will be created\n* It sets key and value: `map.set(this, value)`, where `this` refers to instance of `ThreadLocal`\n\n`java.lang.ThreadLocal.remove()` should be used to free the resources.\n\nExample:\n\n\n      ThreadLocal<Integer> threadLocal = new ThreadLocal<>();\n      threadLocal.set(null);\n\nAfter the quick-fix is applied:\n\n\n      threadLocal.remove();\n\nInspection ID: ThreadLocalSetWithNull\n\nNew in 2023.2"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ThreadLocalSetWithNull",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Threading issues",
                      "index": 23,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MissingJavadoc",
                "shortDescription": {
                  "text": "Missing Javadoc"
                },
                "fullDescription": {
                  "text": "Reports missing Javadoc comments and tags. Example: '/**\n   * Missing \"@param\" is reported (if configured).\n   */\n  public void sample(int param){\n  }' The quick-fixes add missing tag or missing Javadoc comment: '/**\n   * Missing \"@param\" is reported (if configured).\n   * @param param\n   */\n  public void sample(int param){\n  }' Inspection can be configured to ignore deprecated elements or simple accessor methods like 'getField()' or 'setField()'. You can also use options below to configure required tags and minimal required visibility for the specific code elements like method, field, class, package, module. Inspection ID: MissingJavadoc",
                  "markdown": "Reports missing Javadoc comments and tags.\n\nExample:\n\n\n      /**\n       * Missing \"@param\" is reported (if configured).\n       */\n      public void sample(int param){\n      }\n\nThe quick-fixes add missing tag or missing Javadoc comment:\n\n\n      /**\n       * Missing \"@param\" is reported (if configured).\n       * @param param\n       */\n      public void sample(int param){\n      }\n\n\nInspection can be configured to ignore deprecated elements or simple accessor methods like `getField()` or `setField()`.\nYou can also use options below to configure required tags and minimal required visibility for the specific code elements like method, field, class, package, module.\n\nInspection ID: MissingJavadoc"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MissingJavadoc",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Javadoc",
                      "index": 58,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AwaitWithoutCorrespondingSignal",
                "shortDescription": {
                  "text": "'await()' without corresponding 'signal()'"
                },
                "fullDescription": {
                  "text": "Reports calls to 'Condition.await()', for which no call to a corresponding 'Condition.signal()' or 'Condition.signalAll()' can be found. Calling 'Condition.await()' in a thread without corresponding 'Condition.signal()' may cause the thread to become disabled until it is interrupted or \"spurious wakeup\" occurs. Only calls that target fields of the current class are reported by this inspection. Example: 'class Queue {\n    private final Condition isEmpty = ...;\n\n    void add(Object elem) {\n      // ...\n      // isEmpty.signal();\n      // ...\n    }\n\n    void remove(Object elem) throws InterruptedException {\n      // ...\n      isEmpty.await(); // 'await()' doesn't contain corresponding 'signal()'/'signalAll()' call\n      // ...\n    }\n  }' Inspection ID: AwaitWithoutCorrespondingSignal",
                  "markdown": "Reports calls to `Condition.await()`, for which no call to a corresponding `Condition.signal()` or `Condition.signalAll()` can be found.\n\n\nCalling `Condition.await()` in a thread without corresponding `Condition.signal()` may cause the thread\nto become disabled until it is interrupted or \"spurious wakeup\" occurs.\n\nOnly calls that target fields of the current class are reported by this inspection.\n\n**Example:**\n\n\n      class Queue {\n        private final Condition isEmpty = ...;\n\n        void add(Object elem) {\n          // ...\n          // isEmpty.signal();\n          // ...\n        }\n\n        void remove(Object elem) throws InterruptedException {\n          // ...\n          isEmpty.await(); // 'await()' doesn't contain corresponding 'signal()'/'signalAll()' call\n          // ...\n        }\n      }\n\nInspection ID: AwaitWithoutCorrespondingSignal"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AwaitWithoutCorrespondingSignal",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Threading issues",
                      "index": 23,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Java9RedundantRequiresStatement",
                "shortDescription": {
                  "text": "Redundant 'requires' directive in module-info"
                },
                "fullDescription": {
                  "text": "Reports redundant 'requires' directives in Java Platform Module System 'module-info.java' files. A 'requires' directive is redundant when a module 'A' requires a module 'B', but the code in module 'A' doesn't import any packages or classes from 'B'. Furthermore, all modules have an implicitly declared dependence on the 'java.base' module, therefore a 'requires java.base;' directive is always redundant. The quick-fix deletes the redundant 'requires' directive. If the deleted dependency re-exported modules that are actually used, the fix adds a 'requires' directives for these modules. This inspection only reports if the language level of the project or module is 9 or higher. New in 2017.1 Inspection ID: Java9RedundantRequiresStatement",
                  "markdown": "Reports redundant `requires` directives in Java Platform Module System `module-info.java` files. A `requires` directive is redundant when a module `A` requires a module `B`, but the code in module `A` doesn't import any packages or classes from `B`. Furthermore, all modules have an implicitly declared dependence on the `java.base` module, therefore a `requires java.base;` directive is always redundant.\n\n\nThe quick-fix deletes the redundant `requires` directive.\nIf the deleted dependency re-exported modules that are actually used, the fix adds a `requires` directives for these modules.\n\nThis inspection only reports if the language level of the project or module is 9 or higher.\n\nNew in 2017.1\n\nInspection ID: Java9RedundantRequiresStatement"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "Java9RedundantRequiresStatement",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Declaration redundancy",
                      "index": 9,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryLocalVariable",
                "shortDescription": {
                  "text": "Redundant local variable"
                },
                "fullDescription": {
                  "text": "Reports unnecessary local variables that add nothing to the comprehensibility of a method, including: Local variables that are immediately returned. Local variables that are immediately assigned to another variable and then not used. Local variables that always have the same value as another local variable or parameter. Example: 'boolean yes() {\n    boolean b = true;\n    return b;\n  }' After the quick-fix is applied: 'boolean yes() {\n    return true;\n  }' Configure the inspection: Use the Ignore immediately returned or thrown variables option to ignore immediately returned or thrown variables. Some coding styles suggest using such variables for clarity and ease of debugging. Use the Ignore variables which have an annotation option to ignore annotated variables. Inspection ID: UnnecessaryLocalVariable",
                  "markdown": "Reports unnecessary local variables that add nothing to the comprehensibility of a method, including:\n\n* Local variables that are immediately returned.\n* Local variables that are immediately assigned to another variable and then not used.\n* Local variables that always have the same value as another local variable or parameter.\n\n**Example:**\n\n\n      boolean yes() {\n        boolean b = true;\n        return b;\n      }\n\nAfter the quick-fix is applied:\n\n\n      boolean yes() {\n        return true;\n      }\n      \nConfigure the inspection:\n\n* Use the **Ignore immediately returned or thrown variables** option to ignore immediately returned or thrown variables. Some coding styles suggest using such variables for clarity and ease of debugging.\n* Use the **Ignore variables which have an annotation** option to ignore annotated variables.\n\nInspection ID: UnnecessaryLocalVariable"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnnecessaryLocalVariable",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Data flow",
                      "index": 51,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BusyWait",
                "shortDescription": {
                  "text": "Busy wait"
                },
                "fullDescription": {
                  "text": "Reports calls to 'java.lang.Thread.sleep()' that occur inside loops. Such calls are indicative of \"busy-waiting\". Busy-waiting is often inefficient, and may result in unexpected deadlocks as busy-waiting threads do not release locked resources. Example: 'class X {\n     volatile int x;\n     public void waitX() throws Exception {\n      while (x > 0) {\n        Thread.sleep(10);//warning: Call to 'Thread.sleep()' in a loop, probably busy-waiting\n      }\n    }\n  }' Inspection ID: BusyWait",
                  "markdown": "Reports calls to `java.lang.Thread.sleep()` that occur inside loops.\n\nSuch calls\nare indicative of \"busy-waiting\". Busy-waiting is often inefficient, and may result in unexpected deadlocks\nas busy-waiting threads do not release locked resources.\n\n**Example:**\n\n\n      class X {\n         volatile int x;\n         public void waitX() throws Exception {\n          while (x > 0) {\n            Thread.sleep(10);//warning: Call to 'Thread.sleep()' in a loop, probably busy-waiting\n          }\n        }\n      }\n\n\nInspection ID: BusyWait"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "BusyWait",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Threading issues",
                      "index": 23,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ForLoopWithMissingComponent",
                "shortDescription": {
                  "text": "'for' loop with missing components"
                },
                "fullDescription": {
                  "text": "Reports 'for' loops that lack initialization, condition, or update clauses. Some coding styles prohibit such loops. Example: 'for (int i = 0;;i++) {\n    // body\n  }' Use the Ignore collection iterations option to ignore loops which use an iterator. This is a standard way to iterate over a collection in which the 'for' loop does not have an update clause. Inspection ID: ForLoopWithMissingComponent",
                  "markdown": "Reports `for` loops that lack initialization, condition, or update clauses. Some coding styles prohibit such loops.\n\nExample:\n\n\n      for (int i = 0;;i++) {\n        // body\n      }\n\n\nUse the **Ignore collection iterations** option to ignore loops which use an iterator.\nThis is a standard way to iterate over a collection in which the `for` loop does not have an update clause.\n\n\nInspection ID: ForLoopWithMissingComponent"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ForLoopWithMissingComponent",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Control flow issues",
                      "index": 24,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OverwrittenKey",
                "shortDescription": {
                  "text": "Overwritten Map, Set, or array element"
                },
                "fullDescription": {
                  "text": "Reports code that overwrites a 'Map' key, a 'Set' element, or an array element in a sequence of 'add'/'put' calls or using a Java 9 factory method like 'Set.of' (which will result in runtime exception). This usually occurs due to a copy-paste error. Example: 'map.put(\"A\", 1);\n  map.put(\"B\", 2);\n  map.put(\"C\", 3);\n  map.put(\"D\", 4);\n  map.put(\"A\", 5); // duplicating key \"A\", overwrites the previously written entry' Inspection ID: OverwrittenKey New in 2017.3",
                  "markdown": "Reports code that overwrites a `Map` key, a `Set` element, or an array element in a sequence of `add`/`put` calls or using a Java 9 factory method like `Set.of` (which will result in runtime exception).\n\nThis usually occurs due to a copy-paste error.\n\n**Example:**\n\n\n      map.put(\"A\", 1);\n      map.put(\"B\", 2);\n      map.put(\"C\", 3);\n      map.put(\"D\", 4);\n      map.put(\"A\", 5); // duplicating key \"A\", overwrites the previously written entry\n\nInspection ID: OverwrittenKey\n\nNew in 2017.3"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "OverwrittenKey",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AnonymousClassMethodCount",
                "shortDescription": {
                  "text": "Anonymous class with too many methods"
                },
                "fullDescription": {
                  "text": "Reports anonymous inner classes whose method count exceeds the specified maximum. Anonymous classes with numerous methods may be difficult to understand and should be promoted to become named inner classes. Use the Method count limit field to specify the maximum allowed number of methods in an anonymous inner class. Inspection ID: AnonymousClassMethodCount",
                  "markdown": "Reports anonymous inner classes whose method count exceeds the specified maximum.\n\nAnonymous classes with numerous methods may be\ndifficult to understand and should be promoted to become named inner classes.\n\nUse the **Method count limit** field to specify the maximum allowed number of methods in an anonymous inner class.\n\nInspection ID: AnonymousClassMethodCount"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AnonymousInnerClassWithTooManyMethods",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Class metrics",
                      "index": 96,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OptionalOfNullableMisuse",
                "shortDescription": {
                  "text": "Use of Optional.ofNullable with null or non-null argument"
                },
                "fullDescription": {
                  "text": "Reports uses of 'Optional.ofNullable()' where always null or always not-null argument is passed. There's no point in using 'Optional.ofNullable()' in this case: either 'Optional.empty()' or 'Optional.of()' should be used to explicitly state the intent of creating an always-empty or always non-empty optional respectively. It's also possible that there's a mistake in 'Optional.ofNullable()' argument, so it should be examined. Example: 'Optional<String> empty = Optional.ofNullable(null); // should be Optional.empty();\nOptional<String> present = Optional.ofNullable(\"value\"); // should be Optional.of(\"value\");' This inspection depends on the Java feature 'Stream and Optional API', which is available since Java 8. Inspection ID: OptionalOfNullableMisuse",
                  "markdown": "Reports uses of `Optional.ofNullable()` where always null or always not-null argument is passed. There's no point in using `Optional.ofNullable()` in this case: either `Optional.empty()` or `Optional.of()` should be used to explicitly state the intent of creating an always-empty or always non-empty optional respectively. It's also possible that there's a mistake in `Optional.ofNullable()` argument, so it should be examined.\n\n\nExample:\n\n\n    Optional<String> empty = Optional.ofNullable(null); // should be Optional.empty();\n    Optional<String> present = Optional.ofNullable(\"value\"); // should be Optional.of(\"value\"); \n\nThis inspection depends on the Java feature 'Stream and Optional API', which is available since Java 8.\n\nInspection ID: OptionalOfNullableMisuse"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "OptionalOfNullableMisuse",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CastToIncompatibleInterface",
                "shortDescription": {
                  "text": "Cast to incompatible type"
                },
                "fullDescription": {
                  "text": "Reports type cast expressions where the casted expression has a class/interface type that neither extends/implements the cast class/interface type, nor has subclasses that do. Such a construct is likely erroneous, and will throw a 'java.lang.ClassCastException' at runtime. Example: 'interface A {}\n  interface Z {}\n  static class C {}\n\n  void x(C c) {\n    if (c instanceof Z) {\n      A a = ((A)c); // cast to incompatible interface 'A'\n    }\n  }' Inspection ID: CastToIncompatibleInterface",
                  "markdown": "Reports type cast expressions where the casted expression has a class/interface type that neither extends/implements the cast class/interface type, nor has subclasses that do.\n\n\nSuch a construct is likely erroneous, and will\nthrow a `java.lang.ClassCastException` at runtime.\n\n**Example:**\n\n\n      interface A {}\n      interface Z {}\n      static class C {}\n\n      void x(C c) {\n        if (c instanceof Z) {\n          A a = ((A)c); // cast to incompatible interface 'A'\n        }\n      }\n\nInspection ID: CastToIncompatibleInterface"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CastToIncompatibleInterface",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SimplifiableConditionalExpression",
                "shortDescription": {
                  "text": "Simplifiable conditional expression"
                },
                "fullDescription": {
                  "text": "Reports conditional expressions and suggests simplifying them. Examples: 'condition ? true : foo → condition || foo' 'condition ? false : foo → !condition && foo' 'condition ? foo : !foo → condition == foo' 'condition ? true : false → condition' 'a == b ? b : a → a' 'result != null ? result : null → result' Inspection ID: SimplifiableConditionalExpression",
                  "markdown": "Reports conditional expressions and suggests simplifying them.\n\nExamples:\n\n    condition ? true : foo → condition || foo\n\n    condition ? false : foo → !condition && foo\n\n    condition ? foo : !foo → condition == foo\n\n    condition ? true : false → condition\n\n    a == b ? b : a → a\n\n    result != null ? result : null → result\n\nInspection ID: SimplifiableConditionalExpression"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SimplifiableConditionalExpression",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Control flow issues",
                      "index": 24,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InstanceofIncompatibleInterface",
                "shortDescription": {
                  "text": "'instanceof' with incompatible type"
                },
                "fullDescription": {
                  "text": "Reports 'instanceof' expressions where the expression that is checked has a class/interface type that neither extends/implements the class/interface type on the right-side of the 'instanceof' expression, nor has subclasses that do. Although it could be intended for e.g. library code, such a construct is likely erroneous, because no instance of any class declared in the project could pass this 'instanceof' test. Example: 'class Foo { }\n\n  interface Bar { }\n  \n  class Main {\n      void test(Foo f, Bar b) {\n          if (f instanceof Bar) { // problem\n              System.out.println(\"fail\");\n          }\n          if (b instanceof Foo) { // problem\n              System.out.println(\"fail\");\n          }\n      }\n  }' Inspection ID: InstanceofIncompatibleInterface",
                  "markdown": "Reports `instanceof` expressions where the expression that is checked has a class/interface type that neither extends/implements the class/interface type on the right-side of the `instanceof` expression, nor has subclasses that do.\n\n\nAlthough it could be intended for e.g. library code, such a construct is likely erroneous,\nbecause no instance of any class declared in the project could pass this `instanceof` test.\n\n**Example:**\n\n\n      class Foo { }\n\n      interface Bar { }\n      \n      class Main {\n          void test(Foo f, Bar b) {\n              if (f instanceof Bar) { // problem\n                  System.out.println(\"fail\");\n              }\n              if (b instanceof Foo) { // problem\n                  System.out.println(\"fail\");\n              }\n          }\n      }\n\nInspection ID: InstanceofIncompatibleInterface"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "InstanceofIncompatibleInterface",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnqualifiedMethodAccess",
                "shortDescription": {
                  "text": "Instance method call not qualified with 'this'"
                },
                "fullDescription": {
                  "text": "Reports calls to non-'static' methods on the same instance that are not qualified with 'this'. Example: 'class Foo {\n    void bar() {}\n\n    void foo() {\n      bar();\n    }\n  }' After the quick-fix is applied: 'class Foo {\n    void bar() {}\n\n    void foo() {\n      this.bar();\n    }\n  }' Inspection ID: UnqualifiedMethodAccess",
                  "markdown": "Reports calls to non-`static` methods on the same instance that are not qualified with `this`.\n\n**Example:**\n\n\n      class Foo {\n        void bar() {}\n\n        void foo() {\n          bar();\n        }\n      }\n\nAfter the quick-fix is applied:\n\n\n      class Foo {\n        void bar() {}\n\n        void foo() {\n          this.bar();\n        }\n      }\n\nInspection ID: UnqualifiedMethodAccess"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnqualifiedMethodAccess",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FunctionalExpressionCanBeFolded",
                "shortDescription": {
                  "text": "Functional expression can be folded"
                },
                "fullDescription": {
                  "text": "Reports method references or lambda expressions that point to a method of their own functional interface type and hence can be replaced with their qualifiers removing unnecessary object allocation. Example: 'SwingUtilities.invokeLater(r::run);\n  SwingUtilities.invokeAndWait(() -> r.run());' After the quick-fix is applied: 'SwingUtilities.invokeLater(r);\n  SwingUtilities.invokeAndWait(r);' This inspection reports only if the language level of the project or module is 8 or higher. Inspection ID: FunctionalExpressionCanBeFolded",
                  "markdown": "Reports method references or lambda expressions that point to a method of their own functional interface type and hence can be replaced with their qualifiers removing unnecessary object allocation.\n\nExample:\n\n\n      SwingUtilities.invokeLater(r::run);\n      SwingUtilities.invokeAndWait(() -> r.run());\n\nAfter the quick-fix is applied:\n\n\n      SwingUtilities.invokeLater(r);\n      SwingUtilities.invokeAndWait(r);\n\nThis inspection reports only if the language level of the project or module is 8 or higher.\n\nInspection ID: FunctionalExpressionCanBeFolded"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "FunctionalExpressionCanBeFolded",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Declaration redundancy",
                      "index": 9,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CustomClassloader",
                "shortDescription": {
                  "text": "Custom 'ClassLoader' is declared"
                },
                "fullDescription": {
                  "text": "Reports user-defined subclasses of 'java.lang.ClassLoader'. While not necessarily representing a security hole, such classes should be thoroughly inspected for possible security issues. Inspection ID: CustomClassloader",
                  "markdown": "Reports user-defined subclasses of `java.lang.ClassLoader`.\n\n\nWhile not necessarily representing a security hole, such classes should be thoroughly\ninspected for possible security issues.\n\n\nInspection ID: CustomClassloader"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CustomClassloader",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Security",
                      "index": 31,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessarySuperConstructor",
                "shortDescription": {
                  "text": "Unnecessary call to 'super()'"
                },
                "fullDescription": {
                  "text": "Reports calls to no-arg superclass constructors during object construction. Such calls are unnecessary and may be removed. Example: 'class Foo {\n    Foo() {\n      super();\n    }\n  }' After the quick-fix is applied: 'class Foo {\n    Foo() {\n    }\n  }' Inspection ID: UnnecessarySuperConstructor",
                  "markdown": "Reports calls to no-arg superclass constructors during object construction.\n\nSuch calls are unnecessary and may be removed.\n\n**Example:**\n\n\n      class Foo {\n        Foo() {\n          super();\n        }\n      }\n\nAfter the quick-fix is applied:\n\n\n      class Foo {\n        Foo() {\n        }\n      }\n\nInspection ID: UnnecessarySuperConstructor"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnnecessaryCallToSuper",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ThisEscapedInConstructor",
                "shortDescription": {
                  "text": "'this' reference escaped in object construction"
                },
                "fullDescription": {
                  "text": "Reports possible escapes of 'this' during the object initialization. The escapes occur when 'this' is used as a method argument or an object of assignment in a constructor or initializer. Such escapes may result in subtle bugs, as the object is now available in the context where it is not guaranteed to be initialized. Example: 'class Foo {\n    {\n      System.out.println(this);\n    }\n  }' Inspection ID: ThisEscapedInConstructor",
                  "markdown": "Reports possible escapes of `this` during the object initialization. The escapes occur when `this` is used as a method argument or an object of assignment in a constructor or initializer. Such escapes may result in subtle bugs, as the object is now available in the context where it is not guaranteed to be initialized.\n\n**Example:**\n\n\n      class Foo {\n        {\n          System.out.println(this);\n        }\n      }\n\nInspection ID: ThisEscapedInConstructor"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ThisEscapedInObjectConstruction",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Initialization",
                      "index": 27,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IfCanBeSwitch",
                "shortDescription": {
                  "text": "'if' can be replaced with 'switch'"
                },
                "fullDescription": {
                  "text": "Reports 'if' statements that can be replaced with 'switch' statements. The replacement result is usually shorter and clearer. Example: 'void test(String str) {\n    if (str.equals(\"1\")) {\n      System.out.println(1);\n    } else if (str.equals(\"2\")) {\n      System.out.println(2);\n    } else if (str.equals(\"3\")) {\n      System.out.println(3);\n    } else {\n      System.out.println(4);\n    }\n  }' After the quick-fix is applied: 'void test(String str) {\n    switch (str) {\n      case \"1\" -> System.out.println(1);\n      case \"2\" -> System.out.println(2);\n      case \"3\" -> System.out.println(3);\n      default -> System.out.println(4);\n    }\n  }' This inspection only reports if the language level of the project or module is 7 or higher. Use the Minimum number of 'if' condition branches field to specify the minimum number of 'if' condition branches for an 'if' statement to have to be reported. Note that the terminal 'else' branch (without 'if') is not counted. Use the Suggest switch on numbers option to enable the suggestion of 'switch' statements on primitive and boxed numbers and characters. Use the Suggest switch on enums option to enable the suggestion of 'switch' statements on 'enum' constants. Use the Only suggest on null-safe expressions option to suggest 'switch' statements that can't introduce a 'NullPointerException' only. Inspection ID: IfCanBeSwitch",
                  "markdown": "Reports `if` statements that can be replaced with `switch` statements.\n\nThe replacement result is usually shorter and clearer.\n\n**Example:**\n\n\n      void test(String str) {\n        if (str.equals(\"1\")) {\n          System.out.println(1);\n        } else if (str.equals(\"2\")) {\n          System.out.println(2);\n        } else if (str.equals(\"3\")) {\n          System.out.println(3);\n        } else {\n          System.out.println(4);\n        }\n      }\n\nAfter the quick-fix is applied:\n\n\n      void test(String str) {\n        switch (str) {\n          case \"1\" -> System.out.println(1);\n          case \"2\" -> System.out.println(2);\n          case \"3\" -> System.out.println(3);\n          default -> System.out.println(4);\n        }\n      }\n      \nThis inspection only reports if the language level of the project or module is 7 or higher.\n\nUse the **Minimum number of 'if' condition branches** field to specify the minimum number of `if` condition branches\nfor an `if` statement to have to be reported. Note that the terminal `else` branch (without `if`) is not counted.\n\n\nUse the **Suggest switch on numbers** option to enable the suggestion of `switch` statements on\nprimitive and boxed numbers and characters.\n\n\nUse the **Suggest switch on enums** option to enable the suggestion of `switch` statements on\n`enum` constants.\n\n\nUse the **Only suggest on null-safe expressions** option to suggest `switch` statements that can't introduce a `NullPointerException` only.\n\nInspection ID: IfCanBeSwitch"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "IfCanBeSwitch",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level migration aids",
                      "index": 65,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NonPublicClone",
                "shortDescription": {
                  "text": "'clone()' method not 'public'"
                },
                "fullDescription": {
                  "text": "Reports 'clone()' methods that are 'protected' and not 'public'. When overriding the 'clone()' method from 'java.lang.Object', it is expected to make the method 'public', so that it is accessible from non-subclasses outside the package. Inspection ID: NonPublicClone",
                  "markdown": "Reports `clone()` methods that are `protected` and not `public`.\n\nWhen overriding the `clone()` method from `java.lang.Object`, it is expected to make the method `public`,\nso that it is accessible from non-subclasses outside the package.\n\nInspection ID: NonPublicClone"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NonPublicClone",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Cloning issues",
                      "index": 89,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InfiniteRecursion",
                "shortDescription": {
                  "text": "Infinite recursion"
                },
                "fullDescription": {
                  "text": "Reports methods that call themselves infinitely unless an exception is thrown. Methods reported by this inspection cannot return normally. While such behavior may be intended, in many cases this is just an oversight. Example: 'int baz() {\n      return baz();\n  }' Inspection ID: InfiniteRecursion",
                  "markdown": "Reports methods that call themselves infinitely unless an exception is thrown.\n\n\nMethods reported by this inspection cannot return normally.\nWhile such behavior may be intended, in many cases this is just an oversight.\n\n**Example:**\n\n      int baz() {\n          return baz();\n      }\n\nInspection ID: InfiniteRecursion"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "InfiniteRecursion",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DeprecatedIsStillUsed",
                "shortDescription": {
                  "text": "Deprecated member is still used"
                },
                "fullDescription": {
                  "text": "Reports deprecated classes, methods, and fields that are used in your code nonetheless. Example: 'class MyCode {\n    @Deprecated\n    void oldMethod() {}// warning: \"Deprecated member is still used\"\n\n    void newMethod() {\n      oldMethod(); // forgotten usage\n    }\n  }' Usages within deprecated elements are ignored. NOTE: Due to performance reasons, a non-private member is checked only when its name rarely occurs in the project. Inspection ID: DeprecatedIsStillUsed",
                  "markdown": "Reports deprecated classes, methods, and fields that are used in your code nonetheless.\n\nExample:\n\n\n      class MyCode {\n        @Deprecated\n        void oldMethod() {}// warning: \"Deprecated member is still used\"\n\n        void newMethod() {\n          oldMethod(); // forgotten usage\n        }\n      }\n\nUsages within deprecated elements are ignored.\n\n**NOTE:** Due to performance reasons, a non-private member is checked only when its name rarely occurs in the project.\n\nInspection ID: DeprecatedIsStillUsed"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "DeprecatedIsStillUsed",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code maturity",
                      "index": 46,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantComparatorComparing",
                "shortDescription": {
                  "text": "Comparator method can be simplified"
                },
                "fullDescription": {
                  "text": "Reports 'Comparator' combinator constructs that can be simplified. Example: 'c.thenComparing(Comparator.comparing(function));\n\n  Comparator.comparing(Map.Entry::getKey);\n\n  Collections.max(list, Comparator.reverseOrder());' After the quick-fixes are applied: 'c.thenComparing(function)\n\n  Map.Entry.comparingByKey()\n\n  Collections.min(list, Comparator.naturalOrder());' Inspection ID: RedundantComparatorComparing New in 2018.1",
                  "markdown": "Reports `Comparator` combinator constructs that can be simplified.\n\nExample:\n\n\n      c.thenComparing(Comparator.comparing(function));\n\n      Comparator.comparing(Map.Entry::getKey);\n\n      Collections.max(list, Comparator.reverseOrder());\n\nAfter the quick-fixes are applied:\n\n\n      c.thenComparing(function)\n\n      Map.Entry.comparingByKey()\n\n      Collections.min(list, Comparator.naturalOrder());\n\nInspection ID: RedundantComparatorComparing\n\nNew in 2018.1"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RedundantComparatorComparing",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Verbose or redundant code constructs",
                      "index": 37,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VariableNotUsedInsideIf",
                "shortDescription": {
                  "text": "Reference checked for 'null' is not used inside 'if'"
                },
                "fullDescription": {
                  "text": "Reports references to variables that are checked for nullability in the condition of an 'if' statement or conditional expression but not used inside that 'if' statement. Usually this either means that the check is unnecessary or that the variable is not referenced inside the 'if' statement by mistake. Example: 'void test(Integer i) {\n    if (i != null) { // here 'i' is not used inside 'if' statement\n      System.out.println();\n    }\n  }' Inspection ID: VariableNotUsedInsideIf",
                  "markdown": "Reports references to variables that are checked for nullability in the condition of an `if` statement or conditional expression but not used inside that `if` statement.\n\n\nUsually this either means that\nthe check is unnecessary or that the variable is not referenced inside the\n`if` statement by mistake.\n\n**Example:**\n\n\n      void test(Integer i) {\n        if (i != null) { // here 'i' is not used inside 'if' statement\n          System.out.println();\n        }\n      }\n\nInspection ID: VariableNotUsedInsideIf"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "VariableNotUsedInsideIf",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CollectionAddAllCanBeReplacedWithConstructor",
                "shortDescription": {
                  "text": "Redundant 'Collection.addAll()' call"
                },
                "fullDescription": {
                  "text": "Reports 'Collection.addAll()' and 'Map.putAll()' calls immediately after an instantiation of a collection using a no-arg constructor. Such constructs can be replaced with a single call to a parametrized constructor, which simplifies the code. Also, for some collections the replacement might be more performant. Example: 'Set<String> set = new HashSet<>();\n  set.addAll(Arrays.asList(\"alpha\", \"beta\", \"gamma\"));' After the quick-fix is applied: 'Set<String> set = new HashSet<>(Arrays.asList(\"alpha\", \"beta\", \"gamma\"));' The JDK collection classes are supported by default. Additionally, you can specify other classes using the Classes to check panel. Inspection ID: CollectionAddAllCanBeReplacedWithConstructor",
                  "markdown": "Reports `Collection.addAll()` and `Map.putAll()` calls immediately after an instantiation of a collection using a no-arg constructor.\n\nSuch constructs can be replaced with a single call to a parametrized constructor, which simplifies the code. Also, for some collections the replacement\nmight be more performant.\n\n**Example:**\n\n\n      Set<String> set = new HashSet<>();\n      set.addAll(Arrays.asList(\"alpha\", \"beta\", \"gamma\"));\n\nAfter the quick-fix is applied:\n\n\n      Set<String> set = new HashSet<>(Arrays.asList(\"alpha\", \"beta\", \"gamma\"));\n\n\nThe JDK collection classes are supported by default.\nAdditionally, you can specify other classes using the **Classes to check** panel.\n\nInspection ID: CollectionAddAllCanBeReplacedWithConstructor"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CollectionAddAllCanBeReplacedWithConstructor",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Performance",
                      "index": 4,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MultipleReturnPointsPerMethod",
                "shortDescription": {
                  "text": "Method with multiple return points"
                },
                "fullDescription": {
                  "text": "Reports methods whose number of 'return' points exceeds the specified maximum. Methods with too many 'return' points may be confusing and hard to refactor. A 'return' point is either a 'return' statement or a falling through the bottom of a 'void' method or constructor. Example: The method below is reported if only two 'return' statements are allowed: 'void doSmth(User[] users) {\n    for (User user : users) {\n      if (cond1(user)) {\n        user.setId(getId());\n        return;\n      } else if (cond2(user)) {\n        if (cond3(user)) {\n          user.setId(getId());\n          return;\n        }\n      }\n    }\n  }' Consider rewriting the method so it becomes easier to understand: 'void doSmth(User[] users) {\n    for (User user : users) {\n      if (cond1(user) || cond2(user) && cond3(user)) {\n        user.setId(getId());\n        return;\n      }\n    }\n  }' Configure the inspection: Use the Return point limit field to specify the maximum allowed number of 'return' points for a method. Use the Ignore guard clauses option to ignore guard clauses. A guard clause is an 'if' statement that contains only a 'return' statement Use the Ignore for 'equals()' methods option to ignore 'return' points inside 'equals()' methods. Inspection ID: MultipleReturnPointsPerMethod",
                  "markdown": "Reports methods whose number of `return` points exceeds the specified maximum. Methods with too many `return` points may be confusing and hard to refactor.\n\nA `return` point is either a `return` statement or a falling through the bottom of a\n`void` method or constructor.\n\n**Example:**\n\nThe method below is reported if only two `return` statements are allowed:\n\n\n      void doSmth(User[] users) {\n        for (User user : users) {\n          if (cond1(user)) {\n            user.setId(getId());\n            return;\n          } else if (cond2(user)) {\n            if (cond3(user)) {\n              user.setId(getId());\n              return;\n            }\n          }\n        }\n      }\n\nConsider rewriting the method so it becomes easier to understand:\n\n\n      void doSmth(User[] users) {\n        for (User user : users) {\n          if (cond1(user) || cond2(user) && cond3(user)) {\n            user.setId(getId());\n            return;\n          }\n        }\n      }\n\nConfigure the inspection:\n\n* Use the **Return point limit** field to specify the maximum allowed number of `return` points for a method.\n* Use the **Ignore guard clauses** option to ignore guard clauses. A guard clause is an `if` statement that contains only a `return` statement\n* Use the **Ignore for 'equals()' methods** option to ignore `return` points inside `equals()` methods.\n\nInspection ID: MultipleReturnPointsPerMethod"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MethodWithMultipleReturnPoints",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Method metrics",
                      "index": 108,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SuspiciousMethodCalls",
                "shortDescription": {
                  "text": "Suspicious collection method call"
                },
                "fullDescription": {
                  "text": "Reports method calls on parameterized collections, where the actual argument type does not correspond to the collection's elements type. Example: 'List<Integer> list = getListOfElements();\n  list.remove(\"\"); // remove is highlighted' In the inspection settings, you can disable warnings for potentially correct code like the following: 'public boolean accept(Map<Integer, String> map, Object key) {\n    return map.containsKey(key);\n  }' Inspection ID: SuspiciousMethodCalls",
                  "markdown": "Reports method calls on parameterized collections, where the actual argument type does not correspond to the collection's elements type.\n\n**Example:**\n\n\n      List<Integer> list = getListOfElements();\n      list.remove(\"\"); // remove is highlighted\n\n\nIn the inspection settings, you can disable warnings for potentially correct code like the following:\n\n\n      public boolean accept(Map<Integer, String> map, Object key) {\n        return map.containsKey(key);\n      }\n\nInspection ID: SuspiciousMethodCalls"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SuspiciousMethodCalls",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ForwardCompatibility",
                "shortDescription": {
                  "text": "Forward compatibility"
                },
                "fullDescription": {
                  "text": "Reports Java code constructs that may fail to compile in future Java versions. The following problems are reported: Uses of 'assert', 'enum' or '_' as an identifier Uses of the 'var', 'yield', or 'record' restricted identifier as a type name Unqualified calls to methods named 'yield' Modifiers on the 'requires java.base' statement inside of 'module-info.java' Redundant semicolons between import statements Example: '// This previously legal class does not compile with Java 14,\n  // as 'yield' became a restricted identifier.\n  public class yield {}' Fixing these issues timely may simplify migration to future Java versions. Inspection ID: ForwardCompatibility",
                  "markdown": "Reports Java code constructs that may fail to compile in future Java versions.\n\nThe following problems are reported:\n\n* Uses of `assert`, `enum` or `_` as an identifier\n* Uses of the `var`, `yield`, or `record` restricted identifier as a type name\n* Unqualified calls to methods named `yield`\n* Modifiers on the `requires java.base` statement inside of `module-info.java`\n* Redundant semicolons between import statements\n\n**Example:**\n\n\n      // This previously legal class does not compile with Java 14,\n      // as 'yield' became a restricted identifier.\n      public class yield {} \n\nFixing these issues timely may simplify migration to future Java versions.\n\nInspection ID: ForwardCompatibility"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ForwardCompatibility",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level issues",
                      "index": 119,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DiamondCanBeReplacedWithExplicitTypeArguments",
                "shortDescription": {
                  "text": "Diamond can be replaced with explicit type arguments"
                },
                "fullDescription": {
                  "text": "Reports instantiation of generic classes in which the <> symbol (diamond) is used instead of type parameters. The quick-fix replaces <> (diamond) with explicit type parameters. Example: 'List<String> list = new ArrayList<>()' After the quick-fix is applied: 'List<String> list = new ArrayList<String>()' Diamond operation appeared in Java 7. This inspection can help to downgrade for backward compatibility with earlier Java versions. Inspection ID: DiamondCanBeReplacedWithExplicitTypeArguments",
                  "markdown": "Reports instantiation of generic classes in which the **\\<\\>** symbol (diamond) is used instead of type parameters.\n\nThe quick-fix replaces **\\<\\>** (diamond) with explicit type parameters.\n\nExample:\n\n    List<String> list = new ArrayList<>()\n\nAfter the quick-fix is applied:\n\n    List<String> list = new ArrayList<String>()\n\n\n*Diamond operation* appeared in Java 7.\nThis inspection can help to downgrade for backward compatibility with earlier Java versions.\n\nInspection ID: DiamondCanBeReplacedWithExplicitTypeArguments"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "DiamondCanBeReplacedWithExplicitTypeArguments",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseOfProcessBuilder",
                "shortDescription": {
                  "text": "Use of 'java.lang.ProcessBuilder' class"
                },
                "fullDescription": {
                  "text": "Reports uses of 'java.lang.ProcessBuilder', which might be unportable between operating systems because paths to executables, environment variables, command-line arguments and their escaping might vary depending on the OS. Inspection ID: UseOfProcessBuilder",
                  "markdown": "Reports uses of `java.lang.ProcessBuilder`, which might be unportable between operating systems because paths to executables, environment variables, command-line arguments and their escaping might vary depending on the OS.\n\nInspection ID: UseOfProcessBuilder"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UseOfProcessBuilder",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Portability",
                      "index": 69,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JavaRequiresAutoModule",
                "shortDescription": {
                  "text": "Dependencies on automatic modules"
                },
                "fullDescription": {
                  "text": "Reports usages of automatic modules in a 'requires' directive. An automatic module is unreliable since it can depend on the types on the class path, and its name and exported packages can change if it's converted into an explicit module. Corresponds to '-Xlint:requires-automatic' and '-Xlint:requires-transitive-automatic' Javac options. The first option increases awareness of when automatic modules are used. The second warns the authors of a module that they're putting the users of that module at risk by establishing implied readability to an automatic module. Example: '//module-info.java\n  module org.printer {\n    requires transitive drivers.corp.org; // reported in case 'drivers.corp.org' is an automatic module\n  }' Use the Highlight only transitive dependencies option to warn only about transitive dependencies. This inspection depends on the Java feature 'Modules', which is available since Java 9. Inspection ID: JavaRequiresAutoModule",
                  "markdown": "Reports usages of automatic modules in a `requires` directive.\n\nAn automatic\nmodule is unreliable since it can depend on the types on the class path,\nand its name and exported packages can change if it's\nconverted into an explicit module.\n\nCorresponds to `-Xlint:requires-automatic` and `-Xlint:requires-transitive-automatic` Javac options.\nThe first option increases awareness of when automatic modules are used.\nThe second warns the authors of a module that they're putting the users of that module at risk by establishing implied readability to an automatic module.\n\n**Example:**\n\n\n      //module-info.java\n      module org.printer {\n        requires transitive drivers.corp.org; // reported in case 'drivers.corp.org' is an automatic module\n      }\n\n\nUse the **Highlight only transitive dependencies** option to warn only about transitive dependencies.\n\nThis inspection depends on the Java feature 'Modules', which is available since Java 9.\n\nInspection ID: JavaRequiresAutoModule"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "requires-transitive-automatic",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level migration aids/Java 9",
                      "index": 66,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ExcessiveRangeCheck",
                "shortDescription": {
                  "text": "Excessive range check"
                },
                "fullDescription": {
                  "text": "Reports condition chains in which a value range is checked and these condition chains can be simplified to a single check. The quick-fix replaces a condition chain with a simplified expression: Example: 'x > 2 && x < 4' After the quick-fix is applied: 'x == 3' Example: 'arr.length == 0 || arr.length > 1' After the quick-fix is applied: 'arr.length != 1' Inspection ID: ExcessiveRangeCheck New in 2019.1",
                  "markdown": "Reports condition chains in which a value range is checked and these condition chains can be simplified to a single check.\n\nThe quick-fix replaces a condition chain with a simplified expression:\n\nExample:\n\n\n      x > 2 && x < 4\n\nAfter the quick-fix is applied:\n\n\n      x == 3\n\nExample:\n\n\n      arr.length == 0 || arr.length > 1\n\nAfter the quick-fix is applied:\n\n\n      arr.length != 1\n\nInspection ID: ExcessiveRangeCheck\n\nNew in 2019.1"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ExcessiveRangeCheck",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Verbose or redundant code constructs",
                      "index": 37,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantJavaTimeOperations",
                "shortDescription": {
                  "text": "Redundant operation on 'java.time' object"
                },
                "fullDescription": {
                  "text": "Reports redundant operation on 'java.time' object redundant: creation of date/time objects from the JDK 'java.time' package when simpler method calls can be used or creation can be avoided. 'java.time' method calls with 'java.time.temporal.ChronoField' and 'java.time.temporal.ChronoUnit' as arguments when these calls can be replaced with calls of more specific methods. 'java.time' comparisons with 'compareTo()' calls that can be replaced with 'isAfter()', 'isBefore()' or 'isEqual()' calls. Examples: - Before: 'LocalDateTime now = LocalDateTime.now();\nreturn LocalDateTime.from(now);' After the quick-fix is applied: 'LocalDateTime now = LocalDateTime.now();\nreturn now;' - Before: 'LocalTime localTime = LocalTime.now();\nint minute = localTime.get(ChronoField.MINUTE_OF_HOUR);' After the quick-fix is applied: 'LocalTime localTime = LocalTime.now();\nint minute = localTime.getMinute();' - Before: 'LocalDate date1 = LocalDate.now();\n  LocalDate date2 = LocalDate.now();\n  boolean t = date1.compareTo(date2) > 0;' After the quick-fix is applied: 'LocalDate date1 = LocalDate.now();\n  LocalDate date2 = LocalDate.now();\n  boolean t = date1.isAfter(date2);' Inspection ID: RedundantJavaTimeOperations New in 2024.3",
                  "markdown": "Reports redundant operation on 'java.time' object redundant:\n\n* creation of date/time objects from the JDK `java.time` package when simpler method calls can be used or creation can be avoided.\n* `java.time` method calls with `java.time.temporal.ChronoField` and `java.time.temporal.ChronoUnit` as arguments when these calls can be replaced with calls of more specific methods.\n* `java.time` comparisons with `compareTo()` calls that can be replaced with `isAfter()`, `isBefore()` or `isEqual()` calls.\n\nExamples:\n- Before:\n\n\n    LocalDateTime now = LocalDateTime.now();\n    return LocalDateTime.from(now);\n\nAfter the quick-fix is applied:\n\n\n    LocalDateTime now = LocalDateTime.now();\n    return now;\n\n- Before:\n\n\n    LocalTime localTime = LocalTime.now();\n    int minute = localTime.get(ChronoField.MINUTE_OF_HOUR);\n\nAfter the quick-fix is applied:\n\n\n    LocalTime localTime = LocalTime.now();\n    int minute = localTime.getMinute();\n\n- Before:\n\n\n      LocalDate date1 = LocalDate.now();\n      LocalDate date2 = LocalDate.now();\n      boolean t = date1.compareTo(date2) > 0;\n\nAfter the quick-fix is applied:\n\n\n      LocalDate date1 = LocalDate.now();\n      LocalDate date2 = LocalDate.now();\n      boolean t = date1.isAfter(date2);\n\nInspection ID: RedundantJavaTimeOperations\n\nNew in 2024.3"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RedundantJavaTimeOperations",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Verbose or redundant code constructs",
                      "index": 37,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StringConcatenation",
                "shortDescription": {
                  "text": "String concatenation"
                },
                "fullDescription": {
                  "text": "Reports 'String' concatenations. Concatenation might be incorrect in an internationalized environment and could be replaced by usages of 'java.text.MessageFormat' or similar classes. Example: 'String getMessage(String string, int number) {\n    return string + number;\n  }' Inspection ID: StringConcatenation",
                  "markdown": "Reports `String` concatenations. Concatenation might be incorrect in an internationalized environment and could be replaced by usages of `java.text.MessageFormat` or similar classes.\n\n**Example:**\n\n\n      String getMessage(String string, int number) {\n        return string + number;\n      }\n\nInspection ID: StringConcatenation"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "StringConcatenation",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Internationalization",
                      "index": 3,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ClassCanBeRecord",
                "shortDescription": {
                  "text": "Class can be record class"
                },
                "fullDescription": {
                  "text": "Reports classes that can be converted to record classes. Record classes focus on modeling immutable data rather than extensible behavior. Automatic implicit implementation of data-driven methods, such as 'equals()' and accessors, helps to reduce boilerplate code. Note that not every class can be a record class. Here are some restrictions: The class must have no subclasses. All non-static fields in the class must be final. Initializers, generic constructors, and native methods must not be present. For a full description of record classes, refer to the Java Language Specification. Example: 'class Point {\n    private final double x;\n    private final double y;\n\n    Point(double x, double y) {\n      this.x = x;\n      this.y = y;\n    }\n\n    double getX() {\n      return x;\n    }\n\n    double getY() {\n      return y;\n    }\n  }' After the quick-fix is applied: 'record Point(int x, int y) {\n  }' Enable the Suggest renaming accessor methods option to rename 'getX()'/'isX()' accessors to 'x()' automatically. Use the Don't report if members become more accessible option to exclude classes whose members' accessibility would be weakened by conversion. Quick-fix will stay available as an intention, and triggering it will show the affected members and ask for confirmation. In batch mode conversion will not be suggested. Use the Suppress conversion if the class is annotated by list to exclude classes from conversion when annotated by annotations matching the specified patterns. This inspection depends on the Java feature 'Records', which is available since Java 16. Inspection ID: ClassCanBeRecord New in 2020.3",
                  "markdown": "Reports classes that can be converted to record classes.\n\nRecord classes focus on modeling immutable data rather than extensible behavior.\nAutomatic implicit implementation of data-driven methods, such as `equals()` and accessors, helps to reduce boilerplate code.\n\n\nNote that not every class can be a record class. Here are some restrictions:\n\n* The class must have no subclasses.\n* All non-static fields in the class must be final.\n* Initializers, generic constructors, and native methods must not be present.\n\nFor a full description of record classes, refer to the\n[Java Language Specification](https://docs.oracle.com/javase/specs/jls/se21/html/jls-8.html#jls-8.10).\n\nExample:\n\n\n      class Point {\n        private final double x;\n        private final double y;\n\n        Point(double x, double y) {\n          this.x = x;\n          this.y = y;\n        }\n\n        double getX() {\n          return x;\n        }\n\n        double getY() {\n          return y;\n        }\n      }\n\nAfter the quick-fix is applied:\n\n\n      record Point(int x, int y) {\n      }\n\nEnable the **Suggest renaming accessor methods** option to rename `getX()`/`isX()` accessors to `x()` automatically.\n\n\nUse the **Don't report if members become more accessible** option to exclude classes whose members'\naccessibility would be weakened by conversion.\nQuick-fix will stay available as an intention, and triggering it will show the affected members and ask for confirmation.\nIn batch mode conversion will not be suggested.\n\nUse the **Suppress conversion if the class is annotated by** list to exclude classes from conversion when annotated by annotations matching the specified patterns.\n\nThis inspection depends on the Java feature 'Records', which is available since Java 16.\n\nInspection ID: ClassCanBeRecord\n\nNew in 2020.3"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ClassCanBeRecord",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level migration aids/Java 16",
                      "index": 153,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConstantAssertArgument",
                "shortDescription": {
                  "text": "Constant assert argument"
                },
                "fullDescription": {
                  "text": "Reports constant arguments in 'assertTrue()', 'assertFalse()', 'assertNull()', and 'assertNotNull()' calls. Calls to these methods with constant arguments will either always succeed or always fail. Such statements can easily be left over after refactoring and are probably not intended. Example: 'assertNotNull(\"foo\");' Inspection ID: ConstantAssertArgument",
                  "markdown": "Reports constant arguments in `assertTrue()`, `assertFalse()`, `assertNull()`, and `assertNotNull()` calls.\n\n\nCalls to these methods with\nconstant arguments will either always succeed or always fail.\nSuch statements can easily be left over after refactoring and are probably not intended.\n\n**Example:**\n\n\n      assertNotNull(\"foo\");\n\nInspection ID: ConstantAssertArgument"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ConstantAssertArgument",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Test frameworks",
                      "index": 102,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RuntimeExec",
                "shortDescription": {
                  "text": "Call to 'Runtime.exec()'"
                },
                "fullDescription": {
                  "text": "Reports calls to 'Runtime.exec()' or any of its variants. Calls to 'Runtime.exec()' are inherently unportable. Inspection ID: RuntimeExec",
                  "markdown": "Reports calls to `Runtime.exec()` or any of its variants. Calls to `Runtime.exec()` are inherently unportable.\n\nInspection ID: RuntimeExec"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CallToRuntimeExec",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Portability",
                      "index": 69,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StaticInitializerReferencesSubClass",
                "shortDescription": {
                  "text": "Static initializer references subclass"
                },
                "fullDescription": {
                  "text": "Reports classes that refer to their subclasses in static initializers or static fields. Such references can cause JVM-level deadlocks in multithreaded environment, when one thread tries to load the superclass and another thread tries to load the subclass at the same time. Example: 'class Parent {\n    static final Child field = new Child();\n  }\n  class Child extends Parent { }' Inspection ID: StaticInitializerReferencesSubClass",
                  "markdown": "Reports classes that refer to their subclasses in static initializers or static fields.\n\nSuch references can cause JVM-level deadlocks in multithreaded environment, when one thread tries to load the superclass\nand another thread tries to load the subclass at the same time.\n\n**Example:**\n\n\n      class Parent {\n        static final Child field = new Child();\n      }\n      class Child extends Parent { }\n\nInspection ID: StaticInitializerReferencesSubClass"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "StaticInitializerReferencesSubClass",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Threading issues",
                      "index": 23,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MissingDeprecatedAnnotationOnScheduledForRemovalApi",
                "shortDescription": {
                  "text": "Missing '@Deprecated' annotation on scheduled for removal API"
                },
                "fullDescription": {
                  "text": "Reports declarations marked with '@ApiStatus.ScheduledForRemoval' without '@Deprecated'. Example: '@ApiStatus.ScheduledForRemoval(inVersion = \"2017.3\")\n  public void myLegacyMethod() { }' After the quick-fix is applied the result looks like: '@Deprecated\n  @ApiStatus.ScheduledForRemoval(inVersion = \"2017.3\")\n  public void myLegacyMethod() { }' Inspection ID: MissingDeprecatedAnnotationOnScheduledForRemovalApi",
                  "markdown": "Reports declarations marked with `@ApiStatus.ScheduledForRemoval` without `@Deprecated`.\n\nExample:\n\n\n      @ApiStatus.ScheduledForRemoval(inVersion = \"2017.3\")\n      public void myLegacyMethod() { }\n\nAfter the quick-fix is applied the result looks like:\n\n\n      @Deprecated\n      @ApiStatus.ScheduledForRemoval(inVersion = \"2017.3\")\n      public void myLegacyMethod() { }\n\nInspection ID: MissingDeprecatedAnnotationOnScheduledForRemovalApi"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "MissingDeprecatedAnnotationOnScheduledForRemovalApi",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JVM languages",
                      "index": 1,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConstantDeclaredInAbstractClass",
                "shortDescription": {
                  "text": "Constant declared in 'abstract' class"
                },
                "fullDescription": {
                  "text": "Reports constants ('public static final' fields) declared in abstract classes. Some coding standards require declaring constants in interfaces instead. Inspection ID: ConstantDeclaredInAbstractClass",
                  "markdown": "Reports constants (`public static final` fields) declared in abstract classes.\n\nSome coding standards require declaring constants in interfaces instead.\n\nInspection ID: ConstantDeclaredInAbstractClass"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ConstantDeclaredInAbstractClass",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Class structure",
                      "index": 17,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SubtractionInCompareTo",
                "shortDescription": {
                  "text": "Subtraction in 'compareTo()'"
                },
                "fullDescription": {
                  "text": "Reports subtraction in 'compareTo()' methods and methods implementing 'java.util.Comparator.compare()'. While it is a common idiom to use the results of integer subtraction as the result of a 'compareTo()' method, this construct may cause subtle and difficult bugs in cases of integer overflow. Comparing the integer values directly and returning '-1', '0', or '1' is a better practice in most cases. Subtraction on floating point values that is immediately cast to integral type is also reported because precision loss is possible due to rounding. The inspection doesn't report when it's statically determined that value ranges are limited, and overflow never occurs. Additionally, subtraction on 'int' numbers greater than or equal to '0' will never overflow. Therefore, this inspection tries not to warn in those cases. Methods that always return zero or greater can be marked with the 'javax.annotation.Nonnegative' annotation or specified in this inspection's options. Example: 'class DoubleHolder implements Comparable<DoubleHolder> {\n    double d;\n    public int compareTo(DoubleHolder that) {\n        return (int)(this.d - that.d);\n    }\n }' A no-warning example because 'String.length()' is known to be non-negative: 'class A implements Comparable<A> {\n    final String s = \"\";\n    public int compareTo(A a) {\n        return s.length() - a.s.length();\n    }\n }' Use the options to list methods that are safe to use inside a subtraction. Methods are safe when they return an 'int' value that is always greater than or equal to '0'. Inspection ID: SubtractionInCompareTo",
                  "markdown": "Reports subtraction in `compareTo()` methods and methods implementing `java.util.Comparator.compare()`.\n\n\nWhile it is a common idiom to\nuse the results of integer subtraction as the result of a `compareTo()`\nmethod, this construct may cause subtle and difficult bugs in cases of integer overflow.\nComparing the integer values directly and returning `-1`, `0`, or `1` is a better practice in most cases.\n\n\nSubtraction on floating point values that is immediately cast to integral type is also reported because precision loss is possible due to\nrounding.\n\n\nThe inspection doesn't report when it's statically determined that value ranges are limited, and overflow never occurs.\nAdditionally, subtraction on `int` numbers greater than or equal to `0` will never overflow.\nTherefore, this inspection tries not to warn in those cases.\n\n\nMethods that always return zero or greater can be marked with the\n`javax.annotation.Nonnegative` annotation or specified in this inspection's options.\n\n**Example:**\n\n\n      class DoubleHolder implements Comparable<DoubleHolder> {\n        double d;\n        public int compareTo(DoubleHolder that) {\n            return (int)(this.d - that.d);\n        }\n     }\n\nA no-warning example because `String.length()` is known to be non-negative:\n\n\n      class A implements Comparable<A> {\n        final String s = \"\";\n        public int compareTo(A a) {\n            return s.length() - a.s.length();\n        }\n     }\n\n\nUse the options to list methods that are safe to use inside a subtraction.\nMethods are safe when they return an `int` value that is always greater than or equal to `0`.\n\nInspection ID: SubtractionInCompareTo"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SubtractionInCompareTo",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PatternNotApplicable",
                "shortDescription": {
                  "text": "Pattern annotation is not applicable"
                },
                "fullDescription": {
                  "text": "Reports when a '@Pattern' annotation is applied to an element with a type other than 'String'. Example: '@Pattern(\"\\\\d\\\\d\") int i;' Inspection ID: PatternNotApplicable",
                  "markdown": "Reports when a `@Pattern` annotation is applied to an element with a type other than `String`.\n\n**Example:**\n\n\n      @Pattern(\"\\\\d\\\\d\") int i;\n\nInspection ID: PatternNotApplicable"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "PatternNotApplicable",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Pattern validation",
                      "index": 114,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConnectionResource",
                "shortDescription": {
                  "text": "Connection opened but not safely closed"
                },
                "fullDescription": {
                  "text": "Reports Java ME 'javax.microedition.io.Connection' resources that are not opened in front of a 'try' block and closed in the corresponding 'finally' block. Such resources may be inadvertently leaked if an exception is thrown before the resource is closed. Example: 'void example() throws IOException {\n    Connection c = Connector.open(\"foo\");\n  }' Inspection ID: ConnectionResource",
                  "markdown": "Reports Java ME `javax.microedition.io.Connection` resources that are not opened in front of a `try` block and closed in the corresponding `finally` block. Such resources may be inadvertently leaked if an exception is thrown before the resource is closed.\n\n**Example:**\n\n\n      void example() throws IOException {\n        Connection c = Connector.open(\"foo\");\n      }\n\nInspection ID: ConnectionResource"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ConnectionOpenedButNotSafelyClosed",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Performance/Embedded",
                      "index": 137,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BooleanVariableAlwaysNegated",
                "shortDescription": {
                  "text": "Boolean variable is always inverted"
                },
                "fullDescription": {
                  "text": "Reports boolean variables or fields which are always negated when their value is used. Example: 'void m() {\n        boolean b = true; //boolean variable 'b' is always inverted\n        System.out.println(!b);\n      }' Inspection ID: BooleanVariableAlwaysNegated",
                  "markdown": "Reports boolean variables or fields which are always negated when their value is used.\n\nExample:\n\n\n          void m() {\n            boolean b = true; //boolean variable 'b' is always inverted\n            System.out.println(!b);\n          }\n\nInspection ID: BooleanVariableAlwaysNegated"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "BooleanVariableAlwaysNegated",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Data flow",
                      "index": 51,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ExtendsAnnotation",
                "shortDescription": {
                  "text": "Class extends annotation interface"
                },
                "fullDescription": {
                  "text": "Reports classes declared as an implementation or extension of an annotation interface. While it is legal to extend an annotation interface, it is often done by accident, and the result can't be used as an annotation. This inspection depends on the Java feature 'Annotations', which is available since Java 5. Inspection ID: ExtendsAnnotation",
                  "markdown": "Reports classes declared as an implementation or extension of an annotation interface.\n\nWhile it is legal to extend an annotation interface, it is often done by accident,\nand the result can't be used as an annotation.\n\nThis inspection depends on the Java feature 'Annotations', which is available since Java 5.\n\nInspection ID: ExtendsAnnotation"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ClassExplicitlyAnnotation",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Inheritance issues",
                      "index": 121,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "unused",
                "shortDescription": {
                  "text": "Unused declaration"
                },
                "fullDescription": {
                  "text": "Reports classes, methods, or fields that are not used or unreachable from the entry points. An entry point can be a main method, tests, classes from outside the specified scope, classes accessible from 'module-info.java', and so on. It is possible to configure custom entry points by using name patterns or annotations. Example: 'public class Department {\n    private Organization myOrganization;\n  }' In this example, 'Department' explicitly references 'Organization' but if 'Department' class itself is unused, then inspection will report both classes. The inspection also reports parameters that are not used by their methods and all method implementations and overriders, as well as local variables that are declared but not used. Note: Some unused members may not be reported during in-editor code highlighting. For performance reasons, a non-private member is checked only when its name rarely occurs in the project. To see all results, run the inspection by selecting Code | Inspect Code or Code | Analyze Code | Run Inspection by Name from the main menu. Use the visibility settings below to configure members to be reported. For example, configuring report 'private' methods only means that 'public' methods of 'private' inner class will be reported but 'protected' methods of top level class will be ignored. Use the entry points tab to configure entry points to be considered during the inspection run. You can add entry points manually when inspection results are ready. If your code uses unsupported frameworks, there are several options: If the framework relies on annotations, use the Annotations... button to configure the framework's annotations. If the framework doesn't rely on annotations, try to configure class name patterns that are expected by the framework. This way the annotated code accessible by the framework internals will be treated as used. Inspection ID: unused",
                  "markdown": "Reports classes, methods, or fields that are not used or unreachable from the entry points.\n\nAn entry point can be a main method, tests, classes from outside the specified scope, classes accessible from\n`module-info.java`, and so on. It is possible to configure custom entry points by using name patterns or annotations.\n\n**Example:**\n\n\n      public class Department {\n        private Organization myOrganization;\n      }\n\nIn this example, `Department` explicitly references `Organization` but if `Department` class itself is unused, then inspection will report both classes.\n\n\nThe inspection also reports parameters that are not used by their methods and all method implementations and overriders, as well as local\nvariables that are declared but not used.\n\n\n**Note:** Some unused members may not be reported during in-editor code highlighting. For performance reasons, a non-private member is\nchecked only when its name rarely occurs in the project.\nTo see all results, run the inspection by selecting **Code \\| Inspect Code** or **Code \\| Analyze Code \\| Run Inspection by Name** from the main menu.\n\nUse the visibility settings below to configure members to be reported. For example, configuring report `private` methods only means\nthat `public` methods of `private` inner class will be reported but `protected` methods of top level class\nwill be ignored.\n\n\nUse the **entry points** tab to configure entry points to be considered during the inspection run.\n\nYou can add entry points manually when inspection results are ready.\n\nIf your code uses unsupported frameworks, there are several options:\n\n* If the framework relies on annotations, use the **Annotations...** button to configure the framework's annotations.\n* If the framework doesn't rely on annotations, try to configure class name patterns that are expected by the framework.\n\nThis way the annotated code accessible by the framework internals will be treated as used.\n\nInspection ID: unused"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "unused",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Declaration redundancy",
                      "index": 9,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SuspiciousGetterSetter",
                "shortDescription": {
                  "text": "Suspicious getter/setter"
                },
                "fullDescription": {
                  "text": "Reports getter or setter methods that access a field that is not expected by its name. For example, when 'getY()' returns the 'x' field. Usually, it might be a copy-paste error. Example: 'class Point {\n    private int x;\n    private int y;\n\n    public void setX(int x) { // Warning: setter 'setX()' assigns field 'y'\n      this.y = x;\n    }\n\n    public int getY() { // Warning: getter 'getY()' returns field 'x'\n      return x;\n    }\n  }' Use the checkbox below to report situations when a field in the class has a name that matches a name of a getter or a setter. Inspection ID: SuspiciousGetterSetter",
                  "markdown": "Reports getter or setter methods that access a field that is not expected by its name. For example, when `getY()` returns the `x` field. Usually, it might be a copy-paste error.\n\n**Example:**\n\n    class Point {\n        private int x;\n        private int y;\n\n        public void setX(int x) { // Warning: setter 'setX()' assigns field 'y'\n          this.y = x;\n        }\n\n        public int getY() { // Warning: getter 'getY()' returns field 'x'\n          return x;\n        }\n      }\n\n\nUse the checkbox below to report situations when a field in the class has a name that matches a name of a getter or a setter.\n\n\nInspection ID: SuspiciousGetterSetter"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SuspiciousGetterSetter",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/JavaBeans issues",
                      "index": 113,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MismatchedStringCase",
                "shortDescription": {
                  "text": "Mismatched case in 'String' operation"
                },
                "fullDescription": {
                  "text": "Reports 'String' method calls that always return the same value ('-1' or 'false') because a lowercase character is searched in an uppercase-only string or vice versa. Reported methods include 'equals', 'startsWith', 'endsWith', 'contains', 'indexOf', and 'lastIndexOf'. Example:   if (columnName.toLowerCase().equals(\"ID\")) {...}\n Inspection ID: MismatchedStringCase New in 2019.3",
                  "markdown": "Reports `String` method calls that always return the same value (`-1` or `false`) because a lowercase character is searched in an uppercase-only string or vice versa.\n\nReported methods include `equals`, `startsWith`, `endsWith`, `contains`,\n`indexOf`, and `lastIndexOf`.\n\n**Example:**\n\n```\n  if (columnName.toLowerCase().equals(\"ID\")) {...}\n```\n\nInspection ID: MismatchedStringCase\n\nNew in 2019.3"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MismatchedStringCase",
                    "cweIds": [
                      597
                    ],
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AssignmentToNull",
                "shortDescription": {
                  "text": "'null' assignment"
                },
                "fullDescription": {
                  "text": "Reports variables that are assigned to 'null' outside a declaration. The main purpose of 'null' in Java is to denote uninitialized reference variables. In rare cases, assigning a variable explicitly to 'null' is useful to aid garbage collection. However, using 'null' to denote a missing, not specified, or invalid value or a not found element is considered bad practice and may make your code more prone to 'NullPointerExceptions'. Instead, consider defining a sentinel object with the intended semantics or use library types like 'Optional' to denote the absence of a value. Example: 'Integer convert(String s) {\n    Integer value;\n    try {\n      value = Integer.parseInt(s);\n    } catch (NumberFormatException e) {\n      // Warning: null is used to denote an 'invalid value'\n      value = null;\n    }\n    return value;\n  }' Use the Ignore assignments to fields option to ignore assignments to fields. Inspection ID: AssignmentToNull",
                  "markdown": "Reports variables that are assigned to `null` outside a declaration.\n\nThe main purpose of `null` in Java is to denote uninitialized\nreference variables. In rare cases, assigning a variable explicitly to `null`\nis useful to aid garbage collection. However, using `null` to denote a missing, not specified, or invalid value or a not\nfound element is considered bad practice and may make your code more prone to `NullPointerExceptions`.\nInstead, consider defining a sentinel object with the intended semantics\nor use library types like `Optional` to denote the absence of a value.\n\n**Example:**\n\n\n      Integer convert(String s) {\n        Integer value;\n        try {\n          value = Integer.parseInt(s);\n        } catch (NumberFormatException e) {\n          // Warning: null is used to denote an 'invalid value'\n          value = null;\n        }\n        return value;\n      }\n\n\nUse the **Ignore assignments to fields** option to ignore assignments to fields.\n\nInspection ID: AssignmentToNull"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AssignmentToNull",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Assignment issues",
                      "index": 64,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "WaitCalledOnCondition",
                "shortDescription": {
                  "text": "'wait()' called on 'java.util.concurrent.locks.Condition' object"
                },
                "fullDescription": {
                  "text": "Reports calls to 'wait()' made on a 'java.util.concurrent.locks.Condition' object. This is probably a programming error, and some variant of the 'await()' method was intended instead. Example: 'void acquire(Condition released) throws InterruptedException {\n    while (acquired) {\n      released.wait();\n    }\n  }' Good code would look like this: 'void acquire(Condition released) throws InterruptedException {\n    while (acquired) {\n      released.await();\n    }\n  }' Inspection ID: WaitCalledOnCondition",
                  "markdown": "Reports calls to `wait()` made on a `java.util.concurrent.locks.Condition` object. This is probably a programming error, and some variant of the `await()` method was intended instead.\n\n**Example:**\n\n\n      void acquire(Condition released) throws InterruptedException {\n        while (acquired) {\n          released.wait();\n        }\n      }\n\nGood code would look like this:\n\n\n      void acquire(Condition released) throws InterruptedException {\n        while (acquired) {\n          released.await();\n        }\n      }\n\nInspection ID: WaitCalledOnCondition"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "WaitCalledOnCondition",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Threading issues",
                      "index": 23,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NonSynchronizedMethodOverridesSynchronizedMethod",
                "shortDescription": {
                  "text": "Unsynchronized method overrides 'synchronized' method"
                },
                "fullDescription": {
                  "text": "Reports non-'synchronized' methods overriding 'synchronized' methods. The overridden method will not be automatically synchronized if the superclass method is declared as 'synchronized'. This may result in unexpected race conditions when using the subclass. Example: 'class Super {\n    synchronized void process() {}\n  }\n  class Sub extends Super {\n    // Unsynchronized method 'process()' overrides synchronized method\n    void process() {}\n  }' Inspection ID: NonSynchronizedMethodOverridesSynchronizedMethod",
                  "markdown": "Reports non-`synchronized` methods overriding `synchronized` methods.\n\n\nThe overridden method will not be automatically synchronized if the superclass method\nis declared as `synchronized`. This may result in unexpected race conditions when using the subclass.\n\n**Example:**\n\n\n      class Super {\n        synchronized void process() {}\n      }\n      class Sub extends Super {\n        // Unsynchronized method 'process()' overrides synchronized method\n        void process() {}\n      }  \n\nInspection ID: NonSynchronizedMethodOverridesSynchronizedMethod"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NonSynchronizedMethodOverridesSynchronizedMethod",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Threading issues",
                      "index": 23,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TooBroadCatch",
                "shortDescription": {
                  "text": "Overly broad 'catch' block"
                },
                "fullDescription": {
                  "text": "Reports 'catch' blocks with parameters that are more generic than the exception thrown by the corresponding 'try' block. Example: 'try  {\n    File file = new File(pathToFile);\n    return file.getAbsolutePath();\n  } catch (Exception ex) { // warning: 'catch' of 'Exception' is too broad, masking exceptions 'RuntimeException'\n    return defaultFilePath;\n  }' After the quick-fix is applied: 'try  {\n    File file = new File(pathToFile);\n    return file.getAbsolutePath();\n  } catch (RuntimeException ex) {\n    return defaultFilePath;\n  }' Configure the inspection: Use the Only warn on RuntimeException, Exception, Error or Throwable option to have this inspection warn only on the most generic exceptions. Use the Ignore exceptions which hide others but are themselves thrown option to ignore any exceptions that hide other exceptions but still may be thrown and thus are technically not overly broad. Inspection ID: TooBroadCatch",
                  "markdown": "Reports `catch` blocks with parameters that are more generic than the exception thrown by the corresponding `try` block.\n\n**Example:**\n\n\n      try  {\n        File file = new File(pathToFile);\n        return file.getAbsolutePath();\n      } catch (Exception ex) { // warning: 'catch' of 'Exception' is too broad, masking exceptions 'RuntimeException'\n        return defaultFilePath;\n      }\n\nAfter the quick-fix is applied:\n\n\n      try  {\n        File file = new File(pathToFile);\n        return file.getAbsolutePath();\n      } catch (RuntimeException ex) {\n        return defaultFilePath;\n      }\n\nConfigure the inspection:\n\n* Use the **Only warn on RuntimeException, Exception, Error or Throwable** option to have this inspection warn only on the most generic exceptions.\n* Use the **Ignore exceptions which hide others but are themselves thrown** option to ignore any exceptions that hide other exceptions but still may be thrown and thus are technically not overly broad.\n\nInspection ID: TooBroadCatch"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "OverlyBroadCatchBlock",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Error handling",
                      "index": 10,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ProtectedMemberInFinalClass",
                "shortDescription": {
                  "text": "'protected' member in 'final' class"
                },
                "fullDescription": {
                  "text": "Reports 'protected' members in 'final' classes with no 'protected' modifier. Since 'final' classes cannot be inherited, marking the method as 'protected' may be confusing. It is better to declare such members as 'private' or package-visible instead. Example: 'record Bar(int a, int b) {\n  protected int sum() { \n     return a + b;\n  }\n}'\n After the quick-fix is applied: 'record Bar(int a, int b) {\n  int sum() { \n     return a + b;\n  }\n}' As shown in the example, a class can be marked as 'final' explicitly or implicitly. Inspection ID: ProtectedMemberInFinalClass",
                  "markdown": "Reports `protected` members in `final` classes with no `protected` modifier.\n\nSince `final` classes cannot be inherited, marking the method as `protected`\nmay be confusing. It is better to declare such members as `private` or package-visible instead.\n\n**Example:**\n\n    record Bar(int a, int b) {\n      protected int sum() { \n         return a + b;\n      }\n    }\n\nAfter the quick-fix is applied:\n\n    record Bar(int a, int b) {\n      int sum() { \n         return a + b;\n      }\n    }\n\nAs shown in the example, a class can be marked as `final` explicitly or implicitly.\n\n\nInspection ID: ProtectedMemberInFinalClass"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ProtectedMemberInFinalClass",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Declaration redundancy",
                      "index": 9,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DanglingJavadoc",
                "shortDescription": {
                  "text": "Dangling Javadoc comment"
                },
                "fullDescription": {
                  "text": "Reports Javadoc comments that don't belong to any class, method or field. The Javadoc tool ignores dangling Javadoc comments and doesn't include them in the HTML documentation it generates. Example: 'class A {\n    /**\n     * Dangling comment\n     */\n    /**\n     * Method javadoc\n     */\n     public void m(){}\n  }' A quick-fix is available to delete such comments completely or convert them into a block comment. After the quick-fix is applied: 'class A {\n    /*\n      Dangling comment\n    */\n    /**\n     * Method javadoc\n     */\n    public void m(){}\n  }' Use the Ignore file header comment in JavaDoc format option to ignore comments at the beginning of Java files. These are usually copyright messages. Inspection ID: DanglingJavadoc",
                  "markdown": "Reports Javadoc comments that don't belong to any class, method or field. The Javadoc tool ignores dangling Javadoc comments and doesn't include them in the HTML documentation it generates.\n\n**Example:**\n\n\n      class A {\n        /**\n         * Dangling comment\n         */\n        /**\n         * Method javadoc\n         */\n         public void m(){}\n      }\n\nA quick-fix is available to delete such comments completely or convert them into a block comment. After the quick-fix is applied:\n\n\n      class A {\n        /*\n          Dangling comment\n        */\n        /**\n         * Method javadoc\n         */\n        public void m(){}\n      }\n\nUse the **Ignore file header comment in JavaDoc format** option to ignore comments at the beginning of Java files.\nThese are usually copyright messages.\n\nInspection ID: DanglingJavadoc"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "DanglingJavadoc",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Javadoc",
                      "index": 58,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HibernateResource",
                "shortDescription": {
                  "text": "Hibernate resource opened but not safely closed"
                },
                "fullDescription": {
                  "text": "Reports calls to the 'openSession()' method if the returned 'org.hibernate.Session' resource is not safely closed. By default, the inspection assumes that the resources can be closed by any method with 'close' or 'cleanup' in its name. Example: 'void doHibernateQuery(SessionFactory factory) {\n    Session session = factory.openSession(); //warning\n    session.createQuery(\"...\");\n  }' Use the following options to configure the inspection: Whether a 'org.hibernate.Session' resource is allowed to be opened inside a 'try' block. This style is less desirable because it is more verbose than opening a resource in front of a 'try' block. Whether the resource can be closed by any method call with the resource passed as argument. Inspection ID: HibernateResource",
                  "markdown": "Reports calls to the `openSession()` method if the returned `org.hibernate.Session` resource is not safely closed.\n\n\nBy default, the inspection assumes that the resources can be closed by any method with\n'close' or 'cleanup' in its name.\n\n**Example:**\n\n\n      void doHibernateQuery(SessionFactory factory) {\n        Session session = factory.openSession(); //warning\n        session.createQuery(\"...\");\n      }\n\n\nUse the following options to configure the inspection:\n\n* Whether a `org.hibernate.Session` resource is allowed to be opened inside a `try` block. This style is less desirable because it is more verbose than opening a resource in front of a `try` block.\n* Whether the resource can be closed by any method call with the resource passed as argument.\n\nInspection ID: HibernateResource"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HibernateResourceOpenedButNotSafelyClosed",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Resource management",
                      "index": 109,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryInitCause",
                "shortDescription": {
                  "text": "Unnecessary call to 'Throwable.initCause()'"
                },
                "fullDescription": {
                  "text": "Reports calls to 'Throwable.initCause()' where an exception constructor also takes a 'Throwable cause' argument. In this case, the 'initCause()' call can be removed and its argument can be added to the call to the exception's constructor. Example: 'try {\n      process();\n  }\n  catch (RuntimeException ex) {\n    RuntimeException wrapper = new RuntimeException(\"Error while processing\");\n    wrapper.initCause(ex); // Unnecessary call to 'Throwable.initCause()'\n    throw wrapper;\n  }' A quick-fix is available to pass the cause argument to the constructor. After the quick-fix is applied: 'try {\n      process();\n  }\n  catch (RuntimeException ex) {\n    RuntimeException wrapper = new RuntimeException(\"Error while processing\", ex);\n    throw wrapper;\n  }' Inspection ID: UnnecessaryInitCause",
                  "markdown": "Reports calls to `Throwable.initCause()` where an exception constructor also takes a `Throwable cause` argument.\n\nIn this case, the `initCause()` call can be removed and its argument can be added to the call to the exception's constructor.\n\n**Example:**\n\n\n      try {\n          process();\n      }\n      catch (RuntimeException ex) {\n        RuntimeException wrapper = new RuntimeException(\"Error while processing\");\n        wrapper.initCause(ex); // Unnecessary call to 'Throwable.initCause()'\n        throw wrapper;\n      }\n\nA quick-fix is available to pass the cause argument to the constructor. After the quick-fix is applied:\n\n\n      try {\n          process();\n      }\n      catch (RuntimeException ex) {\n        RuntimeException wrapper = new RuntimeException(\"Error while processing\", ex);\n        throw wrapper;\n      }\n      \nInspection ID: UnnecessaryInitCause"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnnecessaryInitCause",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Error handling",
                      "index": 10,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ComparisonOfShortAndChar",
                "shortDescription": {
                  "text": "Comparison of 'short' and 'char' values"
                },
                "fullDescription": {
                  "text": "Reports equality comparisons between 'short' and 'char' values. Such comparisons may cause subtle bugs because while both values are 2-byte long, 'short' values are signed, and 'char' values are unsigned. Example: 'if (Character.MAX_VALUE == shortValue()) {} //never can be true' Inspection ID: ComparisonOfShortAndChar",
                  "markdown": "Reports equality comparisons between `short` and `char` values.\n\nSuch comparisons may cause subtle bugs because while both values are 2-byte long, `short` values are\nsigned, and `char` values are unsigned.\n\n**Example:**\n\n\n    if (Character.MAX_VALUE == shortValue()) {} //never can be true\n\nInspection ID: ComparisonOfShortAndChar"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ComparisonOfShortAndChar",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Numeric issues",
                      "index": 25,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ArrayCanBeReplacedWithEnumValues",
                "shortDescription": {
                  "text": "Array can be replaced with enum values"
                },
                "fullDescription": {
                  "text": "Reports arrays of enum constants that can be replaced with a call to 'EnumType.values()'. Usually, when updating such an enum, you have to update the array as well. However, if you use 'EnumType.values()' instead, no modifications are required. Example: 'enum States {\n     NOT_RUN, IN_PROGRESS, FINISHED;\n  }\n  \n  handleStates(new States[] {NOT_RUN, IN_PROGRESS, FINISHED});' After the quick-fix is applied: 'handleStates(States.values());' Inspection ID: ArrayCanBeReplacedWithEnumValues New in 2019.1",
                  "markdown": "Reports arrays of enum constants that can be replaced with a call to `EnumType.values()`.\n\nUsually, when updating such an enum, you have to update the array as well. However, if you use `EnumType.values()`\ninstead, no modifications are required.\n\nExample:\n\n\n      enum States {\n         NOT_RUN, IN_PROGRESS, FINISHED;\n      }\n      \n      handleStates(new States[] {NOT_RUN, IN_PROGRESS, FINISHED});\n\nAfter the quick-fix is applied:\n\n\n      handleStates(States.values());\n\nInspection ID: ArrayCanBeReplacedWithEnumValues\n\nNew in 2019.1"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ArrayCanBeReplacedWithEnumValues",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "WaitNotifyNotInSynchronizedContext",
                "shortDescription": {
                  "text": "'wait()' or 'notify()' is not in synchronized context"
                },
                "fullDescription": {
                  "text": "Reports calls to 'wait()', 'notify()', and 'notifyAll()' that are not made inside a corresponding synchronized statement or synchronized method. Calling these methods on an object without holding a lock on that object causes 'IllegalMonitorStateException'. Such a construct is not necessarily an error, as the necessary lock may be acquired before the containing method is called, but it's worth looking at. Example: 'class Sync {\n    private final Object lock = new Object();\n\n    void test() throws InterruptedException {\n      synchronized (this) {\n        lock.wait(); // 'lock.wait()' is not synchronized on 'lock'\n      }\n    }\n  }' Inspection ID: WaitNotifyNotInSynchronizedContext",
                  "markdown": "Reports calls to `wait()`, `notify()`, and `notifyAll()` that are not made inside a corresponding synchronized statement or synchronized method.\n\n\nCalling these methods on an object\nwithout holding a lock on that object causes `IllegalMonitorStateException`.\nSuch a construct is not necessarily an error, as the necessary lock may be acquired before\nthe containing method is called, but it's worth looking at.\n\n**Example:**\n\n\n      class Sync {\n        private final Object lock = new Object();\n\n        void test() throws InterruptedException {\n          synchronized (this) {\n            lock.wait(); // 'lock.wait()' is not synchronized on 'lock'\n          }\n        }\n      }\n\nInspection ID: WaitNotifyNotInSynchronizedContext"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "WaitNotifyWhileNotSynced",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Threading issues",
                      "index": 23,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DollarSignInName",
                "shortDescription": {
                  "text": "Use of '$' in identifier"
                },
                "fullDescription": {
                  "text": "Reports variables, methods, and classes with dollar signs ('$') in their names. While such names are legal Java, their use outside of generated java code is strongly discouraged. Example: 'class SalaryIn${}' Rename quick-fix is suggested only in the editor. Inspection ID: DollarSignInName",
                  "markdown": "Reports variables, methods, and classes with dollar signs (`$`) in their names. While such names are legal Java, their use outside of generated java code is strongly discouraged.\n\n**Example:**\n\n\n      class SalaryIn${}\n\nRename quick-fix is suggested only in the editor.\n\nInspection ID: DollarSignInName"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "DollarSignInName",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Naming conventions",
                      "index": 59,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DynamicRegexReplaceableByCompiledPattern",
                "shortDescription": {
                  "text": "Dynamic regular expression can be replaced by compiled 'Pattern'"
                },
                "fullDescription": {
                  "text": "Reports calls to the regular expression methods (such as 'matches()' or 'split()') of 'java.lang.String' using constant arguments. Such calls may be profitably replaced with a 'private static final Pattern' field so that the regular expression does not have to be compiled each time it is used. Example: 'text.replaceAll(\"abc\", replacement);' After the quick-fix is applied: 'private static final Pattern ABC = Pattern.compile(\"abc\", Pattern.LITERAL);\n  ABC.matcher(text).replaceAll(Matcher.quoteReplacement(replacement));' Inspection ID: DynamicRegexReplaceableByCompiledPattern",
                  "markdown": "Reports calls to the regular expression methods (such as `matches()` or `split()`) of `java.lang.String` using constant arguments.\n\n\nSuch calls may be profitably replaced with a `private static final Pattern` field\nso that the regular expression does not have to be compiled each time it is used.\n\n**Example:**\n\n\n      text.replaceAll(\"abc\", replacement);\n\nAfter the quick-fix is applied:\n\n\n      private static final Pattern ABC = Pattern.compile(\"abc\", Pattern.LITERAL);\n      ABC.matcher(text).replaceAll(Matcher.quoteReplacement(replacement));\n\nInspection ID: DynamicRegexReplaceableByCompiledPattern"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "DynamicRegexReplaceableByCompiledPattern",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Performance",
                      "index": 4,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EmptyInitializer",
                "shortDescription": {
                  "text": "Empty class initializer"
                },
                "fullDescription": {
                  "text": "Reports empty class initializer blocks. Inspection ID: EmptyInitializer",
                  "markdown": "Reports empty class initializer blocks.\n\n\nInspection ID: EmptyInitializer"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EmptyClassInitializer",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Declaration redundancy",
                      "index": 9,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryBreak",
                "shortDescription": {
                  "text": "Unnecessary 'break' statement"
                },
                "fullDescription": {
                  "text": "Reports any unnecessary 'break' statements. An 'break' statement is unnecessary if no other statements are executed after it has been removed. Example: 'switch (e) {\n    case A -> {\n        System.out.println(\"A\");\n        break; // reports 'break' statement is unnecessary\n    }\n    default -> {\n        System.out.println(\"Default\");\n        break; // reports 'break' statement is unnecessary\n    }\n  }' Inspection ID: UnnecessaryBreak",
                  "markdown": "Reports any unnecessary `break` statements.\n\nAn `break` statement is unnecessary if no other statements are executed after it has been removed.\n\n**Example:**\n\n\n      switch (e) {\n        case A -> {\n            System.out.println(\"A\");\n            break; // reports 'break' statement is unnecessary\n        }\n        default -> {\n            System.out.println(\"Default\");\n            break; // reports 'break' statement is unnecessary\n        }\n      }\n\nInspection ID: UnnecessaryBreak"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnnecessaryBreak",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Verbose or redundant code constructs",
                      "index": 37,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RawUseOfParameterizedType",
                "shortDescription": {
                  "text": "Raw use of parameterized class"
                },
                "fullDescription": {
                  "text": "Reports generic classes with omitted type parameters. Such raw use of generic types is valid in Java, but it defeats the purpose of type parameters and may mask bugs. This inspection mirrors the 'rawtypes' warning of 'javac'. Examples: '//warning: Raw use of parameterized class 'List'\nList list = new ArrayList<String>();\n//list of strings was created but integer is accepted as well\nlist.add(1);' '//no warning as it's impossible to provide type arguments during array creation\nIntFunction<List<?>[]> fun = List[]::new;' Configure the inspection: Use the Ignore construction of new objects option to ignore raw types used in object construction. Use the Ignore type casts option to ignore raw types used in type casts. Use the Ignore where a type parameter would not compile option to ignore the cases when a type parameter fails to compile (for example, when creating an array or overriding a library method). Use the Ignore parameter types of overriding methods option to ignore type parameters used in parameters of overridden methods. Use the Ignore when automatic quick-fix is not available option to ignore the cases when a quick-fix is not available. This inspection depends on the Java feature 'Generics', which is available since Java 5. Inspection ID: RawUseOfParameterizedType",
                  "markdown": "Reports generic classes with omitted type parameters. Such *raw* use of generic types is valid in Java, but it defeats the purpose of type parameters and may mask bugs. This inspection mirrors the `rawtypes` warning of `javac`.\n\n**Examples:**\n\n\n    //warning: Raw use of parameterized class 'List'\n    List list = new ArrayList<String>();\n    //list of strings was created but integer is accepted as well\n    list.add(1);\n\n\n    //no warning as it's impossible to provide type arguments during array creation\n    IntFunction<List<?>[]> fun = List[]::new;\n\nConfigure the inspection:\n\n* Use the **Ignore construction of new objects** option to ignore raw types used in object construction.\n* Use the **Ignore type casts** option to ignore raw types used in type casts.\n* Use the **Ignore where a type parameter would not compile** option to ignore the cases when a type parameter fails to compile (for example, when creating an array or overriding a library method).\n* Use the **Ignore parameter types of overriding methods** option to ignore type parameters used in parameters of overridden methods.\n* Use the **Ignore when automatic quick-fix is not available** option to ignore the cases when a quick-fix is not available.\n\nThis inspection depends on the Java feature 'Generics', which is available since Java 5.\n\nInspection ID: RawUseOfParameterizedType"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "rawtypes",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level migration aids/Java 5",
                      "index": 93,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PublicConstructorInNonPublicClass",
                "shortDescription": {
                  "text": "'public' constructor in non-public class"
                },
                "fullDescription": {
                  "text": "Reports 'public' constructors in non-'public' classes. Usually, there is no reason for creating a 'public' constructor in a class with a lower access level. Please note, however, that this inspection changes the behavior of some reflection calls. In particular, 'Class.getConstructor()' won't be able to find the updated constructor ('Class.getDeclaredConstructor()' should be used instead). Do not use the inspection if your code or code of some used frameworks relies on constructor accessibility via 'getConstructor()'. Example: 'class House {\n    public House() {}\n  }' After the quick-fix is applied: 'class House {\n    House() {}\n  }' Inspection ID: PublicConstructorInNonPublicClass",
                  "markdown": "Reports `public` constructors in non-`public` classes.\n\nUsually, there is no reason for creating a `public` constructor in a class with a lower access level.\nPlease note, however, that this inspection changes the behavior of some reflection calls. In particular,\n`Class.getConstructor()` won't be able to find the updated constructor\n(`Class.getDeclaredConstructor()` should be used instead). Do not use the inspection if your code\nor code of some used frameworks relies on constructor accessibility via `getConstructor()`.\n\n**Example:**\n\n\n      class House {\n        public House() {}\n      }\n\nAfter the quick-fix is applied:\n\n\n      class House {\n        House() {}\n      }\n\nInspection ID: PublicConstructorInNonPublicClass"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PublicConstructorInNonPublicClass",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Visibility",
                      "index": 73,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ProtectedInnerClass",
                "shortDescription": {
                  "text": "Protected nested class"
                },
                "fullDescription": {
                  "text": "Reports 'protected' nested classes. Example: 'public class Outer {\n    protected static class Nested {} // warning\n    protected class Inner {}         // warning\n    protected enum Mode {}           // warning depends on the setting\n    protected interface I {}         // warning depends on the setting\n  }' Configure the inspection: Use the Ignore 'protected' inner enums option to ignore 'protected' inner enums. Use the Ignore 'protected' inner interfaces option to ignore 'protected' inner interfaces. Inspection ID: ProtectedInnerClass",
                  "markdown": "Reports `protected` nested classes.\n\n**Example:**\n\n\n      public class Outer {\n        protected static class Nested {} // warning\n        protected class Inner {}         // warning\n        protected enum Mode {}           // warning depends on the setting\n        protected interface I {}         // warning depends on the setting\n      }\n\nConfigure the inspection:\n\n* Use the **Ignore 'protected' inner enums** option to ignore `protected` inner enums.\n* Use the **Ignore 'protected' inner interfaces** option to ignore `protected` inner interfaces.\n\nInspection ID: ProtectedInnerClass"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ProtectedInnerClass",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Encapsulation",
                      "index": 100,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnqualifiedStaticUsage",
                "shortDescription": {
                  "text": "Unqualified static access"
                },
                "fullDescription": {
                  "text": "Reports usage of static members that is not qualified with the class name. This is legal if the static member is in the same class, but may be confusing. Example: 'class Foo {\n    static void foo() {}\n    static int x;\n\n    void bar() {\n      foo();\n      System.out.println(x);\n    }\n\n    static void baz() { foo(); }\n  }' After the quick-fix is applied: 'class Foo {\n    static void foo() {}\n    static int x;\n\n    void bar() {\n      Foo.foo();\n      System.out.println(Foo.x);\n    }\n\n    static void baz() { Foo.foo(); }\n  }' Use the inspection settings to toggle the reporting for the following items: static fields access 'void bar() { System.out.println(x); }' calls to static methods 'void bar() { foo(); }' 'static void baz() { foo(); }' You can also configure the inspection to only report static member usage from a non-static context. In the above example, 'static void baz() { foo(); }' will not be reported. Inspection ID: UnqualifiedStaticUsage",
                  "markdown": "Reports usage of static members that is not qualified with the class name.\n\n\nThis is legal if the static member is in\nthe same class, but may be confusing.\n\n**Example:**\n\n\n      class Foo {\n        static void foo() {}\n        static int x;\n\n        void bar() {\n          foo();\n          System.out.println(x);\n        }\n\n        static void baz() { foo(); }\n      }\n\nAfter the quick-fix is applied:\n\n\n      class Foo {\n        static void foo() {}\n        static int x;\n\n        void bar() {\n          Foo.foo();\n          System.out.println(Foo.x);\n        }\n\n        static void baz() { Foo.foo(); }\n      }\n\nUse the inspection settings to toggle the reporting for the following items:\n\n*\n  static fields access  \n\n  `void bar() { System.out.println(x); }`\n\n*\n  calls to static methods  \n\n  `void bar() { foo(); }`  \n\n  `static void baz() { foo(); }`\n\n\nYou can also configure the inspection to only report static member usage from a non-static context.\nIn the above example, `static void baz() { foo(); }` will not be reported.\n\nInspection ID: UnqualifiedStaticUsage"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnqualifiedStaticUsage",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StaticGuardedByInstance",
                "shortDescription": {
                  "text": "Static member guarded by instance field or this"
                },
                "fullDescription": {
                  "text": "Reports '@GuardedBy' annotations on 'static' fields or methods in which the guard is either a non-static field or 'this'. Guarding a static element with a non-static element may result in excessive concurrency, multiple threads may be able to access the guarded field simultaneously by locking in different object contexts. Example: 'private ReadWriteLock lock = new ReentrantReadWriteLock();\n\n    @GuardedBy(\"lock\")\n    public static void bar() {\n        // ...\n    }' Supported '@GuardedBy' annotations are: 'net.jcip.annotations.GuardedBy' 'javax.annotation.concurrent.GuardedBy' 'org.apache.http.annotation.GuardedBy' 'com.android.annotations.concurrency.GuardedBy' 'androidx.annotation.GuardedBy' 'com.google.errorprone.annotations.concurrent.GuardedBy' Inspection ID: StaticGuardedByInstance",
                  "markdown": "Reports `@GuardedBy` annotations on `static` fields or methods in which the guard is either a non-static field or `this`.\n\nGuarding a static element with a non-static element may result in\nexcessive concurrency, multiple threads may be able to access the guarded field simultaneously by locking in different object contexts.\n\nExample:\n\n\n        private ReadWriteLock lock = new ReentrantReadWriteLock();\n\n        @GuardedBy(\"lock\")\n        public static void bar() {\n            // ...\n        }\n\nSupported `@GuardedBy` annotations are:\n\n* `net.jcip.annotations.GuardedBy`\n* `javax.annotation.concurrent.GuardedBy`\n* `org.apache.http.annotation.GuardedBy`\n* `com.android.annotations.concurrency.GuardedBy`\n* `androidx.annotation.GuardedBy`\n* `com.google.errorprone.annotations.concurrent.GuardedBy`\n\nInspection ID: StaticGuardedByInstance"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "StaticGuardedByInstance",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Concurrency annotation issues",
                      "index": 75,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ExternalizableWithoutPublicNoArgConstructor",
                "shortDescription": {
                  "text": "'Externalizable' class without 'public' no-arg constructor"
                },
                "fullDescription": {
                  "text": "Reports 'Externalizable' classes without a public no-argument constructor. When an 'Externalizable' object is reconstructed, an instance is created using the public no-arg constructor before the 'readExternal' method called. If a public no-arg constructor is not available, a 'java.io.InvalidClassException' will be thrown at runtime. Inspection ID: ExternalizableWithoutPublicNoArgConstructor",
                  "markdown": "Reports `Externalizable` classes without a public no-argument constructor.\n\nWhen an `Externalizable` object is reconstructed, an instance is created using the public\nno-arg constructor before the `readExternal` method called. If a public\nno-arg constructor is not available, a `java.io.InvalidClassException` will be\nthrown at runtime.\n\nInspection ID: ExternalizableWithoutPublicNoArgConstructor"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ExternalizableWithoutPublicNoArgConstructor",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Serialization issues",
                      "index": 18,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ManualArrayCopy",
                "shortDescription": {
                  "text": "Manual array copy"
                },
                "fullDescription": {
                  "text": "Reports manual copying of array contents that can be replaced with a call to 'System.arraycopy()'. Example: 'for (int i = 0; i < array.length; i++) {\n    newArray[i] = array[i];\n  }' After the quick-fix is applied: 'System.arraycopy(array, 0, newArray, 0, array.length);' Inspection ID: ManualArrayCopy",
                  "markdown": "Reports manual copying of array contents that can be replaced with a call to `System.arraycopy()`.\n\n**Example:**\n\n\n      for (int i = 0; i < array.length; i++) {\n        newArray[i] = array[i];\n      }\n\nAfter the quick-fix is applied:\n\n\n      System.arraycopy(array, 0, newArray, 0, array.length);\n\nInspection ID: ManualArrayCopy"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ManualArrayCopy",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Performance",
                      "index": 4,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StaticPseudoFunctionalStyleMethod",
                "shortDescription": {
                  "text": "Guava pseudo-functional call can be converted to Stream API call"
                },
                "fullDescription": {
                  "text": "Reports usages of Guava pseudo-functional code when 'Java Stream API' is available. Though 'Guava Iterable API' provides functionality similar to 'Java Streams API', it's slightly different and may miss some features. Especially, primitive-specialized stream variants like 'IntStream' are more performant than generic variants. Example: 'List<String> transformedIterable = Iterables.transform(someList, someTransformFunction);//warning: Pseudo functional style code' After the quick-fix is applied: 'List<String> transformedIterable = someList.stream().map(someTransformFunction).collect(Collectors.toList());' Note: Code semantics can be changed; for example, Guava's 'Iterable.transform' produces a lazy-evaluated iterable, but the replacement is eager-evaluated. This inspection depends on the Java feature 'Stream and Optional API', which is available since Java 8. Inspection ID: StaticPseudoFunctionalStyleMethod",
                  "markdown": "Reports usages of Guava pseudo-functional code when `Java Stream API` is available.\n\nThough `Guava Iterable API` provides functionality similar to `Java Streams API`, it's slightly different and\nmay miss some features.\nEspecially, primitive-specialized stream variants like `IntStream` are more performant than generic variants.\n\n**Example:**\n\n\n    List<String> transformedIterable = Iterables.transform(someList, someTransformFunction);//warning: Pseudo functional style code\n\nAfter the quick-fix is applied:\n\n    List<String> transformedIterable = someList.stream().map(someTransformFunction).collect(Collectors.toList());\n\n\n**Note:** Code semantics can be changed; for example, Guava's `Iterable.transform` produces a lazy-evaluated iterable,\nbut the replacement is eager-evaluated.\n\nThis inspection depends on the Java feature 'Stream and Optional API', which is available since Java 8.\n\nInspection ID: StaticPseudoFunctionalStyleMethod"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "StaticPseudoFunctionalStyleMethod",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level migration aids/Java 8",
                      "index": 94,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ControlFlowStatementWithoutBraces",
                "shortDescription": {
                  "text": "Control flow statement without braces"
                },
                "fullDescription": {
                  "text": "Reports any 'if', 'while', 'do', or 'for' statements without braces. Some code styles, e.g. the Google Java Style guide, require braces for all control statements. When adding further statements to control statements without braces, it is important not to forget adding braces. When commenting out a line of code, it is also necessary to be more careful when not using braces, to not inadvertently make the next statement part of the control flow statement. Always using braces makes inserting or commenting out a line of code safer. It's likely the goto fail vulnerability would not have happened, if an always use braces code style was used. Control statements with braces make the control flow easier to see, without relying on, possibly incorrect, indentation. Example: 'class Strange {\n    void x(boolean one, boolean two) {\n      if(one)\n        if(two)\n          foo();\n      else\n        bar();\n    }\n\n    void foo() {}\n    void bar() {}\n  }' The quick-fix wraps the statement body with braces: 'class Strange {\n    void x(boolean one, boolean two) {\n      if(one) {\n        if(two) {\n          foo();\n        } else {\n          bar();\n        }\n      }\n    }\n\n    void foo() {}\n    void bar() {}\n  }' Inspection ID: ControlFlowStatementWithoutBraces",
                  "markdown": "Reports any `if`, `while`, `do`, or `for` statements without braces. Some code styles, e.g. the [Google Java Style guide](https://google.github.io/styleguide/javaguide.html), require braces for all control statements.\n\n\nWhen adding further statements to control statements without braces, it is important not to forget adding braces.\nWhen commenting out a line of code, it is also necessary to be more careful when not using braces,\nto not inadvertently make the next statement part of the control flow statement.\nAlways using braces makes inserting or commenting out a line of code safer.\n\n\nIt's likely the [goto fail vulnerability](https://www.imperialviolet.org/2014/02/22/applebug.html) would not have happened,\nif an always use braces code style was used.\nControl statements with braces make the control flow easier to see, without relying on, possibly incorrect, indentation.\n\nExample:\n\n\n      class Strange {\n        void x(boolean one, boolean two) {\n          if(one)\n            if(two)\n              foo();\n          else\n            bar();\n        }\n\n        void foo() {}\n        void bar() {}\n      }\n\nThe quick-fix wraps the statement body with braces:\n\n\n      class Strange {\n        void x(boolean one, boolean two) {\n          if(one) {\n            if(two) {\n              foo();\n            } else {\n              bar();\n            }\n          }\n        }\n\n        void foo() {}\n        void bar() {}\n      }\n\nInspection ID: ControlFlowStatementWithoutBraces"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ControlFlowStatementWithoutBraces",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MisspelledEquals",
                "shortDescription": {
                  "text": "'equal()' instead of 'equals()'"
                },
                "fullDescription": {
                  "text": "Reports declarations of 'equal()' with a single parameter. Normally, this is a typo and 'equals()' is actually intended. A quick-fix is suggested to rename the method to 'equals'. Example: 'class Main {\n    public boolean equal(Object obj) {\n      return true;\n    }\n  }' After the quick-fix is applied: 'class Main {\n    public boolean equals(Object obj) {\n      return true;\n    }\n  }' Inspection ID: MisspelledEquals",
                  "markdown": "Reports declarations of `equal()` with a single parameter. Normally, this is a typo and `equals()` is actually intended.\n\nA quick-fix is suggested to rename the method to `equals`.\n\n**Example:**\n\n\n      class Main {\n        public boolean equal(Object obj) {\n          return true;\n        }\n      }\n\nAfter the quick-fix is applied:\n\n\n      class Main {\n        public boolean equals(Object obj) {\n          return true;\n        }\n      }\n\nInspection ID: MisspelledEquals"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MisspelledEquals",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LengthOneStringInIndexOf",
                "shortDescription": {
                  "text": "Single character string argument in 'String.indexOf()' call"
                },
                "fullDescription": {
                  "text": "Reports single character strings being used as an argument in 'String.indexOf()' and 'String.lastIndexOf()' calls. A quick-fix is suggested to replace such string literals with equivalent character literals, gaining some performance enhancement. Example: 'return s.indexOf(\"x\");' After the quick-fix is applied: 'return s.indexOf('x');' Inspection ID: LengthOneStringInIndexOf",
                  "markdown": "Reports single character strings being used as an argument in `String.indexOf()` and `String.lastIndexOf()` calls.\n\nA quick-fix is suggested to replace such string literals with equivalent character literals, gaining some performance enhancement.\n\n**Example:**\n\n\n      return s.indexOf(\"x\");\n\nAfter the quick-fix is applied:\n\n\n      return s.indexOf('x');\n\nInspection ID: LengthOneStringInIndexOf"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SingleCharacterStringConcatenation",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Performance",
                      "index": 4,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NonFinalFieldInEnum",
                "shortDescription": {
                  "text": "Non-final field in 'enum'"
                },
                "fullDescription": {
                  "text": "Reports non-final fields in enumeration types. Non-final fields introduce global mutable state, which is generally considered undesirable. Example: 'enum Enum {\n    FIRST(\"first\"),\n    SECOND(\"second\");\n\n    public String str;\n\n    Enum(String str) {\n        this.str = str;\n    }\n  }' After the quick-fix is applied: 'enum Enum {\n    FIRST(\"first\"),\n    SECOND(\"second\");\n\n    public final String str;\n\n    Enum(String str) {\n        this.str = str;\n    }\n  }' Use the `Ignore fields that cannot be made 'final'` option to only warn on fields that can be made final using the quick-fix. Inspection ID: NonFinalFieldInEnum",
                  "markdown": "Reports non-final fields in enumeration types. Non-final fields introduce global mutable state, which is generally considered undesirable.\n\n**Example:**\n\n\n      enum Enum {\n        FIRST(\"first\"),\n        SECOND(\"second\");\n\n        public String str;\n\n        Enum(String str) {\n            this.str = str;\n        }\n      }\n\nAfter the quick-fix is applied:\n\n\n      enum Enum {\n        FIRST(\"first\"),\n        SECOND(\"second\");\n\n        public final String str;\n\n        Enum(String str) {\n            this.str = str;\n        }\n      }\n\nUse the \\`Ignore fields that cannot be made 'final'\\` option to only warn on fields that can be made final using the quick-fix.\n\nInspection ID: NonFinalFieldInEnum"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NonFinalFieldInEnum",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Class structure",
                      "index": 17,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TrivialFunctionalExpressionUsage",
                "shortDescription": {
                  "text": "Trivial usage of functional expression"
                },
                "fullDescription": {
                  "text": "Reports functional interface methods calls that are directly invoked on the definition of the lambda, method reference, or anonymous class. Such method calls can be replaced with the body of the functional interface implementation. Example: 'boolean contains(List<String> names, String name) {\n    return ((Predicate<String>)x -> {\n      return names.contains(x);\n    }).test(name);\n  }' When the quick-fix is applied, the method call changes to: 'boolean contains(List<String> names, String name) {\n    return names.contains(name);\n  }' Inspection ID: TrivialFunctionalExpressionUsage",
                  "markdown": "Reports functional interface methods calls that are directly invoked on the definition of the lambda, method reference, or anonymous class. Such method calls can be replaced with the body of the functional interface implementation.\n\n**Example:**\n\n\n      boolean contains(List<String> names, String name) {\n        return ((Predicate<String>)x -> {\n          return names.contains(x);\n        }).test(name);\n      }\n\nWhen the quick-fix is applied, the method call changes to:\n\n\n      boolean contains(List<String> names, String name) {\n        return names.contains(name);\n      }\n\nInspection ID: TrivialFunctionalExpressionUsage"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "TrivialFunctionalExpressionUsage",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Declaration redundancy",
                      "index": 9,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EnumClass",
                "shortDescription": {
                  "text": "Enumerated class"
                },
                "fullDescription": {
                  "text": "Reports enum classes. Such statements are not supported in Java 1.4 and earlier JVM. Inspection ID: EnumClass",
                  "markdown": "Reports **enum** classes. Such statements are not supported in Java 1.4 and earlier JVM.\n\n\nInspection ID: EnumClass"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EnumClass",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level issues",
                      "index": 119,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AnonymousHasLambdaAlternative",
                "shortDescription": {
                  "text": "Anonymous type has shorter lambda alternative"
                },
                "fullDescription": {
                  "text": "Reports anonymous classes which could be transformed to a constructor or a factory method call with a lambda expression argument. The following classes are reported by this inspection: Anonymous classes extending 'ThreadLocal' which have an 'initialValue()' method (can be replaced with 'ThreadLocal.withInitial') Anonymous classes extending 'Thread' which have a 'run()' method (can be replaced with 'new Thread(Runnable)' Example: 'new Thread() {\n    @Override\n    public void run() {\n      System.out.println(\"Hello from thread!\");\n    }\n  }.start();' After the quick-fix is applied: 'new Thread(() -> {\n    System.out.println(\"Hello from thread!\");\n  }).start();' This inspection depends on the Java feature 'ThreadLocal.withInitial()', which is available since Java 8. Inspection ID: AnonymousHasLambdaAlternative",
                  "markdown": "Reports anonymous classes which could be transformed to a constructor or a factory method call with a lambda expression argument.\n\nThe following classes are reported by this inspection:\n\n* Anonymous classes extending `ThreadLocal` which have an `initialValue()` method (can be replaced with `ThreadLocal.withInitial`)\n* Anonymous classes extending `Thread` which have a `run()` method (can be replaced with `new Thread(Runnable)`\n\nExample:\n\n\n      new Thread() {\n        @Override\n        public void run() {\n          System.out.println(\"Hello from thread!\");\n        }\n      }.start();\n\nAfter the quick-fix is applied:\n\n\n      new Thread(() -> {\n        System.out.println(\"Hello from thread!\");\n      }).start();\n\nThis inspection depends on the Java feature 'ThreadLocal.withInitial()', which is available since Java 8.\n\nInspection ID: AnonymousHasLambdaAlternative"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AnonymousHasLambdaAlternative",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level migration aids/Java 8",
                      "index": 94,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ExtendsThread",
                "shortDescription": {
                  "text": "Class directly extends 'Thread'"
                },
                "fullDescription": {
                  "text": "Reports classes that directly extend 'java.lang.Thread'. It is usually recommended to prefer composition over inheritance to create more reusable code that is easier to modify later. Example: 'class MainThread extends Thread {\n  }' Inspection ID: ExtendsThread",
                  "markdown": "Reports classes that directly extend `java.lang.Thread`. It is usually recommended to prefer composition over inheritance to create more reusable code that is easier to modify later.\n\n**Example:**\n\n\n      class MainThread extends Thread {\n      }\n\nInspection ID: ExtendsThread"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ClassExplicitlyExtendsThread",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Threading issues",
                      "index": 23,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SimplifyOptionalCallChains",
                "shortDescription": {
                  "text": "Optional call chain can be simplified"
                },
                "fullDescription": {
                  "text": "Reports Optional call chains that can be simplified. Here are several examples of possible simplifications: 'optional.map(x -> true).orElse(false)' → 'optional.isPresent()' 'optional.map(x -> Optional.of(x.trim())).orElseGet(Optional::empty)' → 'optional.map(String::trim)' 'optional.map(x -> (String)x).orElse(null)' → '(String) optional.orElse(null)' 'Optional.ofNullable(optional.orElse(null))' → 'optional' 'val = optional.orElse(null); val != null ? val : defaultExpr' → 'optional.orElse(defaultExpr)' 'val = optional.orElse(null); if(val != null) expr(val)' → 'optional.ifPresent(val -> expr(val))' This inspection depends on the Java feature 'Stream and Optional API', which is available since Java 8. Inspection ID: SimplifyOptionalCallChains New in 2017.2",
                  "markdown": "Reports **Optional** call chains that can be simplified. Here are several examples of possible simplifications:\n\n* `optional.map(x -> true).orElse(false)` → `optional.isPresent()`\n* `optional.map(x -> Optional.of(x.trim())).orElseGet(Optional::empty)` → `optional.map(String::trim)`\n* `optional.map(x -> (String)x).orElse(null)` → `(String) optional.orElse(null)`\n* `Optional.ofNullable(optional.orElse(null))` → `optional`\n* `val = optional.orElse(null); val != null ? val : defaultExpr ` → `optional.orElse(defaultExpr)`\n* `val = optional.orElse(null); if(val != null) expr(val) ` → `optional.ifPresent(val -> expr(val))`\n\nThis inspection depends on the Java feature 'Stream and Optional API', which is available since Java 8.\n\nInspection ID: SimplifyOptionalCallChains\n\nNew in 2017.2"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SimplifyOptionalCallChains",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Verbose or redundant code constructs",
                      "index": 37,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RandomDoubleForRandomInteger",
                "shortDescription": {
                  "text": "Using 'Random.nextDouble()' to get random integer"
                },
                "fullDescription": {
                  "text": "Reports calls to 'java.util.Random.nextDouble()' that are used to create a positive integer number by multiplying the call by a factor and casting to an integer. For generating a random positive integer in a range, 'java.util.Random.nextInt(int)' is simpler and more efficient. Example: 'int getRandomInt() {\n    return (int) ((new Random()).nextDouble() * SIZE);\n  }'\n After the quick-fix is applied: 'int getRandomInt() {\n    return (new Random()).nextInt(SIZE);\n  }' Inspection ID: RandomDoubleForRandomInteger",
                  "markdown": "Reports calls to `java.util.Random.nextDouble()` that are used to create a positive integer number by multiplying the call by a factor and casting to an integer.\n\n\nFor generating a random positive integer in a range,\n`java.util.Random.nextInt(int)` is simpler and more efficient.\n\n**Example:**\n\n\n      int getRandomInt() {\n        return (int) ((new Random()).nextDouble() * SIZE);\n      }\n      \nAfter the quick-fix is applied:\n\n\n      int getRandomInt() {\n        return (new Random()).nextInt(SIZE);\n      }\n\nInspection ID: RandomDoubleForRandomInteger"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UsingRandomNextDoubleForRandomInteger",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Performance",
                      "index": 4,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SuspiciousArrayCast",
                "shortDescription": {
                  "text": "Suspicious array cast"
                },
                "fullDescription": {
                  "text": "Reports suspicious array casts. An array cast is considered suspicious when it casts to a more specific array type. Such a cast is legal at compile time but may fail with a 'ClassCastException' at runtime. Example: 'Number[] numbers = new Number[]{1L, 2L, 4L};\n  Long[] longs = (Long[])numbers;' Inspection ID: SuspiciousArrayCast",
                  "markdown": "Reports suspicious array casts. An array cast is considered suspicious when it casts to a more specific array type. Such a cast is legal at compile time but may fail with a `ClassCastException` at runtime.\n\n**Example:**\n\n\n      Number[] numbers = new Number[]{1L, 2L, 4L};\n      Long[] longs = (Long[])numbers;\n\nInspection ID: SuspiciousArrayCast"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SuspiciousArrayCast",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ZeroLengthArrayInitialization",
                "shortDescription": {
                  "text": "Zero-length array allocation"
                },
                "fullDescription": {
                  "text": "Reports allocations of arrays with known lengths of zero. Since array lengths in Java are non-modifiable, it is almost always possible to share zero-length arrays, rather than repeatedly allocate new ones. Such sharing may provide useful optimizations in the program runtime or footprint. Note that the inspection does not report zero-length arrays allocated as static final fields, since those arrays are assumed to be used for implementing array sharing. Inspection ID: ZeroLengthArrayInitialization",
                  "markdown": "Reports allocations of arrays with known lengths of zero.\n\n\nSince array lengths in Java are non-modifiable, it is almost always possible to share zero-length arrays, rather than repeatedly\nallocate new ones. Such sharing may provide useful optimizations in the program runtime or footprint.\n\n\nNote that the inspection does not report zero-length arrays allocated as static final fields,\nsince those arrays are assumed to be used for implementing array sharing.\n\nInspection ID: ZeroLengthArrayInitialization"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ZeroLengthArrayAllocation",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Memory",
                      "index": 132,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DivideByZero",
                "shortDescription": {
                  "text": "Division by zero"
                },
                "fullDescription": {
                  "text": "Reports division by zero or remainder by zero. Such expressions will produce an 'Infinity', '-Infinity' or 'NaN' result for doubles or floats, and will throw an 'ArithmeticException' for integers. When the expression has a 'NaN' result, the fix suggests replacing the division expression with the 'NaN' constant. Inspection ID: DivideByZero",
                  "markdown": "Reports division by zero or remainder by zero. Such expressions will produce an `Infinity`, `-Infinity` or `NaN` result for doubles or floats, and will throw an `ArithmeticException` for integers.\n\nWhen the expression has a `NaN` result, the fix suggests replacing the division expression with the `NaN` constant.\n\n\nInspection ID: DivideByZero"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "divzero",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Numeric issues",
                      "index": 25,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MissingSerialAnnotation",
                "shortDescription": {
                  "text": "'@Serial' annotation can be used"
                },
                "fullDescription": {
                  "text": "Reports methods and fields in the 'Serializable' and 'Externalizable' classes that are suitable to be annotated with the 'java.io.Serial' annotation. The quick-fix adds the annotation. Example: 'class Main implements Serializable {\n  private static final long serialVersionUID = 7874493593505141603L;\n\n  private void writeObject(ObjectOutputStream out) throws IOException {\n  }\n}' After the quick-fix is applied: 'class Main implements Serializable {\n    @Serial\n    private static final long serialVersionUID = 7874493593505141603L;\n\n    @Serial\n    private void writeObject(ObjectOutputStream out) throws IOException {\n    }\n}' Example: 'class Main implements Externalizable {\n    protected Object readResolve() throws ObjectStreamException {\n      return \"SomeObject\";\n    }\n  }' After the quick-fix is applied: 'class Main implements Externalizable {\n    @Serial\n    protected Object readResolve() throws ObjectStreamException {\n        return \"SomeObject\";\n    }\n  }' For more information about all possible cases, refer to the Javadoc of the 'java.io.Serial' class. This inspection depends on the Java feature '@Serial annotation', which is available since Java 14. Inspection ID: MissingSerialAnnotation New in 2020.3",
                  "markdown": "Reports methods and fields in the `Serializable` and `Externalizable` classes that are suitable to be annotated with the `java.io.Serial` annotation. The quick-fix adds the annotation.\n\n**Example:**\n\n\n    class Main implements Serializable {\n      private static final long serialVersionUID = 7874493593505141603L;\n\n      private void writeObject(ObjectOutputStream out) throws IOException {\n      }\n    }\n\nAfter the quick-fix is applied:\n\n\n      class Main implements Serializable {\n        @Serial\n        private static final long serialVersionUID = 7874493593505141603L;\n\n        @Serial\n        private void writeObject(ObjectOutputStream out) throws IOException {\n        }\n    }\n\n**Example:**\n\n\n      class Main implements Externalizable {\n        protected Object readResolve() throws ObjectStreamException {\n          return \"SomeObject\";\n        }\n      }\n\nAfter the quick-fix is applied:\n\n\n      class Main implements Externalizable {\n        @Serial\n        protected Object readResolve() throws ObjectStreamException {\n            return \"SomeObject\";\n        }\n      }\n\nFor more information about all possible cases, refer to the Javadoc of the `java.io.Serial` class.\n\nThis inspection depends on the Java feature '@Serial annotation', which is available since Java 14.\n\nInspection ID: MissingSerialAnnotation\n\nNew in 2020.3"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MissingSerialAnnotation",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Serialization issues",
                      "index": 18,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StringConcatenationMissingWhitespace",
                "shortDescription": {
                  "text": "Whitespace may be missing in string concatenation"
                },
                "fullDescription": {
                  "text": "Reports string concatenations with missing whitespaces, that is where the left-hand side ends with a Unicode letter or digit and the right-hand side starts with a Unicode letter or digit. Example: 'String sql = \"SELECT column\" +\n               \"FROM table\";' Use the Ignore concatenations with variable strings option to only report when both the left and right side of the concatenation are literals. Inspection ID: StringConcatenationMissingWhitespace",
                  "markdown": "Reports string concatenations with missing whitespaces, that is where the left-hand side ends with a Unicode letter or digit and the right-hand side starts with a Unicode letter or digit.\n\n**Example:**\n\n\n      String sql = \"SELECT column\" +\n                   \"FROM table\";\n\n\nUse the **Ignore concatenations with variable strings** option to only report\nwhen both the left and right side of the concatenation are literals.\n\nInspection ID: StringConcatenationMissingWhitespace"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "StringConcatenationMissingWhitespace",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StandardVariableNames",
                "shortDescription": {
                  "text": "Standard variable names"
                },
                "fullDescription": {
                  "text": "Reports variables with 'standard' names that do not correspond to their types. Such names may be confusing. There are the following standard names for specific types: i, j, k, m, n - 'int' f - 'float' d - 'double' b - 'byte' c, ch - 'char' l - 'long' s, str - 'String' Rename quick-fix is suggested only in the editor. Use the option to ignore parameter names which are identical to the parameter name from a direct super method. Inspection ID: StandardVariableNames",
                  "markdown": "Reports variables with 'standard' names that do not correspond to their types. Such names may be confusing. There are the following standard names for specific types:\n\n* i, j, k, m, n - `int`\n* f - `float`\n* d - `double`\n* b - `byte`\n* c, ch - `char`\n* l - `long`\n* s, str - `String`\n\nRename quick-fix is suggested only in the editor.\n\n\nUse the option to ignore parameter names which are identical to the parameter name from a direct super method.\n\nInspection ID: StandardVariableNames"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "StandardVariableNames",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Naming conventions",
                      "index": 59,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DeconstructionCanBeUsed",
                "shortDescription": {
                  "text": "Record pattern can be used"
                },
                "fullDescription": {
                  "text": "Reports patterns that can be replaced with record patterns. Example: 'record Point(int x, int y) {\n    static void printSum(Object obj) {\n      if (obj instanceof Point p) {\n        int x = p.x();\n        int y = p.y();\n        System.out.println(x + y);\n      }\n    }\n  }' After the quick-fix is applied: 'record Point(int x, int y) {\n    static void printSum(Object obj) {\n      if (obj instanceof Point(int x, int y)) {\n        System.out.println(x + y);\n      }\n    }\n  }' This inspection depends on the Java feature 'Pattern guards and record patterns', which is available since Java 21. Inspection ID: DeconstructionCanBeUsed New in 2023.1",
                  "markdown": "Reports patterns that can be replaced with record patterns.\n\nExample:\n\n\n      record Point(int x, int y) {\n        static void printSum(Object obj) {\n          if (obj instanceof Point p) {\n            int x = p.x();\n            int y = p.y();\n            System.out.println(x + y);\n          }\n        }\n      }\n\nAfter the quick-fix is applied:\n\n\n      record Point(int x, int y) {\n        static void printSum(Object obj) {\n          if (obj instanceof Point(int x, int y)) {\n            System.out.println(x + y);\n          }\n        }\n      }\n\nThis inspection depends on the Java feature 'Pattern guards and record patterns', which is available since Java 21.\n\nInspection ID: DeconstructionCanBeUsed\n\nNew in 2023.1"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "DeconstructionCanBeUsed",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level migration aids/Java 21",
                      "index": 161,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ExceptionFromCatchWhichDoesntWrap",
                "shortDescription": {
                  "text": "'throw' inside 'catch' block which ignores the caught exception"
                },
                "fullDescription": {
                  "text": "Reports exceptions that are thrown from inside 'catch' blocks but do not \"wrap\" the caught exception. When an exception is thrown in response to an exception, wrapping the initial exception prevents losing valuable context information, such as stack frames and line numbers. Example: '...\n  catch (IOException e) {\n    closeAllConnections();\n    throw new ConnectException(\"Connection problem.\"); // warning: 'throw' inside 'catch' block ignores the caught exception 'e'\n  }' Configure the inspection: Use the Ignore if result of exception method call is used option to indicate whether the inspection should ignore exceptions whose argument is the result of a method call on the original exception, such as 'getMessage()'. Use the Ignore if thrown exception cannot wrap an exception option to ignore 'throw' statements that throw exceptions without a constructor that accepts a 'Throwable' cause. Inspection ID: ExceptionFromCatchWhichDoesntWrap",
                  "markdown": "Reports exceptions that are thrown from inside `catch` blocks but do not \"wrap\" the caught exception.\n\nWhen an exception is thrown in response to an exception, wrapping the initial exception prevents losing valuable context information,\nsuch as stack frames and line numbers.\n\n**Example:**\n\n\n      ...\n      catch (IOException e) {\n        closeAllConnections();\n        throw new ConnectException(\"Connection problem.\"); // warning: 'throw' inside 'catch' block ignores the caught exception 'e'\n      }\n\nConfigure the inspection:\n\n* Use the **Ignore if result of exception method call is used** option to indicate whether the inspection should ignore exceptions whose argument is the result of a method call on the original exception, such as `getMessage()`.\n* Use the **Ignore if thrown exception cannot wrap an exception** option to ignore `throw` statements that throw exceptions without a constructor that accepts a `Throwable` cause.\n\nInspection ID: ExceptionFromCatchWhichDoesntWrap"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ThrowInsideCatchBlockWhichIgnoresCaughtException",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Error handling",
                      "index": 10,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MethodOnlyUsedFromInnerClass",
                "shortDescription": {
                  "text": "Private method only used from inner class"
                },
                "fullDescription": {
                  "text": "Reports 'private' methods which are only called from an inner class of the class containing the method. Such methods can be safely moved into that inner class. Example: 'public class Outer {\n  public static void main(String[] args) {\n    new Inner().run(args[0]);\n  }\n\n  static class Inner {\n    void run(String arg) {\n      // Method isEmpty() is used from Inner class only\n      // consider moving it to the Inner class\n      if (!isEmpty(arg)) {\n        System.out.println(\"Argument is supplied\");\n      }\n    }\n  }\n\n  private static boolean isEmpty(String s) {\n    return s != null && s.trim().isEmpty();\n  }\n}' Use the first checkbox below to ignore 'private' methods which are called from an anonymous or local class. Use the third checkbox to only report 'static' methods. Inspection ID: MethodOnlyUsedFromInnerClass",
                  "markdown": "Reports `private` methods which are only called from an inner class of the class containing the method. Such methods can be safely moved into that inner class.\n\nExample:\n\n\n    public class Outer {\n      public static void main(String[] args) {\n        new Inner().run(args[0]);\n      }\n\n      static class Inner {\n        void run(String arg) {\n          // Method isEmpty() is used from Inner class only\n          // consider moving it to the Inner class\n          if (!isEmpty(arg)) {\n            System.out.println(\"Argument is supplied\");\n          }\n        }\n      }\n\n      private static boolean isEmpty(String s) {\n        return s != null && s.trim().isEmpty();\n      }\n    }\n\n\nUse the first checkbox below to ignore `private`\nmethods which are called from an anonymous or local class.\n\n\nUse the third checkbox to only report `static` methods.\n\n\nInspection ID: MethodOnlyUsedFromInnerClass"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MethodOnlyUsedFromInnerClass",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Abstraction issues",
                      "index": 63,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ComparisonToNaN",
                "shortDescription": {
                  "text": "Comparison to 'Double.NaN' or 'Float.NaN'"
                },
                "fullDescription": {
                  "text": "Reports any comparisons to 'Double.NaN' or 'Float.NaN'. Such comparisons are never meaningful, as NaN is not equal to anything, including itself. Use the 'Double.isNaN()' or 'Float.isNaN()' methods instead. Example: 'if (x == Double.NaN) {...}' After the quick-fix is applied: 'if (Double.isNaN(x)) {...}' Inspection ID: ComparisonToNaN",
                  "markdown": "Reports any comparisons to `Double.NaN` or `Float.NaN`. Such comparisons are never meaningful, as NaN is not equal to anything, including itself. Use the `Double.isNaN()` or `Float.isNaN()` methods instead.\n\n**Example:**\n\n\n      if (x == Double.NaN) {...}\n\nAfter the quick-fix is applied:\n\n\n      if (Double.isNaN(x)) {...}\n\nInspection ID: ComparisonToNaN"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ComparisonToNaN",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Numeric issues",
                      "index": 25,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MultiCatchCanBeSplit",
                "shortDescription": {
                  "text": "Multi-catch can be split into separate catch blocks"
                },
                "fullDescription": {
                  "text": "Reports multi-'catch' sections and suggests splitting them into separate 'catch' blocks. Example: 'try {\n    int i = getIndex();\n  } catch (NullPointerException|IndexOutOfBoundsException e) {\n    e.printStackTrace();\n  }' After the quick-fix is applied: 'try {\n    int i = getIndex();\n  } catch (NullPointerException e) {\n    e.printStackTrace();\n  } catch (IndexOutOfBoundsException e) {\n    e.printStackTrace();\n  }' This inspection depends on the Java feature 'Multi-catches', which is available since Java 7. Inspection ID: MultiCatchCanBeSplit",
                  "markdown": "Reports multi-`catch` sections and suggests splitting them into separate `catch` blocks.\n\nExample:\n\n\n      try {\n        int i = getIndex();\n      } catch (NullPointerException|IndexOutOfBoundsException e) {\n        e.printStackTrace();\n      }\n\nAfter the quick-fix is applied:\n\n\n      try {\n        int i = getIndex();\n      } catch (NullPointerException e) {\n        e.printStackTrace();\n      } catch (IndexOutOfBoundsException e) {\n        e.printStackTrace();\n      }\n\nThis inspection depends on the Java feature 'Multi-catches', which is available since Java 7.\n\nInspection ID: MultiCatchCanBeSplit"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "MultiCatchCanBeSplit",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ResultSetIndexZero",
                "shortDescription": {
                  "text": "Use of index 0 in JDBC ResultSet"
                },
                "fullDescription": {
                  "text": "Reports attempts to access column 0 of 'java.sql.ResultSet' or 'java.sql.PreparedStatement'. For historical reasons, columns of 'java.sql.ResultSet' and 'java.sql.PreparedStatement' are numbered starting with 1, rather than with 0, and accessing column 0 is a common error in JDBC programming. Example: 'String getName(ResultSet rs) {\n    return rs.getString(0);\n  }' Inspection ID: ResultSetIndexZero",
                  "markdown": "Reports attempts to access column 0 of `java.sql.ResultSet` or `java.sql.PreparedStatement`. For historical reasons, columns of `java.sql.ResultSet` and `java.sql.PreparedStatement` are numbered starting with **1** , rather than with **0** , and accessing column 0 is a common error in JDBC programming.\n\n**Example:**\n\n\n      String getName(ResultSet rs) {\n        return rs.getString(0);\n      }\n\nInspection ID: ResultSetIndexZero"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UseOfIndexZeroInJDBCResultSet",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConditionCoveredByFurtherCondition",
                "shortDescription": {
                  "text": "Condition is covered by further condition"
                },
                "fullDescription": {
                  "text": "Reports conditions that become redundant as they are completely covered by a subsequent condition. For example, in the 'value != -1 && value > 0' condition, the first part is redundant: if it's false, then the second part is also false. Or in a condition like 'obj != null && obj instanceof String', the null-check is redundant as 'instanceof' operator implies non-nullity. Inspection ID: ConditionCoveredByFurtherCondition New in 2018.3",
                  "markdown": "Reports conditions that become redundant as they are completely covered by a subsequent condition.\n\nFor example, in the `value != -1 && value > 0` condition, the first part is redundant:\nif it's false, then the second part is also false.\nOr in a condition like `obj != null && obj instanceof String`,\nthe null-check is redundant as `instanceof` operator implies non-nullity.\n\nInspection ID: ConditionCoveredByFurtherCondition\n\nNew in 2018.3"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ConditionCoveredByFurtherCondition",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Verbose or redundant code constructs",
                      "index": 37,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PatternVariableHidesField",
                "shortDescription": {
                  "text": "Pattern variable hides field"
                },
                "fullDescription": {
                  "text": "Reports pattern variables named identically to a field of a surrounding class. As a result of such naming, you may accidentally use the pattern variable when using the identically named field is intended. A quick-fix is suggested to rename the variable. Example: 'class Pointless {\n    Point p = new Point();\n\n    public void test(Object a) {\n      if (a instanceof Point p) {\n        System.out.print(\"a is a point (\" + p.x + \", \" + p.y + ')');\n      } else {\n        System.out.print(\"p is a point (\" + p.x + \", \" + p.y + ')');\n      }\n    }\n  }' Inspection ID: PatternVariableHidesField New in 2022.2",
                  "markdown": "Reports pattern variables named identically to a field of a surrounding class. As a result of such naming, you may accidentally use the pattern variable when using the identically named field is intended.\n\n\nA quick-fix is suggested to rename the variable.\n\n**Example:**\n\n\n      class Pointless {\n        Point p = new Point();\n\n        public void test(Object a) {\n          if (a instanceof Point p) {\n            System.out.print(\"a is a point (\" + p.x + \", \" + p.y + ')');\n          } else {\n            System.out.print(\"p is a point (\" + p.x + \", \" + p.y + ')');\n          }\n        }\n      }\n\nInspection ID: PatternVariableHidesField\n\nNew in 2022.2"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PatternVariableHidesField",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Visibility",
                      "index": 73,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JoinDeclarationAndAssignmentJava",
                "shortDescription": {
                  "text": "Assignment can be joined with declaration"
                },
                "fullDescription": {
                  "text": "Reports variable assignments that can be joined with a variable declaration. Example: 'int x;\n  x = 1;' The quick-fix converts the assignment into an initializer: 'int x = 1;' Inspection ID: JoinDeclarationAndAssignmentJava New in 2018.3",
                  "markdown": "Reports variable assignments that can be joined with a variable declaration.\n\nExample:\n\n\n      int x;\n      x = 1;\n\nThe quick-fix converts the assignment into an initializer:\n\n\n      int x = 1;\n\nInspection ID: JoinDeclarationAndAssignmentJava\n\nNew in 2018.3"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JoinDeclarationAndAssignmentJava",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InnerClassVariableHidesOuterClassVariable",
                "shortDescription": {
                  "text": "Inner class field hides outer class field"
                },
                "fullDescription": {
                  "text": "Reports inner class fields named identically to a field of a surrounding class. As a result of such naming, you may accidentally use the field from the inner class when using the identically named field of a surrounding class is intended. A quick-fix is suggested to rename the inner class field. Example: 'class Outer {\n    private String name;\n\n    class Inner {\n      private String name;\n    }\n  }' Use the option to choose whether this inspection should report all name clashes, or only clashes with fields that are visible from the inner class. Inspection ID: InnerClassVariableHidesOuterClassVariable",
                  "markdown": "Reports inner class fields named identically to a field of a surrounding class. As a result of such naming, you may accidentally use the field from the inner class when using the identically named field of a surrounding class is intended.\n\nA quick-fix is suggested to rename the inner class field.\n\n**Example:**\n\n\n      class Outer {\n        private String name;\n\n        class Inner {\n          private String name;\n        }\n      }\n\n\nUse the option to choose whether this inspection should report all name clashes,\nor only clashes with fields that are visible from the inner class.\n\nInspection ID: InnerClassVariableHidesOuterClassVariable"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "InnerClassFieldHidesOuterClassField",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Visibility",
                      "index": 73,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MISSORTED_IMPORTS",
                "shortDescription": {
                  "text": "Missorted imports"
                },
                "fullDescription": {
                  "text": "Reports 'import' statements which are not arranged according to the current code style (see Settings|Editor|Code Style). Example: 'import java.util.List;\n  import java.util.ArrayList;\n\n  public class Example {\n    List list = new ArrayList();\n  }' After the \"Optimize Imports\" quick fix is applied: 'import java.util.ArrayList;\n  import java.util.List;\n\n  public class Example {\n    List list = new ArrayList();\n  }' Inspection ID: MISSORTED_IMPORTS",
                  "markdown": "Reports `import` statements which are not arranged according to the current code style (see Settings\\|Editor\\|Code Style).\n\n**Example:**\n\n\n      import java.util.List;\n      import java.util.ArrayList;\n\n      public class Example {\n        List list = new ArrayList();\n      }\n\nAfter the \"Optimize Imports\" quick fix is applied:\n\n\n      import java.util.ArrayList;\n      import java.util.List;\n\n      public class Example {\n        List list = new ArrayList();\n      }\n\nInspection ID: MISSORTED_IMPORTS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "MISSORTED_IMPORTS",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Imports",
                      "index": 19,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryModifier",
                "shortDescription": {
                  "text": "Unnecessary modifier"
                },
                "fullDescription": {
                  "text": "Reports redundant modifiers and suggests to remove them. The resulting code will be shorter, but the behaviour and meaning will remain the same. Example 1: '// all code is implicitly strictfp under Java 17 and higher\n  strictfp class X {\n\n    // inner enums are implicitly static\n    static enum Inner {\n        A, B, C\n    }\n\n    // inner records are implicitly static\n    static record R() {\n    }\n  }' Example 2: 'final record R() {\n    // all records are implicitly final\n  }' Example 3: '// all interfaces are implicitly abstract\n  abstract interface Printer {\n\n    // all interface members are implicitly public\n    public int size();\n\n    // all inner classes of interfaces are implicitly static\n    static class Inner {}\n  }' Inspection ID: UnnecessaryModifier",
                  "markdown": "Reports redundant modifiers and suggests to remove them. The resulting code will be shorter, but the behaviour and meaning will remain the same.\n\n**Example 1:**\n\n\n      // all code is implicitly strictfp under Java 17 and higher\n      strictfp class X {\n\n        // inner enums are implicitly static\n        static enum Inner {\n            A, B, C\n        }\n\n        // inner records are implicitly static\n        static record R() {\n        }\n      }\n\n**Example 2:**\n\n\n      final record R() {\n        // all records are implicitly final\n      }\n\n**Example 3:**\n\n\n      // all interfaces are implicitly abstract\n      abstract interface Printer {\n\n        // all interface members are implicitly public\n        public int size();\n\n        // all inner classes of interfaces are implicitly static\n        static class Inner {}\n      }\n\n\nInspection ID: UnnecessaryModifier"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnnecessaryModifier",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NonThreadSafeLazyInitialization",
                "shortDescription": {
                  "text": "Unsafe lazy initialization of 'static' field"
                },
                "fullDescription": {
                  "text": "Reports 'static' variables that are lazily initialized in a non-thread-safe manner. Lazy initialization of 'static' variables should be done with an appropriate synchronization construct to prevent different threads from performing conflicting initialization. When applicable, a quick-fix, which introduces the lazy initialization holder class idiom, is suggested. This idiom makes use of the fact that the JVM guarantees that a class will not be initialized until it is used. Example: 'class X {\n    private static List<String> list;\n\n    public List<String> getList() {\n      if (list == null) {\n        list = List.of(\"one\", \"two\", \"tree\");\n      }\n      return list;\n    }\n  }' After the quick-fix is applied: 'class X {\n    private static final class ListHolder {\n      static final List<String> list = List.of(\"one\", \"two\", \"tree\");\n    }\n\n    public List<String> getList() {\n      return ListHolder.list;\n    }\n  }' Inspection ID: NonThreadSafeLazyInitialization",
                  "markdown": "Reports `static` variables that are lazily initialized in a non-thread-safe manner.\n\nLazy initialization of `static` variables should be done with an appropriate synchronization construct\nto prevent different threads from performing conflicting initialization.\n\nWhen applicable, a quick-fix, which introduces the\n[lazy initialization holder class idiom](https://en.wikipedia.org/wiki/Initialization_on_demand_holder_idiom), is suggested.\nThis idiom makes use of the fact that the JVM guarantees that a class will not be initialized until it is used.\n\n**Example:**\n\n\n      class X {\n        private static List<String> list;\n\n        public List<String> getList() {\n          if (list == null) {\n            list = List.of(\"one\", \"two\", \"tree\");\n          }\n          return list;\n        }\n      }\n\nAfter the quick-fix is applied:\n\n\n      class X {\n        private static final class ListHolder {\n          static final List<String> list = List.of(\"one\", \"two\", \"tree\");\n        }\n\n        public List<String> getList() {\n          return ListHolder.list;\n        }\n      }\n\nInspection ID: NonThreadSafeLazyInitialization"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NonThreadSafeLazyInitialization",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Initialization",
                      "index": 27,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnknownLanguage",
                "shortDescription": {
                  "text": "Unknown Language ID"
                },
                "fullDescription": {
                  "text": "Reports when the ID of the language used in a '@Language' annotation is unknown. Example: '@Language(\"HMTL\") String html;' Inspection ID: UnknownLanguage",
                  "markdown": "Reports when the ID of the language used in a `@Language` annotation is unknown.\n\n**Example:**\n\n\n      @Language(\"HMTL\") String html;\n\nInspection ID: UnknownLanguage"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "UnknownLanguage",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language injection",
                      "index": 0,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConditionalCanBePushedInsideExpression",
                "shortDescription": {
                  "text": "Conditional can be pushed inside branch expression"
                },
                "fullDescription": {
                  "text": "Reports conditional expressions with 'then' and else branches that are similar enough so that the expression can be moved inside. This action shortens the code. Example: 'double g(int a, int b) {\n    return a == b ? Math.cos(0) : Math.cos(1);\n  }' After the quick-fix is applied: 'double g(int a, int b) {\n    return Math.cos(a == b ? 0 : 1);\n  }' Inspection ID: ConditionalCanBePushedInsideExpression New in 2017.2",
                  "markdown": "Reports conditional expressions with `then` and else branches that are similar enough so that the expression can be moved inside. This action shortens the code.\n\nExample:\n\n\n      double g(int a, int b) {\n        return a == b ? Math.cos(0) : Math.cos(1);\n      }\n\nAfter the quick-fix is applied:\n\n\n      double g(int a, int b) {\n        return Math.cos(a == b ? 0 : 1);\n      }\n\nInspection ID: ConditionalCanBePushedInsideExpression\n\nNew in 2017.2"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ConditionalCanBePushedInsideExpression",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Control flow issues",
                      "index": 24,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CloneInNonCloneableClass",
                "shortDescription": {
                  "text": "'clone()' method in non-Cloneable class"
                },
                "fullDescription": {
                  "text": "Reports classes that override the 'clone()' method but don't implement the 'Cloneable' interface. This usually represents a programming error. Use the Only warn on 'public' clone methods option to ignore methods that aren't 'public'. For classes designed to be inherited, you may choose to override 'clone()' and declare it as 'protected' without implementing the 'Cloneable' interface and decide whether to implement the 'Cloneable' interface in subclasses. Inspection ID: CloneInNonCloneableClass",
                  "markdown": "Reports classes that override the `clone()` method but don't implement the `Cloneable` interface. This usually represents a programming error.\n\n\nUse the **Only warn on 'public' clone methods** option to ignore methods that aren't `public`.\n\nFor classes designed to be inherited, you may choose to override `clone()` and declare it as `protected`\nwithout implementing the `Cloneable` interface and decide whether to implement the `Cloneable` interface in subclasses.\n\nInspection ID: CloneInNonCloneableClass"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CloneInNonCloneableClass",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Cloning issues",
                      "index": 89,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Java8ListReplaceAll",
                "shortDescription": {
                  "text": "Loop can be replaced with 'List.replaceAll()'"
                },
                "fullDescription": {
                  "text": "Reports loops which can be collapsed into a single 'List.replaceAll()' call. Example: 'for (int i = 0; i < strings.size(); i++) {\n    String str = strings.get(i).toLowerCase();\n    strings.set(i, str);\n  }' After the quick-fix is applied: 'strings.replaceAll(String::toLowerCase);' This inspection depends on the Java feature 'Lambda methods in collections', which is available since Java 8. Inspection ID: Java8ListReplaceAll New in 2022.1",
                  "markdown": "Reports loops which can be collapsed into a single `List.replaceAll()` call.\n\n**Example:**\n\n\n      for (int i = 0; i < strings.size(); i++) {\n        String str = strings.get(i).toLowerCase();\n        strings.set(i, str);\n      }\n\nAfter the quick-fix is applied:\n\n\n      strings.replaceAll(String::toLowerCase);\n\nThis inspection depends on the Java feature 'Lambda methods in collections', which is available since Java 8.\n\nInspection ID: Java8ListReplaceAll\n\nNew in 2022.1"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "Java8ListReplaceAll",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level migration aids/Java 8",
                      "index": 94,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BigDecimalLegacyMethod",
                "shortDescription": {
                  "text": "'BigDecimal' legacy method called"
                },
                "fullDescription": {
                  "text": "Reports calls to 'BigDecimal.divide()' or 'BigDecimal.setScale()' that use integer constants to specify the rounding mode. Since JDK 1.5, consider using methods that take the 'RoundingMode' 'enum' parameter instead. Example: 'new BigDecimal(\"42\").setScale(2, BigDecimal.ROUND_FLOOR);' After the quick-fix is applied: 'new BigDecimal(\"42\").setScale(2, RoundingMode.FLOOR);' Inspection ID: BigDecimalLegacyMethod",
                  "markdown": "Reports calls to `BigDecimal.divide()` or `BigDecimal.setScale()` that use integer constants to specify the rounding mode. Since JDK 1.5, consider using methods that take the `RoundingMode` `enum` parameter instead.\n\n**Example:**\n\n    new BigDecimal(\"42\").setScale(2, BigDecimal.ROUND_FLOOR);\n\nAfter the quick-fix is applied:\n\n    new BigDecimal(\"42\").setScale(2, RoundingMode.FLOOR);\n\n\nInspection ID: BigDecimalLegacyMethod"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "BigDecimalLegacyMethod",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level migration aids/Java 5",
                      "index": 93,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MissingPackageInfo",
                "shortDescription": {
                  "text": "Missing 'package-info.java'"
                },
                "fullDescription": {
                  "text": "Reports packages that contain classes but do not contain the 'package-info.java' or 'package.html' files and are, thus, missing the package documentation. The quick-fix creates an initial 'package-info.java' file. Inspection ID: MissingPackageInfo",
                  "markdown": "Reports packages that contain classes but do not contain the `package-info.java` or `package.html` files and are, thus, missing the package documentation.\n\nThe quick-fix creates an initial `package-info.java` file.\n\n\nInspection ID: MissingPackageInfo"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MissingPackageInfo",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Javadoc",
                      "index": 58,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryConstructor",
                "shortDescription": {
                  "text": "Redundant no-arg constructor"
                },
                "fullDescription": {
                  "text": "Reports unnecessary constructors. A constructor is unnecessary if it is the only constructor of a class, has no parameters, has the same access modifier as its containing class, and does not perform any initialization except explicitly or implicitly calling the superclass constructor without arguments. Such a constructor can be safely removed as it will be generated by the compiler even if not specified. Example: 'public class Foo {\n    public Foo() {}\n  }' After the quick-fix is applied: 'public class Foo {}' Use the inspection settings to ignore unnecessary constructors that have an annotation. Inspection ID: UnnecessaryConstructor",
                  "markdown": "Reports unnecessary constructors.\n\n\nA constructor is unnecessary if it is the only constructor of a class, has no parameters,\nhas the same access modifier as its containing class,\nand does not perform any initialization except explicitly or implicitly calling the superclass constructor without arguments.\nSuch a constructor can be safely removed as it will be generated by the compiler even if not specified.\n\n**Example:**\n\n\n      public class Foo {\n        public Foo() {}\n      }\n\nAfter the quick-fix is applied:\n\n\n      public class Foo {}\n\n\nUse the inspection settings to ignore unnecessary constructors that have an annotation.\n\n\nInspection ID: UnnecessaryConstructor"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RedundantNoArgConstructor",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StringBufferField",
                "shortDescription": {
                  "text": "'StringBuilder' field"
                },
                "fullDescription": {
                  "text": "Reports fields of type 'java.lang.StringBuffer' or 'java.lang.StringBuilder'. Such fields can grow without limit and are often the cause of memory leaks. Example: 'public class Example {\n    private StringBuilder builder = new StringBuilder();\n\n  }' Inspection ID: StringBufferField",
                  "markdown": "Reports fields of type `java.lang.StringBuffer` or `java.lang.StringBuilder`. Such fields can grow without limit and are often the cause of memory leaks.\n\n**Example:**\n\n\n      public class Example {\n        private StringBuilder builder = new StringBuilder();\n\n      }\n\nInspection ID: StringBufferField"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "StringBufferField",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Memory",
                      "index": 132,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ClassNameSameAsAncestorName",
                "shortDescription": {
                  "text": "Class name same as ancestor name"
                },
                "fullDescription": {
                  "text": "Reports classes that have the same name as one of their superclasses, while their fully qualified names remain different. Such class names may be very confusing. Example: 'package util;\n  abstract class Iterable<T> implements java.lang.Iterable<T> {}' A quick-fix that renames such classes is available only in the editor. Inspection ID: ClassNameSameAsAncestorName",
                  "markdown": "Reports classes that have the same name as one of their superclasses, while their fully qualified names remain different. Such class names may be very confusing.\n\n**Example:**\n\n\n      package util;\n      abstract class Iterable<T> implements java.lang.Iterable<T> {}\n\nA quick-fix that renames such classes is available only in the editor.\n\nInspection ID: ClassNameSameAsAncestorName"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ClassNameSameAsAncestorName",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Naming conventions/Class",
                      "index": 60,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantMethodOverride",
                "shortDescription": {
                  "text": "Method is identical to its super method"
                },
                "fullDescription": {
                  "text": "Reports methods that are identical to their super methods. Such methods have the same signature as their super method and either have an identical body or only their body consists only of a call to the super method. These methods are redundant and can be removed. Use the first checkbox below to run the inspection for the methods that override library methods. Checking library methods may slow down the inspection. Use the second checkbox below to ignore methods that only delegate calls to their super methods. Inspection ID: RedundantMethodOverride",
                  "markdown": "Reports methods that are identical to their super methods. Such methods have the same signature as their super method and either have an identical body or only their body consists only of a call to the super method. These methods are redundant and can be removed.\n\n\nUse the first checkbox below to run the inspection for the methods that override library methods.\nChecking library methods may slow down the inspection.\n\n\nUse the second checkbox below to ignore methods that only delegate calls to their super methods.\n\nInspection ID: RedundantMethodOverride"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RedundantMethodOverride",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Inheritance issues",
                      "index": 121,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ContinueStatementWithLabel",
                "shortDescription": {
                  "text": "'continue' statement with label"
                },
                "fullDescription": {
                  "text": "Reports 'continue' statements with labels. Labeled 'continue' statements complicate refactoring and can be confusing. Example: 'void handle(List<String> strs) {\n    outer:\n    for (String s: strs) {\n      for (char ch : s.toCharArray()) {\n        if ('s' == ch) continue outer;\n        handleChar(ch);\n      }\n    }\n  }' Inspection ID: ContinueStatementWithLabel",
                  "markdown": "Reports `continue` statements with labels.\n\nLabeled `continue` statements complicate refactoring and can be confusing.\n\nExample:\n\n\n      void handle(List<String> strs) {\n        outer:\n        for (String s: strs) {\n          for (char ch : s.toCharArray()) {\n            if ('s' == ch) continue outer;\n            handleChar(ch);\n          }\n        }\n      }\n\nInspection ID: ContinueStatementWithLabel"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ContinueStatementWithLabel",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Control flow issues",
                      "index": 24,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SimplifiableBooleanExpression",
                "shortDescription": {
                  "text": "Simplifiable boolean expression"
                },
                "fullDescription": {
                  "text": "Reports boolean expressions that can be simplified. Example: 'void f(boolean foo, boolean bar) {\n    boolean b = !(foo ^ bar);\n  }' After the quick-fix is applied: 'void f(boolean foo, boolean bar) {\n    boolean b = foo == bar;\n  }' Example: 'void f(boolean foo, boolean bar) {\n    boolean b = (foo && bar) || !foo;\n  }' After the quick-fix is applied: 'void f(boolean foo, boolean bar) {\n    boolean b = !foo || bar;\n  }' Inspection ID: SimplifiableBooleanExpression",
                  "markdown": "Reports boolean expressions that can be simplified.\n\nExample:\n\n\n      void f(boolean foo, boolean bar) {\n        boolean b = !(foo ^ bar);\n      }\n\nAfter the quick-fix is applied:\n\n\n      void f(boolean foo, boolean bar) {\n        boolean b = foo == bar;\n      }\n\nExample:\n\n\n      void f(boolean foo, boolean bar) {\n        boolean b = (foo && bar) || !foo;\n      }\n      \nAfter the quick-fix is applied:\n\n\n      void f(boolean foo, boolean bar) {\n        boolean b = !foo || bar;\n      }\n      \nInspection ID: SimplifiableBooleanExpression"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SimplifiableBooleanExpression",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Control flow issues",
                      "index": 24,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JavaExistingMethodCanBeUsed",
                "shortDescription": {
                  "text": "Copy of existing static method body"
                },
                "fullDescription": {
                  "text": "Reports fragments of Java code which are identical to the existing static methods suggesting to reuse these static methods. Reusing existing methods makes code shorter and more readable. Example: 'static List<String> readFileAndTrim(Path path) throws IOException {\n    List<String> lines = Files.readAllLines(path);\n    return lines.stream().map(String::trim).toList();\n  }\n  \n  static List<String> readFileAndTrim(String path) throws IOException {\n    Path p = Path.of(path);\n    List<String> lines = Files.readAllLines(p);\n    return lines.stream().map(String::trim).toList();\n  }' Here, the second method is quite similar to the first one, and the first one can be reused in its implementation. After the quick-fix is applied, the result will look like this: 'static List<String> readFileAndTrim(Path path) throws IOException {\n    List<String> lines = Files.readAllLines(path);\n    return lines.stream().map(String::trim).toList();\n  }\n\n  static List<String> readFileAndTrim(String path) throws IOException {\n    Path p = Path.of(path);\n    return readFileAndTrim(p);\n  }' Inspection ID: JavaExistingMethodCanBeUsed New in 2024.1",
                  "markdown": "Reports fragments of Java code which are identical to the existing static methods suggesting to reuse these static methods. Reusing existing methods makes code shorter and more readable.\n\nExample:\n\n\n      static List<String> readFileAndTrim(Path path) throws IOException {\n        List<String> lines = Files.readAllLines(path);\n        return lines.stream().map(String::trim).toList();\n      }\n      \n      static List<String> readFileAndTrim(String path) throws IOException {\n        Path p = Path.of(path);\n        List<String> lines = Files.readAllLines(p);\n        return lines.stream().map(String::trim).toList();\n      }\n\nHere, the second method is quite similar to the first one, and the first one can be reused in its implementation. After the quick-fix is applied, the result will look like this:\n\n\n      static List<String> readFileAndTrim(Path path) throws IOException {\n        List<String> lines = Files.readAllLines(path);\n        return lines.stream().map(String::trim).toList();\n      }\n\n      static List<String> readFileAndTrim(String path) throws IOException {\n        Path p = Path.of(path);\n        return readFileAndTrim(p);\n      }\n\nInspection ID: JavaExistingMethodCanBeUsed\n\nNew in 2024.1"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JavaExistingMethodCanBeUsed",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Verbose or redundant code constructs",
                      "index": 37,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SignalWithoutCorrespondingAwait",
                "shortDescription": {
                  "text": "'signal()' without corresponding 'await()'"
                },
                "fullDescription": {
                  "text": "Reports calls to 'Condition.signal()' or 'Condition.signalAll()' for which no call to a corresponding 'Condition.await()' can be found. Only calls that target fields of the current class are reported by this inspection. Example: 'class Queue {\n    private final Condition isEmpty = ...;\n\n    void add(Object elem) {\n      // ...\n      isEmpty.signal(); // warning: Call to 'signal()' without corresponding 'await()'\n      // ...\n    }\n\n    void remove(Object elem) throws InterruptedException {\n      // ...\n      //      isEmpty.await();\n      // ...\n    }\n  }' Inspection ID: SignalWithoutCorrespondingAwait",
                  "markdown": "Reports calls to `Condition.signal()` or `Condition.signalAll()` for which no call to a corresponding `Condition.await()` can be found.\n\nOnly calls that target fields of the current class are reported by this inspection.\n\n**Example:**\n\n\n      class Queue {\n        private final Condition isEmpty = ...;\n\n        void add(Object elem) {\n          // ...\n          isEmpty.signal(); // warning: Call to 'signal()' without corresponding 'await()'\n          // ...\n        }\n\n        void remove(Object elem) throws InterruptedException {\n          // ...\n          //      isEmpty.await();\n          // ...\n        }\n      }\n\nInspection ID: SignalWithoutCorrespondingAwait"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SignalWithoutCorrespondingAwait",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Threading issues",
                      "index": 23,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FoldExpressionIntoStream",
                "shortDescription": {
                  "text": "Expression can be folded into Stream chain"
                },
                "fullDescription": {
                  "text": "Reports expressions with a repeating pattern that could be replaced with Stream API or a 'String.join()' call. Example: 'boolean allStartWith(String a, String b, String c, String d, String prefix) {\n    return a.startsWith(prefix) && b.startsWith(prefix) && c.startsWith(prefix) && d.startsWith(prefix);\n  }' After the quick-fix is applied: 'boolean foo(String a, String b, String c, String d, String prefix) {\n    return Stream.of(a, b, c, d).allMatch(s -> s.startsWith(prefix));\n  }' Example: 'String joinAll(String a, String b, String c, String d) {\n    return a + \",\" + b + \",\" + c + \",\" + d;\n  }' After the quick-fix is applied: 'String joinAll(String a, String b, String c, String d) {\n    return String.join(\",\", a, b, c, d);\n  }' This inspection depends on the Java feature 'Stream and Optional API', which is available since Java 8. Inspection ID: FoldExpressionIntoStream New in 2018.2",
                  "markdown": "Reports expressions with a repeating pattern that could be replaced with *Stream API* or a `String.join()` call.\n\nExample:\n\n\n      boolean allStartWith(String a, String b, String c, String d, String prefix) {\n        return a.startsWith(prefix) && b.startsWith(prefix) && c.startsWith(prefix) && d.startsWith(prefix);\n      }\n\nAfter the quick-fix is applied:\n\n\n      boolean foo(String a, String b, String c, String d, String prefix) {\n        return Stream.of(a, b, c, d).allMatch(s -> s.startsWith(prefix));\n      }\n\nExample:\n\n\n      String joinAll(String a, String b, String c, String d) {\n        return a + \",\" + b + \",\" + c + \",\" + d;\n      }\n\nAfter the quick-fix is applied:\n\n\n      String joinAll(String a, String b, String c, String d) {\n        return String.join(\",\", a, b, c, d);\n      }\n\nThis inspection depends on the Java feature 'Stream and Optional API', which is available since Java 8.\n\nInspection ID: FoldExpressionIntoStream\n\nNew in 2018.2"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "FoldExpressionIntoStream",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level migration aids/Java 8",
                      "index": 94,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SerializableDeserializableClassInSecureContext",
                "shortDescription": {
                  "text": "Serializable class in secure context"
                },
                "fullDescription": {
                  "text": "Reports classes that may be serialized or deserialized. A class may be serialized if it supports the 'Serializable' interface, and its 'readObject()' and 'writeObject()' methods are not defined to always throw an exception. Serializable classes may be dangerous in code intended for secure use. Example: 'class DeserializableClass implements Serializable { // the class doesn't contain 'writeObject()' method throwing an exception\n    private int sensitive = 736326;\n\n    private void readObject(ObjectInputStream in) {\n        throw new Error();\n    }\n}' After the quick-fix is applied: 'class DeserializableClass implements Serializable {\n    private int sensitive = 736326;\n\n    private void readObject(ObjectInputStream in) {\n        throw new Error();\n    }\n\n    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {\n        throw new java.io.NotSerializableException(\"DeserializableClass\");\n    }\n  }' Use the following options to configure the inspection: List classes whose inheritors should not be reported by this inspection. This is meant for classes that inherit 'Serializable' from a superclass but are not intended for serialization. Note that it still may be more secure to add 'readObject()' and 'writeObject()' methods which always throw an exception, instead of ignoring those classes. Whether to ignore serializable anonymous classes. Inspection ID: SerializableDeserializableClassInSecureContext",
                  "markdown": "Reports classes that may be serialized or deserialized.\n\n\nA class may be serialized if it supports the `Serializable` interface,\nand its `readObject()` and `writeObject()` methods are not defined to always\nthrow an exception. Serializable classes may be dangerous in code intended for secure use.\n\n**Example:**\n\n\n      class DeserializableClass implements Serializable { // the class doesn't contain 'writeObject()' method throwing an exception\n        private int sensitive = 736326;\n\n        private void readObject(ObjectInputStream in) {\n            throw new Error();\n        }\n    }\n\nAfter the quick-fix is applied:\n\n\n      class DeserializableClass implements Serializable {\n        private int sensitive = 736326;\n\n        private void readObject(ObjectInputStream in) {\n            throw new Error();\n        }\n\n        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {\n            throw new java.io.NotSerializableException(\"DeserializableClass\");\n        }\n      }\n\n\nUse the following options to configure the inspection:\n\n* List classes whose inheritors should not be reported by this inspection. This is meant for classes that inherit `Serializable` from a superclass but are not intended for serialization. Note that it still may be more secure to add `readObject()` and `writeObject()` methods which always throw an exception, instead of ignoring those classes.\n* Whether to ignore serializable anonymous classes.\n\nInspection ID: SerializableDeserializableClassInSecureContext"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SerializableDeserializableClassInSecureContext",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Security",
                      "index": 31,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JavaModuleNaming",
                "shortDescription": {
                  "text": "Java module name violates convention"
                },
                "fullDescription": {
                  "text": "Reports module names in 'module-info.java' that violate the Java Platform Module System recommendation to avoid encoding version information in module names by ending the name with one or more digits. Example: 'module foo.bar2 {}' After the quick-fix is applied: 'module foo.bar {}' Inspection ID: JavaModuleNaming",
                  "markdown": "Reports module names in `module-info.java` that violate the Java Platform Module System [recommendation](http://mail.openjdk.org/pipermail/jpms-spec-experts/2017-March/000659.html) to avoid encoding version information in module names by ending the name with one or more digits.\n\n**Example:**\n\n\n     module foo.bar2 {}\n\nAfter the quick-fix is applied:\n\n\n      module foo.bar {}\n\nInspection ID: JavaModuleNaming"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "module",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Naming conventions",
                      "index": 59,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnaryPlus",
                "shortDescription": {
                  "text": "Unary plus"
                },
                "fullDescription": {
                  "text": "Reports usages of the '+' unary operator. The unary plus is usually a null operation, and its presence might represent a coding error. For example, in a combination with the increment operator (like in '+++') or with the equal operator (like in '=+'). Example: 'void unaryPlus(int i) {\n    int x = + +i;\n  }' The following quick fixes are suggested: Remove '+' operators before the 'i' variable: 'void unaryPlus(int i) {\n    int x = i;\n  }' Replace '+' operators with the prefix increment operator: 'void unaryPlus(int i) {\n    int x = ++i;\n  }' Use the checkbox below to report unary pluses that are used together with a binary or another unary expression. It means the inspection will not report situations when a unary plus expression is used in array initializer expressions or as a method argument. Inspection ID: UnaryPlus",
                  "markdown": "Reports usages of the `+` unary operator. The unary plus is usually a null operation, and its presence might represent a coding error. For example, in a combination with the increment operator (like in `+++`) or with the equal operator (like in `=+`).\n\n**Example:**\n\n\n      void unaryPlus(int i) {\n        int x = + +i;\n      }\n\nThe following quick fixes are suggested:\n\n* Remove `+` operators before the `i` variable:\n\n\n        void unaryPlus(int i) {\n          int x = i;\n        }\n\n* Replace `+` operators with the prefix increment operator:\n\n\n        void unaryPlus(int i) {\n          int x = ++i;\n        }\n\n\nUse the checkbox below to report unary pluses that are used together with a binary or another unary expression.\nIt means the inspection will not report situations when a unary plus expression is used in array\ninitializer expressions or as a method argument.\n\nInspection ID: UnaryPlus"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnaryPlus",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Numeric issues",
                      "index": 25,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConstructorCount",
                "shortDescription": {
                  "text": "Class with too many constructors"
                },
                "fullDescription": {
                  "text": "Reports classes whose number of constructors exceeds the specified maximum. Classes with too many constructors are prone to initialization errors, and often modeling such a class as multiple subclasses is preferable. Configure the inspection: Use the Constructor count limit field to specify the maximum allowed number of constructors in a class. Use the Ignore deprecated constructors option to avoid adding deprecated constructors to the total count. Inspection ID: ConstructorCount",
                  "markdown": "Reports classes whose number of constructors exceeds the specified maximum.\n\nClasses with too many constructors are prone to initialization errors, and often modeling such a class as multiple subclasses is preferable.\n\nConfigure the inspection:\n\n* Use the **Constructor count limit** field to specify the maximum allowed number of constructors in a class.\n* Use the **Ignore deprecated constructors** option to avoid adding deprecated constructors to the total count.\n\nInspection ID: ConstructorCount"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ClassWithTooManyConstructors",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Class metrics",
                      "index": 96,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IncrementDecrementUsedAsExpression",
                "shortDescription": {
                  "text": "Result of '++' or '--' used"
                },
                "fullDescription": {
                  "text": "Reports increment or decrement expressions that are nested inside other expressions. Such expressions may be confusing and violate the general design principle, which states that any construct should do precisely one thing. The quick-fix extracts the increment or decrement operation to a separate expression statement. Example: 'int i = 10;\n  while (i-- > 0) {\n    System.out.println(i);\n  }' After the quick-fix is applied: 'int i = 10;\n  while (i > 0) {\n    i--;\n    System.out.println(i);\n  }\n  i--;' Inspection ID: IncrementDecrementUsedAsExpression",
                  "markdown": "Reports increment or decrement expressions that are nested inside other expressions. Such expressions may be confusing and violate the general design principle, which states that any construct should do precisely one thing.\n\nThe quick-fix extracts the increment or decrement operation to a separate expression statement.\n\n**Example:**\n\n\n      int i = 10;\n      while (i-- > 0) {\n        System.out.println(i);\n      }\n\nAfter the quick-fix is applied:\n\n\n      int i = 10;\n      while (i > 0) {\n        i--;\n        System.out.println(i);\n      }\n      i--;\n\nInspection ID: IncrementDecrementUsedAsExpression"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ValueOfIncrementOrDecrementUsed",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Assignment issues",
                      "index": 64,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DisjointPackage",
                "shortDescription": {
                  "text": "Package with disjoint dependency graph"
                },
                "fullDescription": {
                  "text": "Reports packages whose classes can be separated into mutually independent subsets. Such disjoint packages indicate ad-hoc packaging or a lack of conceptual cohesion. Available only from Code | Inspect Code or Code | Analyze Code | Run Inspection by Name and isn't reported in the editor. Inspection ID: DisjointPackage",
                  "markdown": "Reports packages whose classes can be separated into mutually independent subsets.\n\nSuch disjoint packages indicate ad-hoc packaging or a lack of conceptual cohesion.\n\nAvailable only from **Code \\| Inspect Code** or\n**Code \\| Analyze Code \\| Run Inspection by Name** and isn't reported in the editor.\n\nInspection ID: DisjointPackage"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "DisjointPackage",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Packaging issues",
                      "index": 36,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MethodOverloadsParentMethod",
                "shortDescription": {
                  "text": "Possibly unintended overload of method from superclass"
                },
                "fullDescription": {
                  "text": "Reports instance methods with the same name and the same number of parameters as a method in a superclass, but where at least one of the parameters is of a different incompatible type. In this case, the method in a subclass will be overloading the method from the superclass instead of overriding it. If it is unintended, it may result in latent bugs. Example: 'public class Foo {\n    void foo(int x) {}\n  }\n\n  public class Bar extends Foo {\n    void foo(Number x) {} // Method 'foo()' overloads a compatible method of a superclass,\n                          // when overriding might have been intended\n  }' Use the option to choose whether the inspection should also report cases where parameter types are not compatible. Inspection ID: MethodOverloadsParentMethod",
                  "markdown": "Reports instance methods with the same name and the same number of parameters as a method in a superclass, but where at least one of the parameters is of a different incompatible type.\n\n\nIn this case, the method in a subclass will be overloading the method from the superclass\ninstead of overriding it. If it is unintended, it may result in latent bugs.\n\n**Example:**\n\n\n      public class Foo {\n        void foo(int x) {}\n      }\n\n      public class Bar extends Foo {\n        void foo(Number x) {} // Method 'foo()' overloads a compatible method of a superclass,\n                              // when overriding might have been intended\n      }\n\n\nUse the option to choose whether the inspection should also report cases where parameter types are not compatible.\n\n\nInspection ID: MethodOverloadsParentMethod"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MethodOverloadsMethodOfSuperclass",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Visibility",
                      "index": 73,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MethodMayBeSynchronized",
                "shortDescription": {
                  "text": "Method with single 'synchronized' block can be replaced with 'synchronized' method"
                },
                "fullDescription": {
                  "text": "Reports methods whose body contains a single 'synchronized' statement. A lock expression for this 'synchronized' statement must be equal to 'this' for instance methods or '[ClassName].class' for static methods. To improve readability of such methods, you can remove the 'synchronized' wrapper and mark the method as 'synchronized'. Example: 'public int generateInt(int x) {\n    synchronized (this) {\n      return 1;\n    }\n  }' After the quick-fix is applied: 'public synchronized int generateInt(int x) {\n    return 1;\n  }' Inspection ID: MethodMayBeSynchronized",
                  "markdown": "Reports methods whose body contains a single `synchronized` statement. A lock expression for this `synchronized` statement must be equal to `this` for instance methods or `[ClassName].class` for static methods.\n\n\nTo improve readability of such methods,\nyou can remove the `synchronized` wrapper and mark the method as `synchronized`.\n\n**Example:**\n\n\n      public int generateInt(int x) {\n        synchronized (this) {\n          return 1;\n        }\n      }\n\nAfter the quick-fix is applied:\n\n\n      public synchronized int generateInt(int x) {\n        return 1;\n      }\n\nInspection ID: MethodMayBeSynchronized"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MethodMayBeSynchronized",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Threading issues",
                      "index": 23,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UpperCaseFieldNameNotConstant",
                "shortDescription": {
                  "text": "Non-constant field with upper-case name"
                },
                "fullDescription": {
                  "text": "Reports non-'static' non-'final' fields whose names are all in upper case. Such fields may cause confusion by breaking a common naming convention and are often used by mistake. Example: 'public static int THE_ANSWER = 42; //a warning here: final modifier is missing' A quick-fix that renames such fields is available only in the editor. Inspection ID: UpperCaseFieldNameNotConstant",
                  "markdown": "Reports non-`static` non-`final` fields whose names are all in upper case.\n\nSuch fields may cause confusion by breaking a common naming convention and\nare often used by mistake.\n\n**Example:**\n\n\n      public static int THE_ANSWER = 42; //a warning here: final modifier is missing\n\nA quick-fix that renames such fields is available only in the editor.\n\nInspection ID: UpperCaseFieldNameNotConstant"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NonConstantFieldWithUpperCaseName",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Naming conventions",
                      "index": 59,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Convert2streamapi",
                "shortDescription": {
                  "text": "Loop can be collapsed with Stream API"
                },
                "fullDescription": {
                  "text": "Reports loops which can be replaced with stream API calls using lambda expressions. Such a replacement changes the style from imperative to more functional and makes the code more compact. Example: 'boolean check(List<String> data) {\n    for (String e : data) {\n      String trimmed = e.trim();\n      if (!trimmed.startsWith(\"xyz\")) {\n        return false;\n      }\n    }\n    return true;\n  }' After the quick-fix is applied: 'boolean check(List<String> data) {\n    return data.stream().map(String::trim).allMatch(trimmed -> trimmed.startsWith(\"xyz\"));\n  }' This inspection depends on the Java feature 'Stream and Optional API', which is available since Java 8. Inspection ID: Convert2streamapi",
                  "markdown": "Reports loops which can be replaced with stream API calls using lambda expressions.\n\nSuch a replacement changes the style from imperative to more functional and makes the code more compact.\n\nExample:\n\n\n      boolean check(List<String> data) {\n        for (String e : data) {\n          String trimmed = e.trim();\n          if (!trimmed.startsWith(\"xyz\")) {\n            return false;\n          }\n        }\n        return true;\n      }\n\nAfter the quick-fix is applied:\n\n\n      boolean check(List<String> data) {\n        return data.stream().map(String::trim).allMatch(trimmed -> trimmed.startsWith(\"xyz\"));\n      }\n\nThis inspection depends on the Java feature 'Stream and Optional API', which is available since Java 8.\n\nInspection ID: Convert2streamapi"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "Convert2streamapi",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level migration aids/Java 8",
                      "index": 94,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SerialPersistentFieldsWithWrongSignature",
                "shortDescription": {
                  "text": "'serialPersistentFields' field not declared 'private static final ObjectStreamField[]'"
                },
                "fullDescription": {
                  "text": "Reports 'Serializable' classes whose 'serialPersistentFields' field is not declared as 'private static final ObjectStreamField[]'. If a 'serialPersistentFields' field is not declared with those modifiers, the serialization behavior will be as if the field was not declared at all. Example: 'class List implements Serializable {\n    private List next;\n\n    ObjectStreamField[] serialPersistentFields = {new ObjectStreamField(\"next\", List.class)};\n\n  }' Inspection ID: SerialPersistentFieldsWithWrongSignature",
                  "markdown": "Reports `Serializable` classes whose `serialPersistentFields` field is not declared as `private static final ObjectStreamField[]`.\n\n\nIf a `serialPersistentFields` field is not declared with those modifiers,\nthe serialization behavior will be as if the field was not declared at all.\n\n**Example:**\n\n\n      class List implements Serializable {\n        private List next;\n\n        ObjectStreamField[] serialPersistentFields = {new ObjectStreamField(\"next\", List.class)};\n\n      }\n\nInspection ID: SerialPersistentFieldsWithWrongSignature"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SerialPersistentFieldsWithWrongSignature",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Serialization issues",
                      "index": 18,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ComparatorResultComparison",
                "shortDescription": {
                  "text": "Suspicious usage of compare method"
                },
                "fullDescription": {
                  "text": "Reports comparisons of the result of 'Comparator.compare()' or 'Comparable.compareTo()' calls with non-zero constants. By contract, these methods can return any integer (not just -1, 0 or 1), so comparing against particular numbers is bad practice. Some widely used comparison methods (e.g. 'String.compareTo()') actually return values outside the [-1..1] range, and such a comparison may cause incorrect program behavior. Example: 'void validate(String s1, String s2) {\n    // Comparing to 1 is incorrect\n    if (s1.compareTo(s2) == 1) {\n      throw new IllegalArgumentException(\"Incorrect order\");\n    }\n  }' After the quick-fix is applied: 'void validate(String s1, String s2) {\n    if (s1.compareTo(s2) > 0) {\n      throw new IllegalArgumentException(\"Incorrect order\");\n    }\n  }' Inspection ID: ComparatorResultComparison New in 2017.2",
                  "markdown": "Reports comparisons of the result of `Comparator.compare()` or `Comparable.compareTo()` calls with non-zero constants. By contract, these methods can return any integer (not just -1, 0 or 1), so comparing against particular numbers is bad practice. Some widely used comparison methods (e.g. `String.compareTo()`) actually return values outside the \\[-1..1\\] range, and such a comparison may cause incorrect program behavior.\n\nExample:\n\n\n      void validate(String s1, String s2) {\n        // Comparing to 1 is incorrect\n        if (s1.compareTo(s2) == 1) {\n          throw new IllegalArgumentException(\"Incorrect order\");\n        }\n      }\n\nAfter the quick-fix is applied:\n\n\n      void validate(String s1, String s2) {\n        if (s1.compareTo(s2) > 0) {\n          throw new IllegalArgumentException(\"Incorrect order\");\n        }\n      }\n\nInspection ID: ComparatorResultComparison\n\nNew in 2017.2"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ComparatorResultComparison",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ListIndexOfReplaceableByContains",
                "shortDescription": {
                  "text": "'List.indexOf()' expression can be replaced with 'contains()'"
                },
                "fullDescription": {
                  "text": "Reports any 'List.indexOf()' expressions that can be replaced with the 'List.contains()' method. Example: 'boolean hasEmptyString(List<String> list) {\n    // Warning: can be simplified\n    return list.indexOf(\"\") >= 0;\n  }' The provided quick-fix replaces the 'indexOf' call with the 'contains' call: 'boolean hasEmptyString(List<String> list) {\n    // Quick-fix is applied\n    return list.contains(\"\");\n  }' Inspection ID: ListIndexOfReplaceableByContains",
                  "markdown": "Reports any `List.indexOf()` expressions that can be replaced with the `List.contains()` method.\n\nExample:\n\n\n      boolean hasEmptyString(List<String> list) {\n        // Warning: can be simplified\n        return list.indexOf(\"\") >= 0;\n      }\n\nThe provided quick-fix replaces the `indexOf` call with the `contains` call:\n\n\n      boolean hasEmptyString(List<String> list) {\n        // Quick-fix is applied\n        return list.contains(\"\");\n      }\n\nInspection ID: ListIndexOfReplaceableByContains"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ListIndexOfReplaceableByContains",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NonStrictComparisonCanBeEquality",
                "shortDescription": {
                  "text": "Non-strict inequality '>=' or '<=' can be replaced with '=='"
                },
                "fullDescription": {
                  "text": "Reports inequality conditions that, according to data flow analysis, can be satisfied only for a single operand value. Such conditions could be replaced with equality conditions to make the code clearer. Example: 'if (x >= 10) {\n    ...\n    if (x <= 10) { // can be replaced with 'x == 10'\n    }\n  }' Inspection ID: NonStrictComparisonCanBeEquality New in 2022.2",
                  "markdown": "Reports inequality conditions that, according to data flow analysis, can be satisfied only for a single operand value. Such conditions could be replaced with equality conditions to make the code clearer.\n\nExample:\n\n\n      if (x >= 10) {\n        ...\n        if (x <= 10) { // can be replaced with 'x == 10'\n        }\n      }\n\nInspection ID: NonStrictComparisonCanBeEquality\n\nNew in 2022.2"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "NonStrictComparisonCanBeEquality",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Verbose or redundant code constructs",
                      "index": 37,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryParentheses",
                "shortDescription": {
                  "text": "Unnecessary parentheses"
                },
                "fullDescription": {
                  "text": "Reports any instance of unnecessary parentheses. Parentheses are considered unnecessary if the evaluation order of an expression remains unchanged after you remove the parentheses. Example: 'int n = 3 + (9 * 8);' After quick-fix is applied: 'int n = 3 + 9 * 8;' Configure the inspection: Use the Ignore clarifying parentheses option to ignore parentheses that help clarify a binary expression. Parentheses are clarifying if the parenthesized expression is an 'instanceof' expression that is a part of a larger expression or has a different operator than the parent expression. Use the Ignore parentheses around the condition of conditional expressions option to ignore any parentheses around the condition of conditional expressions. Some coding standards specify that all such conditions must be surrounded by parentheses. Use the Ignore parentheses around single no formal type lambda parameter option to ignore parentheses around a single lambda parameter within a lambda expression. Inspection ID: UnnecessaryParentheses",
                  "markdown": "Reports any instance of unnecessary parentheses.\n\nParentheses are considered unnecessary if the evaluation order of an expression remains\nunchanged after you remove the parentheses.\n\nExample:\n\n\n      int n = 3 + (9 * 8);\n\nAfter quick-fix is applied:\n\n\n      int n = 3 + 9 * 8;\n\nConfigure the inspection:\n\n* Use the **Ignore clarifying parentheses** option to ignore parentheses that help clarify a binary expression. Parentheses are clarifying if the parenthesized expression is an `instanceof` expression that is a part of a larger expression or has a different operator than the parent expression.\n* Use the **Ignore parentheses around the condition of conditional expressions** option to ignore any parentheses around the condition of conditional expressions. Some coding standards specify that all such conditions must be surrounded by parentheses.\n* Use the **Ignore parentheses around single no formal type lambda parameter** option to ignore parentheses around a single lambda parameter within a lambda expression.\n\nInspection ID: UnnecessaryParentheses"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "UnnecessaryParentheses",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SuspiciousToArrayCall",
                "shortDescription": {
                  "text": "Suspicious 'Collection.toArray()' call"
                },
                "fullDescription": {
                  "text": "Reports suspicious calls to 'Collection.toArray()'. The following types of calls are considered suspicious: when the type of the array argument is not the same as the array type to which the result is casted. when the type of the array argument does not match the type parameter in the collection declaration. Example: 'void m1(List list) {\n  Number[] ns = (Number[]) list.toArray(new String[0]);\n}\n\nvoid m2(List<Number> list) {\n  Number[] ns = list.toArray(new String[0]);\n}' Inspection ID: SuspiciousToArrayCall",
                  "markdown": "Reports suspicious calls to `Collection.toArray()`.\n\nThe following types of calls are considered suspicious:\n\n* when the type of the array argument is not the same as the array type to which the result is casted.\n* when the type of the array argument does not match the type parameter in the collection declaration.\n\n**Example:**\n\n\n    void m1(List list) {\n      Number[] ns = (Number[]) list.toArray(new String[0]);\n    }\n\n    void m2(List<Number> list) {\n      Number[] ns = list.toArray(new String[0]);\n    }\n\nInspection ID: SuspiciousToArrayCall"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SuspiciousToArrayCall",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StringToUpperWithoutLocale",
                "shortDescription": {
                  "text": "Call to 'String.toUpperCase()' or 'toLowerCase()' without locale"
                },
                "fullDescription": {
                  "text": "Reports 'toUpperCase()' or 'toLowerCase()' calls on 'String' objects that do not specify a 'java.util.Locale'. In these cases the default system locale is used, which can cause problems in an internationalized environment. For example the code '\"i\".toUpperCase().equals(\"I\")' returns 'false' in the Turkish and Azerbaijani locales, where the dotted and dotless 'i' are separate letters. Calling 'toUpperCase()' on an English string containing an 'i', when running in a Turkish locale, will return incorrect results. Alternatively, when dealing with strings that should be treated as locale-independent, like HTML tags, this can lead to errors. Inspection ID: StringToUpperWithoutLocale",
                  "markdown": "Reports `toUpperCase()` or `toLowerCase()` calls on `String` objects that do not specify a `java.util.Locale`. In these cases the default system locale is used, which can cause problems in an internationalized environment.\n\n\nFor example the code `\"i\".toUpperCase().equals(\"I\")` returns `false` in the Turkish and Azerbaijani locales, where\nthe dotted and dotless 'i' are separate letters. Calling `toUpperCase()` on an English string containing an 'i', when running\nin a Turkish locale, will return incorrect results. Alternatively, when dealing with strings that should be treated as locale-independent,\nlike HTML tags, this can lead to errors.\n\nInspection ID: StringToUpperWithoutLocale"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "StringToUpperCaseOrToLowerCaseWithoutLocale",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Internationalization",
                      "index": 3,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ExplicitToImplicitClassMigration",
                "shortDescription": {
                  "text": "Explicit class declaration can be converted into a compact source file"
                },
                "fullDescription": {
                  "text": "Reports ordinary classes, which can be converted into compact source files Example: 'public class Sample {\n      public static void main(String[] args) {\n          System.out.println(\"Hello, world!\");\n      }\n  }' After the quick-fix is applied: 'void main() {\n      IO.println(\"Hello, world!\");\n  }' Configure the inspection: Select Replace 'System.out.print()' and 'System.out.println()' with methods from 'java.lang.IO' class to convert these calls to IO methods. This inspection depends on the Java feature 'Compact source files', which is available since Java 21-preview. Inspection ID: ExplicitToImplicitClassMigration New in 2024.1",
                  "markdown": "Reports ordinary classes, which can be converted into compact source files\n\n**Example:**\n\n\n      public class Sample {\n          public static void main(String[] args) {\n              System.out.println(\"Hello, world!\");\n          }\n      }\n\nAfter the quick-fix is applied:\n\n\n      void main() {\n          IO.println(\"Hello, world!\");\n      }\n\nConfigure the inspection:\n\n* Select **Replace 'System.out.print()' and 'System.out.println()' with methods from 'java.lang.IO' class** to convert these calls to IO methods.\n\nThis inspection depends on the Java feature 'Compact source files', which is available since Java 21-preview.\n\nInspection ID: ExplicitToImplicitClassMigration\n\nNew in 2024.1"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ExplicitToImplicitClassMigration",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level migration aids/Java 25",
                      "index": 138,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NestedMethodCall",
                "shortDescription": {
                  "text": "Nested method call"
                },
                "fullDescription": {
                  "text": "Reports method calls used as parameters to another method call. The quick-fix introduces a variable to make the code simpler and easier to debug. Example: 'public int y() { return 1; }\n  public int f(int x) { return 2 * x; }\n\n  public void foo() {\n      int x = f(y());\n  }' After the quick-fix is applied: 'public int y() { return 1; }\n  public int f(int x) { return 2 * x; }\n\n  public void foo() {\n      int y = y();\n      int x = f(y);\n  }' Use the inspection options to toggle the reporting of: method calls in field initializers calls to static methods calls to simple getters Inspection ID: NestedMethodCall",
                  "markdown": "Reports method calls used as parameters to another method call.\n\nThe quick-fix introduces a variable to make the code simpler and easier to debug.\n\n**Example:**\n\n\n      public int y() { return 1; }\n      public int f(int x) { return 2 * x; }\n\n      public void foo() {\n          int x = f(y());\n      }\n\nAfter the quick-fix is applied:\n\n\n      public int y() { return 1; }\n      public int f(int x) { return 2 * x; }\n\n      public void foo() {\n          int y = y();\n          int x = f(y);\n      }\n\n\nUse the inspection options to toggle the reporting of:\n\n* method calls in field initializers\n* calls to static methods\n* calls to simple getters\n\nInspection ID: NestedMethodCall"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NestedMethodCall",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ClassWithTooManyTransitiveDependents",
                "shortDescription": {
                  "text": "Class with too many transitive dependents"
                },
                "fullDescription": {
                  "text": "Reports a class on which too many other classes are directly or indirectly dependent. Any modification to such a class may require changing many other classes, which may be expensive. Only top-level classes are reported. Use the Maximum number of transitive dependents field to specify the maximum allowed number of direct or indirect dependents for a class. Available only from Code | Inspect Code or Code | Analyze Code | Run Inspection by Name and isn't reported in the editor. Inspection ID: ClassWithTooManyTransitiveDependents",
                  "markdown": "Reports a class on which too many other classes are directly or indirectly dependent.\n\nAny modification to such a class may require changing many other classes, which may be expensive.\n\nOnly top-level classes are reported.\n\nUse the **Maximum number of transitive dependents** field to specify the maximum allowed number of direct or indirect dependents\nfor a class.\n\nAvailable only from **Code \\| Inspect Code** or\n**Code \\| Analyze Code \\| Run Inspection by Name** and isn't reported in the editor.\n\nInspection ID: ClassWithTooManyTransitiveDependents"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ClassWithTooManyTransitiveDependents",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Dependency issues",
                      "index": 118,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CompareToUsesNonFinalVariable",
                "shortDescription": {
                  "text": "Non-final field referenced in 'compareTo()'"
                },
                "fullDescription": {
                  "text": "Reports access to a non-'final' field inside a 'compareTo()' implementation. Such access may result in 'compareTo()' returning different results at different points in the object's lifecycle, which may in turn cause problems when using the standard collections classes, for example 'java.util.TreeSet'. A quick-fix to make the field 'final' is available only when there is no write access to the field, otherwise no fixes are suggested. Example: 'class Foo implements Comparable<Foo>{\n    private int index;\n    Foo(int idx) {\n      index = idx;\n    }\n    @Override\n    public int compareTo(Foo foo) {\n     return Integer.compare(this.index, foo.index);\n    }\n  }' After the quick-fix is applied: 'class Foo implements Comparable<Foo>{\n    private final int index;\n    Foo(int idx) {\n      index = idx;\n    }\n    @Override\n    public int compareTo(Foo foo) {\n      return Integer.compare(this.index, foo.index);\n    }\n  }' Inspection ID: CompareToUsesNonFinalVariable",
                  "markdown": "Reports access to a non-`final` field inside a `compareTo()` implementation.\n\n\nSuch access may result in `compareTo()`\nreturning different results at different points in the object's lifecycle, which may in turn cause problems when\nusing the standard collections classes, for example `java.util.TreeSet`.\n\n\nA quick-fix to make the field `final` is available\nonly when there is no write access to the field, otherwise no fixes are suggested.\n\n**Example:**\n\n\n      class Foo implements Comparable<Foo>{\n        private int index;\n        Foo(int idx) {\n          index = idx;\n        }\n        @Override\n        public int compareTo(Foo foo) {\n         return Integer.compare(this.index, foo.index);\n        }\n      }\n\nAfter the quick-fix is applied:\n\n\n      class Foo implements Comparable<Foo>{\n        private final int index;\n        Foo(int idx) {\n          index = idx;\n        }\n        @Override\n        public int compareTo(Foo foo) {\n          return Integer.compare(this.index, foo.index);\n        }\n      }\n\nInspection ID: CompareToUsesNonFinalVariable"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CompareToUsesNonFinalVariable",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JavacQuirks",
                "shortDescription": {
                  "text": "Javac quirks"
                },
                "fullDescription": {
                  "text": "Reports known Javac issues, performance problems, and incompatibilities. For example, type inference may be slow when it has to process many nested calls. The following code triggers a warning, as the vararg method call has 50+ poly arguments: 'Arrays.asList(\n      Arrays.asList(\"a1\", \"b1\"),\n      Arrays.asList(\"a2\", \"b2\"),\n      ...\n      Arrays.asList(\"a100\", \"b100\"));' The quick-fix adds explicit type arguments, which makes compilation and IDE processing much faster: '//noinspection RedundantTypeArguments\n  Arrays.<List<String>>asList(\n      Arrays.asList(\"a1\", \"b1\"),\n      Arrays.asList(\"a2\", \"b2\"),\n      ...\n      Arrays.asList(\"a100\", \"b100\"));' Inspection ID: JavacQuirks",
                  "markdown": "Reports known Javac issues, performance problems, and incompatibilities. For example, type inference may be slow when it has to process many nested calls.\n\nThe following code triggers a warning, as the vararg method call has 50+ poly arguments:\n\n\n      Arrays.asList(\n          Arrays.asList(\"a1\", \"b1\"),\n          Arrays.asList(\"a2\", \"b2\"),\n          ...\n          Arrays.asList(\"a100\", \"b100\"));\n\nThe quick-fix adds explicit type arguments, which makes compilation and IDE processing much faster:\n\n\n      //noinspection RedundantTypeArguments\n      Arrays.<List<String>>asList(\n          Arrays.asList(\"a1\", \"b1\"),\n          Arrays.asList(\"a2\", \"b2\"),\n          ...\n          Arrays.asList(\"a100\", \"b100\"));\n\nInspection ID: JavacQuirks"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JavacQuirks",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Performance"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Compiler issues",
                      "index": 129,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SwitchStatement",
                "shortDescription": {
                  "text": "'switch' statement"
                },
                "fullDescription": {
                  "text": "Reports 'switch' statements. 'switch' statements often (but not always) indicate a poor object-oriented design. Example: 'switch (i) {\n    // code\n  }' Inspection ID: SwitchStatement",
                  "markdown": "Reports `switch` statements.\n\n`switch` statements often (but not always) indicate a poor object-oriented design.\n\nExample:\n\n\n      switch (i) {\n        // code\n      }\n\nInspection ID: SwitchStatement"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SwitchStatement",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Control flow issues",
                      "index": 24,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StringBufferReplaceableByString",
                "shortDescription": {
                  "text": "'StringBuilder' can be replaced with 'String'"
                },
                "fullDescription": {
                  "text": "Reports usages of 'StringBuffer', 'StringBuilder', or 'StringJoiner' which can be replaced with a single 'String' concatenation. Using 'String' concatenation makes the code shorter and simpler. This inspection only reports when the suggested replacement does not result in significant performance drawback on modern JVMs. In many cases, 'String' concatenation may perform better. Example: 'StringBuilder result = new StringBuilder();\n  result.append(\"i = \");\n  result.append(i);\n  result.append(\";\");\n  return result.toString();' After the quick-fix is applied: 'String result = \"i = \" + i + \";\";\n  return result;' Inspection ID: StringBufferReplaceableByString",
                  "markdown": "Reports usages of `StringBuffer`, `StringBuilder`, or `StringJoiner` which can be replaced with a single `String` concatenation.\n\nUsing `String` concatenation\nmakes the code shorter and simpler.\n\n\nThis inspection only reports when the suggested replacement does not result in significant\nperformance drawback on modern JVMs. In many cases, `String` concatenation may perform better.\n\n**Example:**\n\n\n      StringBuilder result = new StringBuilder();\n      result.append(\"i = \");\n      result.append(i);\n      result.append(\";\");\n      return result.toString();\n\nAfter the quick-fix is applied:\n\n\n      String result = \"i = \" + i + \";\";\n      return result;\n\nInspection ID: StringBufferReplaceableByString"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "StringBufferReplaceableByString",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Verbose or redundant code constructs",
                      "index": 37,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SourceToSinkFlow",
                "shortDescription": {
                  "text": "Non-safe string is passed to safe method"
                },
                "fullDescription": {
                  "text": "Reports cases when a non-safe object is passed to a method with a parameter marked with '@Untainted' annotations, returned from annotated methods or assigned to annotated fields, parameters, or local variables. Kotlin 'set' and 'get' methods for fields are not supported as entry points. A safe object (in the same class) is: a string literal, interface instance, or enum object a call result of a method that is marked as '@Untainted' a private field, which is assigned only with a string literal and has a safe initializer a final field, which has a safe initializer local variable or parameter that are marked as '@Untainted' and are not assigned from non-safe objects This field, local variable, or parameter must not be passed as arguments to methods or used as a qualifier or must be a primitive, its wrapper or immutable. Also static final fields are considered as safe. The analysis is performed only inside one file. To process dependencies from other classes, use options. The analysis extends to private or static methods and has a limit of depth propagation. Example: 'void doSmth(boolean b) {\n    String s = safe();\n    String s1 = \"other\";\n    if (b) s1 = s;\n    sink(s);\n  }\n\n  String sink(@Untainted String s) {}'\n Here we do not have non-safe string assignments to 's' so a warning is not produced. On the other hand: 'void doSmth(boolean b) {\n    String s = safe();\n    String s1 = \"other\";\n    s1 = foo();\n    if (b) s = s1;\n    sink(s);        // warning here\n  }\n\n  String foo();\n\n  String sink(@Untainted String s) {}'\n Here we have a warning since 's1' has an unknown state after 'foo' call result assignment. Inspection ID: SourceToSinkFlow New in 2021.2",
                  "markdown": "Reports cases when a non-safe object is passed to a method with a parameter marked with `@Untainted` annotations, returned from annotated methods or assigned to annotated fields, parameters, or local variables. Kotlin `set` and `get` methods for fields are not supported as entry points.\n\n\nA safe object (in the same class) is:\n\n* a string literal, interface instance, or enum object\n* a call result of a method that is marked as `@Untainted`\n* a private field, which is assigned only with a string literal and has a safe initializer\n* a final field, which has a safe initializer\n* local variable or parameter that are marked as `@Untainted` and are not assigned from non-safe objects\n\nThis field, local variable, or parameter must not be passed as arguments to methods or used as a qualifier or must be a primitive, its wrapper or immutable. Also static final fields are considered as safe.\n\n\nThe analysis is performed only inside one file. To process dependencies from other classes, use options.\nThe analysis extends to private or static methods and has a limit of depth propagation.\n\n\nExample:\n\n\n      void doSmth(boolean b) {\n        String s = safe();\n        String s1 = \"other\";\n        if (b) s1 = s;\n        sink(s);\n      }\n\n      String sink(@Untainted String s) {}\n\n\nHere we do not have non-safe string assignments to `s` so a warning is not produced. On the other hand:\n\n\n      void doSmth(boolean b) {\n        String s = safe();\n        String s1 = \"other\";\n        s1 = foo();\n        if (b) s = s1;\n        sink(s);        // warning here\n      }\n\n      String foo();\n\n      String sink(@Untainted String s) {}\n\n\nHere we have a warning since `s1` has an unknown state after `foo` call result assignment.\n\nInspection ID: SourceToSinkFlow\n\nNew in 2021.2"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "tainting",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Security"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JVM languages",
                      "index": 1,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RecordCanBeClass",
                "shortDescription": {
                  "text": "Record can be converted to class"
                },
                "fullDescription": {
                  "text": "Reports record classes and suggests converting them to ordinary classes. This inspection makes it possible to move a Java record to a codebase using an earlier Java version by applying the quick-fix to this record. Note that the resulting class is not completely equivalent to the original record: The resulting class no longer extends 'java.lang.Record', so 'instanceof Record' returns 'false'. Reflection methods like 'Class.isRecord()' and 'Class.getRecordComponents()' produce different results. The generated 'hashCode()' implementation may produce a different result because the formula to calculate record 'hashCode' is deliberately not specified. Record serialization mechanism differs from that of an ordinary class. Refer to Java Object Serialization Specification for details. Example: 'record Point(int x, int y) {}' After the quick-fix is applied: 'final class Point {\n    private final int x;\n    private final int y;\n\n    Point(int x, int y) {\n      this.x = x;\n      this.y = y;\n    }\n\n    public int x() { return x; }\n\n    public int y() { return y; }\n\n    @Override\n    public boolean equals(Object obj) {\n      if (obj == this) return true;\n      if (obj == null || obj.getClass() != this.getClass()) return false;\n      var that = (Point)obj;\n      return this.x == that.x &&\n             this.y == that.y;\n    }\n\n    @Override\n    public int hashCode() {\n      return Objects.hash(x, y);\n    }\n\n    @Override\n    public String toString() {\n      return \"Point[\" +\n             \"x=\" + x + \", \" +\n             \"y=\" + y + ']';\n    }\n  }' This inspection depends on the Java feature 'Records', which is available since Java 16. Inspection ID: RecordCanBeClass New in 2020.3",
                  "markdown": "Reports record classes and suggests converting them to ordinary classes.\n\nThis inspection makes it possible to move a Java record to a codebase using an earlier Java version\nby applying the quick-fix to this record.\n\n\nNote that the resulting class is not completely equivalent to the original record:\n\n* The resulting class no longer extends `java.lang.Record`, so `instanceof Record` returns `false`.\n* Reflection methods like `Class.isRecord()` and `Class.getRecordComponents()` produce different results.\n* The generated `hashCode()` implementation may produce a different result because the formula to calculate record `hashCode` is deliberately not specified.\n* Record serialization mechanism differs from that of an ordinary class. Refer to *Java Object Serialization Specification* for details.\n\nExample:\n\n\n      record Point(int x, int y) {}\n\nAfter the quick-fix is applied:\n\n\n      final class Point {\n        private final int x;\n        private final int y;\n\n        Point(int x, int y) {\n          this.x = x;\n          this.y = y;\n        }\n\n        public int x() { return x; }\n\n        public int y() { return y; }\n\n        @Override\n        public boolean equals(Object obj) {\n          if (obj == this) return true;\n          if (obj == null || obj.getClass() != this.getClass()) return false;\n          var that = (Point)obj;\n          return this.x == that.x &&\n                 this.y == that.y;\n        }\n\n        @Override\n        public int hashCode() {\n          return Objects.hash(x, y);\n        }\n\n        @Override\n        public String toString() {\n          return \"Point[\" +\n                 \"x=\" + x + \", \" +\n                 \"y=\" + y + ']';\n        }\n      }\n\nThis inspection depends on the Java feature 'Records', which is available since Java 16.\n\nInspection ID: RecordCanBeClass\n\nNew in 2020.3"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "RecordCanBeClass",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MalformedFormatString",
                "shortDescription": {
                  "text": "Malformed format string"
                },
                "fullDescription": {
                  "text": "Reports format strings that don't comply with the standard Java syntax. By default, the inspection considers a compile-time constant a format string if it's used as an argument to the corresponding methods on 'java.util.Formatter', 'java.lang.String', 'java.io.PrintWriter' or 'java.io.PrintStream'. Example: 'String.format(\"x = %d, y = %d\", 42);' Use the inspection settings to mark additional classes and methods as related to string formatting. As an alternative, you can use the 'org.intellij.lang.annotations.PrintFormat' annotation to mark the format string method parameter. In this case, the format arguments parameter must immediately follow the format string and be the last method parameter. Example: 'void myFormatMethod(int mode, @PrintFormat String formatString, Object... args) {...}' Methods annotated in this way will also be recognized by this inspection. Inspection ID: MalformedFormatString",
                  "markdown": "Reports format strings that don't comply with the standard Java syntax.\n\nBy default, the inspection considers a compile-time constant a format string if it's used as an argument to the corresponding methods on\n`java.util.Formatter`, `java.lang.String`, `java.io.PrintWriter` or `java.io.PrintStream`.\n\n**Example:**\n\n\n      String.format(\"x = %d, y = %d\", 42);\n\nUse the inspection settings to mark additional classes and methods as related to string formatting.\n\nAs an alternative, you can use the `org.intellij.lang.annotations.PrintFormat` annotation\nto mark the format string method parameter. In this case,\nthe format arguments parameter must immediately follow the format string and be the last method parameter. Example:\n\n\n      void myFormatMethod(int mode, @PrintFormat String formatString, Object... args) {...}\n\n\nMethods annotated in this way will also be recognized by this inspection.\n\nInspection ID: MalformedFormatString"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MalformedFormatString",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ThreadYield",
                "shortDescription": {
                  "text": "Call to 'Thread.yield()'"
                },
                "fullDescription": {
                  "text": "Reports calls to 'Thread.yield()'. The behavior of 'yield()' is non-deterministic and platform-dependent, and it is rarely appropriate to use this method. Its use should be combined with detailed profiling and benchmarking to ensure that it actually has the desired effect. Example: 'public static void main(String[] args) {\n    Runnable r = () -> {\n      for (int i = 0; i < 10; i++) {\n        System.out.println(i);\n        Thread.yield();\n      }\n    };\n    new Thread(r).start();\n    new Thread(r).start();\n  }' Inspection ID: ThreadYield",
                  "markdown": "Reports calls to `Thread.yield()`.\n\n\nThe behavior of `yield()` is non-deterministic and platform-dependent, and it is rarely appropriate to use this method.\nIts use should be combined with detailed profiling and benchmarking to ensure that it actually has the desired effect.\n\n**Example:**\n\n\n      public static void main(String[] args) {\n        Runnable r = () -> {\n          for (int i = 0; i < 10; i++) {\n            System.out.println(i);\n            Thread.yield();\n          }\n        };\n        new Thread(r).start();\n        new Thread(r).start();\n      }\n\nInspection ID: ThreadYield"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CallToThreadYield",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Threading issues",
                      "index": 23,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LambdaCanBeMethodCall",
                "shortDescription": {
                  "text": "Lambda can be replaced with method call"
                },
                "fullDescription": {
                  "text": "Reports lambda expressions which can be replaced with a call to a JDK method. For example, an expression 'x -> x' of type 'Function<T, T>' can be replaced with a 'Function.identity()' call. This inspection depends on the Java feature 'Lambda expressions', which is available since Java 8. Inspection ID: LambdaCanBeMethodCall New in 2017.1",
                  "markdown": "Reports lambda expressions which can be replaced with a call to a JDK method.\n\nFor example, an expression `x -> x` of type `Function<T, T>`\ncan be replaced with a `Function.identity()` call.\n\nThis inspection depends on the Java feature 'Lambda expressions', which is available since Java 8.\n\nInspection ID: LambdaCanBeMethodCall\n\nNew in 2017.1"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "LambdaCanBeMethodCall",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level migration aids/Java 8",
                      "index": 94,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EndlessStream",
                "shortDescription": {
                  "text": "Non-short-circuit operation consumes infinite stream"
                },
                "fullDescription": {
                  "text": "Reports non-short-circuit operations consuming an infinite stream. Such operations can be completed only by throwing an exception. Example: 'Stream.iterate(0, i -> i + 1).collect(Collectors.toList())' This inspection depends on the Java feature 'Stream and Optional API', which is available since Java 8. Inspection ID: EndlessStream",
                  "markdown": "Reports non-short-circuit operations consuming an infinite stream. Such operations can be completed only by throwing an exception.\n\nExample:\n\n\n      Stream.iterate(0, i -> i + 1).collect(Collectors.toList())\n\nThis inspection depends on the Java feature 'Stream and Optional API', which is available since Java 8.\n\nInspection ID: EndlessStream"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EndlessStream",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NonFinalUtilityClass",
                "shortDescription": {
                  "text": "Utility class is not 'final'"
                },
                "fullDescription": {
                  "text": "Reports utility classes that aren't 'final' or 'abstract'. Utility classes have all fields and methods declared as 'static'. Making them 'final' prevents them from being accidentally subclassed. Example: 'public class UtilityClass {\n    public static void foo() {}\n  }' After the quick-fix is applied: 'public final class UtilityClass {\n    public static void foo() {}\n  }' Inspection ID: NonFinalUtilityClass",
                  "markdown": "Reports utility classes that aren't `final` or `abstract`.\n\nUtility classes have all fields and methods declared as `static`.\nMaking them `final` prevents them from being accidentally subclassed.\n\n**Example:**\n\n\n      public class UtilityClass {\n        public static void foo() {}\n      }\n\nAfter the quick-fix is applied:\n\n\n      public final class UtilityClass {\n        public static void foo() {}\n      }\n\nInspection ID: NonFinalUtilityClass"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NonFinalUtilityClass",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Class structure",
                      "index": 17,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Singleton",
                "shortDescription": {
                  "text": "Singleton"
                },
                "fullDescription": {
                  "text": "Reports singleton classes. Singleton classes are declared in a way that only one instance of the class can ever be instantiated. Singleton classes complicate testing, and their presence may indicate a lack of object-oriented design. Example: 'class Singleton {\n    private static final Singleton ourInstance = new Singleton();\n\n    private Singleton() {\n    }\n\n    public Singleton getInstance() {\n        return ourInstance;\n    }\n  }' Inspection ID: Singleton",
                  "markdown": "Reports singleton classes.\n\nSingleton classes are declared in a way that only one instance of the class can ever be instantiated. Singleton classes complicate testing,\nand their presence may indicate a lack of object-oriented design.\n\n**Example:**\n\n\n      class Singleton {\n        private static final Singleton ourInstance = new Singleton();\n\n        private Singleton() {\n        }\n\n        public Singleton getInstance() {\n            return ourInstance;\n        }\n      }\n\nInspection ID: Singleton"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "Singleton",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Class structure",
                      "index": 17,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FuseStreamOperations",
                "shortDescription": {
                  "text": "Subsequent steps can be fused into Stream API chain"
                },
                "fullDescription": {
                  "text": "Detects transformations outside a Stream API chain that could be incorporated into it. Example: 'List<String> list = stream.collect(Collectors.toList());\n  list.sort(null);\n  return list.toArray(new String[list.size()]);' After the conversion: 'return stream.sorted().toArray(String[]::new);' Note that sometimes the converted stream chain may replace explicit 'ArrayList' with 'Collectors.toList()' or explicit 'HashSet' with 'Collectors.toSet()'. The current library implementation uses these collections internally. However, this approach is not very reliable and might change in the future altering the semantics of your code. If you are concerned about it, use the Do not suggest 'toList()' or 'toSet()' collectors option to suggest 'Collectors.toCollection()' instead of 'toList' and 'toSet' collectors. This inspection depends on the Java feature 'Stream and Optional API', which is available since Java 8. Inspection ID: FuseStreamOperations",
                  "markdown": "Detects transformations outside a Stream API chain that could be incorporated into it.\n\nExample:\n\n\n      List<String> list = stream.collect(Collectors.toList());\n      list.sort(null);\n      return list.toArray(new String[list.size()]);\n\nAfter the conversion:\n\n\n      return stream.sorted().toArray(String[]::new);\n\n\nNote that sometimes the converted stream chain may replace explicit `ArrayList` with `Collectors.toList()` or explicit\n`HashSet` with `Collectors.toSet()`. The current library implementation uses these collections internally. However,\nthis approach is not very reliable and might change in the future altering the semantics of your code.\n\nIf you are concerned about it, use the **Do not suggest 'toList()' or 'toSet()' collectors** option to suggest\n`Collectors.toCollection()` instead of `toList` and `toSet` collectors.\n\nThis inspection depends on the Java feature 'Stream and Optional API', which is available since Java 8.\n\nInspection ID: FuseStreamOperations"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "FuseStreamOperations",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DefaultNotLastCaseInSwitch",
                "shortDescription": {
                  "text": "'default' not last case in 'switch'"
                },
                "fullDescription": {
                  "text": "Reports 'switch' statements or expressions in which the 'default' branch is positioned before another case. Such a construct is unnecessarily confusing. A quick-fix is provided to move the 'default' branch to the last position, if possible. Example: 'switch (n) {\n      default:\n          System.out.println();\n          break;\n      case 1:\n          break;\n  }' After the quick-fix is applied: 'switch (n) {\n    case 1:\n        break;\n    default:\n        System.out.println();\n        break;\n  }' Inspection ID: DefaultNotLastCaseInSwitch",
                  "markdown": "Reports `switch` statements or expressions in which the `default` branch is positioned before another case. Such a construct is unnecessarily confusing. A quick-fix is provided to move the `default` branch to the last position, if possible.\n\n**Example:**\n\n\n      switch (n) {\n          default:\n              System.out.println();\n              break;\n          case 1:\n              break;\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n            break;\n        default:\n            System.out.println();\n            break;\n      }\n\n\nInspection ID: DefaultNotLastCaseInSwitch"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "DefaultNotLastCaseInSwitch",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Control flow issues",
                      "index": 24,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NullThrown",
                "shortDescription": {
                  "text": "'null' thrown"
                },
                "fullDescription": {
                  "text": "Reports 'null' literals that are used as the argument of a 'throw' statement. Such constructs produce a 'java.lang.NullPointerException' that usually should not be thrown programmatically. Inspection ID: NullThrown",
                  "markdown": "Reports `null` literals that are used as the argument of a `throw` statement.\n\nSuch constructs produce a `java.lang.NullPointerException` that usually should not be thrown programmatically.\n\nInspection ID: NullThrown"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NullThrown",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Error handling",
                      "index": 10,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LocalCanBeFinal",
                "shortDescription": {
                  "text": "Local variable or parameter can be 'final'"
                },
                "fullDescription": {
                  "text": "Reports parameters or local variables that may have the 'final' modifier added to their declaration. Example: 'ArrayList<Integer> list = new ArrayList();\n  fill(list);\n  return list;' After the quick-fix is applied: 'final ArrayList<Integer> list = new ArrayList();\n  fill(list);\n  return list;' Use the inspection's options to define whether parameters or local variables should be reported. Inspection ID: LocalCanBeFinal",
                  "markdown": "Reports parameters or local variables that may have the `final` modifier added to their declaration.\n\nExample:\n\n\n      ArrayList<Integer> list = new ArrayList();\n      fill(list);\n      return list;\n\nAfter the quick-fix is applied:\n\n\n      final ArrayList<Integer> list = new ArrayList();\n      fill(list);\n      return list;\n\n\nUse the inspection's options to define whether parameters or local variables should be reported.\n\nInspection ID: LocalCanBeFinal"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "LocalCanBeFinal",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FieldMayBeStatic",
                "shortDescription": {
                  "text": "Field can be made 'static'"
                },
                "fullDescription": {
                  "text": "Reports instance variables that can safely be made 'static'. A field can be static if it is declared 'final' and initialized with a constant. Example: 'public final String str = \"sample\";' The inspection does not report final fields that can be implicitly written. Use the \"Annotations\" button to modify the list of annotations that assume implicit field write. Inspection ID: FieldMayBeStatic",
                  "markdown": "Reports instance variables that can safely be made `static`. A field can be static if it is declared `final` and initialized with a constant.\n\n**Example:**\n\n\n      public final String str = \"sample\";\n\n\nThe inspection does not report final fields that can be implicitly written. Use the \"Annotations\" button to modify\nthe list of annotations that assume implicit field write.\n\nInspection ID: FieldMayBeStatic"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "FieldMayBeStatic",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Performance",
                      "index": 4,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ArrayEquals",
                "shortDescription": {
                  "text": "'equals()' called on array"
                },
                "fullDescription": {
                  "text": "Reports 'equals()' calls that compare two arrays. Calling 'equals()' on an array compares identity and is equivalent to using '=='. Use 'Arrays.equals()' to compare the contents of two arrays, or 'Arrays.deepEquals()' for multi-dimensional arrays. Example: 'void sample(int[] first, int[] second){\n    if (first.equals(second)) return;\n  }' After the quick-fix is applied: 'void sample(int[] first, int[] second){\n    if (Arrays.equals(first, second)) return;\n  }' Inspection ID: ArrayEquals",
                  "markdown": "Reports `equals()` calls that compare two arrays.\n\nCalling `equals()` on an array compares identity and is equivalent to using `==`.\nUse `Arrays.equals()` to compare the contents of two arrays, or `Arrays.deepEquals()` for\nmulti-dimensional arrays.\n\n**Example:**\n\n\n      void sample(int[] first, int[] second){\n        if (first.equals(second)) return;\n      }\n\nAfter the quick-fix is applied:\n\n\n      void sample(int[] first, int[] second){\n        if (Arrays.equals(first, second)) return;\n      }\n\nInspection ID: ArrayEquals"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ArrayEquals",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ProblematicVarargsMethodOverride",
                "shortDescription": {
                  "text": "Non-varargs method overrides varargs method"
                },
                "fullDescription": {
                  "text": "Reports methods that override a variable arity (a.k.a. varargs) method but replace the variable arity parameter with an array parameter. Though this code is valid, it may be confusing and should be avoided. Inspection ID: ProblematicVarargsMethodOverride",
                  "markdown": "Reports methods that override a variable arity (a.k.a. varargs) method but replace the variable arity parameter with an array parameter. Though this code is valid, it may be confusing and should be avoided.\n\n\nInspection ID: ProblematicVarargsMethodOverride"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ProblematicVarargsMethodOverride",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Inheritance issues",
                      "index": 121,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MisspelledHeader",
                "shortDescription": {
                  "text": "Unknown or misspelled header name"
                },
                "fullDescription": {
                  "text": "Reports any unknown and probably misspelled header names and provides possible variants. Inspection ID: MisspelledHeader",
                  "markdown": "Reports any unknown and probably misspelled header names and provides possible variants.\n\nInspection ID: MisspelledHeader"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "MisspelledHeader",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Manifest",
                      "index": 90,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AtomicFieldUpdaterIssues",
                "shortDescription": {
                  "text": "Inconsistent 'AtomicFieldUpdater' declaration"
                },
                "fullDescription": {
                  "text": "Reports issues with 'AtomicLongFieldUpdater', 'AtomicIntegerFieldUpdater', or 'AtomicReferenceFieldUpdater' fields (the 'java.util.concurrent.atomic' package). The reported issues are identical to the runtime problems that can happen with atomic field updaters: specified field not found, specified field not accessible, specified field has a wrong type, and so on. Examples: 'class A {\n    private static volatile int value = 0;\n    private static final AtomicIntegerFieldUpdater updater =\n    AtomicIntegerFieldUpdater.newUpdater((A.class), \"value\"); // warning: Field 'value' has 'static' modifier\n  }' 'class B {\n    private static final AtomicIntegerFieldUpdater updater =\n      AtomicIntegerFieldUpdater.newUpdater(B.class, \"value\"); // warning: No field named 'value' found in class 'B'\n  }' Inspection ID: AtomicFieldUpdaterIssues",
                  "markdown": "Reports issues with `AtomicLongFieldUpdater`, `AtomicIntegerFieldUpdater`, or `AtomicReferenceFieldUpdater` fields (the `java.util.concurrent.atomic` package).\n\nThe reported issues are identical to the runtime problems that can happen with atomic field updaters:\nspecified field not found, specified field not accessible, specified field has a wrong type, and so on.\n\n**Examples:**\n\n*\n\n\n        class A {\n          private static volatile int value = 0;\n          private static final AtomicIntegerFieldUpdater updater =\n          AtomicIntegerFieldUpdater.newUpdater((A.class), \"value\"); // warning: Field 'value' has 'static' modifier\n        }\n        \n*\n\n\n        class B {\n          private static final AtomicIntegerFieldUpdater updater =\n            AtomicIntegerFieldUpdater.newUpdater(B.class, \"value\"); // warning: No field named 'value' found in class 'B'\n        }\n        \n\nInspection ID: AtomicFieldUpdaterIssues"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AtomicFieldUpdaterIssues",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Threading issues",
                      "index": 23,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PackageNamingConvention",
                "shortDescription": {
                  "text": "Package naming convention"
                },
                "fullDescription": {
                  "text": "Reports packages whose names are either too short, too long, or do not follow the specified regular expression pattern. Example: 'package io;' Use the options to specify the minimum and maximum length of the package name as well as a regular expression that matches valid package names (regular expressions are in standard 'java.util.regex' format). Inspection ID: PackageNamingConvention",
                  "markdown": "Reports packages whose names are either too short, too long, or do not follow the specified regular expression pattern.\n\n**Example:**\n\n\n      package io;\n\n\nUse the options to specify the minimum and maximum length of the package name\nas well as a regular expression that matches valid package names\n(regular expressions are in standard `java.util.regex` format).\n\nInspection ID: PackageNamingConvention"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PackageNamingConvention",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Naming conventions",
                      "index": 59,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ThrowableNotThrown",
                "shortDescription": {
                  "text": "'Throwable' not thrown"
                },
                "fullDescription": {
                  "text": "Reports instantiations of 'Throwable' or its subclasses, where the created 'Throwable' is never actually thrown. Additionally, this inspection reports method calls that return instances of 'Throwable' or its subclasses, when the result of the method call is not thrown. Calls to methods annotated with the Error Prone's or AssertJ's '@CanIgnoreReturnValue' annotation will not be reported. Example: 'void check(String s) {\n        if (s == null) {\n            new NullPointerException(\"s\");\n        }\n        // ...\n    }' Inspection ID: ThrowableNotThrown",
                  "markdown": "Reports instantiations of `Throwable` or its subclasses, where the created `Throwable` is never actually thrown. Additionally, this inspection reports method calls that return instances of `Throwable` or its subclasses, when the result of the method call is not thrown.\n\nCalls to methods annotated with the Error Prone's or AssertJ's `@CanIgnoreReturnValue` annotation will not be reported.\n\n**Example:**\n\n\n        void check(String s) {\n            if (s == null) {\n                new NullPointerException(\"s\");\n            }\n            // ...\n        }\n\nInspection ID: ThrowableNotThrown"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ThrowableNotThrown",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CapturingCleaner",
                "shortDescription": {
                  "text": "Cleaner captures object reference"
                },
                "fullDescription": {
                  "text": "Reports 'Runnable' passed to a 'Cleaner.register()' capturing reference being registered. If the reference is captured, it will never be phantom reachable and the cleaning action will never be invoked. Possible sources of this problem: Lambda using non-static methods, fields, or 'this' itself Non-static inner class (anonymous or not) always captures this reference in java up to 18 version Instance method reference Access to outer class non-static members from non-static inner class Sample of code that will be reported: 'int fileDescriptor;\n  Cleaner.Cleanable cleanable = Cleaner.create().register(this, () -> {\n    System.out.println(\"adsad\");\n    //this is captured via fileDescriptor\n    fileDescriptor = 0;\n  });' This inspection only reports if the language level of the project or module is 9 or higher. Inspection ID: CapturingCleaner New in 2018.1",
                  "markdown": "Reports `Runnable` passed to a `Cleaner.register()` capturing reference being registered. If the reference is captured, it will never be phantom reachable and the cleaning action will never be invoked.\n\nPossible sources of this problem:\n\n* Lambda using non-static methods, fields, or `this` itself\n* Non-static inner class (anonymous or not) always captures this reference in java up to 18 version\n* Instance method reference\n* Access to outer class non-static members from non-static inner class\n\nSample of code that will be reported:\n\n\n      int fileDescriptor;\n      Cleaner.Cleanable cleanable = Cleaner.create().register(this, () -> {\n        System.out.println(\"adsad\");\n        //this is captured via fileDescriptor\n        fileDescriptor = 0;\n      });\n\nThis inspection only reports if the language level of the project or module is 9 or higher.\n\nInspection ID: CapturingCleaner\n\nNew in 2018.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CapturingCleaner",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ThreadStartInConstruction",
                "shortDescription": {
                  "text": "Call to 'Thread.start()' during object construction"
                },
                "fullDescription": {
                  "text": "Reports calls to 'start()' on 'java.lang.Thread' or any of its subclasses during object construction. While occasionally useful, such constructs should be avoided due to inheritance issues. Subclasses of a class that launches a thread during the object construction will not have finished any initialization logic of their own before the thread has launched. This inspection does not report if the class that starts a thread is declared 'final'. Example: 'class MyThread extends Thread {\n    MyThread() {\n      start();\n    }\n  }' Inspection ID: ThreadStartInConstruction",
                  "markdown": "Reports calls to `start()` on `java.lang.Thread` or any of its subclasses during object construction.\n\n\nWhile occasionally useful, such constructs should be avoided due to inheritance issues.\nSubclasses of a class that launches a thread during the object construction will not have finished\nany initialization logic of their own before the thread has launched.\n\nThis inspection does not report if the class that starts a thread is declared `final`.\n\n**Example:**\n\n\n      class MyThread extends Thread {\n        MyThread() {\n          start();\n        }\n      }\n\nInspection ID: ThreadStartInConstruction"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CallToThreadStartDuringObjectConstruction",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Threading issues",
                      "index": 23,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SwitchStatementWithTooManyBranches",
                "shortDescription": {
                  "text": "Maximum 'switch' branches"
                },
                "fullDescription": {
                  "text": "Reports 'switch' statements or expressions with too many 'case' labels. Such a long switch statement may be confusing and should probably be refactored. Sometimes, it is not a problem (for example, a domain is very complicated and has enums with a lot of constants). Example: 'switch (x) {\n        case 1 -> {}\n        case 2 -> {}\n        case 3 -> {}\n        case 4 -> {}\n        case 5 -> {}\n        case 6 -> {}\n        case 7 -> {}\n        case 8 -> {}\n        case 9 -> {}\n        case 10 -> {}\n        case 11,12,13 -> {}\n        default -> {}\n    }' Use the Maximum number of branches field to specify the maximum number of 'case' labels expected. Inspection ID: SwitchStatementWithTooManyBranches",
                  "markdown": "Reports `switch` statements or expressions with too many `case` labels.\n\nSuch a long switch statement may be confusing and should probably be refactored.\nSometimes, it is not a problem (for example, a domain is very complicated and has enums with a lot of constants).\n\nExample:\n\n\n        switch (x) {\n            case 1 -> {}\n            case 2 -> {}\n            case 3 -> {}\n            case 4 -> {}\n            case 5 -> {}\n            case 6 -> {}\n            case 7 -> {}\n            case 8 -> {}\n            case 9 -> {}\n            case 10 -> {}\n            case 11,12,13 -> {}\n            default -> {}\n        }\n\nUse the **Maximum number of branches** field to specify the maximum number of `case` labels expected.\n\n\nInspection ID: SwitchStatementWithTooManyBranches"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SwitchStatementWithTooManyBranches",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Control flow issues",
                      "index": 24,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LoopConditionNotUpdatedInsideLoop",
                "shortDescription": {
                  "text": "Loop variable not updated inside loop"
                },
                "fullDescription": {
                  "text": "Reports any variables and parameters that are used in a loop condition and are not updated inside the loop. Such variables and parameters are usually used by mistake as they may cause an infinite loop if they are executed. Example: 'void loopDoesNotLoop(boolean b) {\n    while (b) {\n      System.out.println();\n      break;\n    }\n  }' Configure the inspection: Use the Ignore possible non-local changes option to disable this inspection if the condition can be updated indirectly (e.g. via the called method or concurrently from another thread). Inspection ID: LoopConditionNotUpdatedInsideLoop",
                  "markdown": "Reports any variables and parameters that are used in a loop condition and are not updated inside the loop.\n\nSuch variables and parameters are usually used by mistake as they\nmay cause an infinite loop if they are executed.\n\nExample:\n\n\n      void loopDoesNotLoop(boolean b) {\n        while (b) {\n          System.out.println();\n          break;\n        }\n      }\n\nConfigure the inspection:\n\n\nUse the **Ignore possible non-local changes** option to disable this inspection\nif the condition can be updated indirectly (e.g. via the called method or concurrently from another thread).\n\nInspection ID: LoopConditionNotUpdatedInsideLoop"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "LoopConditionNotUpdatedInsideLoop",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Control flow issues",
                      "index": 24,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DoubleCheckedLocking",
                "shortDescription": {
                  "text": "Double-checked locking"
                },
                "fullDescription": {
                  "text": "Reports double-checked locking. Double-checked locking tries to initialize a field on demand and in a thread-safe manner, while avoiding the cost of synchronization. Unfortunately it is not thread-safe when used on a field that is not declared 'volatile'. When using Java 1.4 or earlier, double-checked locking doesn't work even with a 'volatile' field. Read the article linked above for a detailed explanation of the problem. Example of incorrect double-checked locking: 'class Foo {\n    private Helper helper = null;\n    public Helper getHelper() {\n      if (helper == null)\n        synchronized(this) {\n          if (helper == null) helper = new Helper();\n        }\n        return helper;\n      }\n    }\n    // other functions and members...\n  }' Inspection ID: DoubleCheckedLocking",
                  "markdown": "Reports [double-checked locking](https://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html).\n\n\nDouble-checked locking tries to initialize a field on demand and in a thread-safe manner, while avoiding the cost of synchronization.\nUnfortunately it is not thread-safe when used on a field that is not declared `volatile`.\nWhen using Java 1.4 or earlier, double-checked locking doesn't work even with a `volatile` field.\nRead the article linked above for a detailed explanation of the problem.\n\nExample of incorrect double-checked locking:\n\n\n      class Foo {\n        private Helper helper = null;\n        public Helper getHelper() {\n          if (helper == null)\n            synchronized(this) {\n              if (helper == null) helper = new Helper();\n            }\n            return helper;\n          }\n        }\n        // other functions and members...\n      }\n\nInspection ID: DoubleCheckedLocking"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "DoubleCheckedLocking",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Threading issues",
                      "index": 23,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MisspelledMethodName",
                "shortDescription": {
                  "text": "Method names differing only by case"
                },
                "fullDescription": {
                  "text": "Reports cases in which multiple methods of a class have the names that differ only by case. Such names may be very confusing. Example: 'public int hashcode() { // reported, should be hashCode probably?\n    return 0;\n  }' A quick-fix that renames such methods is available only in the editor. Use the Ignore methods overriding/implementing a super method option to ignore methods overriding or implementing a method from the superclass. Inspection ID: MisspelledMethodName",
                  "markdown": "Reports cases in which multiple methods of a class have the names that differ only by case. Such names may be very confusing.\n\n**Example:**\n\n\n      public int hashcode() { // reported, should be hashCode probably?\n        return 0;\n      }\n\nA quick-fix that renames such methods is available only in the editor.\n\nUse the **Ignore methods overriding/implementing a super method** option to ignore methods overriding or implementing a method from\nthe superclass.\n\n\nInspection ID: MisspelledMethodName"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MethodNamesDifferingOnlyByCase",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Naming conventions/Method",
                      "index": 83,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NonSerializableObjectBoundToHttpSession",
                "shortDescription": {
                  "text": "Non-serializable object bound to 'HttpSession'"
                },
                "fullDescription": {
                  "text": "Reports objects of classes not implementing 'java.io.Serializable' used as arguments to 'javax.servlet.http.HttpSession.setAttribute()' or 'javax.servlet.http.HttpSession.putValue()'. Such objects will not be serialized if the 'HttpSession' is passivated or migrated, and may result in difficult-to-diagnose bugs. This inspection assumes objects of the types 'java.util.Collection' and 'java.util.Map' to be 'Serializable', unless type parameters are non-'Serializable'. Example: 'void foo(HttpSession session) {\n      session.setAttribute(\"foo\", new NonSerializable());\n  }\n  static class NonSerializable {}' Inspection ID: NonSerializableObjectBoundToHttpSession",
                  "markdown": "Reports objects of classes not implementing `java.io.Serializable` used as arguments to `javax.servlet.http.HttpSession.setAttribute()` or `javax.servlet.http.HttpSession.putValue()`.\n\n\nSuch objects will not be serialized if the `HttpSession` is passivated or migrated,\nand may result in difficult-to-diagnose bugs.\n\n\nThis inspection assumes objects of the types `java.util.Collection` and\n`java.util.Map` to be `Serializable`,\nunless type parameters are non-`Serializable`.\n\n**Example:**\n\n\n      void foo(HttpSession session) {\n          session.setAttribute(\"foo\", new NonSerializable());\n      }\n      static class NonSerializable {}\n\nInspection ID: NonSerializableObjectBoundToHttpSession"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NonSerializableObjectBoundToHttpSession",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Serialization issues",
                      "index": 18,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ThreadLocalNotStaticFinal",
                "shortDescription": {
                  "text": "'ThreadLocal' field not declared 'static final'"
                },
                "fullDescription": {
                  "text": "Reports fields of type 'java.lang.ThreadLocal' that are not declared 'static final'. In the most common case, a 'java.lang.ThreadLocal' instance associates state with a thread. A non-static non-final 'java.lang.ThreadLocal' field associates state with an instance-thread combination. This is usually unnecessary and quite often is a bug that can cause memory leaks and incorrect behavior. A quick-fix is suggested to make the field 'static final'. Example: 'private ThreadLocal tl = ThreadLocal.withInitial(() -> Boolean.TRUE);' Inspection ID: ThreadLocalNotStaticFinal",
                  "markdown": "Reports fields of type `java.lang.ThreadLocal` that are not declared `static final`.\n\n\nIn the most common case, a `java.lang.ThreadLocal` instance associates state with a thread.\nA non-static non-final `java.lang.ThreadLocal` field associates state with an instance-thread combination.\nThis is usually unnecessary and quite often is a bug that can cause memory leaks and incorrect behavior.\n\n\nA quick-fix is suggested to make the field `static final`.\n\n\n**Example:**\n\n\n      private ThreadLocal tl = ThreadLocal.withInitial(() -> Boolean.TRUE);\n\nInspection ID: ThreadLocalNotStaticFinal"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ThreadLocalNotStaticFinal",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Threading issues",
                      "index": 23,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AccessStaticViaInstance",
                "shortDescription": {
                  "text": "Access static member via instance reference"
                },
                "fullDescription": {
                  "text": "Reports references to 'static' methods and fields via a class instance rather than the class itself. Even though referring to static members via instance variables is allowed by The Java Language Specification, this makes the code confusing as the reader may think that the result of the method depends on the instance. The quick-fix replaces the instance variable with the class name. Example: 'String s1 = s.valueOf(0);' After the quick-fix is applied: 'String s = String.valueOf(0);' Inspection ID: AccessStaticViaInstance",
                  "markdown": "Reports references to `static` methods and fields via a class instance rather than the class itself.\n\nEven though referring to static members via instance variables is allowed by The Java Language Specification,\nthis makes the code confusing as the reader may think that the result of the method depends on the instance.\n\nThe quick-fix replaces the instance variable with the class name.\n\nExample:\n\n\n      String s1 = s.valueOf(0);\n\nAfter the quick-fix is applied:\n\n\n      String s = String.valueOf(0);\n\n\nInspection ID: AccessStaticViaInstance"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AccessStaticViaInstance",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Declaration redundancy",
                      "index": 9,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CallToNativeMethodWhileLocked",
                "shortDescription": {
                  "text": "Call to a 'native' method while locked"
                },
                "fullDescription": {
                  "text": "Reports calls 'native' methods within a 'synchronized' block or method. When possible, it's better to keep calls to 'native' methods out of the synchronized context because such calls cause an expensive context switch and may lead to performance issues. Example: 'native void nativeMethod();\n\n  void example(){\n    synchronized (lock){\n      nativeMethod();//warning\n    }\n  }' Inspection ID: CallToNativeMethodWhileLocked",
                  "markdown": "Reports calls `native` methods within a `synchronized` block or method.\n\n\nWhen possible, it's better to keep calls to `native` methods out of the synchronized context\nbecause such calls cause an expensive context switch and may lead to performance issues.\n\n**Example:**\n\n\n      native void nativeMethod();\n\n      void example(){\n        synchronized (lock){\n          nativeMethod();//warning\n        }\n      }\n\nInspection ID: CallToNativeMethodWhileLocked"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CallToNativeMethodWhileLocked",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Threading issues",
                      "index": 23,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Dependency",
                "shortDescription": {
                  "text": "Illegal package dependencies"
                },
                "fullDescription": {
                  "text": "Reports illegal dependencies between scopes according to the dependency rules given. Dependency rules can be used to prohibit usage from a scope to another scope. Use the Configure dependency rules button below to customize validation rules. Inspection ID: Dependency",
                  "markdown": "Reports illegal dependencies between scopes according to the dependency rules given. Dependency rules can be used to prohibit usage from a scope to another scope.\n\nUse the **Configure dependency rules** button below to customize validation rules.\n\nInspection ID: Dependency"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "Dependency",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JVM languages",
                      "index": 1,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NestingDepth",
                "shortDescription": {
                  "text": "Overly nested method"
                },
                "fullDescription": {
                  "text": "Reports methods whose body contain too deeply nested statements. Methods with too deep statement nesting may be confusing and are a good sign that refactoring may be necessary. Use the Nesting depth limit field to specify the maximum allowed nesting depth for a method. Inspection ID: NestingDepth",
                  "markdown": "Reports methods whose body contain too deeply nested statements.\n\nMethods with too deep statement\nnesting may be confusing and are a good sign that refactoring may be necessary.\n\nUse the **Nesting depth limit** field to specify the maximum allowed nesting depth for a method.\n\n\nInspection ID: NestingDepth"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "OverlyNestedMethod",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Method metrics",
                      "index": 108,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "WriteOnlyObject",
                "shortDescription": {
                  "text": "Write-only object"
                },
                "fullDescription": {
                  "text": "Reports objects that are modified but never queried. The inspection relies on the method mutation contract, which could be inferred or pre-annotated for some library methods. This inspection does not report collections, maps, and string builders, as these types are reported by other more precise inspections. Example: 'AtomicReference<String> ref = new AtomicReference<>();\n  ref.set(\"hello\"); // ref is never used again' Use the Ignore impure constructors option to control whether to process objects created by constructor or method whose purity is not known. Unchecking the option may introduce some false-positives if the object reference is intentionally leaked during the construction. New in 2021.2 Inspection ID: WriteOnlyObject",
                  "markdown": "Reports objects that are modified but never queried.\n\nThe inspection relies on the method mutation contract, which could be inferred\nor pre-annotated for some library methods. This inspection does not report collections, maps, and string builders, as these types\nare reported by other more precise inspections.\n\nExample:\n\n\n      AtomicReference<String> ref = new AtomicReference<>();\n      ref.set(\"hello\"); // ref is never used again\n\n\nUse the **Ignore impure constructors** option to control whether to process objects created by constructor or method whose purity is not known.\nUnchecking the option may introduce some false-positives if the object reference is intentionally leaked during the construction.\n**New in 2021.2**\n\nInspection ID: WriteOnlyObject"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "WriteOnlyObject",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SocketResource",
                "shortDescription": {
                  "text": "Socket opened but not safely closed"
                },
                "fullDescription": {
                  "text": "Reports socket resources that are not safely closed. Socket resources reported by this inspection include 'java.net.Socket', 'java.net.DatagramSocket', and 'java.net.ServerSocket'. By default, the inspection assumes that the resources can be closed by any method with 'close' or 'cleanup' in its name. Example: 'byte[] getMessage(ServerSocket socket) throws IOException {\n    Socket client = socket.accept(); //socket is not closed\n    return client.getInputStream().readAllBytes();\n  }' Use the following options to configure the inspection: Whether a socket is allowed to be opened inside a 'try' block. This style is less desirable because it is more verbose than opening a resource in front of a 'try' block. Whether the resource can be closed by any method call with the resource passed as argument. Inspection ID: SocketResource",
                  "markdown": "Reports socket resources that are not safely closed. Socket resources reported by this inspection include `java.net.Socket`, `java.net.DatagramSocket`, and `java.net.ServerSocket`.\n\n\nBy default, the inspection assumes that the resources can be closed by any method with\n'close' or 'cleanup' in its name.\n\n**Example:**\n\n\n      byte[] getMessage(ServerSocket socket) throws IOException {\n        Socket client = socket.accept(); //socket is not closed\n        return client.getInputStream().readAllBytes();\n      }\n\n\nUse the following options to configure the inspection:\n\n* Whether a socket is allowed to be opened inside a `try` block. This style is less desirable because it is more verbose than opening a resource in front of a `try` block.\n* Whether the resource can be closed by any method call with the resource passed as argument.\n\nInspection ID: SocketResource"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SocketOpenedButNotSafelyClosed",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Resource management",
                      "index": 109,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeParameterHidesVisibleType",
                "shortDescription": {
                  "text": "Type parameter hides visible type"
                },
                "fullDescription": {
                  "text": "Reports type parameters that have the same names as the visible types in the current scope. Such parameter names may be confusing. Example: 'abstract class MyList<T> extends AbstractList<T> {\n    private List<T> elements;\n    // type parameter 'T' hides type parameter 'T'\n    public <T> T[] toArray(T[] array) {\n        return elements.toArray(array);\n    }\n}' Inspection ID: TypeParameterHidesVisibleType",
                  "markdown": "Reports type parameters that have the same names as the visible types in the current scope. Such parameter names may be confusing.\n\nExample:\n\n\n      abstract class MyList<T> extends AbstractList<T> {\n        private List<T> elements;\n        // type parameter 'T' hides type parameter 'T'\n        public <T> T[] toArray(T[] array) {\n            return elements.toArray(array);\n        }\n    }\n\nInspection ID: TypeParameterHidesVisibleType"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "TypeParameterHidesVisibleType",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Visibility",
                      "index": 73,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MaskedAssertion",
                "shortDescription": {
                  "text": "Assertion is suppressed by 'catch'"
                },
                "fullDescription": {
                  "text": "Reports 'assert' statements and test framework assertions that are suppressed by a surrounding catch block. Such assertions will never fail, as the thrown 'AssertionError' will be caught and silently ignored. Example 1: 'void javaAssertion() {\n    try {\n      ...\n      assert 1 == 2;\n    } catch (AssertionError e) {\n      // the assertion is silently ignored\n    }\n  }' Example 2: '@Test\n  void testWithAssertJ() {\n    try {\n      ...\n      assertThat(1).as(\"test\").isEqualTo(2);\n    } catch (AssertionError e) {\n      // the assertion is silently ignored\n    }\n  }' Example 3: '@Test\n  void testWithJunit() {\n    try {\n      ...\n      assertEquals(1, 2);\n    } catch (AssertionError e) {\n      // the assertion is silently ignored\n    }\n  }' Inspection ID: MaskedAssertion New in 2020.3",
                  "markdown": "Reports `assert` statements and test framework assertions that are suppressed by a surrounding catch block. Such assertions will never fail, as the thrown `AssertionError` will be caught and silently ignored.\n\n**Example 1:**\n\n\n      void javaAssertion() {\n        try {\n          ...\n          assert 1 == 2;\n        } catch (AssertionError e) {\n          // the assertion is silently ignored\n        }\n      }\n\n**Example 2:**\n\n\n      @Test\n      void testWithAssertJ() {\n        try {\n          ...\n          assertThat(1).as(\"test\").isEqualTo(2);\n        } catch (AssertionError e) {\n          // the assertion is silently ignored\n        }\n      }\n\n**Example 3:**\n\n\n      @Test\n      void testWithJunit() {\n        try {\n          ...\n          assertEquals(1, 2);\n        } catch (AssertionError e) {\n          // the assertion is silently ignored\n        }\n      }\n\nInspection ID: MaskedAssertion\n\nNew in 2020.3"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MaskedAssertion",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Test frameworks",
                      "index": 102,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StringTokenizerDelimiter",
                "shortDescription": {
                  "text": "Duplicated delimiters in 'StringTokenizer'"
                },
                "fullDescription": {
                  "text": "Reports 'StringTokenizer()' constructor calls or 'nextToken()' method calls that contain duplicate characters in the delimiter argument. Example: 'void printTokens(String text) {\n    StringTokenizer tokenizer = new StringTokenizer(text, \"\\n\\n\");\n    while (tokenizer.hasMoreTokens()) {\n      System.out.println(tokenizer.nextToken());\n    }\n  }' After the quick-fix is applied: 'void printTokens(String text) {\n    StringTokenizer tokenizer = new StringTokenizer(text, \"\\n\");\n    while (tokenizer.hasMoreTokens()) {\n      System.out.println(tokenizer.nextToken());\n    }\n  }' Inspection ID: StringTokenizerDelimiter",
                  "markdown": "Reports `StringTokenizer()` constructor calls or `nextToken()` method calls that contain duplicate characters in the delimiter argument.\n\n**Example:**\n\n\n      void printTokens(String text) {\n        StringTokenizer tokenizer = new StringTokenizer(text, \"\\n\\n\");\n        while (tokenizer.hasMoreTokens()) {\n          System.out.println(tokenizer.nextToken());\n        }\n      }\n\nAfter the quick-fix is applied:\n\n\n      void printTokens(String text) {\n        StringTokenizer tokenizer = new StringTokenizer(text, \"\\n\");\n        while (tokenizer.hasMoreTokens()) {\n          System.out.println(tokenizer.nextToken());\n        }\n      }\n\nInspection ID: StringTokenizerDelimiter"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "StringTokenizerDelimiter",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReflectionForUnavailableAnnotation",
                "shortDescription": {
                  "text": "Reflective access to a source-only annotation"
                },
                "fullDescription": {
                  "text": "Reports attempts to reflectively check for the presence of a non-runtime annotation. Using 'Class.isAnnotationPresent()' to test for an annotation whose retention policy is set to 'SOURCE' or 'CLASS' (the default) will always have a negative result. This mistake is easy to overlook. Example: '{\n    getClass().isAnnotationPresent(SourceAnnotation.class); //always false\n  }\n\n  @Retention(RetentionPolicy.SOURCE)\n  @interface SourceAnnotation {}' This inspection depends on the Java feature 'Annotations', which is available since Java 5. Inspection ID: ReflectionForUnavailableAnnotation",
                  "markdown": "Reports attempts to reflectively check for the presence of a non-runtime annotation.\n\nUsing `Class.isAnnotationPresent()` to test for an annotation\nwhose retention policy is set to `SOURCE` or `CLASS`\n(the default) will always have a negative result. This mistake is easy to overlook.\n\n**Example:**\n\n\n      {\n        getClass().isAnnotationPresent(SourceAnnotation.class); //always false\n      }\n\n      @Retention(RetentionPolicy.SOURCE)\n      @interface SourceAnnotation {}\n\n\nThis inspection depends on the Java feature 'Annotations', which is available since Java 5.\n\nInspection ID: ReflectionForUnavailableAnnotation"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ReflectionForUnavailableAnnotation",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InstantiatingObjectToGetClassObject",
                "shortDescription": {
                  "text": "Instantiating object to get 'Class' object"
                },
                "fullDescription": {
                  "text": "Reports code that instantiates a class to get its class object. It is more performant to access the class object directly by name. Example: 'Class<?> c = new Sample().getClass();' After the quick-fix is applied: 'Class<?> c = Sample.class;' Inspection ID: InstantiatingObjectToGetClassObject",
                  "markdown": "Reports code that instantiates a class to get its class object.\n\nIt is more performant to access the class object\ndirectly by name.\n\n**Example:**\n\n\n      Class<?> c = new Sample().getClass();\n\nAfter the quick-fix is applied:\n\n\n      Class<?> c = Sample.class;\n\nInspection ID: InstantiatingObjectToGetClassObject"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "InstantiatingObjectToGetClassObject",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Performance",
                      "index": 4,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ShiftOutOfRange",
                "shortDescription": {
                  "text": "Shift operation by inappropriate constant"
                },
                "fullDescription": {
                  "text": "Reports shift operations where the shift value is a constant outside the reasonable range. Integer shift operations outside the range '0..31' and long shift operations outside the range '0..63' are reported. Shifting by negative or overly large values is almost certainly a coding error. Example: 'int shiftSize = 32;\n  // Warning: shift by 32 bits is equivalent to shift by 0 bits, so there's no shift at all.\n  int mask = (1 << shiftSize) - 1;' Inspection ID: ShiftOutOfRange",
                  "markdown": "Reports shift operations where the shift value is a constant outside the reasonable range.\n\nInteger shift operations outside the range `0..31` and long shift operations outside the\nrange `0..63` are reported. Shifting by negative or overly large values is almost certainly\na coding error.\n\n**Example:**\n\n\n      int shiftSize = 32;\n      // Warning: shift by 32 bits is equivalent to shift by 0 bits, so there's no shift at all.\n      int mask = (1 << shiftSize) - 1;\n\nInspection ID: ShiftOutOfRange"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ShiftOutOfRange",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Bitwise operation issues",
                      "index": 163,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ClassWithMultipleLoggers",
                "shortDescription": {
                  "text": "Class with multiple loggers"
                },
                "fullDescription": {
                  "text": "Reports classes that have multiple loggers declared. Ensuring that every class has a single dedicated logger is an important step in providing a unified logging implementation for an application. For example: 'public class Critical {\n    protected static final Logger LOG = Logger.getLogger(Critical.class);\n\n    protected static final Logger myLogger = Logger.getLogger(getClass());\n  }' Use the table below to specify Logger class names. Classes which declare multiple fields that have the type of one of the specified classes will be reported by this inspection. Inspection ID: ClassWithMultipleLoggers",
                  "markdown": "Reports classes that have multiple loggers declared. Ensuring that every class has a single dedicated logger is an important step in providing a unified logging implementation for an application.\n\nFor example:\n\n\n      public class Critical {\n        protected static final Logger LOG = Logger.getLogger(Critical.class);\n\n        protected static final Logger myLogger = Logger.getLogger(getClass());\n      }\n\n\nUse the table below to specify Logger class names.\nClasses which declare multiple fields that have the type of one of the specified classes will be reported by this inspection.\n\n\nInspection ID: ClassWithMultipleLoggers"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ClassWithMultipleLoggers",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Logging",
                      "index": 91,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ThreadRun",
                "shortDescription": {
                  "text": "Call to 'Thread.run()'"
                },
                "fullDescription": {
                  "text": "Reports calls to 'run()' on 'java.lang.Thread' or any of its subclasses. While occasionally intended, this is usually a mistake, because 'run()' doesn't start a new thread. To execute the code in a separate thread, 'start()' should be used. Inspection ID: ThreadRun",
                  "markdown": "Reports calls to `run()` on `java.lang.Thread` or any of its subclasses.\n\n\nWhile occasionally intended, this is usually a mistake, because `run()` doesn't start a new thread.\nTo execute the code in a separate thread, `start()` should be used.\n\n\nInspection ID: ThreadRun"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CallToThreadRun",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JVM languages",
                      "index": 1,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ExtendsThrowable",
                "shortDescription": {
                  "text": "Class directly extends 'Throwable'"
                },
                "fullDescription": {
                  "text": "Reports classes that directly extend 'java.lang.Throwable'. Extending 'java.lang.Throwable' directly is generally considered bad practice. It is usually enough to extend 'java.lang.RuntimeException', 'java.lang.Exception', or - in special cases - 'java.lang.Error'. Example: 'class EnigmaThrowable extends Throwable {} // warning: Class 'EnigmaThrowable' directly extends 'java.lang.Throwable'' Inspection ID: ExtendsThrowable",
                  "markdown": "Reports classes that directly extend `java.lang.Throwable`.\n\nExtending `java.lang.Throwable` directly is generally considered bad practice.\nIt is usually enough to extend `java.lang.RuntimeException`, `java.lang.Exception`, or - in special\ncases - `java.lang.Error`.\n\n**Example:**\n\n\n      class EnigmaThrowable extends Throwable {} // warning: Class 'EnigmaThrowable' directly extends 'java.lang.Throwable'\n\nInspection ID: ExtendsThrowable"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ExtendsThrowable",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Error handling",
                      "index": 10,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AutoBoxing",
                "shortDescription": {
                  "text": "Auto-boxing"
                },
                "fullDescription": {
                  "text": "Reports expressions that are affected by autoboxing conversion (automatic wrapping of primitive values as objects). Try not to use objects instead of primitives. It might significantly affect performance. Example: 'Integer x = 42;' The quick-fix makes the conversion explicit: 'Integer x = Integer.valueOf(42);' AutoBoxing appeared in Java 5. This inspection can help to downgrade for backward compatibility with earlier Java versions. Inspection ID: AutoBoxing",
                  "markdown": "Reports expressions that are affected by autoboxing conversion (automatic wrapping of primitive values as objects). Try not to use objects instead of primitives. It might significantly affect performance.\n\n**Example:**\n\n    Integer x = 42;\n\nThe quick-fix makes the conversion explicit:\n\n    Integer x = Integer.valueOf(42);\n\n\n*AutoBoxing* appeared in Java 5.\nThis inspection can help to downgrade for backward compatibility with earlier Java versions.\n\nInspection ID: AutoBoxing"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AutoBoxing",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Performance",
                      "index": 4,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InterfaceNeverImplemented",
                "shortDescription": {
                  "text": "Interface which has no concrete subclass"
                },
                "fullDescription": {
                  "text": "Reports interfaces that have no concrete subclasses. Configure the inspection: Use the list below to add annotations. Interfaces declared with one of these annotations will be ignored by the inspection. Use the checkbox below to ignore interfaces that only declare constant fields. Such interfaces may still be usable even without implementations. Inspection ID: InterfaceNeverImplemented",
                  "markdown": "Reports interfaces that have no concrete subclasses.\n\nConfigure the inspection:\n\n* Use the list below to add annotations. Interfaces declared with one of these annotations will be ignored by the inspection.\n* Use the checkbox below to ignore interfaces that only declare constant fields. Such interfaces may still be usable even without implementations.\n\nInspection ID: InterfaceNeverImplemented"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "InterfaceNeverImplemented",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Inheritance issues",
                      "index": 121,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ThreadDeathRethrown",
                "shortDescription": {
                  "text": "'ThreadDeath' not rethrown"
                },
                "fullDescription": {
                  "text": "Reports 'try' statements that catch 'java.lang.ThreadDeath' and do not rethrow the exception. Example: 'try {\n    executeInParallel(request);\n  } catch (ThreadDeath ex) { // warning: ThreadDeath 'ex' not rethrown\n    return false;\n  }' Inspection ID: ThreadDeathRethrown",
                  "markdown": "Reports `try` statements that catch `java.lang.ThreadDeath` and do not rethrow the exception.\n\n**Example:**\n\n\n      try {\n        executeInParallel(request);\n      } catch (ThreadDeath ex) { // warning: ThreadDeath 'ex' not rethrown\n        return false;\n      }\n\nInspection ID: ThreadDeathRethrown"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ThreadDeathNotRethrown",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Error handling",
                      "index": 10,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryModuleDependencyInspection",
                "shortDescription": {
                  "text": "Unnecessary module dependency"
                },
                "fullDescription": {
                  "text": "Reports dependencies on modules that are not used. The quick-fix safely removes such unused dependencies. Inspection ID: UnnecessaryModuleDependencyInspection",
                  "markdown": "Reports dependencies on modules that are not used. The quick-fix safely removes such unused dependencies.\n\nInspection ID: UnnecessaryModuleDependencyInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnnecessaryModuleDependencyInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Declaration redundancy",
                      "index": 9,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CloneCallsConstructors",
                "shortDescription": {
                  "text": "'clone()' instantiates objects with constructor"
                },
                "fullDescription": {
                  "text": "Reports calls to object constructors inside 'clone()' methods. It is considered good practice to call 'clone()' to instantiate objects inside of a 'clone()' method instead of creating them directly to support later subclassing. This inspection will not report 'clone()' methods declared as 'final' or 'clone()' methods on 'final' classes. Inspection ID: CloneCallsConstructors",
                  "markdown": "Reports calls to object constructors inside `clone()` methods.\n\nIt is considered good practice to call `clone()` to instantiate objects inside of a `clone()` method\ninstead of creating them directly to support later subclassing.\nThis inspection will not report\n`clone()` methods declared as `final`\nor `clone()` methods on `final` classes.\n\nInspection ID: CloneCallsConstructors"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CloneCallsConstructors",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Cloning issues",
                      "index": 89,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ArraysAsListWithZeroOrOneArgument",
                "shortDescription": {
                  "text": "Call to 'Arrays.asList()' with too few arguments"
                },
                "fullDescription": {
                  "text": "Reports calls to 'Arrays.asList()' with at most one argument. Such calls could be replaced with 'Collections.singletonList()', 'Collections.emptyList()', or 'List.of()' on JDK 9 and later, which will save some memory. In particular, 'Collections.emptyList()' and 'List.of()' with no arguments always return a shared instance, while 'Arrays.asList()' with no arguments creates a new object every time it's called. Note: the lists returned by 'Collections.singletonList()' and 'List.of()' are immutable, while the list returned 'Arrays.asList()' allows calling the 'set()' method. This may break the code in rare cases. Example: 'List<String> empty = Arrays.asList();\n  List<String> one = Arrays.asList(\"one\");' After the quick-fix is applied: 'List<String> empty = Collections.emptyList();\n  List<String> one = Collections.singletonList(\"one\");' Inspection ID: ArraysAsListWithZeroOrOneArgument",
                  "markdown": "Reports calls to `Arrays.asList()` with at most one argument.\n\n\nSuch calls could be replaced\nwith `Collections.singletonList()`, `Collections.emptyList()`,\nor `List.of()` on JDK 9 and later, which will save some memory.\n\nIn particular, `Collections.emptyList()` and `List.of()` with no arguments\nalways return a shared instance,\nwhile `Arrays.asList()` with no arguments creates a new object every time it's called.\n\nNote: the lists returned by `Collections.singletonList()` and `List.of()` are immutable,\nwhile the list returned `Arrays.asList()` allows calling the `set()` method.\nThis may break the code in rare cases.\n\n**Example:**\n\n\n      List<String> empty = Arrays.asList();\n      List<String> one = Arrays.asList(\"one\");\n\nAfter the quick-fix is applied:\n\n\n      List<String> empty = Collections.emptyList();\n      List<String> one = Collections.singletonList(\"one\");\n\n\nInspection ID: ArraysAsListWithZeroOrOneArgument"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ArraysAsListWithZeroOrOneArgument",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Performance",
                      "index": 4,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnstableApiUsage",
                "shortDescription": {
                  "text": "Unstable API Usage"
                },
                "fullDescription": {
                  "text": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it. The annotations which are used to mark unstable APIs are shown in the list below. By default, the inspection ignores usages of unstable APIs if their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs. However, it may be inconvenient if the project is big, so one can switch off the Ignore API declared in this project option to report the usages of unstable APIs declared in both the project sources and libraries. Inspection ID: UnstableApiUsage",
                  "markdown": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.\n\nInspection ID: UnstableApiUsage"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnstableApiUsage",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JVM languages",
                      "index": 1,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LambdaUnfriendlyMethodOverload",
                "shortDescription": {
                  "text": "Lambda-unfriendly method overload"
                },
                "fullDescription": {
                  "text": "Reports overloaded methods that take functional interfaces with conflicting abstract method signatures. Such overloads introduce ambiguity and require callers to cast lambdas to a specific type or specify lambda parameter types explicitly. It is preferable to give the overloaded methods different names to eliminate ambiguity. Example: 'interface MyExecutor {\n    void execute(Supplier<?> supplier);\n    void execute(Callable<?> callable);\n  }' Here, 'Supplier' and 'Callable' are functional interfaces whose single abstract methods do not take any parameters and return a non-void value. As a result, the type of the lambda cannot be inferred at the call site unless an explicit cast is used. Inspection ID: LambdaUnfriendlyMethodOverload",
                  "markdown": "Reports overloaded methods that take functional interfaces with conflicting abstract method signatures.\n\nSuch overloads introduce ambiguity and require callers to cast lambdas to a specific type or specify lambda parameter types explicitly.\nIt is preferable to give the overloaded methods different names to eliminate ambiguity.\n\nExample:\n\n\n      interface MyExecutor {\n        void execute(Supplier<?> supplier);\n        void execute(Callable<?> callable);\n      }\n\n\nHere, `Supplier` and `Callable` are functional interfaces\nwhose single abstract methods do not take any parameters and return a non-void value.\nAs a result, the type of the lambda cannot be inferred at the call site unless an explicit cast is used.\n\nInspection ID: LambdaUnfriendlyMethodOverload"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "LambdaUnfriendlyMethodOverload",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Naming conventions/Method",
                      "index": 83,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SerializableRecordContainsIgnoredMembers",
                "shortDescription": {
                  "text": "'record' contains ignored members"
                },
                "fullDescription": {
                  "text": "Reports serialization methods or fields defined in a 'record' class. Serialization methods include 'writeObject()', 'readObject()', 'readObjectNoData()', 'writeExternal()', and 'readExternal()' and the field 'serialPersistentFields'. These members are not used for the serialization or deserialization of records and therefore unnecessary. Examples: 'record R1() implements Serializable {\n    // The field is ignored during record serialization\n    @Serial\n    private static final ObjectStreamField[] serialPersistentFields = new ObjectStreamField[0];\n\n    // The method is ignored during record serialization\n    @Serial\n    private void writeObject(ObjectOutputStream out) throws IOException {\n    }\n  }' 'record R2() implements Externalizable {\n    // The method is ignored during record serialization\n    @Override\n    public void writeExternal(ObjectOutput out) throws IOException {\n    }\n\n    // The method is ignored during record serialization\n    @Override\n    public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {\n    }\n  }' This inspection depends on the Java feature 'Records', which is available since Java 16. Inspection ID: SerializableRecordContainsIgnoredMembers New in 2020.3",
                  "markdown": "Reports serialization methods or fields defined in a `record` class. Serialization methods include `writeObject()`, `readObject()`, `readObjectNoData()`, `writeExternal()`, and `readExternal()` and the field `serialPersistentFields`. These members are not used for the serialization or deserialization of records and therefore unnecessary.\n\n**Examples:**\n\n\n      record R1() implements Serializable {\n        // The field is ignored during record serialization\n        @Serial\n        private static final ObjectStreamField[] serialPersistentFields = new ObjectStreamField[0];\n\n        // The method is ignored during record serialization\n        @Serial\n        private void writeObject(ObjectOutputStream out) throws IOException {\n        }\n      }\n\n\n      record R2() implements Externalizable {\n        // The method is ignored during record serialization\n        @Override\n        public void writeExternal(ObjectOutput out) throws IOException {\n        }\n\n        // The method is ignored during record serialization\n        @Override\n        public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {\n        }\n      }\n\nThis inspection depends on the Java feature 'Records', which is available since Java 16.\n\nInspection ID: SerializableRecordContainsIgnoredMembers\n\nNew in 2020.3"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SerializableRecordContainsIgnoredMembers",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Serialization issues",
                      "index": 18,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessarilyQualifiedInnerClassAccess",
                "shortDescription": {
                  "text": "Unnecessarily qualified inner class access"
                },
                "fullDescription": {
                  "text": "Reports any references to inner classes that are unnecessarily qualified with the name of the enclosing class. Such a qualification can be safely removed, which sometimes adds an import for the inner class. Example: 'class X {\n     X.Y foo;\n     class Y{}\n  }' After the quick-fix is applied: 'class X {\n     Y foo;\n     class Y{}\n  }' Use the Ignore references for which an import is needed option to ignore references to inner classes, where removing the qualification adds an import. Inspection ID: UnnecessarilyQualifiedInnerClassAccess",
                  "markdown": "Reports any references to inner classes that are unnecessarily qualified with the name of the enclosing class.\n\nSuch a qualification can be safely removed, which sometimes adds an import for the inner class.\n\nExample:\n\n\n      class X {\n         X.Y foo;\n         class Y{}\n      }\n\nAfter the quick-fix is applied:\n\n\n      class X {\n         Y foo;\n         class Y{}\n      }\n\nUse the **Ignore references for which an import is needed** option to ignore references to inner classes, where\nremoving the qualification adds an import.\n\n\nInspection ID: UnnecessarilyQualifiedInnerClassAccess"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "UnnecessarilyQualifiedInnerClassAccess",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JavadocLinkAsPlainText",
                "shortDescription": {
                  "text": "Link specified as plain text"
                },
                "fullDescription": {
                  "text": "Reports plain text links in Javadoc comments. The quick-fix suggests to wrap the link in an '<a>' tag. Example: 'class Main {\n   /**\n    * https://en.wikipedia.org/\n    */\n    void foo() {}\n  }' After the quick-fix is applied: 'class Main {\n   /**\n    * <a href=\"https://en.wikipedia.org/\">https://en.wikipedia.org/</a>\n    */\n    void foo() {}\n  }' Inspection ID: JavadocLinkAsPlainText New in 2022.1",
                  "markdown": "Reports plain text links in Javadoc comments.\n\n\nThe quick-fix suggests to wrap the link in an `<a>` tag.\n\n**Example:**\n\n\n      class Main {\n       /**\n        * https://en.wikipedia.org/\n        */\n        void foo() {}\n      }\n\nAfter the quick-fix is applied:\n\n\n      class Main {\n       /**\n        * <a href=\"https://en.wikipedia.org/\">https://en.wikipedia.org/</a>\n        */\n        void foo() {}\n      }\n\nInspection ID: JavadocLinkAsPlainText\n\nNew in 2022.1"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JavadocLinkAsPlainText",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Javadoc",
                      "index": 58,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SharedThreadLocalRandom",
                "shortDescription": {
                  "text": "'ThreadLocalRandom' instance might be shared"
                },
                "fullDescription": {
                  "text": "Reports 'java.util.concurrent.ThreadLocalRandom' instances which might be shared between threads. A 'ThreadLocalRandom' should not be shared between threads because that is not thread-safe. The inspection reports instances that are assigned to a field used as a method argument, or assigned to a local variable and used in anonymous or nested classes as they might get shared between threads. Usages of 'ThreadLocalRandom' should typically look like 'ThreadLocalRandom.current().nextInt(...)' (or 'nextDouble(...)' etc.). When all usages are in this form, 'ThreadLocalRandom' instances cannot be used accidentally by multiple threads. Example: 'class Main {\n      void printRandomNumbersAsync() {\n        ThreadLocalRandom random = ThreadLocalRandom.current();\n        CompletableFuture.supplyAsync(() -> generateNumbers(random))\n          .thenAccept(numbers -> System.out.println(Arrays.toString(numbers)));\n      }\n\n      private int[] generateNumbers(Random random) {\n        return random.ints(1000, 0, 100).toArray();\n      }\n    }' Use the options to list methods that are safe to be passed to 'ThreadLocalRandom' instances as an argument. It's possible to use regular expressions for method names. Inspection ID: SharedThreadLocalRandom",
                  "markdown": "Reports `java.util.concurrent.ThreadLocalRandom` instances which might be shared between threads.\n\n\nA `ThreadLocalRandom` should not be shared between threads because that is not thread-safe.\nThe inspection reports instances that are assigned to a field used as a method argument,\nor assigned to a local variable and used in anonymous or nested classes as they might get shared between threads.\n\n\nUsages of `ThreadLocalRandom` should typically look like `ThreadLocalRandom.current().nextInt(...)`\n(or `nextDouble(...)` etc.).\nWhen all usages are in this form, `ThreadLocalRandom` instances cannot be used accidentally by multiple threads.\n\n**Example:**\n\n\n        class Main {\n          void printRandomNumbersAsync() {\n            ThreadLocalRandom random = ThreadLocalRandom.current();\n            CompletableFuture.supplyAsync(() -> generateNumbers(random))\n              .thenAccept(numbers -> System.out.println(Arrays.toString(numbers)));\n          }\n\n          private int[] generateNumbers(Random random) {\n            return random.ints(1000, 0, 100).toArray();\n          }\n        }\n      \n\nUse the options to list methods that are safe to be passed to `ThreadLocalRandom` instances as an argument.\nIt's possible to use regular expressions for method names.\n\nInspection ID: SharedThreadLocalRandom"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SharedThreadLocalRandom",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Threading issues",
                      "index": 23,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "WhileCanBeDoWhile",
                "shortDescription": {
                  "text": "'while' can be replaced with 'do while'"
                },
                "fullDescription": {
                  "text": "Reports 'while' loops that could be more effectively written as 'do-while' loops. There are 'while' loops where the code just before the loop is identical to the code in the body of the loop. Replacing with a 'do-while' loop removes the duplicated code. For 'while' loops without such duplicated code, the quick fix is offered in the editor as well, but without highlighting. Example: 'foo();\n  while (x) {\n      foo();\n  }' Can be replaced with: 'do {\n    foo();\n  } while (x);' New in 2024.1 Inspection ID: WhileCanBeDoWhile",
                  "markdown": "Reports `while` loops that could be more effectively written as `do-while` loops.\nThere are `while` loops where the code just before the loop is identical to the code in the body of the loop.\nReplacing with a `do-while` loop removes the duplicated code.\nFor `while` loops without such duplicated code, the quick fix is offered in the editor as well, but without highlighting.\n\n**Example:**\n\n\n      foo();\n      while (x) {\n          foo();\n      }\n\nCan be replaced with:\n\n\n      do {\n        foo();\n      } while (x);\n\n\nNew in 2024.1\n\nInspection ID: WhileCanBeDoWhile"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "WhileCanBeDoWhile",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Control flow issues",
                      "index": 24,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AbstractMethodOverridesConcreteMethod",
                "shortDescription": {
                  "text": "Abstract method overrides concrete method"
                },
                "fullDescription": {
                  "text": "Reports 'abstract' methods that override concrete super methods. Methods overridden from 'java.lang.Object' are not reported by this inspection. Inspection ID: AbstractMethodOverridesConcreteMethod",
                  "markdown": "Reports `abstract` methods that override concrete super methods.\n\nMethods overridden from `java.lang.Object` are not reported by this inspection.\n\nInspection ID: AbstractMethodOverridesConcreteMethod"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AbstractMethodOverridesConcreteMethod",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Inheritance issues",
                      "index": 121,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CodeBlock2Expr",
                "shortDescription": {
                  "text": "Statement lambda can be replaced with expression lambda"
                },
                "fullDescription": {
                  "text": "Reports lambda expressions with code block bodies when expression-style bodies can be used instead. The result of the conversion is shorter and more clear. Example: 'Comparable<String> c = o -> {return 0;};' After the quick-fix is applied: 'Comparable<String> c = o -> 0;' This inspection depends on the Java feature 'Lambda expressions', which is available since Java 8. Inspection ID: CodeBlock2Expr",
                  "markdown": "Reports lambda expressions with code block bodies when expression-style bodies can be used instead. The result of the conversion is shorter and more clear.\n\nExample:\n\n\n      Comparable<String> c = o -> {return 0;};\n\nAfter the quick-fix is applied:\n\n\n      Comparable<String> c = o -> 0;\n\nThis inspection depends on the Java feature 'Lambda expressions', which is available since Java 8.\n\nInspection ID: CodeBlock2Expr"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CodeBlock2Expr",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level migration aids/Java 8",
                      "index": 94,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SimplifyForEach",
                "shortDescription": {
                  "text": "Simplifiable forEach() call"
                },
                "fullDescription": {
                  "text": "Reports 'forEach()' calls that can be replaced with a more concise method or from which intermediate steps can be extracted. Example: 'List<String> findNStrings(List<String> list, int n) {\n    List<String> other = new ArrayList<>();\n    list.forEach(s -> {\n      if(s.length() > n) other.add(s);\n    });\n    return other;\n  }' After the quick-fix is applied: 'List<String> findNStrings(List<String> list, int n) {\n    List<String> other = list.stream()\n      .filter(s -> s.length() > n)\n      .collect(Collectors.toList());\n    return other;\n  }' This inspection depends on the Java feature 'Lambda methods in collections', which is available since Java 8. Inspection ID: SimplifyForEach New in 2017.3",
                  "markdown": "Reports `forEach()` calls that can be replaced with a more concise method or from which intermediate steps can be extracted.\n\n**Example:**\n\n\n      List<String> findNStrings(List<String> list, int n) {\n        List<String> other = new ArrayList<>();\n        list.forEach(s -> {\n          if(s.length() > n) other.add(s);\n        });\n        return other;\n      }\n\nAfter the quick-fix is applied:\n\n\n      List<String> findNStrings(List<String> list, int n) {\n        List<String> other = list.stream()\n          .filter(s -> s.length() > n)\n          .collect(Collectors.toList());\n        return other;\n      }\n\nThis inspection depends on the Java feature 'Lambda methods in collections', which is available since Java 8.\n\nInspection ID: SimplifyForEach\n\nNew in 2017.3"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "SimplifyForEach",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level migration aids/Java 8",
                      "index": 94,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantFieldInitialization",
                "shortDescription": {
                  "text": "Redundant field initialization"
                },
                "fullDescription": {
                  "text": "Reports fields explicitly initialized to their default values. Example: 'class Foo {\n    int foo = 0;\n    List bar = null;\n  }' After the quick-fix is applied: 'class Foo {\n    int foo;\n    List bar;\n  }' Use the inspection settings to only report explicit 'null' initialization, for example: 'class Foo {\n    int foo = 0;     // no warning\n    List bar = null; // redundant field initialization warning\n  }' Inspection ID: RedundantFieldInitialization",
                  "markdown": "Reports fields explicitly initialized to their default values.\n\n**Example:**\n\n\n      class Foo {\n        int foo = 0;\n        List bar = null;\n      }\n\nAfter the quick-fix is applied:\n\n\n      class Foo {\n        int foo;\n        List bar;\n      }\n\n\nUse the inspection settings to only report explicit `null` initialization, for example:\n\n\n      class Foo {\n        int foo = 0;     // no warning\n        List bar = null; // redundant field initialization warning\n      }\n\nInspection ID: RedundantFieldInitialization"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RedundantFieldInitialization",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Since15",
                "shortDescription": {
                  "text": "Usages of API which isn't available at the configured language level"
                },
                "fullDescription": {
                  "text": "Reports usages of the API that is unavailable at the configured language level. This inspection does 3 things: Highlight usage of generified classes when the language level is below Java 7. Highlight when default methods are not overridden and the language level is below Java 8. Highlight usage of API when the language level is lower than marked using the '@since' tag in the documentation. Use the Forbid API usages option to forbid usages of the API in respect to the project or custom language level. Inspection ID: Since15",
                  "markdown": "Reports usages of the API that is unavailable at the configured language level. This inspection does 3 things:\n\n* Highlight usage of generified classes when the language level is below Java 7.\n* Highlight when default methods are not overridden and the language level is below Java 8.\n* Highlight usage of API when the language level is lower than marked using the `@since` tag in the documentation.\n\n\nUse the **Forbid API usages** option to forbid usages of the API in respect to the project or custom language level.\n\nInspection ID: Since15"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "Since15",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JVM languages",
                      "index": 1,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReadObjectInitialization",
                "shortDescription": {
                  "text": "Instance field may not be initialized by 'readObject()'"
                },
                "fullDescription": {
                  "text": "Reports fields that are not guaranteed to be initialized after the object is deserialized by the 'readObject()' method. The inspection doesn't report transient fields. Note: This inspection uses a very conservative control flow algorithm, and may incorrectly report fields as uninitialized. Example: 'class DataObject implements Serializable {\n  String s; // s is not initialized in readObject\n  int i;\n\n  private void readObject(ObjectInputStream stream) throws IOException {\n    i = stream.readInt();\n  }\n}' Inspection ID: ReadObjectInitialization",
                  "markdown": "Reports fields that are not guaranteed to be initialized after the object is deserialized by the `readObject()` method.\n\nThe inspection doesn't report transient fields.\n\n\nNote: This inspection uses a very conservative control flow algorithm, and may incorrectly report fields\nas uninitialized.\n\n**Example:**\n\n\n    class DataObject implements Serializable {\n      String s; // s is not initialized in readObject\n      int i;\n\n      private void readObject(ObjectInputStream stream) throws IOException {\n        i = stream.readInt();\n      }\n    }\n\nInspection ID: ReadObjectInitialization"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "InstanceVariableMayNotBeInitializedByReadObject",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Serialization issues",
                      "index": 18,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NonAtomicOperationOnVolatileField",
                "shortDescription": {
                  "text": "Non-atomic operation on 'volatile' field"
                },
                "fullDescription": {
                  "text": "Reports non-atomic operations on volatile fields. An example of a non-atomic operation is updating the field using the increment operator. As the operation involves read and write, and other modifications may happen in between, data may become corrupted. The operation can be made atomic by surrounding it with a 'synchronized' block or using one of the classes from the 'java.util.concurrent.atomic' package. Example: 'private volatile int v = 1;\n\n  void foo() {\n    v = 2 * v;\n  }' Inspection ID: NonAtomicOperationOnVolatileField",
                  "markdown": "Reports non-atomic operations on volatile fields.\n\n\nAn example of a non-atomic operation is updating the field using the increment operator.\nAs the operation involves read and write, and other modifications may happen in between, data may become corrupted.\nThe operation can be made atomic by surrounding it with a `synchronized` block or\nusing one of the classes from the `java.util.concurrent.atomic` package.\n\n**Example:**\n\n\n      private volatile int v = 1;\n\n      void foo() {\n        v = 2 * v;\n      }\n\nInspection ID: NonAtomicOperationOnVolatileField"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NonAtomicOperationOnVolatileField",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Threading issues",
                      "index": 23,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "QuestionableName",
                "shortDescription": {
                  "text": "Questionable name"
                },
                "fullDescription": {
                  "text": "Reports variables, methods, or classes with questionable, not really descriptive names. Such names do not help to understand the code, and most probably were created as a temporary thing but were forgotten afterwards. Example: 'int aa = 42;' Rename quick-fix is suggested only in the editor. Use the option to list names that should be reported. Inspection ID: QuestionableName",
                  "markdown": "Reports variables, methods, or classes with questionable, not really descriptive names. Such names do not help to understand the code, and most probably were created as a temporary thing but were forgotten afterwards.\n\n**Example:**\n\n\n      int aa = 42;\n\nRename quick-fix is suggested only in the editor.\n\n\nUse the option to list names that should be reported.\n\n\nInspection ID: QuestionableName"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "QuestionableName",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Naming conventions",
                      "index": 59,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UNCHECKED_WARNING",
                "shortDescription": {
                  "text": "Unchecked warning"
                },
                "fullDescription": {
                  "text": "Reports code on which an unchecked warning will be issued by the javac compiler. Every unchecked warning may potentially trigger 'ClassCastException' at runtime. Example: 'List items = Arrays.asList(\"string\", \"string\");\n  List<Integer> numbers = Collections.unmodifiableList(items); // unchecked assignment' Inspection ID: UNCHECKED_WARNING",
                  "markdown": "Reports code on which an unchecked warning will be issued by the javac compiler. Every unchecked warning may potentially trigger `ClassCastException` at runtime.\n\nExample:\n\n\n      List items = Arrays.asList(\"string\", \"string\");\n      List<Integer> numbers = Collections.unmodifiableList(items); // unchecked assignment\n\nInspection ID: UNCHECKED_WARNING"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "unchecked",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Compiler issues",
                      "index": 129,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantLengthCheck",
                "shortDescription": {
                  "text": "Redundant array length check"
                },
                "fullDescription": {
                  "text": "Reports unnecessary array length checks followed by array iteration. When array length is zero, the iteration will be skipped anyway, so there's no need to check length explicitly. Example: 'void f(String[] array) {\n    if (array.length != 0) { // unnecessary check\n      for (String str : array) {\n        System.out.println(str);\n      }\n    }\n  }' A quick-fix is suggested to unwrap or remove the length check: 'void f(String[] array) {\n    for (String str : array) {\n      System.out.println(str);\n    }\n  }' Inspection ID: RedundantLengthCheck New in 2022.3",
                  "markdown": "Reports unnecessary array length checks followed by array iteration. When array length is zero, the iteration will be skipped anyway, so there's no need to check length explicitly.\n\nExample:\n\n\n      void f(String[] array) {\n        if (array.length != 0) { // unnecessary check\n          for (String str : array) {\n            System.out.println(str);\n          }\n        }\n      }\n\nA quick-fix is suggested to unwrap or remove the length check:\n\n\n      void f(String[] array) {\n        for (String str : array) {\n          System.out.println(str);\n        }\n      }\n\nInspection ID: RedundantLengthCheck\n\nNew in 2022.3"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RedundantLengthCheck",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Verbose or redundant code constructs",
                      "index": 37,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DataFlowIssue",
                "shortDescription": {
                  "text": "Nullability and data flow problems"
                },
                "fullDescription": {
                  "text": "Reports code constructs that always violate nullability contracts, may throw exceptions, or are just redundant, based on data flow analysis. Examples: 'if (array.length < index) {\n  System.out.println(array[index]);\n} // Array index is always out of bounds\n\nif (str == null) System.out.println(\"str is null\");\nSystem.out.println(str.trim());\n// the last statement may throw an NPE\n\n@NotNull\nInteger square(@Nullable Integer input) {\n    // the method contract is violated\n    return input == null ? null : input * input;\n}' The inspection behavior may be controlled by a number of annotations, such as nullability annotations, '@Contract' annotation, '@Range' annotation and so on. Configure the inspection: Use the Suggest @Nullable annotation for methods/fields/parameters where nullable values are used option to warn when a nullable value is passed as an argument to a method with a non-annotated parameter, stored into non-annotated field, or returned from a non-annotated method. In this case, the inspection will suggest propagating the '@Nullable' annotation. You can also configure nullability annotations using the Configure Annotations button. Use the Treat non-annotated members and parameters as @Nullable option to assume that non-annotated members can be null, so they must not be used in non-null context. Use the Report not-null required parameter with null-literal argument usages option to report method parameters that cannot be null (e.g. immediately dereferenced in the method body), but there are call sites where a 'null' literal is passed. Use the Report nullable methods that always return a non-null value option to report methods that are annotated as '@Nullable', but always return non-null value. In this case, it's suggested that you change the annotation to '@NotNull'. Use the Ignore assert statements option to control how the inspection treats 'assert' statements. By default, the option is disabled, which means that the assertions are assumed to be executed (-ea mode). If the option is enabled, the assertions will be completely ignored (-da mode). Use the Report problems that happen only on some code paths option to control whether to report problems that may happen only on some code path. If this option is disabled, warnings like exception is possible will not be reported. The inspection will report only warnings like exception will definitely occur. This mode may greatly reduce the number of false-positives, especially if the code is not consistently annotated with nullability and contract annotations. That is why it can be useful for finding the most important problems in legacy code bases. Before IntelliJ IDEA 2022.3, this inspection was part of the \"Constant Conditions & Exceptions\" inspection. Now, it is split into two inspections: \"Constant Values\" and \"Nullability and data flow problems\". Inspection ID: DataFlowIssue",
                  "markdown": "Reports code constructs that always violate nullability contracts, may throw exceptions, or are just redundant, based on data flow analysis.\n\nExamples:\n\n    if (array.length < index) {\n      System.out.println(array[index]);\n    } // Array index is always out of bounds\n\n    if (str == null) System.out.println(\"str is null\");\n    System.out.println(str.trim());\n    // the last statement may throw an NPE\n\n    @NotNull\n    Integer square(@Nullable Integer input) {\n        // the method contract is violated\n        return input == null ? null : input * input;\n    }\n\n\nThe inspection behavior may be controlled by a number of annotations, such as\n[nullability](https://www.jetbrains.com/help/idea/nullable-and-notnull-annotations.html) annotations,\n[@Contract](https://www.jetbrains.com/help/idea/contract-annotations.html) annotation,\n`@Range` annotation and so on.\n\nConfigure the inspection:\n\n* Use the **Suggest @Nullable annotation for methods/fields/parameters where nullable values are used** option to warn when a nullable value is passed as an argument to a method with a non-annotated parameter, stored into non-annotated field, or returned from a non-annotated method. In this case, the inspection will suggest propagating the `@Nullable` annotation. You can also configure nullability annotations using the **Configure Annotations** button.\n* Use the **Treat non-annotated members and parameters as @Nullable** option to assume that non-annotated members can be null, so they must not be used in non-null context.\n* Use the **Report not-null required parameter with null-literal argument usages** option to report method parameters that cannot be null (e.g. immediately dereferenced in the method body), but there are call sites where a `null` literal is passed.\n* Use the **Report nullable methods that always return a non-null value** option to report methods that are annotated as `@Nullable`, but always return non-null value. In this case, it's suggested that you change the annotation to `@NotNull`.\n* Use the **Ignore assert statements** option to control how the inspection treats `assert` statements. By default, the option is disabled, which means that the assertions are assumed to be executed (-ea mode). If the option is enabled, the assertions will be completely ignored (-da mode).\n* Use the **Report problems that happen only on some code paths** option to control whether to report problems that may happen only on some code path. If this option is disabled, warnings like *exception is possible* will not be reported. The inspection will report only warnings like *exception will definitely occur*. This mode may greatly reduce the number of false-positives, especially if the code is not consistently annotated with nullability and contract annotations. That is why it can be useful for finding the most important problems in legacy code bases.\n\n\nBefore IntelliJ IDEA 2022.3, this inspection was part of the \"Constant Conditions \\& Exceptions\" inspection.\nNow, it is split into two inspections:\n\"Constant Values\" and \"Nullability and data flow problems\".\n\nInspection ID: DataFlowIssue"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "DataFlowIssue",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ParameterCanBeLocal",
                "shortDescription": {
                  "text": "Value passed as parameter never read"
                },
                "fullDescription": {
                  "text": "Reports redundant method parameters that can be replaced with local variables. If all local usages of a parameter are preceded by assignments to that parameter, the parameter can be removed and its usages replaced with local variables. It makes no sense to have such a parameter, as values that are passed to it are overwritten. Usually, the problem appears as a result of refactoring. Example: 'void test(int p) {\n    p = 1;\n    System.out.print(p);\n  }' After the quick-fix is applied: 'void test() {\n    int p = 1;\n    System.out.print(p);\n  }' Inspection ID: ParameterCanBeLocal",
                  "markdown": "Reports redundant method parameters that can be replaced with local variables.\n\nIf all local usages of a parameter are preceded by assignments to that parameter, the\nparameter can be removed and its usages replaced with local variables.\nIt makes no sense to have such a parameter, as values that are passed to it are overwritten.\nUsually, the problem appears as a result of refactoring.\n\nExample:\n\n\n      void test(int p) {\n        p = 1;\n        System.out.print(p);\n      }\n\nAfter the quick-fix is applied:\n\n\n      void test() {\n        int p = 1;\n        System.out.print(p);\n      }\n\nInspection ID: ParameterCanBeLocal"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ParameterCanBeLocal",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Class structure",
                      "index": 17,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SwitchStatementDensity",
                "shortDescription": {
                  "text": "'switch' statement with too low of a branch density"
                },
                "fullDescription": {
                  "text": "Reports 'switch' statements or expressions with a too low ratio of switch labels to executable statements. Such 'switch' statements may be confusing and should probably be refactored. Example: 'switch (i) { // one case and 5 executable statements -> 20% density\n        case 1:\n            System.out.println(\"1\");\n            System.out.println(\"2\");\n            System.out.println(\"3\");\n            System.out.println(\"4\");\n            System.out.println(\"5\");\n            break;\n    }' Use the Minimum density of branches field to specify the allowed ratio of the switch labels to executable statements. Inspection ID: SwitchStatementDensity",
                  "markdown": "Reports `switch` statements or expressions with a too low ratio of switch labels to executable statements.\n\nSuch `switch` statements\nmay be confusing and should probably be refactored.\n\nExample:\n\n\n        switch (i) { // one case and 5 executable statements -> 20% density\n            case 1:\n                System.out.println(\"1\");\n                System.out.println(\"2\");\n                System.out.println(\"3\");\n                System.out.println(\"4\");\n                System.out.println(\"5\");\n                break;\n        }\n\n\nUse the **Minimum density of branches** field to specify the allowed ratio of the switch labels to executable statements.\n\nInspection ID: SwitchStatementDensity"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SwitchStatementDensity",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Control flow issues",
                      "index": 24,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MismatchedJavadocCode",
                "shortDescription": {
                  "text": "Mismatch between Javadoc and code"
                },
                "fullDescription": {
                  "text": "Reports parts of method specification written in English that contradict with the method declaration. This includes: Method specified to return 'true' or 'false' but its return type is not boolean. Method specified to return 'null' but it's annotated as '@NotNull' or its return type is primitive. Method specified to return list but its return type is set or array. And so on. Example: '/**\n   * @return true if user is found, false otherwise\n   */\n  User findUser(String name);' Note that false-positives are possible, as this inspection tries to interpret a human language. However, if the inspection reports incorrectly, it's still possible that the description is confusing and should be rewritten. New in 2022.3 Inspection ID: MismatchedJavadocCode",
                  "markdown": "Reports parts of method specification written in English that contradict with the method declaration. This includes:\n\n* Method specified to return `true` or `false` but its return type is not boolean.\n* Method specified to return `null` but it's annotated as `@NotNull` or its return type is primitive.\n* Method specified to return list but its return type is set or array.\n* And so on.\n\n**Example:**\n\n\n      /**\n       * @return true if user is found, false otherwise\n       */\n      User findUser(String name);\n\n\nNote that false-positives are possible, as this inspection tries to interpret a human language. However, if the inspection reports\nincorrectly, it's still possible that the description is confusing and should be rewritten.\n\n\nNew in 2022.3\n\nInspection ID: MismatchedJavadocCode"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MismatchedJavadocCode",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Javadoc",
                      "index": 58,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SimplifiableAnnotation",
                "shortDescription": {
                  "text": "Simplifiable annotation"
                },
                "fullDescription": {
                  "text": "Reports annotations that can be simplified to their single-element or marker shorthand form. Problems reported: Redundant 'value=' in annotation name-value pairs Redundant braces around array values that contain only a single value Redundant whitespace between the @-sign and the name of annotations Redundant whitespace between annotation names and parameter lists Redundant parentheses in annotations without any parameters Example: '@interface Foo { String[] value(); }\n\n  @ Foo({\"foo\"})\n  public String name;' After the quick-fix is applied: '@interface Foo { String[] value(); }\n\n  @Foo(\"foo\")\n  public String name;' Inspection ID: SimplifiableAnnotation",
                  "markdown": "Reports annotations that can be simplified to their single-element or marker shorthand form.\n\n\nProblems reported:\n\n* Redundant `value=` in annotation name-value pairs\n* Redundant braces around array values that contain only a single value\n* Redundant whitespace between the @-sign and the name of annotations\n* Redundant whitespace between annotation names and parameter lists\n* Redundant parentheses in annotations without any parameters\n\n**Example:**\n\n\n      @interface Foo { String[] value(); }\n\n      @ Foo({\"foo\"})\n      public String name;\n\nAfter the quick-fix is applied:\n\n\n      @interface Foo { String[] value(); }\n\n      @Foo(\"foo\")\n      public String name;\n\nInspection ID: SimplifiableAnnotation"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SimplifiableAnnotation",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Guava",
                "shortDescription": {
                  "text": "Guava's functional primitives can be replaced with Java"
                },
                "fullDescription": {
                  "text": "Reports usages of Guava's functional primitives that can be migrated to standard Java API calls. For example, the inspection reports usages of classes and interfaces like 'FluentIterable', 'Optional', 'Function', 'Predicate', or 'Supplier'. Example: 'ImmutableList<String> results = FluentIterable.from(List.of(1, 2, 3)).transform(Object::toString).toList();' After the quick-fix is applied: 'List<String> results = List.of(1, 2, 3).stream().map(Object::toString).collect(Collectors.toList());' The quick-fix may change the semantics. Some lazily evaluated Guava iterables can be transformed to eagerly evaluated. This inspection depends on the Java feature 'Stream and Optional API', which is available since Java 8. Inspection ID: Guava",
                  "markdown": "Reports usages of Guava's functional primitives that can be migrated to standard Java API calls.\n\nFor example, the inspection reports usages of classes and interfaces like `FluentIterable`, `Optional`, `Function`,\n`Predicate`, or `Supplier`.\n\nExample:\n\n\n      ImmutableList<String> results = FluentIterable.from(List.of(1, 2, 3)).transform(Object::toString).toList();\n\nAfter the quick-fix is applied:\n\n\n      List<String> results = List.of(1, 2, 3).stream().map(Object::toString).collect(Collectors.toList());\n\n\nThe quick-fix may change the semantics. Some lazily evaluated Guava iterables can be transformed to eagerly evaluated.\n\nThis inspection depends on the Java feature 'Stream and Optional API', which is available since Java 8.\n\nInspection ID: Guava"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "Guava",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level migration aids/Java 8",
                      "index": 94,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NoopMethodInAbstractClass",
                "shortDescription": {
                  "text": "No-op method in 'abstract' class"
                },
                "fullDescription": {
                  "text": "Reports no-op (for \"no operation\") methods in 'abstract' classes. It is usually a better design to make such methods 'abstract' themselves so that classes inheriting these methods provide their implementations. Example: 'abstract class Test {\n    protected void doTest() {\n    }\n  }' Inspection ID: NoopMethodInAbstractClass",
                  "markdown": "Reports no-op (for \"no operation\") methods in `abstract` classes.\n\nIt is usually a better\ndesign to make such methods `abstract` themselves so that classes inheriting these\nmethods provide their implementations.\n\n**Example:**\n\n\n      abstract class Test {\n        protected void doTest() {\n        }\n      }\n\nInspection ID: NoopMethodInAbstractClass"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NoopMethodInAbstractClass",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Class structure",
                      "index": 17,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OverridableMethodCallDuringObjectConstruction",
                "shortDescription": {
                  "text": "Overridable method called during object construction"
                },
                "fullDescription": {
                  "text": "Reports calls to overridable methods of the current class during object construction. A method is called during object construction if it is inside a: Constructor Non-static instance initializer Non-static field initializer 'clone()' method 'readObject()' method 'readObjectNoData()' method Methods are overridable if they are not declared as 'final', 'static', or 'private'. Package-local methods are considered safe, even though they are overridable. Such calls may result in subtle bugs, as object initialization may happen before the method call. Example: 'class Parent {\n    void someMethod() { }\n  }\n\n  class Child extends Parent {\n    Child() {\n      someMethod();\n    }\n  }' This inspection shares the functionality with the following inspections: Abstract method called during object construction Overridden method called during object construction Only one inspection should be enabled at once to prevent warning duplication. Inspection ID: OverridableMethodCallDuringObjectConstruction",
                  "markdown": "Reports calls to overridable methods of the current class during object construction.\n\nA method is called during object construction if it is inside a:\n\n* Constructor\n* Non-static instance initializer\n* Non-static field initializer\n* `clone()` method\n* `readObject()` method\n* `readObjectNoData()` method\n\nMethods are overridable if they are not declared as `final`, `static`, or `private`.\nPackage-local methods are considered safe, even though they are overridable. Such calls may result in subtle bugs,\nas object initialization may happen before the method call.\n\n**Example:**\n\n\n      class Parent {\n        void someMethod() { }\n      }\n\n      class Child extends Parent {\n        Child() {\n          someMethod();\n        }\n      }\n\nThis inspection shares the functionality with the following inspections:\n\n* Abstract method called during object construction\n* Overridden method called during object construction\n\nOnly one inspection should be enabled at once to prevent warning duplication.\n\nInspection ID: OverridableMethodCallDuringObjectConstruction"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "OverridableMethodCallDuringObjectConstruction",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Initialization",
                      "index": 27,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MissingDeprecatedAnnotation",
                "shortDescription": {
                  "text": "Missing '@Deprecated' annotation"
                },
                "fullDescription": {
                  "text": "Reports module declarations, classes, fields, or methods that have the '@deprecated' Javadoc tag but do not have the '@java.lang.Deprecated' annotation. Example: '/**\n   * @deprecated use {@code example()} instead\n   */\n  void sample(){ }' After the quick-fix is applied: '/**\n   * @deprecated use {@code example()} instead\n   */\n  @Deprecated\n  void sample(){ }' Use the checkbox below to report members annotated with '@Deprecated' without an explanation in a Javadoc '@deprecated' tag. This inspection depends on the Java feature 'Annotations', which is available since Java 5. Inspection ID: MissingDeprecatedAnnotation",
                  "markdown": "Reports module declarations, classes, fields, or methods that have the `@deprecated` Javadoc tag but do not have the `@java.lang.Deprecated` annotation.\n\n**Example:**\n\n\n      /**\n       * @deprecated use {@code example()} instead\n       */\n      void sample(){ }\n\nAfter the quick-fix is applied:\n\n\n      /**\n       * @deprecated use {@code example()} instead\n       */\n      @Deprecated\n      void sample(){ }\n\n\nUse the checkbox below to report members annotated with `@Deprecated` without\nan explanation in a Javadoc `@deprecated` tag.\n\nThis inspection depends on the Java feature 'Annotations', which is available since Java 5.\n\nInspection ID: MissingDeprecatedAnnotation"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MissingDeprecatedAnnotation",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Javadoc",
                      "index": 58,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ImplicitCallToSuper",
                "shortDescription": {
                  "text": "Implicit call to 'super()'"
                },
                "fullDescription": {
                  "text": "Reports constructors that do not begin with a call to \"super\" constructor or another constructor of the same class. Such constructors can be thought of as implicitly beginning with a call to 'super()'. Some coding standards prefer that such calls to 'super()' be made explicitly. Example: 'class Foo {\n    Foo() {}\n  }' After the quick-fix is applied: 'class Foo {\n    Foo() {\n      super();\n    }\n  }' Use the inspection settings to ignore classes extending directly from 'Object'. For instance: 'class Foo {\n    Foo() {} // Not reported\n  }\n\n  class Bar extends Foo {\n    Bar() {} // Implicit call to 'super()'\n  }' Inspection ID: ImplicitCallToSuper",
                  "markdown": "Reports constructors that do not begin with a call to \"super\" constructor or another constructor of the same class.\n\nSuch constructors can be thought of as implicitly beginning with a\ncall to `super()`. Some coding standards prefer that such calls to\n`super()` be made explicitly.\n\n**Example:**\n\n\n      class Foo {\n        Foo() {}\n      }\n\nAfter the quick-fix is applied:\n\n\n      class Foo {\n        Foo() {\n          super();\n        }\n      }\n\n\nUse the inspection settings to ignore classes extending directly from `Object`.\nFor instance:\n\n\n      class Foo {\n        Foo() {} // Not reported\n      }\n\n      class Bar extends Foo {\n        Bar() {} // Implicit call to 'super()'\n      }\n\nInspection ID: ImplicitCallToSuper"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ImplicitCallToSuper",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StringTemplateMigration",
                "shortDescription": {
                  "text": "String template can be used"
                },
                "fullDescription": {
                  "text": "Reports 'String' concatenations that can be simplified by replacing them with a string template. Example: 'String name = \"Bob\";\n  String greeting = \"Hello, \" + name + \". You are \" + 29 + \" years old.\";' After the quick-fix is applied: 'String name = \"Bob\";\n  String greeting = STR.\"Hello, \\{name}. You are 29 years old.\";' This inspection depends on the Java feature 'String templates', which is available since Java 21-preview. Inspection ID: StringTemplateMigration New in 2023.3",
                  "markdown": "Reports `String` concatenations that can be simplified by replacing them with a string template.\n\n**Example:**\n\n\n      String name = \"Bob\";\n      String greeting = \"Hello, \" + name + \". You are \" + 29 + \" years old.\";\n\nAfter the quick-fix is applied:\n\n\n      String name = \"Bob\";\n      String greeting = STR.\"Hello, \\{name}. You are 29 years old.\";\n\nThis inspection depends on the Java feature 'String templates', which is available since Java 21-preview.\n\nInspection ID: StringTemplateMigration\n\nNew in 2023.3"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "StringTemplateMigration",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level migration aids/Java 21",
                      "index": 161,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MustAlreadyBeRemovedApi",
                "shortDescription": {
                  "text": "API must already be removed"
                },
                "fullDescription": {
                  "text": "Reports declarations marked with '@ApiStatus.ScheduledForRemoval' that should have been removed in the current version of the declaring library. It compares the specified scheduled removal version with the version that you can set below. Specify the version as a string separated with dots and optionally postfixed with 'alpha', 'beta', 'snapshot', or 'eap'. Examples of valid versions: '1.0', '2.3.1', '2018.1', '7.5-snapshot', '3.0-eap'. Version comparison is intuitive: '1.0 < 2.0', '1.0-eap < 1.0', '2.3-snapshot < 2.3' and so on. For detailed comparison logic, refer to the implementation of VersionComparatorUtil. Inspection ID: MustAlreadyBeRemovedApi",
                  "markdown": "Reports declarations marked with `@ApiStatus.ScheduledForRemoval` that should have been removed in the current version of the declaring library.\n\nIt compares the specified scheduled removal version with the version that you can set below.\n\n\nSpecify the version as a string separated with dots and optionally postfixed with\n`alpha`, `beta`, `snapshot`, or `eap`.\n\nExamples of valid versions: `1.0`, `2.3.1`, `2018.1`, `7.5-snapshot`, `3.0-eap`.\n\n\nVersion comparison is intuitive: `1.0 < 2.0`, `1.0-eap < 1.0`, `2.3-snapshot < 2.3` and so on.\nFor detailed comparison logic, refer to the implementation of [VersionComparatorUtil](https://github.com/JetBrains/intellij-community/blob/master/platform/util-rt/src/com/intellij/util/text/VersionComparatorUtil.java).\n\nInspection ID: MustAlreadyBeRemovedApi"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "MustAlreadyBeRemovedApi",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JVM languages",
                      "index": 1,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CachedNumberConstructorCall",
                "shortDescription": {
                  "text": "Number constructor call with primitive argument"
                },
                "fullDescription": {
                  "text": "Reports instantiations of new 'Long', 'Integer', 'Short', or 'Byte' objects that have a primitive 'long', 'integer', 'short', or 'byte' argument. It is recommended that you use the static method 'valueOf()' introduced in Java 5. By default, this method caches objects for values between -128 and 127 inclusive. Example: 'Integer i = new Integer(1);\n  Long l = new Long(1L);' After the quick-fix is applied, the code changes to: 'Integer i = Integer.valueOf(1);\n  Long l = Long.valueOf(1L);' This inspection only reports if the language level of the project or module is 5 or higher Use the Ignore new number expressions with a String argument option to ignore calls to number constructors with a 'String' argument. Use the Report only when constructor is @Deprecated option to only report calls to deprecated constructors. 'Long', 'Integer', 'Short' and 'Byte' constructors are deprecated since JDK 9. Inspection ID: CachedNumberConstructorCall",
                  "markdown": "Reports instantiations of new `Long`, `Integer`, `Short`, or `Byte` objects that have a primitive `long`, `integer`, `short`, or `byte` argument.\n\nIt is recommended that you use the static method `valueOf()`\nintroduced in Java 5. By default, this method caches objects for values between -128 and\n127 inclusive.\n\n**Example:**\n\n\n      Integer i = new Integer(1);\n      Long l = new Long(1L);\n\nAfter the quick-fix is applied, the code changes to:\n\n\n      Integer i = Integer.valueOf(1);\n      Long l = Long.valueOf(1L);\n\nThis inspection only reports if the language level of the project or module is 5 or higher\n\n\nUse the **Ignore new number expressions with a String argument** option to ignore calls to number constructors with a `String` argument.\n\n\nUse the **Report only when constructor is @Deprecated** option to only report calls to deprecated constructors.\n`Long`, `Integer`, `Short` and `Byte` constructors are deprecated since JDK 9.\n\nInspection ID: CachedNumberConstructorCall"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CachedNumberConstructorCall",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Numeric issues",
                      "index": 25,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MarkdownDocumentationCommentsMigration",
                "shortDescription": {
                  "text": "Javadoc comment can be Markdown documentation comment"
                },
                "fullDescription": {
                  "text": "Reports Javadoc comments that can be converted to Markdown documentation comments. Example: '/**\n   * For blubbering of the florz.\n   *\n   * Similar to {@link com.deeps.Querp querping} class.\n   */\n  class FlorzBlubber {\n  }' After the quick-fix is applied: '/// For blubbering of the florz.\n  /// Similar to [querping][com.deeps.Querp] class.\n  class FlorzBlubber {\n  }' Inspection ID: MarkdownDocumentationCommentsMigration New in 2024.2",
                  "markdown": "Reports Javadoc comments that can be converted to Markdown documentation comments.\n\n**Example:**\n\n\n      /**\n       * For blubbering of the florz.\n       *\n       * Similar to {@link com.deeps.Querp querping} class.\n       */\n      class FlorzBlubber {\n      }\n\nAfter the quick-fix is applied:\n\n\n      /// For blubbering of the florz.\n      /// Similar to [querping][com.deeps.Querp] class.\n      class FlorzBlubber {\n      }\n\nInspection ID: MarkdownDocumentationCommentsMigration\n\nNew in 2024.2"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "MarkdownDocumentationCommentsMigration",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level migration aids/Java 23",
                      "index": 164,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FieldHidesSuperclassField",
                "shortDescription": {
                  "text": "Subclass field hides superclass field"
                },
                "fullDescription": {
                  "text": "Reports fields in a derived class that are named identically a field of a superclass. Java fields cannot be overridden in derived classes, so the field in the derived class will hide the field from the superclass. As a result of such naming, you may accidentally use the field of the derived class where the identically named field of a base class is intended. A quick-fix is suggested to rename the field in the derived class. Example: 'class Parent {\n  Parent parent;\n}\nclass Child extends Parent {\n  Child parent;\n}' You can configure the following options for this inspection: Ignore non-accessible fields - indicates whether this inspection should report all name clashes, or only clashes with fields which are visible from the subclass. Ignore static fields hiding static fields - ignore 'static' fields which hide 'static' fields in base classes. Inspection ID: FieldHidesSuperclassField",
                  "markdown": "Reports fields in a derived class that are named identically a field of a superclass. Java fields cannot be overridden in derived classes, so the field in the derived class will hide the field from the superclass.\n\n\nAs a result of such naming, you may accidentally use the field of the derived class\nwhere the identically named field of a base class is intended.\n\nA quick-fix is suggested to rename the field in the derived class.\n\n**Example:**\n\n    class Parent {\n      Parent parent;\n    }\n    class Child extends Parent {\n      Child parent;\n    }\n\n\nYou can configure the following options for this inspection:\n\n1. **Ignore non-accessible fields** - indicates whether this inspection should report all name clashes, or only clashes with fields which are visible from the subclass.\n2. **Ignore static fields hiding static fields** - ignore `static` fields which hide `static` fields in base classes.\n\nInspection ID: FieldHidesSuperclassField"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "FieldNameHidesFieldInSuperclass",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Visibility",
                      "index": 73,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SimpleDateFormatWithoutLocale",
                "shortDescription": {
                  "text": "'SimpleDateFormat' without locale"
                },
                "fullDescription": {
                  "text": "Reports instantiations of 'java.util.SimpleDateFormat' or 'java.time.format.DateTimeFormatter' that do not specify a 'java.util.Locale'. These calls will use the platform default locale, which depends on the OS settings. This can lead to surprising behaviour when the code is run on a different platform or the OS settings are changed. 'Example:' 'new SimpleDateFormat(\"yyyy\");\n  DateTimeFormatter.ofPattern(\"d/M/y\");' Inspection ID: SimpleDateFormatWithoutLocale",
                  "markdown": "Reports instantiations of `java.util.SimpleDateFormat` or `java.time.format.DateTimeFormatter` that do not specify a `java.util.Locale`. These calls will use the platform default locale, which depends on the OS settings. This can lead to surprising behaviour when the code is run on a different platform or the OS settings are changed.\n\n`Example:`\n\n\n      new SimpleDateFormat(\"yyyy\");\n      DateTimeFormatter.ofPattern(\"d/M/y\");\n\nInspection ID: SimpleDateFormatWithoutLocale"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SimpleDateFormatWithoutLocale",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Internationalization",
                      "index": 3,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AnnotationClass",
                "shortDescription": {
                  "text": "Annotation interface"
                },
                "fullDescription": {
                  "text": "Reports annotation interfaces. Such interfaces are not supported under Java 1.4 and earlier. Inspection ID: AnnotationClass",
                  "markdown": "Reports annotation interfaces. Such interfaces are not supported under Java 1.4 and earlier.\n\n\nInspection ID: AnnotationClass"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AnnotationClass",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level issues",
                      "index": 119,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Finalize",
                "shortDescription": {
                  "text": "'finalize()' should not be overridden"
                },
                "fullDescription": {
                  "text": "Reports overriding the 'Object.finalize()' method. According to the 'Object.finalize()' documentation: The finalization mechanism is inherently problematic. Finalization can lead to performance issues, deadlocks, and hangs. Errors in finalizers can lead to resource leaks; there is no way to cancel finalization if it is no longer necessary; and no ordering is specified among calls to 'finalize' methods of different objects. Furthermore, there are no guarantees regarding the timing of finalization. The 'finalize' method might be called on a finalizable object only after an indefinite delay, if at all. Configure the inspection: Use the Ignore for trivial 'finalize()' implementations option to ignore 'finalize()' implementations with an empty method body or a body containing only 'if' statements that have a condition which evaluates to 'false' and is a compile-time constant. For performance reasons it can be beneficial to override a non-trivial 'finalize()' with an empty implementation in a subclass. An empty final 'finalize()' implementation can also be used to prevent subclasses from overriding. Inspection ID: Finalize",
                  "markdown": "Reports overriding the `Object.finalize()` method.\n\nAccording to the `Object.finalize()` documentation:\n>\n> The finalization mechanism is inherently problematic. Finalization can lead\n> to performance issues, deadlocks, and hangs. Errors in finalizers can lead\n> to resource leaks; there is no way to cancel finalization if it is no longer\n> necessary; and no ordering is specified among calls to `finalize`\n> methods of different objects. Furthermore, there are no guarantees regarding\n> the timing of finalization. The `finalize` method might be called\n> on a finalizable object only after an indefinite delay, if at all.\n\nConfigure the inspection:\n\n* Use the **Ignore for trivial 'finalize()' implementations** option to ignore `finalize()` implementations with an empty method body or a body containing only `if` statements that have a condition which evaluates to `false` and is a compile-time constant. For performance reasons it can be beneficial to override a non-trivial `finalize()` with an empty implementation in a subclass. An empty final `finalize()` implementation can also be used to prevent subclasses from overriding.\n\nInspection ID: Finalize"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "FinalizeDeclaration",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Finalization",
                      "index": 56,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PointlessArithmeticExpression",
                "shortDescription": {
                  "text": "Pointless arithmetic expression"
                },
                "fullDescription": {
                  "text": "Reports pointless arithmetic expressions. Such expressions include adding or subtracting zero, multiplying by zero or one, and division by one. Such expressions may be the result of automated refactorings and they are unlikely to be what the developer intended to do. The quick-fix simplifies such expressions. Example: 'void f(int a) {\n    int x = a - a;\n    int y = a + 0;\n    int res = x / x;\n  }' After the quick-fix is applied: 'void f(int a) {\n    int x = 0;\n    int y = a;\n    int res = 1;\n  }' Note that in rare cases, the suggested replacement might not be completely equivalent to the original code for all possible inputs. For example, the inspection suggests replacing 'x / x' with '1'. However, if 'x' is zero, the original code throws 'ArithmeticException' or results in 'NaN'. Also, if 'x' is 'NaN', then the result is also 'NaN'. It's very unlikely that such behavior is intended. Inspection ID: PointlessArithmeticExpression",
                  "markdown": "Reports pointless arithmetic expressions. Such expressions include adding or subtracting zero, multiplying by zero or one, and division by one.\n\nSuch expressions may be the result of automated refactorings and they are unlikely to be what the developer intended to do.\n\nThe quick-fix simplifies such expressions.\n\n**Example:**\n\n\n      void f(int a) {\n        int x = a - a;\n        int y = a + 0;\n        int res = x / x;\n      }\n\nAfter the quick-fix is applied:\n\n\n      void f(int a) {\n        int x = 0;\n        int y = a;\n        int res = 1;\n      }\n\n\nNote that in rare cases, the suggested replacement might not be completely equivalent to the original code\nfor all possible inputs. For example, the inspection suggests replacing `x / x` with `1`.\nHowever, if `x` is zero, the original code throws `ArithmeticException` or results in `NaN`.\nAlso, if `x` is `NaN`, then the result is also `NaN`. It's very unlikely that such behavior is intended.\n\nInspection ID: PointlessArithmeticExpression"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PointlessArithmeticExpression",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Numeric issues",
                      "index": 25,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OverlyLargePrimitiveArrayInitializer",
                "shortDescription": {
                  "text": "Overly large initializer for array of primitive type"
                },
                "fullDescription": {
                  "text": "Reports array initializer expressions for primitive arrays that contain too many elements. Such initializers may result in overly large class files because code must be generated to initialize each array element. In memory or bandwidth constrained environments, it may be more efficient to load large arrays of primitives from resource files. This inspection is intended for Java ME and other highly resource constrained environments. Applying the results of this inspection without consideration might have negative effects on code clarity and design. Use the option to specify the maximum number of elements to allow in primitive array initializers. Inspection ID: OverlyLargePrimitiveArrayInitializer",
                  "markdown": "Reports array initializer expressions for primitive arrays that contain too many elements. Such initializers may result in overly large class files because code must be generated to initialize each array element. In memory or bandwidth constrained environments, it may be more efficient to load large arrays of primitives from resource files.\n\n\nThis inspection is intended for Java ME and other highly resource constrained environments.\nApplying the results of this inspection without consideration might have negative effects on code clarity and design.\n\n\nUse the option to specify the maximum number of elements to allow in primitive array initializers.\n\nInspection ID: OverlyLargePrimitiveArrayInitializer"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "OverlyLargePrimitiveArrayInitializer",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Performance/Embedded",
                      "index": 137,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ObjectNotify",
                "shortDescription": {
                  "text": "Call to 'notify()' instead of 'notifyAll()'"
                },
                "fullDescription": {
                  "text": "Reports calls to 'Object.notify()'. While occasionally useful, in almost all cases 'Object.notifyAll()' is a better choice because calling 'Object.notify()' may lead to deadlocks. See Doug Lea's Concurrent Programming in Java for a discussion. Inspection ID: ObjectNotify",
                  "markdown": "Reports calls to `Object.notify()`. While occasionally useful, in almost all cases `Object.notifyAll()` is a better choice because calling `Object.notify()` may lead to deadlocks. See Doug Lea's *Concurrent Programming in Java* for a discussion.\n\nInspection ID: ObjectNotify"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CallToNotifyInsteadOfNotifyAll",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Threading issues",
                      "index": 23,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InstanceVariableUninitializedUse",
                "shortDescription": {
                  "text": "Instance field used before initialization"
                },
                "fullDescription": {
                  "text": "Reports instance variables that are read before initialization. The inspection ignores equality checks with 'null'. Example: 'class Foo {\n    int bar;\n\n    Foo() {\n      System.out.println(bar);\n    }\n  }' Note that this inspection uses a very conservative dataflow algorithm and may incorrectly report instance variables as uninitialized. Variables reported as initialized will always be initialized. Use the Ignore if annotated by option to specify special annotations. The inspection will ignore fields annotated with one of these annotations. Use the Ignore primitive fields option to ignore uninitialized primitive fields. Inspection ID: InstanceVariableUninitializedUse",
                  "markdown": "Reports instance variables that are read before initialization.\n\nThe inspection ignores equality checks with `null`.\n\n**Example:**\n\n\n      class Foo {\n        int bar;\n\n        Foo() {\n          System.out.println(bar);\n        }\n      }\n\nNote that this inspection uses a very conservative dataflow algorithm and may incorrectly report instance variables as uninitialized. Variables\nreported as initialized will always be initialized.\n\nUse the **Ignore if annotated by** option to specify special annotations. The inspection will ignore fields\nannotated with one of these annotations.\n\nUse the **Ignore primitive fields** option to ignore uninitialized primitive fields.\n\nInspection ID: InstanceVariableUninitializedUse"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "InstanceVariableUsedBeforeInitialized",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Initialization",
                      "index": 27,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ExpressionMayBeFactorized",
                "shortDescription": {
                  "text": "Expression can be factorized"
                },
                "fullDescription": {
                  "text": "Reports expressions that can be factorized, i.e. reorganized to pull out a common factor. This reduces redundancy and could improve the readability of your code. Example: 'a && b || a && c' After the quick-fix is applied: 'a && (b || c)' Inspection ID: ExpressionMayBeFactorized New in 2021.3",
                  "markdown": "Reports expressions that can be factorized, i.e. reorganized to pull out a common factor. This reduces redundancy and could improve the readability of your code.\n\n**Example:**\n\n\n      a && b || a && c\n\nAfter the quick-fix is applied:\n\n\n      a && (b || c)\n\nInspection ID: ExpressionMayBeFactorized\n\nNew in 2021.3"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ExpressionMayBeFactorized",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Control flow issues",
                      "index": 24,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ListRemoveInLoop",
                "shortDescription": {
                  "text": "'List.remove()' called in loop"
                },
                "fullDescription": {
                  "text": "Reports 'List.remove(index)' called in a loop that can be replaced with 'List.subList().clear()'. The replacement is more efficient for most 'List' implementations when many elements are deleted. Example: 'void removeRange(List<String> list, int from, int to) {\n    for (int i = from; i < to; i++) {\n        list.remove(from);\n    }\n  }' After the quick-fix is applied: 'void removeRange(List<String> list, int from, int to) {\n    if (to > from) {\n      list.subList(from, to).clear();\n    }\n  }' The quick-fix adds a range check automatically to prevent a possible 'IndexOutOfBoundsException' when the minimal value is bigger than the maximal value. It can be removed if such a situation is impossible in your code. Inspection ID: ListRemoveInLoop New in 2018.2",
                  "markdown": "Reports `List.remove(index)` called in a loop that can be replaced with `List.subList().clear()`.\n\nThe replacement\nis more efficient for most `List` implementations when many elements are deleted.\n\nExample:\n\n\n      void removeRange(List<String> list, int from, int to) {\n        for (int i = from; i < to; i++) {\n            list.remove(from);\n        }\n      }\n\nAfter the quick-fix is applied:\n\n\n      void removeRange(List<String> list, int from, int to) {\n        if (to > from) {\n          list.subList(from, to).clear();\n        }\n      }\n\n\nThe quick-fix adds a range check automatically to prevent a possible `IndexOutOfBoundsException` when the minimal value is bigger\nthan the maximal value. It can be removed if such a situation is impossible in your code.\n\nInspection ID: ListRemoveInLoop\n\nNew in 2018.2"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ListRemoveInLoop",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Performance",
                      "index": 4,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MissingOverrideAnnotation",
                "shortDescription": {
                  "text": "Missing '@Override' annotation"
                },
                "fullDescription": {
                  "text": "Reports methods overriding superclass methods but are not annotated with '@java.lang.Override'. Annotating methods with '@java.lang.Override' improves code readability since it shows the intent. In addition, the compiler emits an error when a signature of the overridden method doesn't match the superclass method. Example: 'class X {\n      public String toString() {\n        return \"hello world\";\n      }\n    }' After the quick-fix is applied: 'class X {\n      @Override\n      public String toString() {\n        return \"hello world\";\n      }\n    }' Configure the inspection: Use the Ignore 'equals()', 'hashCode()' and 'toString()' option to ignore these 'java.lang.Object' methods: 'equals()', 'hashCode()', and 'toString()'. The risk that these methods will disappear and your code won't be compiling anymore due to the '@Override' annotation is relatively small. Use the Ignore methods in anonymous classes option to ignore methods in anonymous classes. Disable the Highlight method when its overriding methods do not all have the '@Override' annotation option to only warn on the methods missing an '@Override' annotation, and not on overridden methods where one or more descendants are missing an '@Override' annotation. This inspection depends on the Java feature 'Annotations', which is available since Java 5. Inspection ID: MissingOverrideAnnotation",
                  "markdown": "Reports methods overriding superclass methods but are not annotated with `@java.lang.Override`.\n\n\nAnnotating methods with `@java.lang.Override` improves code readability since it shows the intent.\nIn addition, the compiler emits an error when a signature of the overridden method doesn't match the superclass method.\n\n**Example:**\n\n\n        class X {\n          public String toString() {\n            return \"hello world\";\n          }\n        }\n      \nAfter the quick-fix is applied:\n\n\n        class X {\n          @Override\n          public String toString() {\n            return \"hello world\";\n          }\n        }\n      \nConfigure the inspection:\n\n* Use the **Ignore 'equals()', 'hashCode()' and 'toString()'** option to ignore these `java.lang.Object` methods: `equals()`, `hashCode()`, and `toString()`. The risk that these methods will disappear and your code won't be compiling anymore due to the `@Override` annotation is relatively small.\n* Use the **Ignore methods in anonymous classes** option to ignore methods in anonymous classes.\n* Disable the **Highlight method when its overriding methods do not all have the '@Override' annotation** option to only warn on the methods missing an `@Override` annotation, and not on overridden methods where one or more descendants are missing an `@Override` annotation.\n\nThis inspection depends on the Java feature 'Annotations', which is available since Java 5.\n\nInspection ID: MissingOverrideAnnotation"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "override",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Inheritance issues",
                      "index": 121,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CharUsedInArithmeticContext",
                "shortDescription": {
                  "text": "'char' expression used in arithmetic context"
                },
                "fullDescription": {
                  "text": "Reports expressions of the 'char' type used in addition or subtraction expressions. Such code is not necessarily an issue but may result in bugs (for example, if a string is expected). Example: 'int a = 'a' + 42;' After the quick-fix is applied: 'int a = (int) 'a' + 42;' For the 'String' context: 'int i1 = 1;\nint i2 = 2;\nSystem.out.println(i2 + '-' + i1 + \" = \" + (i2 - i1));' After the quick-fix is applied: 'System.out.println(i2 + \"-\" + i1 + \" = \" + (i2 - i1));' Inspection ID: CharUsedInArithmeticContext",
                  "markdown": "Reports expressions of the `char` type used in addition or subtraction expressions.\n\nSuch code is not necessarily an issue but may result in bugs (for example,\nif a string is expected).\n\n**Example:** `int a = 'a' + 42;`\n\nAfter the quick-fix is applied: `int a = (int) 'a' + 42;`\n\nFor the `String` context:\n\n    int i1 = 1;\n    int i2 = 2;\n    System.out.println(i2 + '-' + i1 + \" = \" + (i2 - i1));\n\nAfter the quick-fix is applied:\n`System.out.println(i2 + \"-\" + i1 + \" = \" + (i2 - i1));`\n\nInspection ID: CharUsedInArithmeticContext"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CharUsedInArithmeticContext",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Numeric issues",
                      "index": 25,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StringEqualsCharSequence",
                "shortDescription": {
                  "text": "'String.equals()' called with 'CharSequence' argument"
                },
                "fullDescription": {
                  "text": "Reports calls to 'String.equals()' with a 'CharSequence' as the argument. 'String.equals()' can only return 'true' for 'String' arguments. To compare the contents of a 'String' with a non-'String' 'CharSequence' argument, use the 'contentEquals()' method. Example: 'boolean equals(String s, CharSequence ch) {\n    return s.equals(ch);\n  }' After quick-fix is applied: 'boolean equals(String s, CharSequence ch) {\n    return s.contentEquals(ch);\n  }' New in 2017.3 Inspection ID: StringEqualsCharSequence",
                  "markdown": "Reports calls to `String.equals()` with a `CharSequence` as the argument.\n\n\n`String.equals()` can only return `true` for `String` arguments.\nTo compare the contents of a `String` with a non-`String` `CharSequence` argument,\nuse the `contentEquals()` method.\n\n**Example:**\n\n\n      boolean equals(String s, CharSequence ch) {\n        return s.equals(ch);\n      }\n\nAfter quick-fix is applied:\n\n\n      boolean equals(String s, CharSequence ch) {\n        return s.contentEquals(ch);\n      }\n\n\nNew in 2017.3\n\nInspection ID: StringEqualsCharSequence"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "StringEqualsCharSequence",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TestFailedLine",
                "shortDescription": {
                  "text": "Failed line in test"
                },
                "fullDescription": {
                  "text": "Reports failed method calls or assertions in tests. It helps detect the failed line in code faster and start debugging it immediately. Example: '@Test\n  fun foo() {\n    assertEquals(1, 0) // highlighted\n  }' Inspection ID: TestFailedLine",
                  "markdown": "Reports failed method calls or assertions in tests. It helps detect the failed line in code faster and start debugging it immediately.\n\n**Example:**\n\n\n      @Test\n      fun foo() {\n        assertEquals(1, 0) // highlighted\n      }\n\nInspection ID: TestFailedLine"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "TestFailedLine",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JVM languages/Test frameworks",
                      "index": 95,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PublicStaticCollectionField",
                "shortDescription": {
                  "text": "'public static' collection field"
                },
                "fullDescription": {
                  "text": "Reports modifiable 'public' 'static' Collection fields. Even though they are often used to store collections of constant values, these fields nonetheless represent a security hazard, as their contents may be modified even if the field is declared as 'final'. Example: 'public static final List<String> EVENTS = new ArrayList<>();'\n Use the table in the Options section to specify methods returning unmodifiable collections. 'public' 'static' collection fields initialized with these methods will not be reported. Inspection ID: PublicStaticCollectionField",
                  "markdown": "Reports modifiable `public` `static` Collection fields.\n\nEven though they are often used to store collections of constant values, these fields nonetheless represent a security\nhazard, as their contents may be modified even if the field is declared as `final`.\n\n**Example:**\n\n\n      public static final List<String> EVENTS = new ArrayList<>();\n      \n\nUse the table in the **Options** section to specify methods returning unmodifiable collections.\n`public` `static` collection fields initialized with these methods will not be reported.\n\nInspection ID: PublicStaticCollectionField"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PublicStaticCollectionField",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Security",
                      "index": 31,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ExtendsConcreteCollection",
                "shortDescription": {
                  "text": "Class explicitly extends a 'Collection' class"
                },
                "fullDescription": {
                  "text": "Reports classes that extend concrete subclasses of the 'java.util.Collection' or 'java.util.Map' classes. Subclassing concrete collection types is a common yet poor practice. It is considerably more brittle than delegating collection calls. Inspection ID: ExtendsConcreteCollection",
                  "markdown": "Reports classes that extend concrete subclasses of the `java.util.Collection` or `java.util.Map` classes.\n\n\nSubclassing concrete collection types is a common yet poor practice. It is considerably more brittle than delegating collection calls.\n\nInspection ID: ExtendsConcreteCollection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ClassExtendsConcreteCollection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Inheritance issues",
                      "index": 121,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ObjectInstantiationInEqualsHashCode",
                "shortDescription": {
                  "text": "Object instantiation inside 'equals()' or 'hashCode()'"
                },
                "fullDescription": {
                  "text": "Reports construction of (temporary) new objects inside 'equals()', 'hashCode()', 'compareTo()', and 'Comparator.compare()' methods. Besides constructor invocations, new objects can also be created by autoboxing or iterator creation inside a 'foreach' statement. This can cause performance problems, for example, when objects are added to a 'Set' or 'Map', where these methods will be called often. The inspection will not report when the objects are created in a 'throw' or 'assert' statement. Example: 'class Person {\n    private String name;\n    private int age;\n\n    public boolean equals(Object o) {\n      return Arrays.equals(new Object[] {name, age}, new Object[] {((Foo)o).name, ((Foo)o).age});\n    }\n\n    public int hashCode() {\n      return (name + age).hashCode();\n    }\n  }' In this example, two additional arrays are created inside 'equals()', usages of 'age' field require boxing, and 'name + age' implicitly creates a new string. Inspection ID: ObjectInstantiationInEqualsHashCode",
                  "markdown": "Reports construction of (temporary) new objects inside `equals()`, `hashCode()`, `compareTo()`, and `Comparator.compare()` methods.\n\n\nBesides constructor invocations, new objects can also be created by autoboxing or iterator creation inside a\n`foreach` statement.\nThis can cause performance problems, for example, when objects are added to a `Set` or `Map`,\nwhere these methods will be called often.\n\n\nThe inspection will not report when the objects are created in a `throw` or `assert` statement.\n\n**Example:**\n\n\n      class Person {\n        private String name;\n        private int age;\n\n        public boolean equals(Object o) {\n          return Arrays.equals(new Object[] {name, age}, new Object[] {((Foo)o).name, ((Foo)o).age});\n        }\n\n        public int hashCode() {\n          return (name + age).hashCode();\n        }\n      }\n\n\nIn this example, two additional arrays are created inside `equals()`, usages of `age` field require boxing,\nand `name + age` implicitly creates a new string.\n\nInspection ID: ObjectInstantiationInEqualsHashCode"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ObjectInstantiationInEqualsHashCode",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Performance",
                      "index": 4,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnconditionalWait",
                "shortDescription": {
                  "text": "Unconditional 'wait()' call"
                },
                "fullDescription": {
                  "text": "Reports 'wait()' being called unconditionally within a synchronized context. Normally, 'wait()' is used to block a thread until some condition is true. If 'wait()' is called unconditionally, it often indicates that the condition was checked before a lock was acquired. In that case a data race may occur, with the condition becoming true between the time it was checked and the time the lock was acquired. While constructs found by this inspection are not necessarily incorrect, they are certainly worth examining. Example: 'class Bar {\n      void foo() throws InterruptedException {\n          synchronized (this) {\n              wait(); // warning\n          }\n      }\n  }' Inspection ID: UnconditionalWait",
                  "markdown": "Reports `wait()` being called unconditionally within a synchronized context.\n\n\nNormally, `wait()` is used to block a thread until some condition is true. If\n`wait()` is called unconditionally, it often indicates that the condition was\nchecked before a lock was acquired. In that case a data race may occur, with the condition\nbecoming true between the time it was checked and the time the lock was acquired.\n\n\nWhile constructs found by this inspection are not necessarily incorrect, they are certainly worth examining.\n\n**Example:**\n\n\n      class Bar {\n          void foo() throws InterruptedException {\n              synchronized (this) {\n                  wait(); // warning\n              }\n          }\n      }\n\nInspection ID: UnconditionalWait"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnconditionalWait",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Threading issues",
                      "index": 23,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MethodOverridesInaccessibleMethodOfSuper",
                "shortDescription": {
                  "text": "Method overrides inaccessible method of superclass"
                },
                "fullDescription": {
                  "text": "Reports methods with the same signature as an inaccessible method of a superclass, for example, a private method, or a package-private method of a superclass in another package. Such method names may be confusing because the method in the subclass may look like an override when in fact it hides the inaccessible method of the superclass. Moreover, if the visibility of the method in the superclass changes later, it may either silently change the semantics of the subclass or cause a compilation error. A quick-fix is suggested to rename the method. Example: 'public class Super {\n    private void test() {\n    }\n  }\n\n  public class Sub extends Super {\n    void test() { // making 'Super.test()' public causes a compilation error\n                  // making 'Super.test()' package-private makes 'Sub.test()' an override\n    }\n  }' Inspection ID: MethodOverridesInaccessibleMethodOfSuper",
                  "markdown": "Reports methods with the same signature as an inaccessible method of a superclass, for example, a private method, or a package-private method of a superclass in another package.\n\n\nSuch method names may be confusing because the method in the subclass may look like an override when in fact\nit hides the inaccessible method of the superclass.\nMoreover, if the visibility of the method in the superclass changes later,\nit may either silently change the semantics of the subclass or cause a compilation error.\n\nA quick-fix is suggested to rename the method.\n\n**Example:**\n\n\n      public class Super {\n        private void test() {\n        }\n      }\n\n      public class Sub extends Super {\n        void test() { // making 'Super.test()' public causes a compilation error\n                      // making 'Super.test()' package-private makes 'Sub.test()' an override\n        }\n      }\n\n\nInspection ID: MethodOverridesInaccessibleMethodOfSuper"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MethodOverridesInaccessibleMethodOfSuper",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Visibility",
                      "index": 73,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IntLiteralMayBeLongLiteral",
                "shortDescription": {
                  "text": "Cast to 'long' can be 'long' literal"
                },
                "fullDescription": {
                  "text": "Reports 'int' literal expressions that are immediately cast to 'long'. Such literal expressions can be replaced with equivalent 'long' literals. Example: 'Long l = (long)42;' After the quick-fix is applied: 'Long l = 42L;' Inspection ID: IntLiteralMayBeLongLiteral",
                  "markdown": "Reports `int` literal expressions that are immediately cast to `long`.\n\nSuch literal expressions can be replaced with equivalent `long` literals.\n\n**Example:**\n\n    Long l = (long)42;\n\nAfter the quick-fix is applied:\n\n    Long l = 42L;\n\nInspection ID: IntLiteralMayBeLongLiteral"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "IntLiteralMayBeLongLiteral",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Numeric issues/Cast",
                      "index": 112,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SingleCharacterStartsWith",
                "shortDescription": {
                  "text": "Single character 'startsWith()' or 'endsWith()'"
                },
                "fullDescription": {
                  "text": "Reports calls to 'String.startsWith()' and 'String.endsWith()' where single character string literals are passed as an argument. A quick-fix is suggested to replace such calls with more efficiently implemented 'String.charAt()'. However, the performance gain of such change is minimal and the code becomes less readable because of the extra non-zero length check, so it is recommended to apply the quick-fix only inside tight loops. This inspection is intended for Java ME and other highly resource constrained environments. Applying the results of this inspection without consideration might have negative effects on code clarity and design. Example: 'boolean startsWithX(String s) {\n    return s.startsWith(\"x\");\n  }' After the quick-fix is applied: 'boolean startsWithX(String s) {\n    return !s.isEmpty() && s.charAt(0) == 'x';\n  }' Inspection ID: SingleCharacterStartsWith",
                  "markdown": "Reports calls to `String.startsWith()` and `String.endsWith()` where single character string literals are passed as an argument.\n\n\nA quick-fix is suggested to replace such calls with more efficiently implemented `String.charAt()`.\n\n\nHowever, the performance gain of such change is minimal and the code becomes less readable because of the extra non-zero length check,\nso it is recommended to apply the quick-fix only inside tight loops.\n\n\nThis inspection is intended for Java ME and other highly resource constrained environments.\nApplying the results of this inspection without consideration might have negative effects on code clarity and design.\n\n**Example:**\n\n\n      boolean startsWithX(String s) {\n        return s.startsWith(\"x\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      boolean startsWithX(String s) {\n        return !s.isEmpty() && s.charAt(0) == 'x';\n      }\n\nInspection ID: SingleCharacterStartsWith"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SingleCharacterStartsWith",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Performance/Embedded",
                      "index": 137,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UtilityClassCanBeEnum",
                "shortDescription": {
                  "text": "Utility class can be 'enum'"
                },
                "fullDescription": {
                  "text": "Reports utility classes that can be converted to enums. Some coding style guidelines require implementing utility classes as enums to avoid code coverage issues in 'private' constructors. Example: 'class StringUtils {\n    public static final String EMPTY = \"\";\n  }' After the quick-fix is applied: 'enum StringUtils {\n    ;\n    public static final String EMPTY = \"\";\n  }' This inspection depends on the Java feature 'Enums', which is available since Java 5. Inspection ID: UtilityClassCanBeEnum",
                  "markdown": "Reports utility classes that can be converted to enums.\n\nSome coding style guidelines require implementing utility classes as enums\nto avoid code coverage issues in `private` constructors.\n\n**Example:**\n\n\n      class StringUtils {\n        public static final String EMPTY = \"\";\n      }\n\nAfter the quick-fix is applied:\n\n\n      enum StringUtils {\n        ;\n        public static final String EMPTY = \"\";\n      }\n\nThis inspection depends on the Java feature 'Enums', which is available since Java 5.\n\nInspection ID: UtilityClassCanBeEnum"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UtilityClassCanBeEnum",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Class structure",
                      "index": 17,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ExtendsObject",
                "shortDescription": {
                  "text": "Class explicitly extends 'Object'"
                },
                "fullDescription": {
                  "text": "Reports any classes that are explicitly declared to extend 'java.lang.Object'. Such declaration is redundant and can be safely removed. Example: 'class MyClass extends Object {\n  }' The quick-fix removes the redundant 'extends Object' clause: 'class MyClass {\n  }' Inspection ID: ExtendsObject",
                  "markdown": "Reports any classes that are explicitly declared to extend `java.lang.Object`.\n\nSuch declaration is redundant and can be safely removed.\n\nExample:\n\n\n      class MyClass extends Object {\n      }\n\nThe quick-fix removes the redundant `extends Object` clause:\n\n\n      class MyClass {\n      }\n\nInspection ID: ExtendsObject"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ClassExplicitlyExtendsObject",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReassignedVariable",
                "shortDescription": {
                  "text": "Reassigned variable"
                },
                "fullDescription": {
                  "text": "Reports reassigned variables, which complicate reading and understanding the code. Example: 'int value = 2 * (height + width);\n  System.out.println(\"perimeter: \" + value);\n\n  value = height * width;\n  System.out.println(\"area: \" + value);' Inspection ID: ReassignedVariable",
                  "markdown": "Reports reassigned variables, which complicate reading and understanding the code.\n\nExample:\n\n\n      int value = 2 * (height + width);\n      System.out.println(\"perimeter: \" + value);\n\n      value = height * width;\n      System.out.println(\"area: \" + value);\n\nInspection ID: ReassignedVariable"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ReassignedVariable",
                    "ideaSeverity": "TEXT ATTRIBUTES",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MethodNameSameAsClassName",
                "shortDescription": {
                  "text": "Method name same as class name"
                },
                "fullDescription": {
                  "text": "Reports methods that are named identically to their class. While such naming is allowed by the Java language, by convention it is reserved for defining constructors. Using it for methods is probably a mistake or bad practice. Example: 'class MyClass {\n    int val;\n\n    // Method MyClass named identically to its containing class.\n    // Likely, 'void' was added by mistake.\n    void MyClass(int val) {\n      this.val = val;\n    }\n  }' When appropriate, a quick-fix converts the method to a constructor: 'class MyClass {\n    int val;\n\n    MyClass(int val) {\n      this.val = val;\n    }\n  }' Another quick-fix renames the method. Inspection ID: MethodNameSameAsClassName",
                  "markdown": "Reports methods that are named identically to their class. While such naming is allowed by the Java language, by convention it is reserved for defining constructors. Using it for methods is probably a mistake or bad practice.\n\n**Example:**\n\n\n      class MyClass {\n        int val;\n\n        // Method MyClass named identically to its containing class.\n        // Likely, 'void' was added by mistake.\n        void MyClass(int val) {\n          this.val = val;\n        }\n      }\n\nWhen appropriate, a quick-fix converts the method to a constructor:\n\n\n      class MyClass {\n        int val;\n\n        MyClass(int val) {\n          this.val = val;\n        }\n      }\n\nAnother quick-fix renames the method.\n\nInspection ID: MethodNameSameAsClassName"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MethodNameSameAsClassName",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Naming conventions/Method",
                      "index": 83,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LocalVariableNamingConvention",
                "shortDescription": {
                  "text": "Local variable naming convention"
                },
                "fullDescription": {
                  "text": "Reports local variables whose names are too short, too long, or do not follow the specified regular expression pattern. Example: 'int X = 42;' should be reported if the inspection is enabled with the default settings in which a variable name should start with a lowercase letter. Configure the inspection: Use the fields in the Options section to specify the minimum length, maximum length, and a regular expression expected for local variable names. Specify 0 in order not to check the length of names. Regular expressions should be specified in the standard java.util.regex format. Use checkboxes to ignore 'for'-loop and 'catch' section parameters. Inspection ID: LocalVariableNamingConvention",
                  "markdown": "Reports local variables whose names are too short, too long, or do not follow the specified regular expression pattern.\n\n**Example:** `int X = 42;`\nshould be reported if the inspection is enabled with the default settings in which a variable name should start with a lowercase letter.\n\nConfigure the inspection:\n\n\nUse the fields in the **Options** section to specify the minimum length, maximum length, and a regular expression expected for local variable names.\nSpecify **0** in order not to check the length of names. Regular expressions should be specified in the standard **java.util.regex** format.\n\nUse checkboxes to ignore `for`-loop and `catch` section parameters.\n\nInspection ID: LocalVariableNamingConvention"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "LocalVariableNamingConvention",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Naming conventions",
                      "index": 59,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryJavaDocLink",
                "shortDescription": {
                  "text": "Unnecessary Javadoc link"
                },
                "fullDescription": {
                  "text": "Reports Javadoc '@see', '{@link}', and '{@linkplain}' tags that refer to the method owning the comment, the super method of the method owning the comment, or the class containing the comment. Such links are unnecessary and can be safely removed with this inspection's quick-fix. The quick-fix will remove the entire Javadoc comment if the tag is its only content. Example: 'class Example {\n    /**\n     * @see Example#method\n     */\n    public void method() { }\n  }' After the quick-fix is applied: 'class Example {\n  public void method() { }\n}' Use the checkbox below to ignore inline links ('{@link}' and '{@linkplain}') to super methods. Although a link to all super methods is automatically added by the Javadoc tool, an inline link to the super method may sometimes be needed in texts of the Javadoc comments. Inspection ID: UnnecessaryJavaDocLink",
                  "markdown": "Reports Javadoc `@see`, `{@link}`, and `{@linkplain}` tags that refer to the method owning the comment, the super method of the method owning the comment, or the class containing the comment.\n\nSuch links are unnecessary and can be safely removed with this inspection's quick-fix. The\nquick-fix will remove the entire Javadoc comment if the tag is its only content.\n\n**Example:**\n\n\n      class Example {\n        /**\n         * @see Example#method\n         */\n        public void method() { }\n      }\n\nAfter the quick-fix is applied:\n\n\n    class Example {\n      public void method() { }\n    }\n\n\nUse the checkbox below to ignore inline links (`{@link}` and `{@linkplain}`)\nto super methods. Although a link to all super methods is automatically added by the\nJavadoc tool, an inline link to the super method may sometimes be needed in texts of the Javadoc comments.\n\nInspection ID: UnnecessaryJavaDocLink"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnnecessaryJavaDocLink",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Javadoc",
                      "index": 58,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NestedSwitchStatement",
                "shortDescription": {
                  "text": "Nested 'switch' statement"
                },
                "fullDescription": {
                  "text": "Reports nested 'switch' statements or expressions. Nested 'switch' statements may result in extremely confusing code. These statements may be extracted to a separate method. Example: 'int res = switch (i) {\n            case 0 -> 0;\n            default -> switch (i) {\n                case 100 -> 0;\n                default -> i;\n            };\n        };' Inspection ID: NestedSwitchStatement",
                  "markdown": "Reports nested `switch` statements or expressions.\n\nNested `switch` statements\nmay result in extremely confusing code. These statements may be extracted to a separate method.\n\nExample:\n\n\n      int res = switch (i) {\n                case 0 -> 0;\n                default -> switch (i) {\n                    case 100 -> 0;\n                    default -> i;\n                };\n            };\n\n\nInspection ID: NestedSwitchStatement"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NestedSwitchStatement",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Control flow issues",
                      "index": 24,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EmptyTryBlock",
                "shortDescription": {
                  "text": "Empty 'try' block"
                },
                "fullDescription": {
                  "text": "Reports empty 'try' blocks, including try-with-resources statements. 'try' blocks with comments are considered empty. This inspection doesn't report empty 'try' blocks found in JSP files. Inspection ID: EmptyTryBlock",
                  "markdown": "Reports empty `try` blocks, including try-with-resources statements.\n\n`try` blocks with comments are considered empty.\n\n\nThis inspection doesn't report empty `try` blocks found in JSP files.\n\nInspection ID: EmptyTryBlock"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EmptyTryBlock",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Error handling",
                      "index": 10,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CollectionsFieldAccessReplaceableByMethodCall",
                "shortDescription": {
                  "text": "Reference to empty collection field can be replaced with method call"
                },
                "fullDescription": {
                  "text": "Reports usages of 'java.util.Collections' fields: 'EMPTY_LIST', 'EMPTY_MAP' or 'EMPTY_SET'. These field usages may be replaced with the following method calls: 'emptyList()', 'emptyMap()', or 'emptySet()'. Such method calls prevent unchecked warnings by the compiler because the type parameters can be inferred. Example: 'List<Integer> emptyList = Collections.EMPTY_LIST;' After the quick-fix is applied: 'List<Integer> emptyList = Collections.emptyList();' This inspection only reports if the language level of the project or module is 5 or higher. Inspection ID: CollectionsFieldAccessReplaceableByMethodCall",
                  "markdown": "Reports usages of `java.util.Collections` fields: `EMPTY_LIST`, `EMPTY_MAP` or `EMPTY_SET`. These field usages may be replaced with the following method calls: `emptyList()`, `emptyMap()`, or `emptySet()`. Such method calls prevent unchecked warnings by the compiler because the type parameters can be inferred.\n\n**Example:**\n\n\n      List<Integer> emptyList = Collections.EMPTY_LIST;\n\nAfter the quick-fix is applied:\n\n\n      List<Integer> emptyList = Collections.emptyList();\n\nThis inspection only reports if the language level of the project or module is 5 or higher.\n\n\nInspection ID: CollectionsFieldAccessReplaceableByMethodCall"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CollectionsFieldAccessReplaceableByMethodCall",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level migration aids/Java 5",
                      "index": 93,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AssertWithSideEffects",
                "shortDescription": {
                  "text": "'assert' statement with side effects"
                },
                "fullDescription": {
                  "text": "Reports 'assert' statements that cause side effects. Since assertions can be switched off, these side effects are not guaranteed, which can cause subtle bugs. Common unwanted side effects detected by this inspection are modifications of variables and fields. When methods calls are involved, they are analyzed one level deep. Example: 'assert i++ < 10;' This inspection depends on the Java feature 'Assertions', which is available since Java 1.4. Inspection ID: AssertWithSideEffects",
                  "markdown": "Reports `assert` statements that cause side effects.\n\n\nSince assertions can be switched off,\nthese side effects are not guaranteed, which can cause subtle bugs. Common unwanted side effects detected by this inspection are\nmodifications of variables and fields. When methods calls are involved, they are analyzed one level deep.\n\n**Example:**\n\n\n      assert i++ < 10;\n\nThis inspection depends on the Java feature 'Assertions', which is available since Java 1.4.\n\nInspection ID: AssertWithSideEffects"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AssertWithSideEffects",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "WaitOrAwaitWithoutTimeout",
                "shortDescription": {
                  "text": "'wait()' or 'await()' without timeout"
                },
                "fullDescription": {
                  "text": "Reports calls to 'Object.wait()' or 'Condition.await()' without specifying a timeout. Such calls may be dangerous in high-availability programs, as failures in one component may result in blockages of the waiting component if 'notify()'/'notifyAll()' or 'signal()'/'signalAll()' never get called. Example: 'void foo(Object bar) throws InterruptedException {\n    bar.wait();\n  }' Inspection ID: WaitOrAwaitWithoutTimeout",
                  "markdown": "Reports calls to `Object.wait()` or `Condition.await()` without specifying a timeout.\n\n\nSuch calls may be dangerous in high-availability programs, as failures in one\ncomponent may result in blockages of the waiting component\nif `notify()`/`notifyAll()`\nor `signal()`/`signalAll()` never get called.\n\n**Example:**\n\n\n      void foo(Object bar) throws InterruptedException {\n        bar.wait();\n      }\n\nInspection ID: WaitOrAwaitWithoutTimeout"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "WaitOrAwaitWithoutTimeout",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Threading issues",
                      "index": 23,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FinalClass",
                "shortDescription": {
                  "text": "Class is closed to inheritance"
                },
                "fullDescription": {
                  "text": "Reports classes that are declared 'final'. Final classes that extend a 'sealed' class or interface are not reported. Such classes can't be inherited and may indicate a lack of object-oriented design. Some coding standards discourage 'final' classes. Example: 'public final class Main {\n  }' After the quick-fix is applied: 'public class Main {\n  }' Inspection ID: FinalClass",
                  "markdown": "Reports classes that are declared `final`. Final classes that extend a `sealed` class or interface are not reported. Such classes can't be inherited and may indicate a lack of object-oriented design. Some coding standards discourage `final` classes.\n\n**Example:**\n\n\n      public final class Main {\n      }\n\nAfter the quick-fix is applied:\n\n\n      public class Main {\n      }\n\nInspection ID: FinalClass"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "FinalClass",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Class structure",
                      "index": 17,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryEmptyArrayUsage",
                "shortDescription": {
                  "text": "Unnecessary zero length array usage"
                },
                "fullDescription": {
                  "text": "Reports allocations of arrays with known lengths of zero when there is a constant for that in the class of the array's element type. As zero-length arrays are immutable, you can save memory reusing the same array instance. Example: 'class Item {\n    // Public zero-length array constant that can be reused \n    public static final Item[] EMPTY_ARRAY = new Item[0];\n  }\n  class EmptyNode {\n    Item[] getChildren() {\n      // Unnecessary zero-length array creation\n      return new Item[0];\n    }\n  }' After the quick-fix is applied: 'class EmptyNode {\n    Item[] getChildren() {\n      return Item.EMPTY_ARRAY;\n    }\n  }' Inspection ID: UnnecessaryEmptyArrayUsage",
                  "markdown": "Reports allocations of arrays with known lengths of zero when there is a constant for that in the class of the array's element type. As zero-length arrays are immutable, you can save memory reusing the same array instance.\n\n**Example:**\n\n\n      class Item {\n        // Public zero-length array constant that can be reused \n        public static final Item[] EMPTY_ARRAY = new Item[0];\n      }\n      class EmptyNode {\n        Item[] getChildren() {\n          // Unnecessary zero-length array creation\n          return new Item[0];\n        }\n      }\n\nAfter the quick-fix is applied:\n\n\n      class EmptyNode {\n        Item[] getChildren() {\n          return Item.EMPTY_ARRAY;\n        }\n      }\n\nInspection ID: UnnecessaryEmptyArrayUsage"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ConstantForZeroLengthArrayAllocation",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Memory",
                      "index": 132,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LiteralAsArgToStringEquals",
                "shortDescription": {
                  "text": "String literal may be 'equals()' qualifier"
                },
                "fullDescription": {
                  "text": "Reports 'String.equals()' or 'String.equalsIgnoreCase()' calls with a string literal argument. Some coding standards specify that string literals should be the qualifier of 'equals()', rather than argument, thus minimizing 'NullPointerException'-s. A quick-fix is available to exchange the literal and the expression. Example: 'boolean isFoo(String value) {\n    return value.equals(\"foo\");\n  }' After the quick-fix is applied: 'boolean isFoo(String value) {\n    return \"foo\".equals(value);\n  }' Inspection ID: LiteralAsArgToStringEquals",
                  "markdown": "Reports `String.equals()` or `String.equalsIgnoreCase()` calls with a string literal argument.\n\nSome coding standards specify that string literals should be the qualifier of `equals()`, rather than\nargument, thus minimizing `NullPointerException`-s.\n\nA quick-fix is available to exchange the literal and the expression.\n\n**Example:**\n\n\n      boolean isFoo(String value) {\n        return value.equals(\"foo\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      boolean isFoo(String value) {\n        return \"foo\".equals(value);\n      }\n\nInspection ID: LiteralAsArgToStringEquals"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "LiteralAsArgToStringEquals",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DuplicateExpressions",
                "shortDescription": {
                  "text": "Multiple occurrences of the same expression"
                },
                "fullDescription": {
                  "text": "Reports multiple equivalent occurrences of the same expression within a method (or constructor, or class initializer) if the result of the expression can be reused. The expression is reported if it's free of side effects and its result is always the same (in terms of 'Object.equals()'). The examples of such expressions are 'a + b', 'Math.max(a, b)', 'a.equals(b)', 's.substring(a,b)'. To make sure the result is always the same, it's verified that the variables used in the expression don't change their values between the occurrences of the expression. Such expressions may contain methods of immutable classes like 'String', 'BigDecimal', and so on, and of utility classes like 'Objects', 'Math' (except 'random()'). The well-known methods, such as 'Object.equals()', 'Object.hashCode()', 'Object.toString()', 'Comparable.compareTo()', and 'Comparator.compare()' are OK as well because they normally don't have any observable side effects. Use the Expression complexity threshold option to specify the minimal expression complexity threshold. Specifying bigger numbers will remove reports on short expressions. 'Path.of' and 'Paths.get' calls are treated as equivalent calls if they have the same arguments. These calls are always reported no matter how complex their arguments are. This behaviour can be tweaked using different complexity threshold. Inspection ID: DuplicateExpressions New in 2018.3",
                  "markdown": "Reports multiple equivalent occurrences of the same expression within a method (or constructor, or class initializer) if the result of the expression can be reused.\n\n\nThe expression is reported if it's free of side effects and its result is always the same (in terms of `Object.equals()`).\nThe examples of such expressions are `a + b`, `Math.max(a, b)`, `a.equals(b)`,\n`s.substring(a,b)`. To make sure the result is always the same, it's verified that the variables used in the expression don't\nchange their values between the occurrences of the expression.\n\n\nSuch expressions may contain methods of immutable classes like `String`, `BigDecimal`, and so on,\nand of utility classes like `Objects`, `Math` (except `random()`).\nThe well-known methods, such as `Object.equals()`, `Object.hashCode()`, `Object.toString()`,\n`Comparable.compareTo()`, and `Comparator.compare()` are OK as well because they normally don't have\nany observable side effects.\n\n\nUse the **Expression complexity threshold** option to specify the minimal expression complexity threshold. Specifying bigger\nnumbers will remove reports on short expressions.\n\n\n`Path.of` and `Paths.get` calls are treated as equivalent calls if they have the same arguments. These calls\nare always reported no matter how complex their arguments are. This behaviour can be tweaked using different complexity threshold.\n\nInspection ID: DuplicateExpressions\n\nNew in 2018.3"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "DuplicateExpressions",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Verbose or redundant code constructs",
                      "index": 37,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BooleanConstructor",
                "shortDescription": {
                  "text": "Boolean constructor call"
                },
                "fullDescription": {
                  "text": "Reports creation of 'Boolean' objects. Constructing new 'Boolean' objects is rarely necessary, and may cause performance problems if done often enough. Also, 'Boolean' constructors are deprecated since Java 9 and could be removed or made inaccessible in future Java versions. Example: 'Boolean b1 = new Boolean(true);\n  Boolean b2 = new Boolean(str);' After the quick-fix is applied: 'Boolean b1 = Boolean.TRUE;\n  Boolean b2 = Boolean.valueOf(str);' Inspection ID: BooleanConstructor",
                  "markdown": "Reports creation of `Boolean` objects.\n\n\nConstructing new `Boolean` objects is rarely necessary,\nand may cause performance problems if done often enough. Also, `Boolean`\nconstructors are deprecated since Java 9 and could be removed or made\ninaccessible in future Java versions.\n\n**Example:**\n\n\n      Boolean b1 = new Boolean(true);\n      Boolean b2 = new Boolean(str);\n\nAfter the quick-fix is applied:\n\n\n      Boolean b1 = Boolean.TRUE;\n      Boolean b2 = Boolean.valueOf(str);\n\nInspection ID: BooleanConstructor"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "BooleanConstructorCall",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Performance",
                      "index": 4,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TooBroadScope",
                "shortDescription": {
                  "text": "Scope of variable is too broad"
                },
                "fullDescription": {
                  "text": "Reports any variable declarations that can be moved to a smaller scope. This inspection is especially useful for Pascal style declarations at the beginning of a method. Additionally variables with too broad a scope are also often left behind after refactorings. Example: 'StringBuilder sb = new StringBuilder();\n  System.out.println();\n  sb.append(1);' After the quick-fix is applied: 'System.out.println();\n  StringBuilder sb = new StringBuilder();\n  sb.append(1);' Configure the inspection: Use the Only report variables that can be moved into inner blocks option to report only those variables that can be moved inside deeper code blocks. For example, when the option is enabled, the movement will not be suggested for the 'sb' variable above. However, it will be suggested for the following code: 'StringBuilder sb = new StringBuilder(a);\n  if (flag) {\n    sb.append(1);\n  }' Use the Report variables with a new expression as initializer (potentially unsafe) option to report variables that are initialized with a new expression. This makes the inspection potentially unsafe when the constructor has non-local side effects. For example, when the option is enabled, the movement will be suggested for the 'foo' variable: 'class Foo {\n    static List<Foo> fooList = new ArrayList<>();\n    String bar;\n\n    Foo(String bar) {\n        this.bar = bar;\n        fooList.add(this);\n    }\n\n    public static void main(String[] args) {\n      // movement is possible even though is unsafe\n      Foo foo = new Foo(\"bar\");\n      System.out.println(fooList.size());\n      System.out.println(foo.bar);\n    }\n  }' Inspection ID: TooBroadScope",
                  "markdown": "Reports any variable declarations that can be moved to a smaller scope.\n\nThis inspection is especially\nuseful for *Pascal style* declarations at the beginning of a method. Additionally variables with too broad a\nscope are also often left behind after refactorings.\n\n**Example:**\n\n\n      StringBuilder sb = new StringBuilder();\n      System.out.println();\n      sb.append(1);\n\nAfter the quick-fix is applied:\n\n\n      System.out.println();\n      StringBuilder sb = new StringBuilder();\n      sb.append(1);\n\nConfigure the inspection:\n\n* Use the **Only report variables that can be moved into inner blocks** option to report only those variables that can be moved inside deeper code blocks. For example, when the option is enabled, the movement will not be suggested for the `sb` variable above. However, it will be suggested for the following code:\n\n\n        StringBuilder sb = new StringBuilder(a);\n        if (flag) {\n          sb.append(1);\n        }\n\n* Use the **Report variables with a new expression as initializer\n  (potentially unsafe)** option to report variables that are initialized with a new expression. This makes the inspection potentially unsafe when the constructor has non-local side effects. For example, when the option is enabled, the movement will be suggested for the `foo` variable:\n\n\n        class Foo {\n          static List<Foo> fooList = new ArrayList<>();\n          String bar;\n\n          Foo(String bar) {\n              this.bar = bar;\n              fooList.add(this);\n          }\n\n          public static void main(String[] args) {\n            // movement is possible even though is unsafe\n            Foo foo = new Foo(\"bar\");\n            System.out.println(fooList.size());\n            System.out.println(foo.bar);\n          }\n        }\n\nInspection ID: TooBroadScope"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "TooBroadScope",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Data flow",
                      "index": 51,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ThrowableSupplierOnlyThrowException",
                "shortDescription": {
                  "text": "Throwable supplier never returns a value"
                },
                "fullDescription": {
                  "text": "Reports 'Supplier' lambdas in 'Optional.orElseThrow()' calls that throw an exception, instead of returning it. Example: 'optional.orElseThrow(() -> {\n    throw new RuntimeException();\n});' After the quick-fix is applied: 'optional.orElseThrow(() -> new RuntimeException());' Inspection ID: ThrowableSupplierOnlyThrowException New in 2023.1",
                  "markdown": "Reports `Supplier` lambdas in `Optional.orElseThrow()` calls that throw an exception, instead of returning it.\n\n**Example:**\n\n\n    optional.orElseThrow(() -> {\n        throw new RuntimeException();\n    });\n\nAfter the quick-fix is applied:\n\n\n    optional.orElseThrow(() -> new RuntimeException());\n\nInspection ID: ThrowableSupplierOnlyThrowException\n\nNew in 2023.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ThrowableSupplierOnlyThrowException",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Error handling",
                      "index": 10,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IfStatementMissingBreakInLoop",
                "shortDescription": {
                  "text": "Early loop exit in 'if' condition"
                },
                "fullDescription": {
                  "text": "Reports loops with an 'if' statement that can end with 'break' without changing the semantics. This prevents redundant loop iterations. Example: 'boolean found = false;\n  for (int i = 0; i < arr.length; i++) {\n    if (Objects.equals(value, arr[i])) {\n      found = true;\n    }\n  }' After the quick-fix is applied: 'boolean found = false;\n  for (int i = 0; i < arr.length; i++) {\n    if (Objects.equals(value, arr[i])) {\n      found = true;\n      break;\n    }\n  }' Inspection ID: IfStatementMissingBreakInLoop New in 2019.2",
                  "markdown": "Reports loops with an `if` statement that can end with `break` without changing the semantics. This prevents redundant loop iterations.\n\n**Example:**\n\n\n      boolean found = false;\n      for (int i = 0; i < arr.length; i++) {\n        if (Objects.equals(value, arr[i])) {\n          found = true;\n        }\n      }\n\nAfter the quick-fix is applied:\n\n\n      boolean found = false;\n      for (int i = 0; i < arr.length; i++) {\n        if (Objects.equals(value, arr[i])) {\n          found = true;\n          break;\n        }\n      }\n\nInspection ID: IfStatementMissingBreakInLoop\n\nNew in 2019.2"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "IfStatementMissingBreakInLoop",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Performance",
                      "index": 4,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantStreamOptionalCall",
                "shortDescription": {
                  "text": "Redundant step in 'Stream' or 'Optional' call chain"
                },
                "fullDescription": {
                  "text": "Reports redundant 'Stream' or 'Optional' calls like 'map(x -> x)', 'filter(x -> true)' or redundant 'sorted()' or 'distinct()' calls. Note that a mapping operation in code like 'streamOfIntegers.map(Integer::valueOf)' works as 'requireNonNull()' check: if the stream contains 'null', it throws a 'NullPointerException', thus it's not absolutely redundant. Disable the Report redundant boxing in Stream.map() option if you do not want such cases to be reported. This inspection depends on the Java feature 'Stream and Optional API', which is available since Java 8. Inspection ID: RedundantStreamOptionalCall",
                  "markdown": "Reports redundant `Stream` or `Optional` calls like `map(x -> x)`, `filter(x -> true)` or redundant `sorted()` or `distinct()` calls.\n\nNote that a mapping operation in code like `streamOfIntegers.map(Integer::valueOf)`\nworks as `requireNonNull()` check:\nif the stream contains `null`, it throws a `NullPointerException`, thus it's not absolutely redundant.\nDisable the **Report redundant boxing in Stream.map()** option if you do not want such cases to be reported.\n\nThis inspection depends on the Java feature 'Stream and Optional API', which is available since Java 8.\n\nInspection ID: RedundantStreamOptionalCall"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RedundantStreamOptionalCall",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Verbose or redundant code constructs",
                      "index": 37,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ThreadPriority",
                "shortDescription": {
                  "text": "Call to 'Thread.setPriority()'"
                },
                "fullDescription": {
                  "text": "Reports calls to 'Thread.setPriority()'. Modifying priorities of threads is an inherently non-portable operation, as no guarantees are given in the Java specification of how priorities are used in scheduling threads, or even whether they are used at all. Inspection ID: ThreadPriority",
                  "markdown": "Reports calls to `Thread.setPriority()`. Modifying priorities of threads is an inherently non-portable operation, as no guarantees are given in the Java specification of how priorities are used in scheduling threads, or even whether they are used at all.\n\nInspection ID: ThreadPriority"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CallToThreadSetPriority",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Threading issues",
                      "index": 23,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantStringFormatCall",
                "shortDescription": {
                  "text": "Redundant call to 'String.format()'"
                },
                "fullDescription": {
                  "text": "Reports calls to methods like 'format()' and 'printf()' that can be safely removed or simplified. Example: 'System.out.println(String.format(\"Total count: %d\", 42));' After the quick-fix is applied: 'System.out.printf(\"Total count: %d%n\", 42);' Inspection ID: RedundantStringFormatCall",
                  "markdown": "Reports calls to methods like `format()` and `printf()` that can be safely removed or simplified.\n\n**Example:**\n\n\n      System.out.println(String.format(\"Total count: %d\", 42));\n\nAfter the quick-fix is applied:\n\n\n      System.out.printf(\"Total count: %d%n\", 42);\n\nInspection ID: RedundantStringFormatCall"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RedundantStringFormatCall",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Performance",
                      "index": 4,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NonFinalFieldOfException",
                "shortDescription": {
                  "text": "Non-final field of 'Exception' class"
                },
                "fullDescription": {
                  "text": "Reports fields in subclasses of 'java.lang.Exception' that are not declared 'final'. Data on exception objects should not be modified because this may result in losing the error context for later debugging and logging. Example: 'public class EditorException extends Exception {\n    private String message; // warning: Non-final field 'message' of exception class\n  }' Inspection ID: NonFinalFieldOfException",
                  "markdown": "Reports fields in subclasses of `java.lang.Exception` that are not declared `final`.\n\nData on exception objects should not be modified\nbecause this may result in losing the error context for later debugging and logging.\n\n**Example:**\n\n\n      public class EditorException extends Exception {\n        private String message; // warning: Non-final field 'message' of exception class\n      }\n\nInspection ID: NonFinalFieldOfException"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NonFinalFieldOfException",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Error handling",
                      "index": 10,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PointlessNullCheck",
                "shortDescription": {
                  "text": "Unnecessary 'null' check before method call"
                },
                "fullDescription": {
                  "text": "Reports 'null' checks followed by a method call that will definitely return 'false' when 'null' is passed (e.g. 'Class.isInstance'). Such a check seems excessive as the method call will always return 'false' in this case. Example: 'if (x != null && myClass.isInstance(x)) { ... }' After the quick-fix is applied: 'if (myClass.isInstance(x)) { ... }' Inspection ID: PointlessNullCheck",
                  "markdown": "Reports `null` checks followed by a method call that will definitely return `false` when `null` is passed (e.g. `Class.isInstance`).\n\nSuch a check seems excessive as the method call will always return `false` in this case.\n\n**Example:**\n\n\n      if (x != null && myClass.isInstance(x)) { ... }\n\nAfter the quick-fix is applied:\n\n\n      if (myClass.isInstance(x)) { ... }\n\n\nInspection ID: PointlessNullCheck"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PointlessNullCheck",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Control flow issues",
                      "index": 24,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MethodOverridesStaticMethod",
                "shortDescription": {
                  "text": "Method tries to override 'static' method of superclass"
                },
                "fullDescription": {
                  "text": "Reports 'static' methods with a signature identical to a 'static' method of a superclass. Such a method may look like an override when in fact it hides the method from the superclass because 'static' methods in Java cannot be overridden. Example: 'class Parent {\n    static void method(){}\n  }\n\n  class Example extends Parent {\n    static void method(){} //warning\n  }' Inspection ID: MethodOverridesStaticMethod",
                  "markdown": "Reports `static` methods with a signature identical to a `static` method of a superclass. Such a method may look like an override when in fact it hides the method from the superclass because `static` methods in Java cannot be overridden.\n\n**Example:**\n\n\n      class Parent {\n        static void method(){}\n      }\n\n      class Example extends Parent {\n        static void method(){} //warning\n      }\n\nInspection ID: MethodOverridesStaticMethod"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MethodOverridesStaticMethodOfSuperclass",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Visibility",
                      "index": 73,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnclearBinaryExpression",
                "shortDescription": {
                  "text": "Multiple operators with different precedence"
                },
                "fullDescription": {
                  "text": "Reports binary, conditional, or 'instanceof' expressions that consist of different operators without parentheses. Such expressions can be less readable due to different precedence rules of operators. Example: 'int n = 3 + 9 * 8 + 1;' After quick-fix is applied: 'int n = 3 + (9 * 8) + 1;' Inspection ID: UnclearBinaryExpression",
                  "markdown": "Reports binary, conditional, or `instanceof` expressions that consist of different operators without parentheses. Such expressions can be less readable due to different precedence rules of operators.\n\nExample:\n\n\n      int n = 3 + 9 * 8 + 1;\n\nAfter quick-fix is applied:\n\n\n      int n = 3 + (9 * 8) + 1;\n\nInspection ID: UnclearBinaryExpression"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "UnclearExpression",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ChainedMethodCall",
                "shortDescription": {
                  "text": "Chained method calls"
                },
                "fullDescription": {
                  "text": "Reports method calls whose target is another method call. The quick-fix suggests to introduce a local variable. Example: 'class X {\n    int foo(File f) {\n      return f.getName().length();\n    }\n  }' After the quick-fix is applied: 'class X {\n    int foo(File f) {\n      final String name = f.getName();\n      return name.length();\n    }\n  }' Use the inspection options to toggle warnings for the following cases: chained method calls in field initializers, for instance, 'private final int i = new Random().nextInt();' chained method calls operating on the same type, for instance, 'new StringBuilder().append(\"x: \").append(new X()).append(\"y: \").append(new Y()).toString();'. Inspection ID: ChainedMethodCall",
                  "markdown": "Reports method calls whose target is another method call. The quick-fix suggests to introduce a local variable.\n\n**Example:**\n\n\n      class X {\n        int foo(File f) {\n          return f.getName().length();\n        }\n      }\n\nAfter the quick-fix is applied:\n\n\n      class X {\n        int foo(File f) {\n          final String name = f.getName();\n          return name.length();\n        }\n      }\n\nUse the inspection options to toggle warnings for the following cases:\n\n*\n  chained method calls in field initializers,\n  for instance, `private final int i = new Random().nextInt();`\n\n*\n  chained method calls operating on the same type,\n  for instance, `new StringBuilder().append(\"x: \").append(new X()).append(\"y: \").append(new Y()).toString();`.\n\nInspection ID: ChainedMethodCall"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ChainedMethodCall",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ExtendsUtilityClass",
                "shortDescription": {
                  "text": "Class extends utility class"
                },
                "fullDescription": {
                  "text": "Reports classes that extend a utility class. A utility class is a non-empty class in which all fields and methods are static. Extending a utility class also allows for inadvertent object instantiation of the utility class, because the constructor cannot be made private in order to allow extension. Configure the inspection: Use the Ignore if overriding class is a utility class option to ignore any classes that override a utility class but are also utility classes themselves. Inspection ID: ExtendsUtilityClass",
                  "markdown": "Reports classes that extend a utility class.\n\n\nA utility class is a non-empty class in which all fields and methods are static.\nExtending a utility class also allows for inadvertent object instantiation of the\nutility class, because the constructor cannot be made private in order to allow extension.\n\n\nConfigure the inspection:\n\n* Use the **Ignore if overriding class is a utility class** option to ignore any classes that override a utility class but are also utility classes themselves.\n\nInspection ID: ExtendsUtilityClass"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ExtendsUtilityClass",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Inheritance issues",
                      "index": 121,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UtilityClassWithoutPrivateConstructor",
                "shortDescription": {
                  "text": "Utility class without 'private' constructor"
                },
                "fullDescription": {
                  "text": "Reports utility classes without 'private' constructors. Utility classes have all fields and methods declared as 'static'. Creating 'private' constructors in utility classes prevents them from being accidentally instantiated. Use the Ignore if annotated by option to specify special annotations. The inspection ignores classes marked with one of these annotations. Use the Ignore classes with only a main method option to ignore classes with no methods other than the main one. Inspection ID: UtilityClassWithoutPrivateConstructor",
                  "markdown": "Reports utility classes without `private` constructors.\n\nUtility classes have all fields and methods declared as `static`. Creating `private`\nconstructors in utility classes prevents them from being accidentally instantiated.\n\n\nUse the **Ignore if annotated by** option to specify special annotations. The inspection ignores classes marked with one of\nthese annotations.\n\n\nUse the **Ignore classes with only a main method** option to ignore classes with no methods other than the main one.\n\nInspection ID: UtilityClassWithoutPrivateConstructor"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UtilityClassWithoutPrivateConstructor",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Class structure",
                      "index": 17,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AssertMessageNotString",
                "shortDescription": {
                  "text": "'assert' message is not a string"
                },
                "fullDescription": {
                  "text": "Reports 'assert' messages that are not of the 'java.lang.String' type. Using a string provides more information to help diagnose the failure or the assertion reason. Example: 'void foo(List<Integer> myList) {\n    assert myList.isEmpty() : false;\n  }' Use the Only warn when the 'assert' message type is 'boolean' or 'java.lang.Boolean' option to only warn when the 'assert' message type is 'boolean' or 'java.lang.Boolean'. A 'boolean' detail message is unlikely to provide additional information about an assertion failure and could result from a mistakenly entered ':' instead of '&'. This inspection depends on the Java feature 'Assertions', which is available since Java 1.4. Inspection ID: AssertMessageNotString",
                  "markdown": "Reports `assert` messages that are not of the `java.lang.String` type.\n\nUsing a string provides more information to help diagnose the failure\nor the assertion reason.\n\n**Example:**\n\n\n      void foo(List<Integer> myList) {\n        assert myList.isEmpty() : false;\n      }\n\n\nUse the **Only warn when the `assert` message type is 'boolean' or 'java.lang.Boolean'** option to only warn when the `assert` message type is `boolean` or `java.lang.Boolean`.\nA `boolean` detail message is unlikely to provide additional information about an assertion failure\nand could result from a mistakenly entered `:` instead of `&`.\n\nThis inspection depends on the Java feature 'Assertions', which is available since Java 1.4.\n\nInspection ID: AssertMessageNotString"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AssertMessageNotString",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PatternVariableCanBeUsed",
                "shortDescription": {
                  "text": "Pattern variable can be used"
                },
                "fullDescription": {
                  "text": "Reports local variable declarations that can be replaced with pattern variables, which are usually more compact. Example: 'if (obj instanceof String) {\n    String str = (String) obj;\n    System.out.println(str);\n  }' Can be replaced with: 'if (obj instanceof String str) {\n    System.out.println(str);\n  }' This inspection depends on the Java feature 'Patterns in 'instanceof'', which is available since Java 16. Inspection ID: PatternVariableCanBeUsed New in 2020.1",
                  "markdown": "Reports local variable declarations that can be replaced with pattern variables, which are usually more compact.\n\n**Example:**\n\n\n      if (obj instanceof String) {\n        String str = (String) obj;\n        System.out.println(str);\n      }\n\nCan be replaced with:\n\n\n      if (obj instanceof String str) {\n        System.out.println(str);\n      }\n\nThis inspection depends on the Java feature 'Patterns in 'instanceof'', which is available since Java 16.\n\nInspection ID: PatternVariableCanBeUsed\n\nNew in 2020.1"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PatternVariableCanBeUsed",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level migration aids/Java 16",
                      "index": 153,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ImplicitToExplicitClassBackwardMigration",
                "shortDescription": {
                  "text": "Compact source file can be replaced with a regular class"
                },
                "fullDescription": {
                  "text": "Reports compact source files and suggests replacing them with regular classes. Example (in file Sample.java): 'void main() {\n      String a = \"Hello, world!\";\n  }' After the quick-fix is applied: 'public class Sample {\n    void main() {\n        String a = \"Hello, world!\";\n    }\n}' This inspection can help to downgrade for backward compatibility with earlier Java versions. This inspection depends on the Java feature 'Compact source files', which is available since Java 21-preview. Inspection ID: ImplicitToExplicitClassBackwardMigration New in 2024.1",
                  "markdown": "Reports compact source files and suggests replacing them with regular classes.\n\n**Example (in file Sample.java):**\n\n\n      void main() {\n          String a = \"Hello, world!\";\n      }\n\nAfter the quick-fix is applied:\n\n\n    public class Sample {\n        void main() {\n            String a = \"Hello, world!\";\n        }\n    }\n\n\nThis inspection can help to downgrade for backward compatibility with earlier Java versions.\n\nThis inspection depends on the Java feature 'Compact source files', which is available since Java 21-preview.\n\nInspection ID: ImplicitToExplicitClassBackwardMigration\n\nNew in 2024.1"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ImplicitToExplicitClassBackwardMigration",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level migration aids/Java 25",
                      "index": 138,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AnonymousClassVariableHidesContainingMethodVariable",
                "shortDescription": {
                  "text": "Anonymous class variable hides variable in containing method"
                },
                "fullDescription": {
                  "text": "Reports fields in an anonymous class that are named identically to local variables or parameters of the containing method or lambda expression. As a result of such naming, you may accidentally use the anonymous class field where the identically named variable or parameter from the containing method is intended. A quick-fix is suggested to rename the field. Example: 'class Test {\n    public Test(String value) {\n      Object foo = new Object() {\n        private String value = \"TEST\";\n        public void foo() {\n          System.out.println(value); //the field is accessed, not the parameter\n        }\n      };\n    }\n  }' Inspection ID: AnonymousClassVariableHidesContainingMethodVariable",
                  "markdown": "Reports fields in an anonymous class that are named identically to local variables or parameters of the containing method or lambda expression.\n\n\nAs a result of such naming, you may accidentally use the anonymous class field where\nthe identically named variable or parameter from the containing method is intended.\n\nA quick-fix is suggested to rename the field.\n\n**Example:**\n\n\n      class Test {\n        public Test(String value) {\n          Object foo = new Object() {\n            private String value = \"TEST\";\n            public void foo() {\n              System.out.println(value); //the field is accessed, not the parameter\n            }\n          };\n        }\n      }\n\nInspection ID: AnonymousClassVariableHidesContainingMethodVariable"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AnonymousClassVariableHidesContainingMethodVariable",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Visibility",
                      "index": 73,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MethodRefCanBeReplacedWithLambda",
                "shortDescription": {
                  "text": "Method reference can be replaced with lambda"
                },
                "fullDescription": {
                  "text": "Reports method references, like 'MyClass::myMethod' and 'myObject::myMethod', and suggests replacing them with an equivalent lambda expression. Lambda expressions can be easier to modify than method references. Example: 'System.out::println' After the quick-fix is applied: 's -> System.out.println(s)' By default, this inspection does not highlight the code in the editor, but only provides a quick-fix. This inspection depends on the following Java features: Lambda expressions Method references These features are available since Java 8. Inspection ID: MethodRefCanBeReplacedWithLambda",
                  "markdown": "Reports method references, like `MyClass::myMethod` and `myObject::myMethod`, and suggests replacing them with an equivalent lambda expression.\n\nLambda expressions can be easier to modify than method references.\n\nExample:\n\n\n      System.out::println\n\nAfter the quick-fix is applied:\n\n\n      s -> System.out.println(s)\n\nBy default, this inspection does not highlight the code in the editor, but only provides a quick-fix.\n\nThis inspection depends on the following Java features:\n\n* Lambda expressions\n* Method references\n\nThese features are available since Java 8.\n\nInspection ID: MethodRefCanBeReplacedWithLambda"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "MethodRefCanBeReplacedWithLambda",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NestedSynchronizedStatement",
                "shortDescription": {
                  "text": "Nested 'synchronized' statement"
                },
                "fullDescription": {
                  "text": "Reports nested 'synchronized' statements. It is recommended to avoid nested synchronization if possible, because in some cases it may lead to a deadlock. Example: 'synchronized (lockA){\n    //thread 1 is waiting for lockB\n    synchronized (lockB){ //warning\n    }\n  }\n  ...\n  synchronized (lockB) {\n    //thread 2 is waiting for lockA\n    synchronized (lockA) { //warning\n    }\n  }' Inspection ID: NestedSynchronizedStatement",
                  "markdown": "Reports nested `synchronized` statements. It is recommended to avoid nested synchronization if possible, because in some cases it may lead to a deadlock.\n\n**Example:**\n\n\n      synchronized (lockA){\n        //thread 1 is waiting for lockB\n        synchronized (lockB){ //warning\n        }\n      }\n      ...\n      synchronized (lockB) {\n        //thread 2 is waiting for lockA\n        synchronized (lockA) { //warning\n        }\n      }\n\nInspection ID: NestedSynchronizedStatement"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NestedSynchronizedStatement",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Threading issues",
                      "index": 23,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IncorrectDateTimeFormat",
                "shortDescription": {
                  "text": "Incorrect 'DateTimeFormat' pattern"
                },
                "fullDescription": {
                  "text": "Reports incorrect date time format patterns. The following errors are reported: Unsupported pattern letters, like \"TT\" Using reserved characters, like \"#\" Incorrect use of padding Unbalanced brackets Incorrect amount of consecutive pattern letters Examples: 'DateTimeFormatter.ofPattern(\"[][]]\"); // Closing ']' without previous opening '['\n  DateTimeFormatter.ofPattern(\"TT\"); // Illegal pattern letter 'T'\n  DateTimeFormatter.ofPattern(\"{\"); // Use of reserved character '{'\n  DateTimeFormatter.ofPattern(\"MMMMMM\"); // Too many consecutive pattern letters 'M'' New in 2022.3 Inspection ID: IncorrectDateTimeFormat",
                  "markdown": "Reports incorrect date time format patterns.\n\nThe following errors are reported:\n\n* Unsupported pattern letters, like \"TT\"\n* Using reserved characters, like \"#\"\n* Incorrect use of padding\n* Unbalanced brackets\n* Incorrect amount of consecutive pattern letters\n\nExamples:\n\n\n      DateTimeFormatter.ofPattern(\"[][]]\"); // Closing ']' without previous opening '['\n      DateTimeFormatter.ofPattern(\"TT\"); // Illegal pattern letter 'T'\n      DateTimeFormatter.ofPattern(\"{\"); // Use of reserved character '{'\n      DateTimeFormatter.ofPattern(\"MMMMMM\"); // Too many consecutive pattern letters 'M'\n\nNew in 2022.3\n\nInspection ID: IncorrectDateTimeFormat"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "IncorrectDateTimeFormat",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryFullyQualifiedName",
                "shortDescription": {
                  "text": "Unnecessary fully qualified name"
                },
                "fullDescription": {
                  "text": "Reports fully qualified class names that can be shortened. The quick-fix shortens fully qualified names and adds import statements if necessary. Example: 'class ListWrapper {\n    java.util.List<Integer> l;\n  }' After the quick-fix is applied: 'import java.util.List;\n  class ListWrapper {\n    List<Integer> l;\n  }' Configure the inspection: Use the Ignore in Java 9 module statements option to ignore fully qualified names inside the Java 9 'provides' and 'uses' module statements. In Settings | Editor | Code Style | Java | Imports, use the following options to configure the inspection: Use the Insert imports for inner classes option if references to inner classes should be qualified with the outer class. Use the Use fully qualified class names in JavaDoc option to allow fully qualified names in Javadocs. Inspection ID: UnnecessaryFullyQualifiedName",
                  "markdown": "Reports fully qualified class names that can be shortened.\n\nThe quick-fix shortens fully qualified names and adds import statements if necessary.\n\nExample:\n\n\n      class ListWrapper {\n        java.util.List<Integer> l;\n      }\n\nAfter the quick-fix is applied:\n\n\n      import java.util.List;\n      class ListWrapper {\n        List<Integer> l;\n      }\n\nConfigure the inspection:\n\n\nUse the **Ignore in Java 9 module statements** option to ignore fully qualified names inside the Java 9\n`provides` and `uses` module statements.\n\n\nIn [Settings \\| Editor \\| Code Style \\| Java \\| Imports](settings://preferences.sourceCode.Java?JavaDoc%20Inner),\nuse the following options to configure the inspection:\n\n* Use the **Insert imports for inner classes** option if references to inner classes should be qualified with the outer class.\n* Use the **Use fully qualified class names in JavaDoc** option to allow fully qualified names in Javadocs.\n\nInspection ID: UnnecessaryFullyQualifiedName"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "UnnecessaryFullyQualifiedName",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NegatedConditional",
                "shortDescription": {
                  "text": "Conditional expression with negated condition"
                },
                "fullDescription": {
                  "text": "Reports conditional expressions whose conditions are negated. Flipping the order of the conditional expression branches usually increases the clarity of such statements. Use the Ignore '!= null' comparisons and Ignore '!= 0' comparisons options to ignore comparisons of the form 'obj != null' or 'num != 0'. Since 'obj != null' effectively means \"obj exists\", the meaning of the whole expression does not involve any negation and is therefore easy to understand. The same reasoning applies to 'num != 0' expressions, especially when using bit masks. These forms have the added benefit of mentioning the interesting case first. In most cases, the value for the '== null' branch is 'null' itself, like in the following examples: 'static String getName(Person p) {\n        return p != null ? p.getName() : null;\n    }\n\n    static String getExecutableString(int fileMode) {\n        return (fileMode & 0b001001001) != 0 ? \"executable\" : \"non-executable\";\n    }' Inspection ID: NegatedConditional",
                  "markdown": "Reports conditional expressions whose conditions are negated.\n\nFlipping the order of the conditional expression branches usually increases the clarity of such statements.\n\n\nUse the **Ignore '!= null' comparisons** and **Ignore '!= 0' comparisons** options to ignore comparisons of the form\n`obj != null` or `num != 0`.\nSince `obj != null` effectively means \"obj exists\",\nthe meaning of the whole expression does not involve any negation\nand is therefore easy to understand.\n\n\nThe same reasoning applies to `num != 0` expressions, especially when using bit masks.\n\n\nThese forms have the added benefit of mentioning the interesting case first.\nIn most cases, the value for the `== null` branch is `null` itself,\nlike in the following examples:\n\n\n        static String getName(Person p) {\n            return p != null ? p.getName() : null;\n        }\n\n        static String getExecutableString(int fileMode) {\n            return (fileMode & 0b001001001) != 0 ? \"executable\" : \"non-executable\";\n        }\n\nInspection ID: NegatedConditional"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ConditionalExpressionWithNegatedCondition",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Control flow issues",
                      "index": 24,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BooleanParameter",
                "shortDescription": {
                  "text": "'public' method with 'boolean' parameter"
                },
                "fullDescription": {
                  "text": "Reports public methods that accept a 'boolean' parameter. It's almost always bad practice to add a 'boolean' parameter to a public method (part of an API) if that method is not a setter. When reading code using such a method, it can be difficult to decipher what the 'boolean' stands for without looking at the source or documentation. This problem is also known as the boolean trap. The 'boolean' parameter can often be replaced with an 'enum'. Example: '// Warning: it's hard to understand what the\n  // boolean parameters mean when looking at\n  // a call to this method\n  public boolean setPermission(File f,\n                               int access,\n                               boolean enable,\n                               boolean ownerOnly) {\n    // ...\n  }' Use the Only report methods with multiple boolean parameters option to warn only when a method contains more than one boolean parameter. Inspection ID: BooleanParameter",
                  "markdown": "Reports public methods that accept a `boolean` parameter.\n\nIt's almost always bad practice to add a `boolean` parameter to a public method (part of an API) if that method is not a setter.\nWhen reading code using such a method, it can be difficult to decipher what the `boolean` stands for without looking at\nthe source or documentation.\n\nThis problem is also known as [the boolean trap](https://ariya.io/2011/08/hall-of-api-shame-boolean-trap).\nThe `boolean` parameter can often be replaced with an `enum`.\n\nExample:\n\n\n      // Warning: it's hard to understand what the\n      // boolean parameters mean when looking at\n      // a call to this method\n      public boolean setPermission(File f,\n                                   int access,\n                                   boolean enable,\n                                   boolean ownerOnly) {\n        // ...\n      }\n\n\nUse the **Only report methods with multiple boolean parameters** option to warn only when a method contains more than one boolean parameter.\n\n\nInspection ID: BooleanParameter"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "BooleanParameter",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Abstraction issues",
                      "index": 63,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TestInProductSource",
                "shortDescription": {
                  "text": "Test in product source"
                },
                "fullDescription": {
                  "text": "Reports test classes and test methods that are located in production source trees. This most likely a mistake and can result in test code being shipped into production. Inspection ID: TestInProductSource",
                  "markdown": "Reports test classes and test methods that are located in production source trees. This most likely a mistake and can result in test code being shipped into production.\n\nInspection ID: TestInProductSource"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "TestInProductSource",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JVM languages/Test frameworks",
                      "index": 95,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CopyConstructorMissesField",
                "shortDescription": {
                  "text": "Copy constructor misses field"
                },
                "fullDescription": {
                  "text": "Reports copy constructors that don't copy all the fields of the class. 'final' fields with initializers and 'transient' fields are considered unnecessary to copy. Example: 'class Point {\n\n    private int x;\n    private int y;\n\n    Point(int x, int y) {\n      this.x = x;\n      this.y = y;\n    }\n\n    Point(Point other) {\n      // fields x and y are not initialized\n    }\n  }' New in 2018.1 Inspection ID: CopyConstructorMissesField",
                  "markdown": "Reports copy constructors that don't copy all the fields of the class.\n\n\n`final` fields with initializers and `transient` fields are considered unnecessary to copy.\n\n**Example:**\n\n\n      class Point {\n\n        private int x;\n        private int y;\n\n        Point(int x, int y) {\n          this.x = x;\n          this.y = y;\n        }\n\n        Point(Point other) {\n          // fields x and y are not initialized\n        }\n      }\n\nNew in 2018.1\n\nInspection ID: CopyConstructorMissesField"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CopyConstructorMissesField",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CastCanBeRemovedNarrowingVariableType",
                "shortDescription": {
                  "text": "Too weak variable type leads to unnecessary cast"
                },
                "fullDescription": {
                  "text": "Reports type casts that can be removed if the variable type is narrowed to the cast type. Example: 'Object x = \"  string  \";\n  System.out.println(((String)x).trim());' Here, changing the type of 'x' to 'String' makes the cast redundant. The suggested quick-fix updates the variable type and removes all redundant casts on that variable: 'String x = \"  string  \";\n  System.out.println(x.trim());' Inspection ID: CastCanBeRemovedNarrowingVariableType New in 2018.2",
                  "markdown": "Reports type casts that can be removed if the variable type is narrowed to the cast type.\n\nExample:\n\n\n      Object x = \"  string  \";\n      System.out.println(((String)x).trim());\n\n\nHere, changing the type of `x` to `String` makes the cast redundant. The suggested quick-fix updates the variable type and\nremoves all redundant casts on that variable:\n\n\n      String x = \"  string  \";\n      System.out.println(x.trim());\n\nInspection ID: CastCanBeRemovedNarrowingVariableType\n\nNew in 2018.2"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CastCanBeRemovedNarrowingVariableType",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Verbose or redundant code constructs",
                      "index": 37,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AssignmentToStaticFieldFromInstanceMethod",
                "shortDescription": {
                  "text": "Assignment to static field from instance context"
                },
                "fullDescription": {
                  "text": "Reports assignment to, or modification of 'static' fields from within an instance method. Although legal, such assignments are tricky to do safely and are often a result of marking fields 'static' inadvertently. Example: 'class Counter {\n    private static int count = 0;\n\n    void increment() {\n      // Warning: updating a static field\n      // from an instance method\n      count++;\n    }\n  }' Inspection ID: AssignmentToStaticFieldFromInstanceMethod",
                  "markdown": "Reports assignment to, or modification of `static` fields from within an instance method.\n\nAlthough legal, such assignments are tricky to do\nsafely and are often a result of marking fields `static` inadvertently.\n\n**Example:**\n\n\n      class Counter {\n        private static int count = 0;\n\n        void increment() {\n          // Warning: updating a static field\n          // from an instance method\n          count++;\n        }\n      }\n\nInspection ID: AssignmentToStaticFieldFromInstanceMethod"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AssignmentToStaticFieldFromInstanceMethod",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Assignment issues",
                      "index": 64,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AbstractClassWithOnlyOneDirectInheritor",
                "shortDescription": {
                  "text": "Abstract class with a single direct inheritor"
                },
                "fullDescription": {
                  "text": "Reports abstract classes that have precisely one direct inheritor. While such classes may offer admirable clarity of design, in memory-constrained or bandwidth-limited environments, they needlessly increase the total footprint of the application. Consider merging the abstract class with its inheritor. This inspection is intended for Java ME and other highly resource constrained environments. Applying the results of this inspection without consideration might have negative effects on code clarity and design. Example: 'abstract class Base {} // will be reported\n\n  class Inheritor extends Base {}' Inspection ID: AbstractClassWithOnlyOneDirectInheritor",
                  "markdown": "Reports abstract classes that have precisely one direct inheritor. While such classes may offer admirable clarity of design, in memory-constrained or bandwidth-limited environments, they needlessly increase the total footprint of the application. Consider merging the abstract class with its inheritor.\n\n\nThis inspection is intended for Java ME and other highly resource constrained environments.\nApplying the results of this inspection without consideration might have negative effects on code clarity and design.\n\n**Example:**\n\n\n      abstract class Base {} // will be reported\n\n      class Inheritor extends Base {}\n\nInspection ID: AbstractClassWithOnlyOneDirectInheritor"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AbstractClassWithOnlyOneDirectInheritor",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Performance/Embedded",
                      "index": 137,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnsecureRandomNumberGeneration",
                "shortDescription": {
                  "text": "Insecure random number generation"
                },
                "fullDescription": {
                  "text": "Reports any uses of 'java.lang.Random' or 'java.lang.Math.random()'. In secure environments, 'java.secure.SecureRandom' is a better choice, since is offers cryptographically secure random number generation. Example: 'long token = new Random().nextLong();' Inspection ID: UnsecureRandomNumberGeneration",
                  "markdown": "Reports any uses of `java.lang.Random` or `java.lang.Math.random()`.\n\n\nIn secure environments,\n`java.secure.SecureRandom` is a better choice, since is offers cryptographically secure\nrandom number generation.\n\n**Example:**\n\n\n      long token = new Random().nextLong();\n\nInspection ID: UnsecureRandomNumberGeneration"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnsecureRandomNumberGeneration",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Security",
                      "index": 31,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NullableProblems",
                "shortDescription": {
                  "text": "@NotNull/@Nullable problems"
                },
                "fullDescription": {
                  "text": "Reports problems related to nullability annotations. Examples: Overriding methods are not annotated: 'abstract class A {\n  @NotNull abstract String m();\n}\nclass B extends A {\n    String m() { return \"empty string\"; }\n}' Annotated primitive types: '@NotNull int myFoo;' Both '@Nullable' and '@NotNull' are present on the same member: '@Nullable @NotNull String myFooString;' Collection of nullable elements is assigned into a collection of non-null elements: 'void testList(List<@Nullable String> nullableList) {\n   List<@NotNull String> list2 = nullableList;\n}' Use the Configure Annotations button to specify nullability annotations and the checkboxes to fine-tune where the inspection should provide warnings. This inspection only reports if the language level of the project or module is 5 or higher, and nullability annotations are available on the classpath. Inspection ID: NullableProblems",
                  "markdown": "Reports problems related to nullability annotations.\n\n**Examples:**\n\n* Overriding methods are not annotated:\n\n\n      abstract class A {\n        @NotNull abstract String m();\n      }\n      class B extends A {\n          String m() { return \"empty string\"; }\n      }\n          \n* Annotated primitive types: `@NotNull int myFoo;`\n* Both `@Nullable` and `@NotNull` are present on the same member: `@Nullable @NotNull String myFooString;`\n* Collection of nullable elements is assigned into a collection of non-null elements:\n\n\n      void testList(List<@Nullable String> nullableList) {\n         List<@NotNull String> list2 = nullableList;\n      }\n          \nUse the **Configure Annotations** button to specify nullability annotations and the checkboxes to fine-tune where the inspection should provide warnings.\n\nThis inspection only reports if the language level of the project or module is 5 or higher,\nand nullability annotations are available on the classpath.\n\nInspection ID: NullableProblems"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NullableProblems",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs/Nullability problems",
                      "index": 141,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EqualsBetweenInconvertibleTypes",
                "shortDescription": {
                  "text": "'equals()' between objects of inconvertible types"
                },
                "fullDescription": {
                  "text": "Reports calls to 'equals()' where the target and argument are of incompatible types. While such a call might theoretically be useful, most likely it is a bug. Example: 'new HashSet<String>().equals(new TreeSet<Integer>());' Inspection ID: EqualsBetweenInconvertibleTypes",
                  "markdown": "Reports calls to `equals()` where the target and argument are of incompatible types.\n\nWhile such a call might theoretically be useful, most likely it is a bug.\n\n**Example:**\n\n\n      new HashSet<String>().equals(new TreeSet<Integer>());\n\nInspection ID: EqualsBetweenInconvertibleTypes"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EqualsBetweenInconvertibleTypes",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DuplicateCondition",
                "shortDescription": {
                  "text": "Duplicate condition"
                },
                "fullDescription": {
                  "text": "Reports duplicate conditions in '&&' and '||' expressions and branches of 'if' statements. While sometimes duplicate conditions are intended, in most cases they are the result of an oversight. Example: 'boolean result = digit1 != digit2 || digit1 != digit2;' To ignore conditions that may produce side effects, use the Ignore conditions with side effects option. Disabling this option may lead to false-positives, for example, when the same method returns different values on subsequent invocations. Example: 'native boolean unknownMethod();\n  \n  ...\n  \n  if (unknownMethod() || unknownMethod()) {\n    System.out.println(\"Got it\");\n  }' Due to possible side effects of 'unknownMethod()' (on the example), the warning will only be triggered if the Ignore conditions with side effects option is disabled. Inspection ID: DuplicateCondition",
                  "markdown": "Reports duplicate conditions in `&&` and `||` expressions and branches of `if` statements. While sometimes duplicate conditions are intended, in most cases they are the result of an oversight.\n\nExample:\n\n\n      boolean result = digit1 != digit2 || digit1 != digit2;\n\n\nTo ignore conditions that may produce side effects, use the **Ignore conditions with side effects** option.\nDisabling this option may lead to false-positives, for example, when the same method returns different values on subsequent invocations.\n\nExample:\n\n\n      native boolean unknownMethod();\n      \n      ...\n      \n      if (unknownMethod() || unknownMethod()) {\n        System.out.println(\"Got it\");\n      }\n\nDue to possible side effects of `unknownMethod()` (on the example), the warning will only be\ntriggered if the **Ignore conditions with side effects** option is disabled.\n\nInspection ID: DuplicateCondition"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "DuplicateCondition",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Control flow issues",
                      "index": 24,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SynchronizationOnGetClass",
                "shortDescription": {
                  "text": "Synchronization on 'getClass()'"
                },
                "fullDescription": {
                  "text": "Reports synchronization on a call to 'getClass()'. If the class containing the synchronization is subclassed, the subclass will synchronize on a different class object. Usually the call to 'getClass()' can be replaced with a class literal expression, for example 'String.class'. An even better solution is synchronizing on a 'private static final' lock object, access to which can be completely controlled. Example: 'synchronized(getClass()) {}' Inspection ID: SynchronizationOnGetClass",
                  "markdown": "Reports synchronization on a call to `getClass()`.\n\n\nIf the class containing the synchronization is subclassed, the subclass\nwill\nsynchronize on a different class object. Usually the call to `getClass()` can be replaced with a class literal expression, for\nexample `String.class`. An even better solution is synchronizing on a `private static final` lock object, access to\nwhich can be completely controlled.\n\n**Example:**\n\n     synchronized(getClass()) {}\n\nInspection ID: SynchronizationOnGetClass"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SynchronizationOnGetClass",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Threading issues",
                      "index": 23,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StringTemplateReverseMigration",
                "shortDescription": {
                  "text": "String template can be concatenated string"
                },
                "fullDescription": {
                  "text": "Reports string template expressions using the 'STR' processor and offers a quick-fix to migrate back to a plain string concatenation. Example: 'String name = \"Bob\";\n  String greeting = STR.\"Hello, \\{name}. You are 29 years old.\";' After the quick-fix is applied: 'String name = \"Bob\";\n  String greeting = \"Hello, \" + name + \". You are 29 years old.\";' Inspection ID: StringTemplateReverseMigration New in 2024.2",
                  "markdown": "Reports string template expressions using the `STR` processor and offers a quick-fix to migrate back to a plain string concatenation.\n\n**Example:**\n\n\n      String name = \"Bob\";\n      String greeting = STR.\"Hello, \\{name}. You are 29 years old.\";\n\nAfter the quick-fix is applied:\n\n\n      String name = \"Bob\";\n      String greeting = \"Hello, \" + name + \". You are 29 years old.\";\n\nInspection ID: StringTemplateReverseMigration\n\nNew in 2024.2"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "StringTemplateReverseMigration",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level migration aids/Java 21",
                      "index": 161,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ThrownExceptionsPerMethod",
                "shortDescription": {
                  "text": "Method with too many exceptions declared"
                },
                "fullDescription": {
                  "text": "Reports methods that have too many types of exceptions in its 'throws' list. Methods with too many exceptions declared are a good sign that your error handling code is getting overly complex. Use the Exceptions thrown limit field to specify the maximum number of exception types a method is allowed to have in its 'throws' list. Inspection ID: ThrownExceptionsPerMethod",
                  "markdown": "Reports methods that have too many types of exceptions in its `throws` list.\n\nMethods with too many exceptions declared are a good sign that your error handling code is getting overly complex.\n\nUse the **Exceptions thrown limit** field to specify the maximum number of exception types a method is allowed to have in its `throws` list.\n\n\nInspection ID: ThrownExceptionsPerMethod"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MethodWithTooExceptionsDeclared",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Method metrics",
                      "index": 108,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantThrows",
                "shortDescription": {
                  "text": "Redundant 'throws' clause"
                },
                "fullDescription": {
                  "text": "Reports exceptions that are declared in a method's signature but never thrown by the method itself or its implementations and overriding methods. The inspection ignores methods related to serialization, for example the methods 'readObject()' and 'writeObject()'. Example: 'void method() throws InterruptedException {\n    System.out.println();\n  }' The quick-fix removes unnecessary exceptions from the declaration and normalizes redundant 'try'-'catch' statements: 'void method() {\n    System.out.println();\n  }' Note: Some exceptions may not be reported during in-editor highlighting for performance reasons. To see all results, run the inspection by selecting Code | Inspect Code or Code | Analyze Code | Run Inspection by Name from the main menu. Use the Ignore exceptions thrown by entry point methods option to not report exceptions thrown by for example 'main()' methods. Entry point methods can be configured in the settings of the Java | Declaration redundancy | Unused declaration inspection. Inspection ID: RedundantThrows",
                  "markdown": "Reports exceptions that are declared in a method's signature but never thrown by the method itself or its implementations and overriding methods.\n\nThe inspection ignores methods related to serialization, for example the methods `readObject()` and `writeObject()`.\n\n**Example:**\n\n\n      void method() throws InterruptedException {\n        System.out.println();\n      }\n\nThe quick-fix removes unnecessary exceptions from the declaration and normalizes redundant `try`-`catch` statements:\n\n\n      void method() {\n        System.out.println();\n      }\n\n\n**Note:** Some exceptions may not be reported during in-editor highlighting for performance reasons.\nTo see all results, run the inspection by selecting **Code \\| Inspect Code** or **Code \\| Analyze Code \\| Run Inspection by Name** from the main menu.\n\nUse the **Ignore exceptions thrown by entry point methods** option to not report exceptions thrown by\nfor example `main()` methods.\nEntry point methods can be configured in the settings of the\n[Java \\| Declaration redundancy \\| Unused declaration](settings://Errors?Unused%20Declaration%20entry%20point) inspection.\n\nInspection ID: RedundantThrows"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RedundantThrows",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Declaration redundancy",
                      "index": 9,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseOfAnotherObjectsPrivateField",
                "shortDescription": {
                  "text": "Accessing a non-public field of another object"
                },
                "fullDescription": {
                  "text": "Reports accesses to 'private' or 'protected' fields of another object. Java allows access to such fields for objects of the same class as the current object but some coding styles discourage this use. Additionally, such direct access to 'private' fields may fail in component-oriented architectures, such as Spring or Hibernate, that expect all access to other objects to be through method calls so the framework can mediate access using proxies. Example: 'public class Base {\n    protected int bar;\n\n    void increment(Base base) {\n      bar++;\n      base.bar++; // warning: direct access to another object's non-public field\n    }\n  }' A quick-fix to encapsulate the field is available. Configure the inspection: Use the Ignore accesses from the same class option to ignore access from the same class and only report access from inner or outer classes. To ignore access from inner classes as well, use the nested Ignore accesses from inner classes. Use the Ignore accesses from 'equals()' method to ignore access from an 'equals()' method. Inspection ID: UseOfAnotherObjectsPrivateField",
                  "markdown": "Reports accesses to `private` or `protected` fields of another object. Java allows access to such fields for objects of the same class as the current object but some coding styles discourage this use. Additionally, such direct access to `private` fields may fail in component-oriented architectures, such as Spring or Hibernate, that expect all access to other objects to be through method calls so the framework can mediate access using proxies.\n\n**Example:**\n\n\n      public class Base {\n        protected int bar;\n\n        void increment(Base base) {\n          bar++;\n          base.bar++; // warning: direct access to another object's non-public field\n        }\n      }\n\nA quick-fix to encapsulate the field is available.\n\nConfigure the inspection:\n\n* Use the **Ignore accesses from the same class** option to ignore access from the same class and only report access from inner or outer classes.\n\n  To ignore access from inner classes as well, use the nested **Ignore accesses from inner classes**.\n* Use the **Ignore accesses from 'equals()' method** to ignore access from an `equals()` method.\n\nInspection ID: UseOfAnotherObjectsPrivateField"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AccessingNonPublicFieldOfAnotherObject",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Encapsulation",
                      "index": 100,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PointlessBitwiseExpression",
                "shortDescription": {
                  "text": "Pointless bitwise expression"
                },
                "fullDescription": {
                  "text": "Reports pointless bitwise expressions. Such expressions include applying the '&' operator to the maximum value for the given type, applying the 'or' operator to zero, and shifting by zero. Such expressions may be the result of automated refactorings not followed through to completion and are unlikely to be originally intended. Examples: '// Warning: operation is pointless and can be replaced with just `flags`\n  // 0xFFFF_FFFF is the maximum value for an integer, and both literals are treated\n  // as 32 bit integer literals.\n  int bits = flags & 0xFFFF_FFFF;\n\n  // Warning: operation is pointless and can be replaced with just `bits`\n  // OR-ing with 0 always outputs the other operand.\n  int or = bits | 0x0;\n\n  // Warning: operation is pointless, as always results in 0\n  int xor = or ^ or;' Inspection ID: PointlessBitwiseExpression",
                  "markdown": "Reports pointless bitwise expressions.\n\n\nSuch expressions include applying the `&` operator to the maximum value for the given type, applying the\n`or` operator to zero, and shifting by zero. Such expressions may be the result of automated\nrefactorings not followed through to completion and are unlikely to be originally intended.\n\n**Examples:**\n\n\n      // Warning: operation is pointless and can be replaced with just `flags`\n      // 0xFFFF_FFFF is the maximum value for an integer, and both literals are treated\n      // as 32 bit integer literals.\n      int bits = flags & 0xFFFF_FFFF;\n\n      // Warning: operation is pointless and can be replaced with just `bits`\n      // OR-ing with 0 always outputs the other operand.\n      int or = bits | 0x0;\n\n      // Warning: operation is pointless, as always results in 0\n      int xor = or ^ or;\n\nInspection ID: PointlessBitwiseExpression"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PointlessBitwiseExpression",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Bitwise operation issues",
                      "index": 163,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DuplicateThrows",
                "shortDescription": {
                  "text": "Duplicate throws"
                },
                "fullDescription": {
                  "text": "Reports duplicate exceptions in a method 'throws' list. Example: 'void f() throws Exception, Exception {}' After the quick-fix is applied: 'void f() throws Exception {}' Use the Ignore exceptions subclassing others option to ignore exceptions subclassing other exceptions. Inspection ID: DuplicateThrows",
                  "markdown": "Reports duplicate exceptions in a method `throws` list.\n\nExample:\n\n\n      void f() throws Exception, Exception {}\n\nAfter the quick-fix is applied:\n\n\n      void f() throws Exception {}\n\n\nUse the **Ignore exceptions subclassing others** option to ignore exceptions subclassing other exceptions.\n\nInspection ID: DuplicateThrows"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "DuplicateThrows",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Declaration redundancy",
                      "index": 9,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnstableTypeUsedInSignature",
                "shortDescription": {
                  "text": "Unstable type is used in signature"
                },
                "fullDescription": {
                  "text": "Reports declarations of classes, methods, and fields that reference an unstable API type in the signature, but are not marked with the same unstable annotation. This inspection ensures that the signatures of a public API do not expose any unstable (internal, experimental) types. For example, if a method returns an experimental class, the method itself is considered experimental because incompatible changes of the type (deletion or move to another package) lead to incompatible method signature changes. Use the list below to specify which annotations mark an unstable API. Inspection ID: UnstableTypeUsedInSignature",
                  "markdown": "Reports declarations of classes, methods, and fields that reference an unstable API type in the signature, but are not marked with the same unstable annotation.\n\n\nThis inspection ensures that the signatures of a public API do not expose any *unstable* (internal, experimental) types.\nFor example, if a method returns an *experimental* class, the method itself is considered *experimental*\nbecause incompatible changes of the type (deletion or move to another package) lead to incompatible method signature changes.\n\nUse the list below to specify which annotations mark an unstable API.\n\nInspection ID: UnstableTypeUsedInSignature"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnstableTypeUsedInSignature",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JVM languages",
                      "index": 1,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PrivateMemberAccessBetweenOuterAndInnerClass",
                "shortDescription": {
                  "text": "Synthetic accessor call"
                },
                "fullDescription": {
                  "text": "Reports references from a nested class to non-constant 'private' members of an outer class. For such references, javac will generate package-private synthetic accessor methods, which may compromise the security because members appearing to be private will in fact be accessible from the entire package. A nested class and its outer class are compiled to separate class files. The Java virtual machine normally prohibits access from a class to private fields and methods of another class. To enable access from a nested class to private members of an outer class, javac creates a package-private synthetic accessor method. By making the 'private' member package-private instead, the actual accessibility is made explicit. This also saves a little bit of memory, which may improve performance in resource constrained environments. This inspection only reports if the language level of the project or module is 10 or lower. Under Java 11 and higher accessor methods are not generated anymore, because of nest-based access control (JEP 181). Example: 'class Outer {\n    private void x() {}\n\n    class Inner {\n      void y() {\n        x();\n      }\n    }\n  }' After the quick fix is applied: 'class Outer {\n    void x() {}\n\n    class Inner {\n      void y() {\n        x();\n      }\n    }\n  }' Inspection ID: PrivateMemberAccessBetweenOuterAndInnerClass",
                  "markdown": "Reports references from a nested class to non-constant `private` members of an outer class. For such references, javac will generate package-private synthetic accessor methods, which may compromise the security because members appearing to be private will in fact be accessible from the entire package.\n\n\nA nested class and its outer class are compiled to separate\nclass files. The Java virtual machine normally prohibits access from a class to private fields and methods of\nanother class. To enable access from a nested class to private members of an outer class, javac creates a package-private\nsynthetic accessor method.\n\n\nBy making the `private` member package-private instead, the actual accessibility is made explicit.\nThis also saves a little bit of memory, which may improve performance in resource constrained environments.\n\n\nThis inspection only reports if the language level of the project or module is 10 or lower.\nUnder Java 11 and higher accessor methods are not generated anymore,\nbecause of nest-based access control ([JEP 181](https://openjdk.org/jeps/181)).\n\n**Example:**\n\n\n      class Outer {\n        private void x() {}\n\n        class Inner {\n          void y() {\n            x();\n          }\n        }\n      }\n\nAfter the quick fix is applied:\n\n\n      class Outer {\n        void x() {}\n\n        class Inner {\n          void y() {\n            x();\n          }\n        }\n      }\n\nInspection ID: PrivateMemberAccessBetweenOuterAndInnerClass"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SyntheticAccessorCall",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Performance/Embedded",
                      "index": 137,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ClassIndependentOfModule",
                "shortDescription": {
                  "text": "Class independent of its module"
                },
                "fullDescription": {
                  "text": "Reports classes that: do not depend on any other class in their module are not a dependency for any other class in their module Such classes are an indication of ad-hoc or incoherent modularisation strategies, and may often profitably be moved. Available only from Code | Inspect Code or Code | Analyze Code | Run Inspection by Name and isn't reported in the editor. Inspection ID: ClassIndependentOfModule",
                  "markdown": "Reports classes that:\n\n* do not depend on any other class in their module\n* are not a dependency for any other class in their module\n\nSuch classes are an indication of ad-hoc or incoherent modularisation strategies,\nand may often profitably be moved.\n\nAvailable only from **Code \\| Inspect Code** or\n**Code \\| Analyze Code \\| Run Inspection by Name** and isn't reported in the editor.\n\nInspection ID: ClassIndependentOfModule"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ClassIndependentOfModule",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Modularization issues",
                      "index": 57,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SystemRunFinalizersOnExit",
                "shortDescription": {
                  "text": "Call to 'System.runFinalizersOnExit()'"
                },
                "fullDescription": {
                  "text": "Reports calls to 'System.runFinalizersOnExit()'. This call is one of the most dangerous in the Java language. It is inherently non-thread-safe, may result in data corruption, a deadlock, and may affect parts of the program far removed from its call point. It is deprecated and was removed in JDK 11, and its use is strongly discouraged. This inspection only reports if the language level of the project or module is 10 or lower. Inspection ID: SystemRunFinalizersOnExit",
                  "markdown": "Reports calls to `System.runFinalizersOnExit()`.\n\n\nThis call is one of the most dangerous in the Java language. It is inherently non-thread-safe,\nmay result in data corruption, a deadlock, and may affect parts of the program far removed from its call point.\nIt is deprecated and was removed in JDK 11, and its use is strongly discouraged.\n\nThis inspection only reports if the language level of the project or module is 10 or lower.\n\nInspection ID: SystemRunFinalizersOnExit"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CallToSystemRunFinalizersOnExit",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Threading issues",
                      "index": 23,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ParameterTypePreventsOverriding",
                "shortDescription": {
                  "text": "Parameter type prevents overriding"
                },
                "fullDescription": {
                  "text": "Reports parameter types of a subclass method that have the same name as the parameter type of the corresponding super method but belong to a different package. In these cases, the subclass method cannot override the super method. Example: 'public class A {\n public void method(Object o) {}\n}\n\npublic class B extends A {\n public void method(Object o) {} // warning on parameter type\n class Object {}\n}' After the quick-fix is applied: 'public class A {\n public void method(Object o) {}\n}\n\npublic class B extends A {\n public void method(java.lang.Object o) {} // new parameter type\n class Object {}\n}' Inspection ID: ParameterTypePreventsOverriding",
                  "markdown": "Reports parameter types of a subclass method that have the same name as the parameter type of the corresponding super method but belong to a different package. In these cases, the subclass method cannot override the super method.\n\n**Example:**\n\n\n    public class A {\n     public void method(Object o) {}\n    }\n\n    public class B extends A {\n     public void method(Object o) {} // warning on parameter type\n     class Object {}\n    }\n\nAfter the quick-fix is applied:\n\n\n    public class A {\n     public void method(Object o) {}\n    }\n\n    public class B extends A {\n     public void method(java.lang.Object o) {} // new parameter type\n     class Object {}\n    }\n\n\nInspection ID: ParameterTypePreventsOverriding"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ParameterTypePreventsOverriding",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Inheritance issues",
                      "index": 121,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceInefficientStreamCount",
                "shortDescription": {
                  "text": "Inefficient Stream API call chains ending with count()"
                },
                "fullDescription": {
                  "text": "Reports Stream API call chains ending with a 'count()' operation, that are optimizable. The following call chains can be replaced by this inspection: 'Collection.stream().count()' → 'Collection.size()'. In Java 8 'Collection.stream().count()' actually iterates over the collection elements to count them, while 'Collection.size()' is much faster for most of the collections. 'Stream.flatMap(Collection::stream).count()' → 'Stream.mapToLong(Collection::size).sum()'. Similarly, there's no need to iterate over all the nested collections. Instead, their sizes could be summed up. 'Stream.filter(o -> ...).count() > 0' → 'Stream.anyMatch(o -> ...)'. Unlike the original call, 'anyMatch()' may stop the computation as soon as a matching element is found. 'Stream.filter(o -> ...).count() == 0' → 'Stream.noneMatch(o -> ...)'. Similar to the above. Note that if the replacement involves a short-circuiting operation like 'anyMatch()', there could be a visible behavior change, if the intermediate stream operations produce side effects. In general, side effects should be avoided in Stream API calls. This inspection depends on the Java feature 'Stream and Optional API', which is available since Java 8. Inspection ID: ReplaceInefficientStreamCount",
                  "markdown": "Reports Stream API call chains ending with a `count()` operation, that are optimizable.\n\n\nThe following call chains can be replaced by this inspection:\n\n* `Collection.stream().count()` → `Collection.size()`. In Java 8 `Collection.stream().count()` actually iterates over the collection elements to count them, while `Collection.size()` is much faster for most of the collections.\n* `Stream.flatMap(Collection::stream).count()` → `Stream.mapToLong(Collection::size).sum()`. Similarly, there's no need to iterate over all the nested collections. Instead, their sizes could be summed up.\n* `Stream.filter(o -> ...).count() > 0` → `Stream.anyMatch(o -> ...)`. Unlike the original call, `anyMatch()` may stop the computation as soon as a matching element is found.\n* `Stream.filter(o -> ...).count() == 0` → `Stream.noneMatch(o -> ...)`. Similar to the above.\n\n\nNote that if the replacement involves a short-circuiting operation like `anyMatch()`, there could be a visible behavior change,\nif the intermediate stream operations produce side effects. In general, side effects should be avoided in Stream API calls.\n\nThis inspection depends on the Java feature 'Stream and Optional API', which is available since Java 8.\n\nInspection ID: ReplaceInefficientStreamCount"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ReplaceInefficientStreamCount",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Performance",
                      "index": 4,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ExtractMethodRecommender",
                "shortDescription": {
                  "text": "Method can be extracted"
                },
                "fullDescription": {
                  "text": "Suggests extracting fragments of code to a separate method to make code more clear. This inspection has a number of heuristics to select good candidates for extraction, including the following ones. The extracted fragment has no non-local control flow The extracted fragment has exactly one output variable There are no similar uses of output variable inside the extracted fragment and outside it The extracted fragment has only few input parameters (no more than three by default; configured with the inspection option) The extracted fragment is not smaller than the configured length (500 characters by default) but no bigger than 60% of the containing method body Inspection ID: ExtractMethodRecommender",
                  "markdown": "Suggests extracting fragments of code to a separate method to make code more clear. This inspection has a number of heuristics to select good candidates for extraction, including the following ones.\n\n* The extracted fragment has no non-local control flow\n* The extracted fragment has exactly one output variable\n* There are no similar uses of output variable inside the extracted fragment and outside it\n* The extracted fragment has only few input parameters (no more than three by default; configured with the inspection option)\n* The extracted fragment is not smaller than the configured length (500 characters by default) but no bigger than 60% of the containing method body\n\nInspection ID: ExtractMethodRecommender"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ExtractMethodRecommender",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code maturity",
                      "index": 46,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StringOperationCanBeSimplified",
                "shortDescription": {
                  "text": "Redundant 'String' operation"
                },
                "fullDescription": {
                  "text": "Reports redundant calls to 'String' constructors and methods like 'toString()' or 'substring()' that can be replaced with a simpler expression. For example, calls to these methods can be safely removed in code like '\"string\".substring(0)', '\"string\".toString()', or 'new StringBuilder().toString().substring(1,3)'. Example: 'System.out.println(new String(\"message\"));' After the quick-fix is applied: 'System.out.println(\"message\");' Note that the quick-fix removes the redundant constructor call, and this may affect 'String' referential equality. If you need to preserve it, even though it is considered bad practice, suppress the warning or use the inspection setting to ignore redundant 'String' constructor calls. Use the Do not report String constructor calls option below to not report code like the example above. This will avoid changing the outcome of String comparisons with '==' or '!=' after applying the quick-fix in code that uses 'new String()' calls to guarantee a different object identity. Use the Do not report single argument substring() calls option below to not report code like the following. 'stringBuilder.append(string.substring(5));' which can be replaced with the following. 'stringBuilder.append(string, 5, string.length());' Inspection ID: StringOperationCanBeSimplified New in 2018.1",
                  "markdown": "Reports redundant calls to `String` constructors and methods like `toString()` or `substring()` that can be replaced with a simpler expression.\n\nFor example, calls to these methods can be safely removed in code\nlike `\"string\".substring(0)`, `\"string\".toString()`, or\n`new StringBuilder().toString().substring(1,3)`.\n\nExample:\n\n\n      System.out.println(new String(\"message\"));\n\nAfter the quick-fix is applied:\n\n\n      System.out.println(\"message\");\n\n\nNote that the quick-fix removes the redundant constructor call, and this may affect `String` referential equality.\nIf you need to preserve it, even though it is considered bad practice, suppress the warning or use the inspection setting to ignore\nredundant `String` constructor calls.\n\n\nUse the **Do not report String constructor calls** option below to not report code like the example above.\nThis will avoid changing the outcome of String comparisons with `==` or `!=` after applying\nthe quick-fix in code that uses `new String()` calls to guarantee a different object identity.\n\n\nUse the **Do not report single argument substring() calls** option below to not report code like the following.\n\n\n      stringBuilder.append(string.substring(5));\n\nwhich can be replaced with the following.\n\n\n      stringBuilder.append(string, 5, string.length());\n\nInspection ID: StringOperationCanBeSimplified\n\nNew in 2018.1"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "StringOperationCanBeSimplified",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Verbose or redundant code constructs",
                      "index": 37,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ClassReferencesSubclass",
                "shortDescription": {
                  "text": "Class references one of its subclasses"
                },
                "fullDescription": {
                  "text": "Reports classes which contain references to one of their subclasses. Such references may be confusing and violate several rules of object-oriented design. Example: 'class Entity {\n    // Warning: the class references its subclass\n    void compare(SimpleEntity entity) {\n      ...\n    }\n  }\n  class SimpleEntity extends Entity {\n    ...\n  }' Inspection ID: ClassReferencesSubclass",
                  "markdown": "Reports classes which contain references to one of their subclasses. Such references may be confusing and violate several rules of object-oriented design.\n\nExample:\n\n\n      class Entity {\n        // Warning: the class references its subclass\n        void compare(SimpleEntity entity) {\n          ...\n        }\n      }\n      class SimpleEntity extends Entity {\n        ...\n      }\n\nInspection ID: ClassReferencesSubclass"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ClassReferencesSubclass",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Abstraction issues",
                      "index": 63,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DateToString",
                "shortDescription": {
                  "text": "Call to 'Date.toString()'"
                },
                "fullDescription": {
                  "text": "Reports 'toString()' calls on 'java.util.Date' objects. Such calls are usually incorrect in an internationalized environment. Inspection ID: DateToString",
                  "markdown": "Reports `toString()` calls on `java.util.Date` objects. Such calls are usually incorrect in an internationalized environment.\n\nInspection ID: DateToString"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CallToDateToString",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Internationalization",
                      "index": 3,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IterableUsedAsVararg",
                "shortDescription": {
                  "text": "Iterable is used as vararg"
                },
                "fullDescription": {
                  "text": "Reports suspicious usages of 'Collection' or 'Iterable' in vararg method calls. For example, in the following method: '<T> boolean contains(T needle, T... haystack) {...}' a call like 'if(contains(\"item\", listOfStrings)) {...}' looks suspicious as the list will be wrapped into a single element array. Such code can be successfully compiled and will likely run without exceptions, but it's probably used by mistake. This inspection depends on the Java feature 'Variable arity methods', which is available since Java 5. Inspection ID: IterableUsedAsVararg New in 2019.2",
                  "markdown": "Reports suspicious usages of `Collection` or `Iterable` in vararg method calls.\n\nFor example, in the following method:\n\n\n      <T> boolean contains(T needle, T... haystack) {...}\n\na call like\n\n\n      if(contains(\"item\", listOfStrings)) {...}\n\nlooks suspicious as the list will be wrapped into a single element array.\nSuch code can be successfully compiled and will likely run without\nexceptions, but it's probably used by mistake.\n\nThis inspection depends on the Java feature 'Variable arity methods', which is available since Java 5.\n\nInspection ID: IterableUsedAsVararg\n\nNew in 2019.2"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "IterableUsedAsVararg",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MethodNameSameAsParentName",
                "shortDescription": {
                  "text": "Method name same as parent class name"
                },
                "fullDescription": {
                  "text": "Reports methods that have the same name as the superclass of the method's class, as such a method name may be confusing. This inspection doesn't check interfaces or superclasses deep in the hierarchy. Example: 'class Parent {}\n  class Child extends Parent {\n     public Parent Parent() {\n       return null;\n     }\n  }' A quick-fix that renames such methods is available only in the editor. Inspection ID: MethodNameSameAsParentName",
                  "markdown": "Reports methods that have the same name as the superclass of the method's class, as such a method name may be confusing.\n\nThis inspection doesn't check interfaces or superclasses deep in the hierarchy.\n\n**Example:**\n\n\n      class Parent {}\n      class Child extends Parent {\n         public Parent Parent() {\n           return null;\n         }\n      }\n\nA quick-fix that renames such methods is available only in the editor.\n\n\nInspection ID: MethodNameSameAsParentName"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MethodNameSameAsParentName",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Naming conventions/Method",
                      "index": 83,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnreachableCatch",
                "shortDescription": {
                  "text": "Unreachable catch section"
                },
                "fullDescription": {
                  "text": "Reports catch sections which are never executed, even if allowed by the Java Language Specification. While unreachable catch sections are normally disallowed by Java compiler and reported as compilation errors, the analysis mandated by the Java language is not complete for some cases. This inspection provides enhanced analysis and reports some unreachable catch sections which are not reported by the compiler. Such sections are redundant and could be safely removed. Example: 'void method() {\n    try { \n      throw new FileNotFoundException(); \n    }\n    catch (FileNotFoundException e) { \n      \n    }\n    catch (IOException e) {\n      // this catch is allowed by specification\n      // but never executed\n    }\n  }' The quick-fix is provided, which removes the redundant catch section: 'void method() {\n    try { \n      throw new FileNotFoundException(); \n    }\n    catch (FileNotFoundException e) { \n      \n    }\n  }' Inspection ID: UnreachableCatch New in 2025.1",
                  "markdown": "Reports catch sections which are never executed, even if allowed by the Java Language Specification.\n\n\nWhile unreachable catch sections are normally disallowed by Java compiler and reported as compilation errors,\nthe analysis mandated by the Java language is not complete for some cases.\nThis inspection provides enhanced analysis and reports some unreachable catch sections which are not reported by the compiler.\nSuch sections are redundant and could be safely removed.\n\n**Example:**\n\n\n      void method() {\n        try { \n          throw new FileNotFoundException(); \n        }\n        catch (FileNotFoundException e) { \n          \n        }\n        catch (IOException e) {\n          // this catch is allowed by specification\n          // but never executed\n        }\n      }\n\nThe quick-fix is provided, which removes the redundant catch section:\n\n\n      void method() {\n        try { \n          throw new FileNotFoundException(); \n        }\n        catch (FileNotFoundException e) { \n          \n        }\n      }\n\nInspection ID: UnreachableCatch\n\nNew in 2025.1"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnreachableCatch",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Verbose or redundant code constructs",
                      "index": 37,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LambdaParameterNamingConvention",
                "shortDescription": {
                  "text": "Lambda parameter naming convention"
                },
                "fullDescription": {
                  "text": "Reports lambda parameters whose names are too short, too long, or do not follow the specified regular expression pattern. Example: 'Function<String, String> id = X -> X;' should be reported if the inspection is enabled with the default settings in which a parameter name should start with a lowercase letter. Configure the inspection: Use the fields in the Options section to specify the minimum length, maximum length, and a regular expression expected for lambda parameter names. Specify 0 in order not to check the length of names. Regular expressions should be specified in the standard 'java.util.regex' format. Inspection ID: LambdaParameterNamingConvention",
                  "markdown": "Reports lambda parameters whose names are too short, too long, or do not follow the specified regular expression pattern.\n\n**Example:** `Function<String, String> id = X -> X;`\nshould be reported if the inspection is enabled with the default settings in which a parameter name should start with a lowercase letter.\n\nConfigure the inspection:\n\n\nUse the fields in the **Options** section to specify the minimum length, maximum length, and a regular expression expected for lambda parameter names.\nSpecify **0** in order not to check the length of names.\n\nRegular expressions should be specified in the standard `java.util.regex` format.\n\nInspection ID: LambdaParameterNamingConvention"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "LambdaParameterNamingConvention",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Naming conventions",
                      "index": 59,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LawOfDemeter",
                "shortDescription": {
                  "text": "Law of Demeter"
                },
                "fullDescription": {
                  "text": "Reports Law of Demeter violations. The Law of Demeter is not really a law, but specifies a style guideline: never call a method on an object received from another call. The code that follows this guideline is easier to maintain, adapt, and refactor, has less coupling between methods, less duplication, and better information hiding. On the other hand, you may need to write many wrapper methods to meet this guideline. Example: 'boolean pay(Customer c, Invoice invoice) {\n    int dollars = c.getWallet().contents; // violation\n    if (dollars >= invoice.getAmount()) {\n      Wallet w = c.getWallet();\n      w.subtract(invoice.getAmount()); // violation\n      return true;\n    }\n    return false;\n  }' The above example might be better implemented as a method 'payInvoice(Invoice invoice)' in 'Customer'. Use the Ignore calls to library methods and access to library fields option to ignore Law of Demeter violations that can't be fixed without changing a library. Inspection ID: LawOfDemeter",
                  "markdown": "Reports [Law of Demeter](https://en.wikipedia.org/wiki/Law_of_Demeter) violations.\n\n\nThe Law of Demeter is not really a law, but specifies a style guideline: never call a method on an object received from another call.\nThe code that follows this guideline is easier to maintain, adapt, and refactor, has less coupling between methods, less duplication,\nand better information hiding. On the other hand, you may need to write many wrapper methods to meet this guideline.\n\n**Example:**\n\n\n      boolean pay(Customer c, Invoice invoice) {\n        int dollars = c.getWallet().contents; // violation\n        if (dollars >= invoice.getAmount()) {\n          Wallet w = c.getWallet();\n          w.subtract(invoice.getAmount()); // violation\n          return true;\n        }\n        return false;\n      }\n\nThe above example might be better implemented as a method `payInvoice(Invoice invoice)` in `Customer`.\n\n\nUse the **Ignore calls to library methods and access to library fields** option to ignore Law of Demeter violations\nthat can't be fixed without changing a library.\n\nInspection ID: LawOfDemeter"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "LawOfDemeter",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Data flow",
                      "index": 51,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AmbiguousFieldAccess",
                "shortDescription": {
                  "text": "Access to inherited field looks like access to element from surrounding code"
                },
                "fullDescription": {
                  "text": "Reports access to a superclass field from an anonymous, inner or local class, if a local variable, parameter, or field with the same name is available in the code surrounding the class. In this case it may seem that an element from the surrounding code is accessed, when in fact it is an access to a field from the superclass. To clarify the intent of the code, it is recommended to add an explicit 'super' qualifier to the field access. Example: 'class First {\n      protected String ambiguous;\n    }\n    class Second {\n      void foo(String ambiguous) {\n        new First() {\n          {\n            System.out.println(ambiguous); // the field is accessed, not the parameter\n          }\n        };\n      }\n    }' After the quick-fix is applied: 'class First {\n      protected String ambiguous;\n    }\n    class Second {\n      void foo(String ambiguous) {\n        new First() {\n          {\n            System.out.println(super.ambiguous);\n          }\n        };\n      }\n    }' Inspection ID: AmbiguousFieldAccess",
                  "markdown": "Reports access to a superclass field from an anonymous, inner or local class, if a local variable, parameter, or field with the same name is available in the code surrounding the class. In this case it may seem that an element from the surrounding code is accessed, when in fact it is an access to a field from the superclass.\n\n\nTo clarify the intent of the code, it is recommended to add an explicit\n`super` qualifier to the field access.\n\n**Example:**\n\n\n        class First {\n          protected String ambiguous;\n        }\n        class Second {\n          void foo(String ambiguous) {\n            new First() {\n              {\n                System.out.println(ambiguous); // the field is accessed, not the parameter\n              }\n            };\n          }\n        }\n\nAfter the quick-fix is applied:\n\n\n        class First {\n          protected String ambiguous;\n        }\n        class Second {\n          void foo(String ambiguous) {\n            new First() {\n              {\n                System.out.println(super.ambiguous);\n              }\n            };\n          }\n        }\n\nInspection ID: AmbiguousFieldAccess"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AmbiguousFieldAccess",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Visibility",
                      "index": 73,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NonProtectedConstructorInAbstractClass",
                "shortDescription": {
                  "text": "Public constructor in abstract class"
                },
                "fullDescription": {
                  "text": "Reports 'public' constructors of 'abstract' classes. Constructors of 'abstract' classes can only be called from the constructors of their subclasses, declaring them 'public' may be confusing. The quick-fix makes such constructors protected. Example: 'public abstract class Foo {\n    public Foo () { // warning: has 'public' modifier\n        /* ... */\n    }\n  }' After the quick-fix is applied: 'public abstract class Foo {\n    protected Foo () {\n        /* ... */\n    }\n  }' Configure the inspection: Use the Ignore for non-public classes option below to ignore 'public' constructors in non-public classes. Inspection ID: NonProtectedConstructorInAbstractClass",
                  "markdown": "Reports `public` constructors of `abstract` classes.\n\n\nConstructors of `abstract` classes can only be called from the constructors of\ntheir subclasses, declaring them `public` may be confusing.\n\nThe quick-fix makes such constructors protected.\n\n**Example:**\n\n\n      public abstract class Foo {\n        public Foo () { // warning: has 'public' modifier\n            /* ... */\n        }\n      }\n\nAfter the quick-fix is applied:\n\n\n      public abstract class Foo {\n        protected Foo () {\n            /* ... */\n        }\n      }\n\nConfigure the inspection:\n\nUse the **Ignore for non-public classes** option below to ignore `public` constructors in non-public classes.\n\nInspection ID: NonProtectedConstructorInAbstractClass"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ConstructorNotProtectedInAbstractClass",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Inheritance issues",
                      "index": 121,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ComparableImplementedButEqualsNotOverridden",
                "shortDescription": {
                  "text": "'Comparable' implemented but 'equals()' not overridden"
                },
                "fullDescription": {
                  "text": "Reports classes that implement 'java.lang.Comparable' but do not override 'equals()'. If 'equals()' is not overridden, the 'equals()' implementation is not consistent with the 'compareTo()' implementation. If an object of such a class is added to a collection such as 'java.util.SortedSet', this collection will violate the contract of 'java.util.Set', which is defined in terms of 'equals()'. Example: 'class Length implements Comparable<Length> {\n    private int cm = 0;\n\n    @Override\n    public int compareTo(@NotNull Length o) {\n      if (cm == o.cm) return 0;\n      return cm < o.cm ? -1 : 1;\n    }\n  }' After the quick fix is applied: 'class Length implements Comparable<Length> {\n    private int cm = 0;\n\n    @Override\n    public int compareTo(@NotNull Length o) {\n      if (cm == o.cm) return 0;\n      return cm < o.cm ? -1 : 1;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n      return o instanceof Length && compareTo((Length) o) == 0;\n    }\n  }' Inspection ID: ComparableImplementedButEqualsNotOverridden",
                  "markdown": "Reports classes that implement `java.lang.Comparable` but do not override `equals()`.\n\n\nIf `equals()`\nis not overridden, the `equals()` implementation is not consistent with\nthe `compareTo()` implementation. If an object of such a class is added\nto a collection such as `java.util.SortedSet`, this collection will violate\nthe contract of `java.util.Set`, which is defined in terms of\n`equals()`.\n\n**Example:**\n\n\n      class Length implements Comparable<Length> {\n        private int cm = 0;\n\n        @Override\n        public int compareTo(@NotNull Length o) {\n          if (cm == o.cm) return 0;\n          return cm < o.cm ? -1 : 1;\n        }\n      }\n\nAfter the quick fix is applied:\n\n\n      class Length implements Comparable<Length> {\n        private int cm = 0;\n\n        @Override\n        public int compareTo(@NotNull Length o) {\n          if (cm == o.cm) return 0;\n          return cm < o.cm ? -1 : 1;\n        }\n\n        @Override\n        public boolean equals(Object o) {\n          return o instanceof Length && compareTo((Length) o) == 0;\n        }\n      }\n\nInspection ID: ComparableImplementedButEqualsNotOverridden"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ComparableImplementedButEqualsNotOverridden",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MapReplaceableByEnumMap",
                "shortDescription": {
                  "text": "'Map' can be replaced with 'EnumMap'"
                },
                "fullDescription": {
                  "text": "Reports instantiations of 'java.util.Map' objects whose key types are enumerated classes. Such 'java.util.Map' objects can be replaced with 'java.util.EnumMap' objects. 'java.util.EnumMap' implementations can be much more efficient because the underlying data structure is a simple array. Example: 'Map<MyEnum, String> myEnums = new HashMap<>();' After the quick-fix is applied: 'Map<MyEnum, String> myEnums = new EnumMap<>(MyEnum.class);' Inspection ID: MapReplaceableByEnumMap",
                  "markdown": "Reports instantiations of `java.util.Map` objects whose key types are enumerated classes. Such `java.util.Map` objects can be replaced with `java.util.EnumMap` objects.\n\n\n`java.util.EnumMap` implementations can be much more efficient\nbecause the underlying data structure is a simple array.\n\n**Example:**\n\n\n      Map<MyEnum, String> myEnums = new HashMap<>();\n\nAfter the quick-fix is applied:\n\n\n      Map<MyEnum, String> myEnums = new EnumMap<>(MyEnum.class);\n\nInspection ID: MapReplaceableByEnumMap"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MapReplaceableByEnumMap",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Performance",
                      "index": 4,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReturnNull",
                "shortDescription": {
                  "text": "Return of 'null'"
                },
                "fullDescription": {
                  "text": "Reports 'return' statements with 'null' return values. While occasionally useful, this construct may make the code more prone to failing with a 'NullPointerException'. If a method is designed to return 'null', it is suggested to mark it with the '@Nullable' annotation - such methods will be ignored by this inspection. Example: 'class Person {\n    public String getName () {\n      return null;\n    }\n  }' After the quick-fix is applied: 'class Person {\n    public @Nullable String getName () {\n      return null;\n    }\n  }' If the return type is 'java.util.Optional', an additional quick-fix to convert 'null' to 'Optional.empty()' is suggested. Use the following options to configure the inspection: Whether to ignore 'private' methods. This will also ignore return of 'null' from anonymous classes and lambdas. Whether 'null' values on array returns, collection object returns, plain object returns, or a combination of the three should be reported. Return of 'null' in methods with return type 'java.util.Optional' are always reported. Click Configure annotations to specify which annotations should be considered 'nullable'. Inspection ID: ReturnNull",
                  "markdown": "Reports `return` statements with `null` return values. While occasionally useful, this construct may make the code more prone to failing with a `NullPointerException`.\n\n\nIf a method is designed to return `null`, it is suggested to mark it with the\n`@Nullable` annotation - such methods will be ignored by this inspection.\n\n**Example:**\n\n\n      class Person {\n        public String getName () {\n          return null;\n        }\n      }\n\nAfter the quick-fix is applied:\n\n\n      class Person {\n        public @Nullable String getName () {\n          return null;\n        }\n      }\n\n\nIf the return type is `java.util.Optional`, an additional quick-fix to convert\n`null` to `Optional.empty()` is suggested.\n\n\nUse the following options to configure the inspection:\n\n* Whether to ignore `private` methods. This will also ignore return of `null` from anonymous classes and lambdas.\n* Whether `null` values on array returns, collection object returns, plain object returns, or a combination of the three should be reported. Return of `null` in methods with return type `java.util.Optional` are always reported.\n* Click **Configure annotations** to specify which annotations should be considered 'nullable'.\n\nInspection ID: ReturnNull"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ReturnOfNull",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs/Nullability problems",
                      "index": 141,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LoggingStringTemplateAsArgument",
                "shortDescription": {
                  "text": "String template as argument to logging call"
                },
                "fullDescription": {
                  "text": "Reports string templates that are used as arguments to SLF4J and Log4j 2 logging methods. The method 'org.apache.logging.log4j.Logger.log()' and its overloads are supported only for all log levels option. String templates are evaluated at runtime even when the logging message is not logged; this can negatively impact performance. It is recommended to use a parameterized log message instead, which will not be evaluated when logging is disabled. Example (for Kotlin): 'val variable1 = getVariable()\n      logger.info(\"variable1: $variable1\")' After the quick-fix is applied (for Kotlin): 'val variable1 = getVariable()\n      logger.info(\"variable1: {}\", variable1)' Note that the suggested replacement might not be equivalent to the original code, for example, when string templates contain method calls or assignment expressions. Use the Warn on list to ignore certain higher logging levels. Higher logging levels may be always enabled, and the arguments will always be evaluated. Use the Do not warn when only expressions with primitive types, their wrappers or String are included option to ignore string templates, which contain only expressions with primitive types, their wrappers or String. For example, it could be useful to prevent loading lazy collections. Note that, creating string even only with expressions with primitive types, their wrappers or String at runtime can negatively impact performance. Use the Do not warn when call only with an exception as argument after message argument option to ignore calls, which only contain an exception as an argument after the message argument. For example, it could be useful to adjust the inspection's behavior with a custom code style. Inspection ID: LoggingStringTemplateAsArgument New in 2023.1",
                  "markdown": "Reports string templates that are used as arguments to **SLF4J** and **Log4j 2** logging methods. The method `org.apache.logging.log4j.Logger.log()` and its overloads are supported only for **all log levels** option. String templates are evaluated at runtime even when the logging message is not logged; this can negatively impact performance. It is recommended to use a parameterized log message instead, which will not be evaluated when logging is disabled.\n\n**Example (for Kotlin):**\n\n\n          val variable1 = getVariable()\n          logger.info(\"variable1: $variable1\")\n\n**After the quick-fix is applied (for Kotlin):**\n\n\n          val variable1 = getVariable()\n          logger.info(\"variable1: {}\", variable1)\n\n\nNote that the suggested replacement might not be equivalent to the original code, for example,\nwhen string templates contain method calls or assignment expressions.\n\n* Use the **Warn on** list to ignore certain higher logging levels. Higher logging levels may be always enabled, and the arguments will always be evaluated.\n* Use the **Do not warn when only expressions with primitive types, their wrappers or String are included** option to ignore string templates, which contain only expressions with primitive types, their wrappers or String. For example, it could be useful to prevent loading lazy collections. Note that, creating string even only with expressions with primitive types, their wrappers or String at runtime can negatively impact performance.\n* Use the **Do not warn when call only with an exception as argument after message argument** option to ignore calls, which only contain an exception as an argument after the message argument. For example, it could be useful to adjust the inspection's behavior with a custom code style.\n\nInspection ID: LoggingStringTemplateAsArgument\n\nNew in 2023.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "LoggingStringTemplateAsArgument",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Performance"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JVM languages/Logging",
                      "index": 41,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnpredictableBigDecimalConstructorCall",
                "shortDescription": {
                  "text": "Unpredictable 'BigDecimal' constructor call"
                },
                "fullDescription": {
                  "text": "Reports calls to 'BigDecimal' constructors that accept a 'double' value. These constructors produce 'BigDecimal' that is equal to the supplied 'double' value. However, because doubles are encoded in the IEEE-754 64-bit double-precision binary floating-point format, the exact value can be unexpected. For example, 'new BigDecimal(0.1)' yields a 'BigDecimal' object with value '0.1000000000000000055511151231257827021181583404541015625', which is the nearest number to 0.1 representable as a 'double'. To get a 'BigDecimal' that contains the expected value '0.1', use either 'new BigDecimal(\"0.1\")' or 'BigDecimal.valueOf(0.1)'. Example: 'class Constructor {\n    void foo() {\n      new BigDecimal(0.1);\n    }\n  }' After the quick-fix is applied: 'class Constructor {\n    void foo() {\n      new BigDecimal(\"0.1\");\n    }\n  }' Inspection ID: UnpredictableBigDecimalConstructorCall",
                  "markdown": "Reports calls to `BigDecimal` constructors that accept a `double` value. These constructors produce `BigDecimal` that is equal to the supplied `double` value. However, because doubles are encoded in the IEEE-754 64-bit double-precision binary floating-point format, the exact value can be unexpected.\n\nFor example, `new BigDecimal(0.1)` yields a `BigDecimal` object with value\n`0.1000000000000000055511151231257827021181583404541015625`,\nwhich is the nearest number to 0.1 representable as a `double`.\nTo get a `BigDecimal` that contains the expected value `0.1`,\nuse either `new BigDecimal(\"0.1\")` or `BigDecimal.valueOf(0.1)`.\n\n**Example:**\n\n\n      class Constructor {\n        void foo() {\n          new BigDecimal(0.1);\n        }\n      }\n\nAfter the quick-fix is applied:\n\n\n      class Constructor {\n        void foo() {\n          new BigDecimal(\"0.1\");\n        }\n      }\n\nInspection ID: UnpredictableBigDecimalConstructorCall"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnpredictableBigDecimalConstructorCall",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Numeric issues",
                      "index": 25,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IntegerDivisionInFloatingPointContext",
                "shortDescription": {
                  "text": "Integer division in floating-point context"
                },
                "fullDescription": {
                  "text": "Reports integer divisions where the result is used as a floating-point number. Such division is often an error and may have unexpected results due to the truncation that happens in integer division. Example: 'float x = 3.0F + 3 * 2 / 5;' After the quick-fix is applied: 'float x = 3.0F + ((float) (3 * 2)) /5;' Inspection ID: IntegerDivisionInFloatingPointContext",
                  "markdown": "Reports integer divisions where the result is used as a floating-point number. Such division is often an error and may have unexpected results due to the truncation that happens in integer division.\n\n**Example:**\n\n\n      float x = 3.0F + 3 * 2 / 5;\n\nAfter the quick-fix is applied:\n\n\n      float x = 3.0F + ((float) (3 * 2)) /5;\n\nInspection ID: IntegerDivisionInFloatingPointContext"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "IntegerDivisionInFloatingPointContext",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Numeric issues",
                      "index": 25,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AssertWithoutMessage",
                "shortDescription": {
                  "text": "Message missing on assertion"
                },
                "fullDescription": {
                  "text": "Reports calls to 'assertXXX()' or 'fail()' without an error message string argument. An error message on assertion failure may help clarify the test case's intent. Example: 'assertTrue(checkValid());' After the quick-fix is applied: 'assertTrue(checkValid(), \"|\");' The message argument is added before or after the existing arguments according to the assertions framework that you use. Inspection ID: AssertWithoutMessage",
                  "markdown": "Reports calls to `assertXXX()` or `fail()` without an error message string argument. An error message on assertion failure may help clarify the test case's intent.\n\n**Example:**\n\n\n      assertTrue(checkValid());\n\nAfter the quick-fix is applied:\n\n    assertTrue(checkValid(), \"|\");\n\n\nThe message argument is added before or after the existing arguments according to the assertions framework that you use.\n\nInspection ID: AssertWithoutMessage"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AssertWithoutMessage",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Test frameworks",
                      "index": 102,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConditionalBreakInInfiniteLoop",
                "shortDescription": {
                  "text": "Conditional break inside loop"
                },
                "fullDescription": {
                  "text": "Reports conditional breaks at the beginning or at the end of a loop and suggests adding a loop condition instead to shorten the code. Example: 'while (true) {\n    if (i  == 23) break;\n    i++;\n  }' After the quick fix is applied: 'while (i != 23) {\n    i++;\n  }' Inspection ID: ConditionalBreakInInfiniteLoop",
                  "markdown": "Reports conditional breaks at the beginning or at the end of a loop and suggests adding a loop condition instead to shorten the code.\n\nExample:\n\n\n      while (true) {\n        if (i  == 23) break;\n        i++;\n      }\n\nAfter the quick fix is applied:\n\n\n      while (i != 23) {\n        i++;\n      }\n\nInspection ID: ConditionalBreakInInfiniteLoop"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ConditionalBreakInInfiniteLoop",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Control flow issues",
                      "index": 24,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnqualifiedInnerClassAccess",
                "shortDescription": {
                  "text": "Unqualified inner class access"
                },
                "fullDescription": {
                  "text": "Reports references to inner classes that are not qualified with the name of the enclosing class. Example: 'import foo.Foo.Bar;\n\n  class Foo {\n    class Bar {}\n  }\n\n  class Baz {\n    void f(Bar bar) {}\n  }' After the quick-fix is applied: 'class Foo {\n    class Bar {}\n  }\n\n  class Baz {\n    void f(Foo.Bar bar) {}\n  }' Use the inspection settings to ignore references to inner classes within the same class, which therefore do not require an import. Inspection ID: UnqualifiedInnerClassAccess",
                  "markdown": "Reports references to inner classes that are not qualified with the name of the enclosing class.\n\n**Example:**\n\n\n      import foo.Foo.Bar;\n\n      class Foo {\n        class Bar {}\n      }\n\n      class Baz {\n        void f(Bar bar) {}\n      }\n\nAfter the quick-fix is applied:\n\n\n      class Foo {\n        class Bar {}\n      }\n\n      class Baz {\n        void f(Foo.Bar bar) {}\n      }\n\n\nUse the inspection settings to ignore references to inner classes within the same class,\nwhich therefore do not require an import.\n\n\nInspection ID: UnqualifiedInnerClassAccess"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnqualifiedInnerClassAccess",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantClassCall",
                "shortDescription": {
                  "text": "Redundant 'isInstance()' or 'cast()' call"
                },
                "fullDescription": {
                  "text": "Reports redundant calls of 'java.lang.Class' methods. For example, 'Xyz.class.isInstance(object)' can be replaced with 'object instanceof Xyz'. The instanceof check is preferred: even though the performance will probably be the same as these methods are intrinsics, they better indicate a static check. Inspection ID: RedundantClassCall New in 2018.2",
                  "markdown": "Reports redundant calls of `java.lang.Class` methods.\n\nFor example, `Xyz.class.isInstance(object)` can be replaced with `object instanceof Xyz`.\nThe instanceof check is preferred: even though the performance will probably be the same as these methods are intrinsics,\nthey better indicate a static check.\n\nInspection ID: RedundantClassCall\n\nNew in 2018.2"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RedundantClassCall",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Verbose or redundant code constructs",
                      "index": 37,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryStringEscape",
                "shortDescription": {
                  "text": "Unnecessarily escaped character"
                },
                "fullDescription": {
                  "text": "Reports unnecessarily escaped characters in 'String' literals, and optionally 'char' literals. Escaped tab characters ('\\t') are not reported, even though escaping them is not required, because tab characters are hard to tell apart from spaces. Examples: 'String s = \"\\'Scare\\' quotes\";\n  String t = \"\"\"\n    All you need is\\n\\tLove\\n\"\"\";' After the quick-fix is applied: 'String s = \"'Scare' quotes\";\n  String t = \"\"\"\n    All you need is\n    \\tLove\n    \"\"\";' Inspection ID: UnnecessaryStringEscape",
                  "markdown": "Reports unnecessarily escaped characters in `String` literals, and optionally `char` literals.\n\nEscaped tab characters (`\\t`) are not reported, even though escaping them is not required,\nbecause tab characters are hard to tell apart from spaces.\n\nExamples:\n\n\n      String s = \"\\'Scare\\' quotes\";\n      String t = \"\"\"\n        All you need is\\n\\tLove\\n\"\"\";\n\nAfter the quick-fix is applied:\n\n\n      String s = \"'Scare' quotes\";\n      String t = \"\"\"\n        All you need is\n        \\tLove\n        \"\"\";\n\nInspection ID: UnnecessaryStringEscape"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnnecessaryStringEscape",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Verbose or redundant code constructs",
                      "index": 37,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FieldCanBeLocal",
                "shortDescription": {
                  "text": "Field can be local variable"
                },
                "fullDescription": {
                  "text": "Reports redundant class fields that can be replaced with local variables. If all local usages of a field are preceded by assignments to that field, the field can be removed, and its usages can be replaced with local variables. Inspection ID: FieldCanBeLocal",
                  "markdown": "Reports redundant class fields that can be replaced with local variables.\n\nIf all local usages of a field are preceded by assignments to that field, the\nfield can be removed, and its usages can be replaced with local variables.\n\nInspection ID: FieldCanBeLocal"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "FieldCanBeLocal",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Class structure",
                      "index": 17,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UrlHashCode",
                "shortDescription": {
                  "text": "Call to 'equals()' or 'hashCode()' on 'URL' object"
                },
                "fullDescription": {
                  "text": "Reports 'hashCode()' and 'equals()' calls on 'java.net.URL' objects and calls that add 'URL' objects to maps and sets. 'URL''s 'equals()' and 'hashCode()' methods can perform a DNS lookup to resolve the host name. This may cause significant delays, depending on the availability and speed of the network and the DNS server. Using 'java.net.URI' instead of 'java.net.URL' will avoid the DNS lookup. Example: 'boolean urlEquals(URL url1, URL url2) {\n      return url1.equals(url2);\n  }' Inspection ID: UrlHashCode",
                  "markdown": "Reports `hashCode()` and `equals()` calls on `java.net.URL` objects and calls that add `URL` objects to maps and sets.\n\n\n`URL`'s `equals()` and `hashCode()` methods can perform a DNS lookup to resolve the host name.\nThis may cause significant delays, depending on the availability and speed of the network and the DNS server.\nUsing `java.net.URI` instead of `java.net.URL` will avoid the DNS lookup.\n\n**Example:**\n\n\n      boolean urlEquals(URL url1, URL url2) {\n          return url1.equals(url2);\n      }\n\nInspection ID: UrlHashCode"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UrlHashCode",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Performance"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JVM languages",
                      "index": 1,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IfStatementWithIdenticalBranches",
                "shortDescription": {
                  "text": "'if' statement with identical branches or common parts"
                },
                "fullDescription": {
                  "text": "Reports 'if' statements in which common parts can be extracted from the branches. These common parts are independent from the condition and make 'if' statements harder to understand. Example: 'if (x > 12) {\n    doSomethingBefore();\n    doSomethingDifferent1();\n    doSomethingAfter();\n  } else {\n    doSomethingBefore();\n    doSomethingDifferent2();\n    doSomethingAfter();\n  }' After the quick-fix is applied: 'doSomethingBefore();\n  if (x > 12) {\n    doSomethingDifferent1();\n  } else {\n    doSomethingDifferent2();\n  }\n  doSomethingAfter();' Updated in 2018.1 Inspection ID: IfStatementWithIdenticalBranches",
                  "markdown": "Reports `if` statements in which common parts can be extracted from the branches.\n\nThese common parts are independent from the condition and make `if` statements harder to understand.\n\nExample:\n\n\n      if (x > 12) {\n        doSomethingBefore();\n        doSomethingDifferent1();\n        doSomethingAfter();\n      } else {\n        doSomethingBefore();\n        doSomethingDifferent2();\n        doSomethingAfter();\n      }\n\nAfter the quick-fix is applied:\n\n\n      doSomethingBefore();\n      if (x > 12) {\n        doSomethingDifferent1();\n      } else {\n        doSomethingDifferent2();\n      }\n      doSomethingAfter();\n\nUpdated in 2018.1\n\nInspection ID: IfStatementWithIdenticalBranches"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "IfStatementWithIdenticalBranches",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Control flow issues",
                      "index": 24,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InterfaceWithOnlyOneDirectInheritor",
                "shortDescription": {
                  "text": "Interface with a single direct inheritor"
                },
                "fullDescription": {
                  "text": "Reports interfaces that have precisely one direct inheritor. While such interfaces may offer admirable clarity of design, in memory-constrained or bandwidth-limited environments, they needlessly increase the total footprint of the application. Consider merging the interface with its inheritor. This inspection is intended for Java ME and other highly resource constrained environments. Applying the results of this inspection without consideration might have negative effects on code clarity and design. Inspection ID: InterfaceWithOnlyOneDirectInheritor",
                  "markdown": "Reports interfaces that have precisely one direct inheritor. While such interfaces may offer admirable clarity of design, in memory-constrained or bandwidth-limited environments, they needlessly increase the total footprint of the application. Consider merging the interface with its inheritor.\n\n\nThis inspection is intended for Java ME and other highly resource constrained environments.\nApplying the results of this inspection without consideration might have negative effects on code clarity and design.\n\nInspection ID: InterfaceWithOnlyOneDirectInheritor"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "InterfaceWithOnlyOneDirectInheritor",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Performance/Embedded",
                      "index": 137,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InstanceofChain",
                "shortDescription": {
                  "text": "Chain of 'instanceof' checks"
                },
                "fullDescription": {
                  "text": "Reports any chains of 'if'-'else' statements all of whose conditions are 'instanceof' expressions or class equality expressions (e.g. comparison with 'String.class'). Such constructions usually indicate a failure in object-oriented design which dictates that such type-based dispatch should be done via polymorphic method calls rather than explicit chains of type tests. Example: 'double getArea(Shape shape) {\n    // Warning: abstraction failure.\n    // It would be better to declare a getArea()\n    // abstract method in the shape interface\n    // and implement it in every inheritor.\n    if (shape instanceof Point) {\n      return 0;\n    }\n    if (shape instanceof Circle) {\n      return Math.PI *\n        Math.pow(((Circle) shape).radius(), 2);\n    }\n    if (shape instanceof Rectangle) {\n      return ((Rectangle) shape).width() *\n        ((Rectangle) shape).height();\n    }\n    throw new IllegalArgumentException();\n  }' Use the checkbox below to ignore 'instanceof' expressions on library classes. Inspection ID: InstanceofChain",
                  "markdown": "Reports any chains of `if`-`else` statements all of whose conditions are `instanceof` expressions or class equality expressions (e.g. comparison with `String.class`). Such constructions usually indicate a failure in object-oriented design which dictates that such type-based dispatch should be done via polymorphic method calls rather than explicit chains of type tests.\n\nExample:\n\n\n      double getArea(Shape shape) {\n        // Warning: abstraction failure.\n        // It would be better to declare a getArea()\n        // abstract method in the shape interface\n        // and implement it in every inheritor.\n        if (shape instanceof Point) {\n          return 0;\n        }\n        if (shape instanceof Circle) {\n          return Math.PI *\n            Math.pow(((Circle) shape).radius(), 2);\n        }\n        if (shape instanceof Rectangle) {\n          return ((Rectangle) shape).width() *\n            ((Rectangle) shape).height();\n        }\n        throw new IllegalArgumentException();\n      }\n\n\nUse the checkbox below to ignore `instanceof` expressions on library classes.\n\n\nInspection ID: InstanceofChain"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ChainOfInstanceofChecks",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Abstraction issues",
                      "index": 63,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BlockMarkerComments",
                "shortDescription": {
                  "text": "Block marker comment"
                },
                "fullDescription": {
                  "text": "Reports comments which are used as code block markers. The quick-fix removes such comments. Example: 'while (i < 10) {\n    i++;\n  } // end while' After the quick-fix is applied: 'while (i < 10) {\n    i++;\n  }' Inspection ID: BlockMarkerComments",
                  "markdown": "Reports comments which are used as code block markers. The quick-fix removes such comments.\n\nExample:\n\n\n      while (i < 10) {\n        i++;\n      } // end while\n\nAfter the quick-fix is applied:\n\n\n      while (i < 10) {\n        i++;\n      }\n\nInspection ID: BlockMarkerComments"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "BlockMarkerComments",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SerializableHasSerializationMethods",
                "shortDescription": {
                  "text": "Serializable class without 'readObject()' and 'writeObject()'"
                },
                "fullDescription": {
                  "text": "Reports 'Serializable' classes that do not implement 'readObject()' and 'writeObject()' methods. If 'readObject()' and 'writeObject()' methods are not implemented, the default serialization algorithms are used, which may be sub-optimal for performance and compatibility in many environments. Use the following options to configure the inspection: List classes whose inheritors should not be reported by this inspection. This is meant for classes that inherit 'Serializable' from a superclass but are not intended for serialization. Whether to ignore 'Serializable' classes without non-static fields. Whether to ignore 'Serializable' anonymous classes. Inspection ID: SerializableHasSerializationMethods",
                  "markdown": "Reports `Serializable` classes that do not implement `readObject()` and `writeObject()` methods.\n\n\nIf `readObject()` and `writeObject()` methods are not implemented,\nthe default serialization algorithms are used,\nwhich may be sub-optimal for performance and compatibility in many environments.\n\n\nUse the following options to configure the inspection:\n\n* List classes whose inheritors should not be reported by this inspection. This is meant for classes that inherit `Serializable` from a superclass but are not intended for serialization.\n* Whether to ignore `Serializable` classes without non-static fields.\n* Whether to ignore `Serializable` anonymous classes.\n\nInspection ID: SerializableHasSerializationMethods"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SerializableHasSerializationMethods",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Serialization issues",
                      "index": 18,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IdempotentLoopBody",
                "shortDescription": {
                  "text": "Idempotent loop body"
                },
                "fullDescription": {
                  "text": "Reports loops whose second and all subsequent iterations do not produce any additional side effects other than the one produced by the first iteration, which can indicate a programming error. Such loops may iterate only zero, one, or infinite number of times. If the infinite number of times case is unreachable, such a loop can be replaced with an 'if' statement. Otherwise, there's a possibility that the program can get stuck. Example: 'public void foo(String baseName, String names) {\n        int suffix = 1;\n        String name = baseName;\n        while (names.contains(name)) {\n            // error: suffix is not updated making loop body idempotent\n            name = baseName + suffix;\n        }\n    }' Inspection ID: IdempotentLoopBody New in 2018.1",
                  "markdown": "Reports loops whose second and all subsequent iterations do not produce any additional side effects other than the one produced by the first iteration, which can indicate a programming error.\n\nSuch loops may iterate only zero, one, or infinite number of times.\nIf the infinite number of times case is unreachable, such a loop can be replaced with an `if` statement.\nOtherwise, there's a possibility that the program can get stuck.\n\nExample:\n\n\n        public void foo(String baseName, String names) {\n            int suffix = 1;\n            String name = baseName;\n            while (names.contains(name)) {\n                // error: suffix is not updated making loop body idempotent\n                name = baseName + suffix;\n            }\n        }\n\nInspection ID: IdempotentLoopBody\n\nNew in 2018.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "IdempotentLoopBody",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Control flow issues",
                      "index": 24,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantImplements",
                "shortDescription": {
                  "text": "Redundant interface declaration"
                },
                "fullDescription": {
                  "text": "Reports interfaces in a class' 'implements' list or an interface's 'extends' list that are already implemented by a superclass or extended by a superinterface. Such declarations are unnecessary and may be safely removed. Example: 'class X implements One, Two {\n  }\n  interface One {}\n  interface Two extends One {}' After the quick-fix is applied: 'class X implements Two {\n  }\n  interface One {}\n  interface Two extends One {}' Use the options to not report on 'Serializable' or 'Externalizable' in an 'extends' or 'implements' list. Inspection ID: RedundantImplements",
                  "markdown": "Reports interfaces in a class' `implements` list or an interface's `extends` list that are already implemented by a superclass or extended by a superinterface. Such declarations are unnecessary and may be safely removed.\n\n**Example:**\n\n\n      class X implements One, Two {\n      }\n      interface One {}\n      interface Two extends One {}\n\nAfter the quick-fix is applied:\n\n\n      class X implements Two {\n      }\n      interface One {}\n      interface Two extends One {}\n\n\nUse the options to not report on `Serializable` or `Externalizable`\nin an `extends` or `implements` list.\n\nInspection ID: RedundantImplements"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RedundantInterfaceDeclaration",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Inheritance issues",
                      "index": 121,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FrequentlyUsedInheritorInspection",
                "shortDescription": {
                  "text": "Class may extend a commonly used base class"
                },
                "fullDescription": {
                  "text": "Reports classes or interfaces that can be replaced with an implementation or extension of a more specific commonly used class or interface. For this inspection to work, a superclass needs to be in project source files and the project needs to use the IntelliJ IDEA build system. Example: 'class MyInheritor implements A {} // B suggested on the A reference\n\n  interface A {}\n\n  abstract class B implements A {}\n\n  abstract class C1 extends B {}\n  abstract class C2 extends B {}\n  abstract class C3 extends B {}\n  abstract class C4 extends B {}\n  abstract class C5 extends B {}' By default, this inspection doesn't highlight issues in the editor but only provides a quick-fix. New in 2017.2 Inspection ID: FrequentlyUsedInheritorInspection",
                  "markdown": "Reports classes or interfaces that can be replaced with an implementation or extension of a more specific commonly used class or interface.\n\nFor this inspection to work, a superclass needs to be in project source files and the project needs to use the IntelliJ IDEA build system.\n\n**Example:**\n\n\n      class MyInheritor implements A {} // B suggested on the A reference\n\n      interface A {}\n\n      abstract class B implements A {}\n\n      abstract class C1 extends B {}\n      abstract class C2 extends B {}\n      abstract class C3 extends B {}\n      abstract class C4 extends B {}\n      abstract class C5 extends B {}\n\nBy default, this inspection doesn't highlight issues in the editor but only provides a quick-fix.\n\nNew in 2017.2\n\nInspection ID: FrequentlyUsedInheritorInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "FrequentlyUsedInheritorInspection",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Inheritance issues",
                      "index": 121,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FieldNamingConvention",
                "shortDescription": {
                  "text": "Field naming convention"
                },
                "fullDescription": {
                  "text": "Reports fields whose names are too short, too long, or do not follow the specified regular expression pattern. Example: if the inspection is enabled for constants, and the minimum specified length for a field name is 5 (the default), the following constant produces a warning because the length of its name is 3, which is less than 5: 'public static final int MAX = 42;'. A quick-fix that renames such fields is available only in the editor. Configure the inspection: Use the list in the Options section to specify which fields should be checked. Deselect the checkboxes for the fields for which you want to skip the check. For each field type, specify the minimum length, maximum length, and the regular expression expected for field names using the provided input fields. Specify 0 in the length fields to skip the corresponding checks. Regular expressions should be specified in the standard 'java.util.regex' format. Inspection ID: FieldNamingConvention",
                  "markdown": "Reports fields whose names are too short, too long, or do not follow the specified regular expression pattern.\n\n**Example:** if the inspection is enabled for constants, and the minimum specified length for a field name is 5 (the default), the following constant\nproduces a warning because the length of its name is 3, which is less than 5: `public static final int MAX = 42;`.\n\nA quick-fix that renames such fields is available only in the editor.\n\nConfigure the inspection:\n\nUse the list in the **Options** section to specify which fields should be checked. Deselect the checkboxes for the fields for which\nyou want to skip the check.\n\nFor each field type, specify the minimum length, maximum length, and the regular expression expected for field names using the\nprovided input fields.\nSpecify **0** in the length fields to skip the corresponding checks.\n\nRegular expressions should be specified in the standard\n`java.util.regex` format.\n\nInspection ID: FieldNamingConvention"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "FieldNamingConvention",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Naming conventions",
                      "index": 59,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConstantConditionalExpression",
                "shortDescription": {
                  "text": "Constant conditional expression"
                },
                "fullDescription": {
                  "text": "Reports conditional expressions in which the condition is either a 'true' or 'false' constant. These expressions sometimes occur as a result of automatic refactorings and may be simplified. Example: 'return true ? \"Yes\" : \"No\";' After quick-fix is applied: 'return \"Yes\";' Inspection ID: ConstantConditionalExpression",
                  "markdown": "Reports conditional expressions in which the condition is either a `true` or `false` constant. These expressions sometimes occur as a result of automatic refactorings and may be simplified.\n\nExample:\n\n\n      return true ? \"Yes\" : \"No\";\n\nAfter quick-fix is applied:\n\n\n      return \"Yes\";\n\nInspection ID: ConstantConditionalExpression"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ConstantConditionalExpression",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Control flow issues",
                      "index": 24,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ClassNamePrefixedWithPackageName",
                "shortDescription": {
                  "text": "Class name prefixed with package name"
                },
                "fullDescription": {
                  "text": "Reports classes whose names are prefixed with their package names, ignoring differences in capitalization. While occasionally having such names is reasonable, they are often used due to a poor naming scheme, may be redundant and annoying. Example: 'package byteCode;\n  class ByteCodeAnalyzer {}' A quick-fix that renames such classes is available only in the editor. Inspection ID: ClassNamePrefixedWithPackageName",
                  "markdown": "Reports classes whose names are prefixed with their package names, ignoring differences in capitalization.\n\nWhile occasionally having such names is reasonable, they are often used due to a poor naming scheme, may be redundant and\nannoying.\n\n**Example:**\n\n\n      package byteCode;\n      class ByteCodeAnalyzer {}\n\nA quick-fix that renames such classes is available only in the editor.\n\n\nInspection ID: ClassNamePrefixedWithPackageName"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ClassNamePrefixedWithPackageName",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Naming conventions/Class",
                      "index": 60,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SameParameterValue",
                "shortDescription": {
                  "text": "Method parameter always has the same value"
                },
                "fullDescription": {
                  "text": "Reports method parameters that always have the same constant value. Example: 'static void printPoint(int x, int y) { // x is always 0\n    System.out.println(x + \", \" + y);\n  }\n\n  public static void main(String[] args) {\n    printPoint(0, 1);\n    printPoint(0, 2);\n  }' The quick-fix inlines the constant value. This may simplify the method implementation. Use the Ignore when a quick-fix can not be provided option to suppress the inspections when: the parameter is modified inside the method the parameter value that is being passed is a reference to an inaccessible field (Java ony) the parameter is a vararg (Java only) Use the Maximal method visibility option to control the maximum visibility of methods to be reported. Use the Minimal method usage count to report parameter field to specify the minimal number of method usages with the same parameter value. Inspection ID: SameParameterValue",
                  "markdown": "Reports method parameters that always have the same constant value.\n\nExample:\n\n\n      static void printPoint(int x, int y) { // x is always 0\n        System.out.println(x + \", \" + y);\n      }\n\n      public static void main(String[] args) {\n        printPoint(0, 1);\n        printPoint(0, 2);\n      }\n\nThe quick-fix inlines the constant value. This may simplify the method implementation.\n\n\nUse the **Ignore when a quick-fix can not be provided** option to suppress the inspections when:\n\n* the parameter is modified inside the method\n* the parameter value that is being passed is a reference to an inaccessible field (Java ony)\n* the parameter is a vararg (Java only)\n\n\nUse the **Maximal method visibility** option to control the maximum visibility of methods to be reported.\n\n\nUse the **Minimal method usage count to report parameter** field to specify the minimal number of method usages with the same parameter value.\n\nInspection ID: SameParameterValue"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SameParameterValue",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Declaration redundancy",
                      "index": 9,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CatchMayIgnoreException",
                "shortDescription": {
                  "text": "Catch block may ignore exception"
                },
                "fullDescription": {
                  "text": "Reports 'catch' blocks that are empty or may ignore an exception. While occasionally intended, empty 'catch' blocks may complicate debugging. Also, ignoring a 'catch' parameter might be wrong. Finally, the static code analyzer reports if it detects that a 'catch' block may silently ignore important VM exceptions like 'NullPointerException'. Ignoring such an exception (without logging or rethrowing it) may hide a bug. The inspection won't report any 'catch' parameters named 'ignore' or 'ignored'. Conversely, the inspection will warn you about any 'catch' parameters named 'ignore' or 'ignored' that are actually in use. Additionally, the inspection won't report 'catch' parameters inside test sources named 'expected' or 'ok'. You can use a quick-fix to change the exception name to 'ignored'. For empty catch blocks, an additional quick-fix to generate the catch body is suggested. You can modify the \"Catch Statement Body\" template on the Code tab in Settings | Editor | File and Code Templates. Example: 'try {\n    throwingMethod();\n  } catch (IOException ex) {\n\n  }' After the quick-fix is applied: 'try {\n    System.out.println(System.in.read());\n  } catch (IOException ignored) {\n\n  }' Configure the inspection: Use the Do not warn when 'catch' block contains a comment option to ignore 'catch' blocks with comments. Use the Do not warn when 'catch' block is not empty option to ignore 'catch' blocks that contain statements or comments inside, while the variable itself is not used. Use the Do not warn when exception named 'ignore(d)' is not actually ignored option to ignore variables named 'ignored' if they are in use. Inspection ID: CatchMayIgnoreException New in 2018.1",
                  "markdown": "Reports `catch` blocks that are empty or may ignore an exception.\n\nWhile occasionally intended, empty `catch` blocks may complicate debugging.\nAlso, ignoring a `catch` parameter might be wrong.\nFinally, the static code analyzer reports if it detects that a `catch` block may silently ignore important VM\nexceptions like `NullPointerException`. Ignoring such an exception\n(without logging or rethrowing it) may hide a bug.\n\n\nThe inspection won't report any `catch` parameters named `ignore` or `ignored`.\nConversely, the inspection will warn you about any `catch` parameters named `ignore` or `ignored` that are actually in use.\nAdditionally, the inspection won't report `catch` parameters inside test sources named `expected` or `ok`.\n\n\nYou can use a quick-fix to change the exception name to `ignored`.\nFor empty **catch** blocks, an additional quick-fix to generate the **catch** body is suggested.\nYou can modify the \"Catch Statement Body\" template on the Code tab in\n[Settings \\| Editor \\| File and Code Templates](settings://fileTemplates).\n\n**Example:**\n\n\n      try {\n        throwingMethod();\n      } catch (IOException ex) {\n\n      }\n\nAfter the quick-fix is applied:\n\n\n      try {\n        System.out.println(System.in.read());\n      } catch (IOException ignored) {\n\n      }\n\nConfigure the inspection:\n\n* Use the **Do not warn when 'catch' block contains a comment** option to ignore `catch` blocks with comments.\n* Use the **Do not warn when 'catch' block is not empty** option to ignore `catch` blocks that contain statements or comments inside, while the variable itself is not used.\n* Use the **Do not warn when exception named 'ignore(d)' is not actually ignored** option to ignore variables named `ignored` if they are in use.\n\nInspection ID: CatchMayIgnoreException\n\nNew in 2018.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CatchMayIgnoreException",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Error handling",
                      "index": 10,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ClassWithTooManyDependents",
                "shortDescription": {
                  "text": "Class with too many dependents"
                },
                "fullDescription": {
                  "text": "Reports a class on which too many other classes are directly dependent. Any modification to such a class may require changing many other classes, which may be expensive. Only top-level classes are reported. Use the field below to specify the maximum allowed number of dependents for a class. Available only from Code | Inspect Code or Code | Analyze Code | Run Inspection by Name and isn't reported in the editor. Inspection ID: ClassWithTooManyDependents",
                  "markdown": "Reports a class on which too many other classes are directly dependent.\n\nAny modification to such a class may require changing many other classes, which may be expensive.\n\nOnly top-level classes are reported.\n\nUse the field below to specify the maximum allowed number of dependents for a class.\n\nAvailable only from **Code \\| Inspect Code** or\n**Code \\| Analyze Code \\| Run Inspection by Name** and isn't reported in the editor.\n\nInspection ID: ClassWithTooManyDependents"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ClassWithTooManyDependents",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Dependency issues",
                      "index": 118,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "WrongPackageStatement",
                "shortDescription": {
                  "text": "Wrong package statement"
                },
                "fullDescription": {
                  "text": "Detects 'package' statements that do not correspond to the project directory structure. Also, reports classes without 'package' statements if the class is not located directly in source root directory. While it's not strictly mandated by Java language, it's good practise to keep classes from package 'com.example.myapp' inside a 'com/example/myapp' directory directly under a source root. Failure to do this may confuse code readers and make some tools work incorrectly. Inspection ID: WrongPackageStatement",
                  "markdown": "Detects `package` statements that do not correspond to the project directory structure. Also, reports classes without `package` statements if the class is not located directly in source root directory.\n\nWhile it's not strictly mandated by Java language, it's good practise to keep classes\nfrom package `com.example.myapp` inside a `com/example/myapp` directory directly under\na source root. Failure to do this may confuse code readers and make some tools work incorrectly.\n\nInspection ID: WrongPackageStatement"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "WrongPackageStatement",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FieldNotUsedInToString",
                "shortDescription": {
                  "text": "Field not used in 'toString()' method"
                },
                "fullDescription": {
                  "text": "Reports fields that are not used in the 'toString()' method of a class. Helps discover fields added after the 'toString()' method was last updated. The quick-fix regenerates the 'toString()' method. In the Generate | toString() dialog, it is possible to exclude fields from this check. This inspection will also check for problems with getter methods if the Enable getters in code generation option is enabled there. Example: 'public class Relevant {\n    private String name; // not used in toString()\n    private int index;\n    private int length;\n\n    @Override\n    public String toString() {\n        return \"Relevant{\" + \"index=\" + index +\n          \", length=\" + length + '}';\n    }\n  }' After the quick-fix is applied: 'public class Relevant {\n    private String name;\n    private int index;\n    private int length;\n\n    @Override\n    public String toString() {\n        return \"Relevant{\" + \"name='\" + name + '\\'' +\n          \", index=\" + index + \", length=\" + length + '}';\n    }\n  }' Inspection ID: FieldNotUsedInToString",
                  "markdown": "Reports fields that are not used in the `toString()` method of a class.\n\nHelps discover fields added after the `toString()` method was last updated.\nThe quick-fix regenerates the `toString()` method.\n\n\nIn the **Generate \\| toString()** dialog, it is possible to exclude fields from this check.\nThis inspection will also check for problems with getter methods if the *Enable getters in code generation* option is enabled there.\n\nExample:\n\n\n      public class Relevant {\n        private String name; // not used in toString()\n        private int index;\n        private int length;\n\n        @Override\n        public String toString() {\n            return \"Relevant{\" + \"index=\" + index +\n              \", length=\" + length + '}';\n        }\n      }\n\nAfter the quick-fix is applied:\n\n\n      public class Relevant {\n        private String name;\n        private int index;\n        private int length;\n\n        @Override\n        public String toString() {\n            return \"Relevant{\" + \"name='\" + name + '\\'' +\n              \", index=\" + index + \", length=\" + length + '}';\n        }\n      }\n\nInspection ID: FieldNotUsedInToString"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "FieldNotUsedInToString",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/toString() issues",
                      "index": 170,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CovariantEquals",
                "shortDescription": {
                  "text": "Covariant 'equals()'"
                },
                "fullDescription": {
                  "text": "Reports 'equals()' methods taking an argument type other than 'java.lang.Object' if the containing class does not have other overloads of 'equals()' that take 'java.lang.Object' as its argument type. A covariant version of 'equals()' does not override the 'Object.equals(Object)' method. It may cause unexpected behavior at runtime. For example, if the class is used to construct one of the standard collection classes, which expect that the 'Object.equals(Object)' method is overridden. Example: 'class Foo {\n      public boolean equals(Foo foo) {  // warning\n          return false;\n      }\n  }\n  class Bar {\n      public boolean equals(Bar bar) {  // no warning here\n          return false;\n      }\n      @Override\n      public boolean equals(Object obj) {\n          return false;\n      }\n  }' Inspection ID: CovariantEquals",
                  "markdown": "Reports `equals()` methods taking an argument type other than `java.lang.Object` if the containing class does not have other overloads of `equals()` that take `java.lang.Object` as its argument type.\n\n\nA covariant version of `equals()` does not override the\n`Object.equals(Object)` method. It may cause unexpected\nbehavior at runtime. For example, if the class is used to construct\none of the standard collection classes, which expect that the\n`Object.equals(Object)` method is overridden.\n\n**Example:**\n\n\n      class Foo {\n          public boolean equals(Foo foo) {  // warning\n              return false;\n          }\n      }\n      class Bar {\n          public boolean equals(Bar bar) {  // no warning here\n              return false;\n          }\n          @Override\n          public boolean equals(Object obj) {\n              return false;\n          }\n      }\n\nInspection ID: CovariantEquals"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CovariantEquals",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Convert2Lambda",
                "shortDescription": {
                  "text": "Anonymous type can be replaced with lambda"
                },
                "fullDescription": {
                  "text": "Reports anonymous classes which can be replaced with lambda expressions. Example: 'new Thread(new Runnable() {\n    @Override\n    public void run() {\n      // run thread\n    }\n  });' After the quick-fix is applied: 'new Thread(() -> {\n    // run thread\n  });' Note that if an anonymous class is converted into a stateless lambda, the same lambda object can be reused by Java runtime during subsequent invocations. On the other hand, when an anonymous class is used, separate objects are created every time. Thus, applying the quick-fix can cause the semantics change in rare cases, e.g. when anonymous class instances are used as 'HashMap' keys. Use the Report when interface is not annotated with @FunctionalInterface option to ignore the cases in which an anonymous class implements an interface without '@FunctionalInterface' annotation. This inspection depends on the Java feature 'Lambda expressions', which is available since Java 8. Inspection ID: Convert2Lambda",
                  "markdown": "Reports anonymous classes which can be replaced with lambda expressions.\n\nExample:\n\n\n      new Thread(new Runnable() {\n        @Override\n        public void run() {\n          // run thread\n        }\n      });\n\nAfter the quick-fix is applied:\n\n\n      new Thread(() -> {\n        // run thread\n      });\n\n\nNote that if an anonymous class is converted into a stateless lambda, the same lambda object\ncan be reused by Java runtime during subsequent invocations. On the other hand, when an anonymous class is used,\nseparate objects are created every time. Thus, applying the quick-fix can cause the semantics change in rare cases,\ne.g. when anonymous class instances are used as `HashMap` keys.\n\n\nUse the **Report when interface is not annotated with @FunctionalInterface** option to ignore the cases in which an anonymous\nclass implements an interface without `@FunctionalInterface` annotation.\n\nThis inspection depends on the Java feature 'Lambda expressions', which is available since Java 8.\n\nInspection ID: Convert2Lambda"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "Convert2Lambda",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level migration aids/Java 8",
                      "index": 94,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SimplifiableIfStatement",
                "shortDescription": {
                  "text": "'if' statement can be replaced with conditional or boolean expression"
                },
                "fullDescription": {
                  "text": "Reports 'if' statements that can be replaced with conditions using the '&&', '||', '==', '!=', or '?:' operator. The result is usually shorter, but not always clearer, so it's not advised to apply the fix in every case. Example: 'if (condition) return true; else return foo;' After the quick-fix is applied: 'return condition || foo;' Configure the inspection: Use the Don't suggest '?:' operator option to disable the warning when the '?:' operator is suggested. In this case, only '&&', '||', '==', and '!=' suggestions will be highlighted. The quick-fix will still be available in the editor. Use the Ignore chained 'if' statements option to disable the warning for 'if-else' chains. The quick-fix will still be available in the editor. Inspection ID: SimplifiableIfStatement New in 2018.2",
                  "markdown": "Reports `if` statements that can be replaced with conditions using the `&&`, `||`, `==`, `!=`, or `?:` operator.\n\nThe result is usually shorter, but not always clearer, so it's not advised to apply the fix in every case.\n\nExample:\n\n\n      if (condition) return true; else return foo;\n\nAfter the quick-fix is applied:\n\n\n      return condition || foo;\n\nConfigure the inspection:\n\n* Use the **Don't suggest '?:' operator** option to disable the warning when the `?:` operator is suggested. In this case, only `&&`, `||`, `==`, and `!=` suggestions will be highlighted. The quick-fix will still be available in the editor.\n* Use the **Ignore chained 'if' statements** option to disable the warning for `if-else` chains. The quick-fix will still be available in the editor.\n\nInspection ID: SimplifiableIfStatement\n\nNew in 2018.2"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "SimplifiableIfStatement",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ThrowCaughtLocally",
                "shortDescription": {
                  "text": "'throw' caught by containing 'try' statement"
                },
                "fullDescription": {
                  "text": "Reports 'throw' statements whose exceptions are always caught by containing 'try' statements. Using 'throw' statements as a \"goto\" to change the local flow of control is confusing and results in poor performance. Example: 'try {\n    if (!Files.isDirectory(PROJECTS)) {\n        throw new IllegalStateException(\"Directory not found.\"); // warning: 'throw' caught by containing 'try' statement\n    }\n    ...\n  } catch (Exception e) {\n      LOG.error(\"run failed\");\n  }' Use the Ignore rethrown exceptions option to ignore exceptions that are rethrown. Inspection ID: ThrowCaughtLocally",
                  "markdown": "Reports `throw` statements whose exceptions are always caught by containing `try` statements.\n\nUsing `throw`\nstatements as a \"goto\" to change the local flow of control is confusing and results in poor performance.\n\n**Example:**\n\n\n      try {\n        if (!Files.isDirectory(PROJECTS)) {\n            throw new IllegalStateException(\"Directory not found.\"); // warning: 'throw' caught by containing 'try' statement\n        }\n        ...\n      } catch (Exception e) {\n          LOG.error(\"run failed\");\n      }\n\nUse the **Ignore rethrown exceptions** option to ignore exceptions that are rethrown.\n\nInspection ID: ThrowCaughtLocally"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ThrowCaughtLocally",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Error handling",
                      "index": 10,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NonSerializableWithSerialVersionUIDField",
                "shortDescription": {
                  "text": "Non-serializable class with 'serialVersionUID'"
                },
                "fullDescription": {
                  "text": "Reports non-'Serializable' classes that define a 'serialVersionUID' field. A 'serialVersionUID' field in that context normally indicates an error because the field will be ignored and the class will not be serialized. Example: 'public class IWantToSerializeThis {\n    private static final long serialVersionUID = 2669293150219020249L;\n  }' Inspection ID: NonSerializableWithSerialVersionUIDField",
                  "markdown": "Reports non-`Serializable` classes that define a `serialVersionUID` field. A `serialVersionUID` field in that context normally indicates an error because the field will be ignored and the class will not be serialized.\n\n**Example:**\n\n\n      public class IWantToSerializeThis {\n        private static final long serialVersionUID = 2669293150219020249L;\n      }\n\nInspection ID: NonSerializableWithSerialVersionUIDField"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NonSerializableClassWithSerialVersionUID",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Serialization issues",
                      "index": 18,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SynchronizeOnValueBasedClass",
                "shortDescription": {
                  "text": "Value-based warnings"
                },
                "fullDescription": {
                  "text": "Reports attempts to synchronize on an instance of a value-based class that produce compile-time warnings and raise run-time exceptions starting from Java 16. For example, 'java.lang.Double' is annotated with 'jdk.internal.ValueBased', so the following code will produce a compile-time warning: 'Double d = 20.0;\nsynchronized (d) { ... } // javac warning' Inspection ID: SynchronizeOnValueBasedClass New in 2021.1",
                  "markdown": "Reports attempts to synchronize on an instance of a value-based class that produce compile-time warnings and raise run-time exceptions starting from Java 16.\n\n\nFor example, `java.lang.Double` is annotated with `jdk.internal.ValueBased`, so the following code will\nproduce a compile-time warning:\n\n\n    Double d = 20.0;\n    synchronized (d) { ... } // javac warning\n\nInspection ID: SynchronizeOnValueBasedClass\n\nNew in 2021.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "synchronization",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Compiler issues",
                      "index": 129,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SwitchStatementsWithoutDefault",
                "shortDescription": {
                  "text": "'switch' statement without 'default' branch"
                },
                "fullDescription": {
                  "text": "Reports 'switch' statements that do not contain 'default' labels. Adding the 'default' label guarantees that all possible scenarios are covered, and it becomes easier to make assumptions about the current state of the program. Note that by default, the inspection does not report 'switch' statements if all cases for enums or 'sealed' classes are covered. Use the Ignore exhaustive switch statements option if you want to change this behavior. Inspection ID: SwitchStatementsWithoutDefault",
                  "markdown": "Reports `switch` statements that do not contain `default` labels.\n\nAdding the `default` label guarantees that all possible scenarios are covered, and it becomes\neasier to make assumptions about the current state of the program.\n\n\nNote that by default, the inspection does not report `switch` statements if all cases for enums or `sealed` classes are covered.\nUse the **Ignore exhaustive switch statements** option if you want to change this behavior.\n\n\nInspection ID: SwitchStatementsWithoutDefault"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "SwitchStatementWithoutDefaultBranch",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Control flow issues",
                      "index": 24,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IncompatibleMask",
                "shortDescription": {
                  "text": "Incompatible bitwise mask operation"
                },
                "fullDescription": {
                  "text": "Reports bitwise mask expressions which are guaranteed to evaluate to 'true' or 'false'. The inspection checks the expressions of the form '(var & constant1) == constant2' or '(var | constant1) == constant2', where 'constant1' and 'constant2' are incompatible bitmask constants. Example: '// Incompatible mask: as the mask ends in 00,\n  // the result could be 0x1200 but not 0x1234\n  if ((mask & 0xFF00) == 0x1234) {...}' Inspection ID: IncompatibleMask",
                  "markdown": "Reports bitwise mask expressions which are guaranteed to evaluate to `true` or `false`.\n\n\nThe inspection checks the expressions of the form `(var & constant1) == constant2` or\n`(var | constant1) == constant2`, where `constant1`\nand `constant2` are incompatible bitmask constants.\n\n**Example:**\n\n      // Incompatible mask: as the mask ends in 00,\n      // the result could be 0x1200 but not 0x1234\n      if ((mask & 0xFF00) == 0x1234) {...}\n\nInspection ID: IncompatibleMask"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "IncompatibleBitwiseMaskOperation",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Bitwise operation issues",
                      "index": 163,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ExplicitArgumentCanBeLambda",
                "shortDescription": {
                  "text": "Explicit argument can be lambda"
                },
                "fullDescription": {
                  "text": "Reports method calls that accept a non-trivial expression and can be replaced with an equivalent method call which accepts a lambda instead. Converting an expression to a lambda ensures that the expression won't be evaluated if it's not used inside the method. For example, 'optional.orElse(createDefaultValue())' can be converted to 'optional.orElseGet(this::createDefaultValue)'. This inspection depends on the Java feature 'Lambda expressions', which is available since Java 8. Inspection ID: ExplicitArgumentCanBeLambda New in 2018.1",
                  "markdown": "Reports method calls that accept a non-trivial expression and can be replaced with an equivalent method call which accepts a lambda instead.\n\n\nConverting an expression to a lambda ensures that the expression won't be evaluated\nif it's not used inside the method. For example, `optional.orElse(createDefaultValue())` can be converted\nto `optional.orElseGet(this::createDefaultValue)`.\n\nThis inspection depends on the Java feature 'Lambda expressions', which is available since Java 8.\n\nInspection ID: ExplicitArgumentCanBeLambda\n\nNew in 2018.1"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ExplicitArgumentCanBeLambda",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Performance",
                      "index": 4,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EqualsCalledOnEnumConstant",
                "shortDescription": {
                  "text": "'equals()' called on enum value"
                },
                "fullDescription": {
                  "text": "Reports 'equals()' calls on enum constants. Such calls can be replaced by an identity comparison ('==') because two enum constants are equal only when they have the same identity. A quick-fix is available to change the call to a comparison. Example: 'boolean foo(MyEnum value) {\n    return value.equals(MyEnum.FOO);\n  }' After the quick-fix is applied: 'boolean foo(MyEnum value) {\n    return value == MyEnum.FOO;\n  }' Inspection ID: EqualsCalledOnEnumConstant",
                  "markdown": "Reports `equals()` calls on enum constants.\n\nSuch calls can be replaced by an identity comparison (`==`) because two\nenum constants are equal only when they have the same identity.\n\nA quick-fix is available to change the call to a comparison.\n\n**Example:**\n\n\n      boolean foo(MyEnum value) {\n        return value.equals(MyEnum.FOO);\n      }\n\nAfter the quick-fix is applied:\n\n\n      boolean foo(MyEnum value) {\n        return value == MyEnum.FOO;\n      }\n\nInspection ID: EqualsCalledOnEnumConstant"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EqualsCalledOnEnumConstant",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HardcodedLineSeparators",
                "shortDescription": {
                  "text": "Hardcoded line separator"
                },
                "fullDescription": {
                  "text": "Reports linefeed ('\\n') and carriage return ('\\r') character escape sequences used in string literals, character literals or text blocks. These characters are commonly used as line separators, and portability may suffer if they are hardcoded. Example: 'String count = \"first\\nsecond\\rthird\";' Inspection ID: HardcodedLineSeparators",
                  "markdown": "Reports linefeed (`\\n`) and carriage return (`\\r`) character escape sequences used in string literals, character literals or text blocks. These characters are commonly used as line separators, and portability may suffer if they are hardcoded.\n\n**Example:**\n\n\n      String count = \"first\\nsecond\\rthird\";\n\nInspection ID: HardcodedLineSeparators"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HardcodedLineSeparator",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Portability",
                      "index": 69,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryConstantArrayCreationExpression",
                "shortDescription": {
                  "text": "Redundant 'new' expression in constant array creation"
                },
                "fullDescription": {
                  "text": "Reports constant new array expressions that can be replaced with an array initializer. Array initializers can omit the type because it is already specified in the left side of the assignment. Example: 'int[] foo = new int[] {42};' After the quick-fix is applied: 'int[] foo = {42};' Inspection ID: UnnecessaryConstantArrayCreationExpression",
                  "markdown": "Reports constant new array expressions that can be replaced with an array initializer. Array initializers can omit the type because it is already specified in the left side of the assignment.\n\n**Example:**\n\n\n      int[] foo = new int[] {42};\n\nAfter the quick-fix is applied:\n\n\n      int[] foo = {42};\n\nInspection ID: UnnecessaryConstantArrayCreationExpression"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnnecessaryConstantArrayCreationExpression",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LabeledStatement",
                "shortDescription": {
                  "text": "Labeled statement"
                },
                "fullDescription": {
                  "text": "Reports labeled statements that can complicate refactorings and control flow of the method. Example: 'label:\n  while (true) {\n      // code\n  }' Inspection ID: LabeledStatement",
                  "markdown": "Reports labeled statements that can complicate refactorings and control flow of the method.\n\nExample:\n\n\n      label:\n      while (true) {\n          // code\n      }\n\nInspection ID: LabeledStatement"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "LabeledStatement",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Control flow issues",
                      "index": 24,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SuspiciousNameCombination",
                "shortDescription": {
                  "text": "Suspicious variable/parameter name combination"
                },
                "fullDescription": {
                  "text": "Reports assignments and function calls in which the name of the target variable or the function parameter does not match the name of the value assigned to it. Example 1: 'int x = 0;\n  int y = x; // x is used as a y-coordinate' Example 2: 'int x = 0, y = 0;\n  // x is used as a y-coordinate and y as an x-coordinate\n  Rectangle rc = new Rectangle(y, x, 20, 20);' Configure the inspection: Use the Group of names area to specify the names which should not be used together: an error is reported if the parameter name or assignment target name contains words from one group and the name of the assigned or passed variable contains words from a different group. Use the Ignore methods area to specify the methods that should not be checked but have a potentially suspicious name. For example, the 'Integer.compare()' parameters are named 'x' and 'y' but are unrelated to coordinates. Inspection ID: SuspiciousNameCombination",
                  "markdown": "Reports assignments and function calls in which the name of the target variable or the function parameter does not match the name of the value assigned to it.\n\nExample 1:\n\n\n      int x = 0;\n      int y = x; // x is used as a y-coordinate\n      \nExample 2:\n\n\n      int x = 0, y = 0;\n      // x is used as a y-coordinate and y as an x-coordinate\n      Rectangle rc = new Rectangle(y, x, 20, 20);\n\nConfigure the inspection:\n\nUse the **Group of names** area to specify the names which should not be used together: an error is reported\nif the parameter name or assignment target name contains words from one group and the name of the assigned or passed\nvariable contains words from a different group.\n\nUse the **Ignore methods** area to specify the methods that should not be checked but have a potentially suspicious name.\nFor example, the `Integer.compare()` parameters are named `x` and `y` but are unrelated to coordinates.\n\nInspection ID: SuspiciousNameCombination"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SuspiciousNameCombination",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ImplicitDefaultCharsetUsage",
                "shortDescription": {
                  "text": "Implicit platform default charset"
                },
                "fullDescription": {
                  "text": "Reports method and constructor calls that implicitly use the platform default charset. Such calls can produce different results on systems that use a different default charset and may result in unexpected behaviour. Example: 'void foo(byte[] bytes) {\n  String s = new String(bytes);\n}'\n You can use a quick-fix that specifies the explicit UTF-8 charset if the corresponding overloaded method is available. After the quick-fix is applied: 'void foo(byte[] bytes) {\n  String s = new String(bytes, StandardCharsets.UTF_8);\n}'\n Inspection ID: ImplicitDefaultCharsetUsage",
                  "markdown": "Reports method and constructor calls that implicitly use the platform default charset. Such calls can produce different results on systems that use a different default charset and may result in unexpected behaviour.\n\n**Example:**\n\n    void foo(byte[] bytes) {\n      String s = new String(bytes);\n    }\n\nYou can use a quick-fix that specifies the explicit UTF-8 charset if the corresponding overloaded method is available.\nAfter the quick-fix is applied:\n\n    void foo(byte[] bytes) {\n      String s = new String(bytes, StandardCharsets.UTF_8);\n    }\n\nInspection ID: ImplicitDefaultCharsetUsage"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ImplicitDefaultCharsetUsage",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Internationalization",
                      "index": 3,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DesignForExtension",
                "shortDescription": {
                  "text": "Design for extension"
                },
                "fullDescription": {
                  "text": "Reports methods which are not 'static', 'private', 'final' or 'abstract', and whose bodies are not empty. Coding in a style that avoids such methods protects the contracts of classes from being broken by their subclasses. The benefit of this style is that subclasses cannot corrupt the state of the superclass by forgetting to call the super method. The cost is that subclasses are limited in their flexibility, in particular they cannot prevent execution of code in the superclass. Use the quick-fix to add the missing modifiers. Example: 'class Foo {\n    public boolean equals(Object o) { return true; }\n  }' After the quick-fix is applied: 'class Foo {\n    public final boolean equals(Object o) { return true; }\n  }' This inspection is intended for code that is going to be used in secure environments, and is probably not appropriate for less restrictive environments. Inspection ID: DesignForExtension",
                  "markdown": "Reports methods which are not `static`, `private`, `final` or `abstract`, and whose bodies are not empty.\n\n\nCoding in a style that avoids such methods protects the contracts of classes from being broken by their subclasses. The\nbenefit of this style is that subclasses cannot corrupt the state of the superclass by forgetting to call the super method. The cost is\nthat\nsubclasses are limited in their flexibility, in particular they cannot prevent execution of code in the superclass. Use the quick-fix to\nadd\nthe missing modifiers.\n\n**Example:**\n\n\n      class Foo {\n        public boolean equals(Object o) { return true; }\n      }\n\nAfter the quick-fix is applied:\n\n\n      class Foo {\n        public final boolean equals(Object o) { return true; }\n      }\n\nThis inspection is intended for code that is going to be used in secure environments, and is probably not appropriate for less restrictive environments.\n\nInspection ID: DesignForExtension"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "DesignForExtension",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Security",
                      "index": 31,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SimplifyStreamApiCallChains",
                "shortDescription": {
                  "text": "Stream API call chain can be simplified"
                },
                "fullDescription": {
                  "text": "Reports stream API call chains that can be simplified. Simplification will often avoid some temporary object creation during collection traversal. The inspection replaces the following call chains: 'collection.stream().forEach()' → 'collection.forEach()' 'collection.stream().collect(toList/toSet/toCollection())' → 'new CollectionType<>(collection)' 'collection.stream().toArray()' → 'collection.toArray()' 'Arrays.asList().stream()' → 'Arrays.stream()' or 'Stream.of()' 'IntStream.range(0, array.length).mapToObj(idx -> array[idx])' → 'Arrays.stream(array)' 'IntStream.range(0, list.size()).mapToObj(idx -> list.get(idx))' → 'list.stream()' 'Collections.singleton().stream()' → 'Stream.of()' 'Collections.emptyList().stream()' → 'Stream.empty()' 'stream.filter().findFirst().isPresent()' → 'stream.anyMatch()' 'stream.collect(counting())' → 'stream.count()' 'stream.collect(maxBy())' → 'stream.max()' 'stream.collect(mapping())' → 'stream.map().collect()' 'stream.collect(reducing())' → 'stream.reduce()' 'stream.collect(summingInt())' → 'stream.mapToInt().sum()' 'stream.mapToObj(x -> x)' → 'stream.boxed()' 'stream.map(x -> {...; return x;})' → 'stream.peek(x -> ...)' '!stream.anyMatch()' → 'stream.noneMatch()' '!stream.anyMatch(x -> !(...))' → 'stream.allMatch()' 'stream.map().anyMatch(Boolean::booleanValue)' → 'stream.anyMatch()' 'IntStream.range(expr1, expr2).mapToObj(x -> array[x])' → 'Arrays.stream(array, expr1, expr2)' 'Collection.nCopies(count, ...)' → 'Stream.generate().limit(count)' 'stream.sorted(comparator).findFirst()' → 'Stream.min(comparator)' 'optional.orElseGet(() -> { throw new ...; })' → 'optional.orElseThrow()' Note that the replacement semantics may have minor differences in some cases. For example, 'Collections.synchronizedList(...).stream().forEach()' is not synchronized while 'Collections.synchronizedList(...).forEach()' is synchronized. Also, 'collect(Collectors.maxBy())' returns an empty 'Optional' if the resulting element is 'null' while 'Stream.max()' throws 'NullPointerException' in this case. This inspection depends on the Java feature 'Stream and Optional API', which is available since Java 8. Inspection ID: SimplifyStreamApiCallChains",
                  "markdown": "Reports stream API call chains that can be simplified. Simplification will often avoid some temporary object creation during collection traversal.\n\n\nThe inspection replaces the following call chains:\n\n* `collection.stream().forEach()` → `collection.forEach()`\n* `collection.stream().collect(toList/toSet/toCollection())` → `new CollectionType<>(collection)`\n* `collection.stream().toArray()` → `collection.toArray()`\n* `Arrays.asList().stream()` → `Arrays.stream()` or `Stream.of()`\n* `IntStream.range(0, array.length).mapToObj(idx -> array[idx])` → `Arrays.stream(array)`\n* `IntStream.range(0, list.size()).mapToObj(idx -> list.get(idx))` → `list.stream()`\n* `Collections.singleton().stream()` → `Stream.of()`\n* `Collections.emptyList().stream()` → `Stream.empty()`\n* `stream.filter().findFirst().isPresent()` → `stream.anyMatch()`\n* `stream.collect(counting())` → `stream.count()`\n* `stream.collect(maxBy())` → `stream.max()`\n* `stream.collect(mapping())` → `stream.map().collect()`\n* `stream.collect(reducing())` → `stream.reduce()`\n* `stream.collect(summingInt())` → `stream.mapToInt().sum()`\n* `stream.mapToObj(x -> x)` → `stream.boxed()`\n* `stream.map(x -> {...; return x;})` → `stream.peek(x -> ...)`\n* `!stream.anyMatch()` → `stream.noneMatch()`\n* `!stream.anyMatch(x -> !(...))` → `stream.allMatch()`\n* `stream.map().anyMatch(Boolean::booleanValue)` → `stream.anyMatch()`\n* `IntStream.range(expr1, expr2).mapToObj(x -> array[x])` → `Arrays.stream(array, expr1, expr2)`\n* `Collection.nCopies(count, ...)` → `Stream.generate().limit(count)`\n* `stream.sorted(comparator).findFirst()` → `Stream.min(comparator)`\n* `optional.orElseGet(() -> { throw new ...; })` → `optional.orElseThrow()`\n\n\nNote that the replacement semantics may have minor differences in some cases. For example,\n`Collections.synchronizedList(...).stream().forEach()` is not synchronized while\n`Collections.synchronizedList(...).forEach()` is synchronized.\nAlso, `collect(Collectors.maxBy())` returns an empty `Optional` if the resulting element is\n`null` while `Stream.max()` throws `NullPointerException` in this case.\n\nThis inspection depends on the Java feature 'Stream and Optional API', which is available since Java 8.\n\nInspection ID: SimplifyStreamApiCallChains"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SimplifyStreamApiCallChains",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Verbose or redundant code constructs",
                      "index": 37,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnknownGuard",
                "shortDescription": {
                  "text": "Unknown '@GuardedBy' field"
                },
                "fullDescription": {
                  "text": "Reports '@GuardedBy' annotations in which the specified guarding field is unknown. Example: 'private Object state;\n\n    @GuardedBy(\"lock\") //unknown guard reference\n    public void bar() {\n        state = new Object();\n    }' Supported '@GuardedBy' annotations are: 'net.jcip.annotations.GuardedBy' 'javax.annotation.concurrent.GuardedBy' 'org.apache.http.annotation.GuardedBy' 'com.android.annotations.concurrency.GuardedBy' 'androidx.annotation.GuardedBy' 'com.google.errorprone.annotations.concurrent.GuardedBy' Inspection ID: UnknownGuard",
                  "markdown": "Reports `@GuardedBy` annotations in which the specified guarding field is unknown.\n\nExample:\n\n\n        private Object state;\n\n        @GuardedBy(\"lock\") //unknown guard reference\n        public void bar() {\n            state = new Object();\n        }\n\nSupported `@GuardedBy` annotations are:\n\n* `net.jcip.annotations.GuardedBy`\n* `javax.annotation.concurrent.GuardedBy`\n* `org.apache.http.annotation.GuardedBy`\n* `com.android.annotations.concurrency.GuardedBy`\n* `androidx.annotation.GuardedBy`\n* `com.google.errorprone.annotations.concurrent.GuardedBy`\n\nInspection ID: UnknownGuard"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnknownGuard",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Concurrency annotation issues",
                      "index": 75,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AbstractClassExtendsConcreteClass",
                "shortDescription": {
                  "text": "Abstract class extends concrete class"
                },
                "fullDescription": {
                  "text": "Reports 'abstract' classes that extend concrete classes. Inspection ID: AbstractClassExtendsConcreteClass",
                  "markdown": "Reports `abstract` classes that extend concrete classes.\n\nInspection ID: AbstractClassExtendsConcreteClass"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AbstractClassExtendsConcreteClass",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Inheritance issues",
                      "index": 121,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Java8CollectionRemoveIf",
                "shortDescription": {
                  "text": "Loop can be replaced with 'Collection.removeIf()'"
                },
                "fullDescription": {
                  "text": "Reports loops which can be collapsed into a single 'Collection.removeIf()' call. Example: 'for (Iterator<String> it = collection.iterator(); it.hasNext(); ) {\n    String aValue = it.next();\n    if(shouldBeRemoved(aValue)) {\n      it.remove();\n    }\n  }' After the quick-fix is applied: 'collection.removeIf(aValue -> shouldBeRemoved(aValue));' This inspection depends on the Java feature 'Lambda methods in collections', which is available since Java 8. Inspection ID: Java8CollectionRemoveIf",
                  "markdown": "Reports loops which can be collapsed into a single `Collection.removeIf()` call.\n\nExample:\n\n\n      for (Iterator<String> it = collection.iterator(); it.hasNext(); ) {\n        String aValue = it.next();\n        if(shouldBeRemoved(aValue)) {\n          it.remove();\n        }\n      }\n\nAfter the quick-fix is applied:\n\n\n      collection.removeIf(aValue -> shouldBeRemoved(aValue));\n\nThis inspection depends on the Java feature 'Lambda methods in collections', which is available since Java 8.\n\nInspection ID: Java8CollectionRemoveIf"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "Java8CollectionRemoveIf",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level migration aids/Java 8",
                      "index": 94,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LogStatementNotGuardedByLogCondition",
                "shortDescription": {
                  "text": "Logging call not guarded by log condition"
                },
                "fullDescription": {
                  "text": "Reports logging calls that are not surrounded by a guard condition. The evaluation of a call's arguments can be expensive. Surrounding a logging call with a guard clause prevents that cost when logging is disabled for the level used by the logging statement. This is especially useful for the least serious level (trace, debug, finest) of logging calls, because those are most often disabled in a production environment. Example: 'public class TestObject {\n    void test(Object object) {\n      LOG.debug(\"some logging \" + expensiveCalculation(1));\n    }\n  }' After a quick-fix is applied: 'public class TestObject {\n    void test(Object object) {\n      if(LOG.isDebugEnabled()){\n        LOG.debug(\"some logging \" + expensiveCalculation(1));\n      }\n    }\n  }' This inspection supports Log4j2 and the SLF4J logging frameworks (except builders). Inspection ID: LogStatementNotGuardedByLogCondition New in 2024.2",
                  "markdown": "Reports logging calls that are not surrounded by a guard condition. The evaluation of a call's arguments can be expensive. Surrounding a logging call with a guard clause prevents that cost when logging is disabled for the level used by the logging statement. This is especially useful for the least serious level (trace, debug, finest) of logging calls, because those are most often disabled in a production environment.\n\n**Example:**\n\n\n      public class TestObject {\n        void test(Object object) {\n          LOG.debug(\"some logging \" + expensiveCalculation(1));\n        }\n      }\n\nAfter a quick-fix is applied:\n\n\n      public class TestObject {\n        void test(Object object) {\n          if(LOG.isDebugEnabled()){\n            LOG.debug(\"some logging \" + expensiveCalculation(1));\n          }\n        }\n      }\n\nThis inspection supports *Log4j2* and the *SLF4J* logging frameworks (except builders).\n\nInspection ID: LogStatementNotGuardedByLogCondition\n\nNew in 2024.2"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "LogStatementNotGuardedByLogCondition",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Performance"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JVM languages/Logging",
                      "index": 41,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SafeVarargsDetector",
                "shortDescription": {
                  "text": "Possible heap pollution from parameterized vararg type"
                },
                "fullDescription": {
                  "text": "Reports methods with variable arity, which can be annotated as '@SafeVarargs'. The '@SafeVarargs' annotation suppresses unchecked warnings about parameterized array creation at call sites. Example: 'public class Foo<T> {\n    private List<T> list = new ArrayList<>();\n\n    public final void safeVarargs(T... elements) {\n      Collections.addAll(list, elements);\n    }\n  }' After the quick-fix is applied: 'public class Foo<T> {\n    private List<T> list = new ArrayList<>();\n\n    @SafeVarargs\n    public final void safeVarargs(T... elements) {\n      Collections.addAll(list, elements);\n    }\n  }' This annotation is not supported under Java 1.6 or earlier JVMs. Inspection ID: SafeVarargsDetector",
                  "markdown": "Reports methods with variable arity, which can be annotated as `@SafeVarargs`. The `@SafeVarargs` annotation suppresses unchecked warnings about parameterized array creation at call sites.\n\n**Example:**\n\n\n      public class Foo<T> {\n        private List<T> list = new ArrayList<>();\n\n        public final void safeVarargs(T... elements) {\n          Collections.addAll(list, elements);\n        }\n      }\n\nAfter the quick-fix is applied:\n\n\n      public class Foo<T> {\n        private List<T> list = new ArrayList<>();\n\n        @SafeVarargs\n        public final void safeVarargs(T... elements) {\n          Collections.addAll(list, elements);\n        }\n      }\n\n\nThis annotation is not supported under Java 1.6 or earlier JVMs.\n\nInspection ID: SafeVarargsDetector"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "unchecked",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level migration aids/Java 7",
                      "index": 128,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ComparatorMethodParameterNotUsed",
                "shortDescription": {
                  "text": "Suspicious 'Comparator.compare()' implementation"
                },
                "fullDescription": {
                  "text": "Reports problems in 'Comparator.compare()' and 'Comparable.compareTo()' implementations. The following cases are reported: A parameter is not used. Most likely this is a typo and the other parameter is compared with itself, or the method is not implemented correctly. It's evident that the method does not return '0' for the same elements. Such a comparison method violates the contract and can produce unpredictable results when equal elements are encountered. In particular, sorting may fail with an exception on some data. The comparison method never returns positive or negative value. To fulfill the contract, if the comparison method returns positive values, it should also return negative ones if arguments are supplied in reversed order. The comparison method returns 'Integer.MIN_VALUE'. While allowed by the contract, it may be error-prone, as some call sites may incorrectly try to invert the return value of the comparison method using the unary minus operator. The negated value of 'Integer.MIN_VALUE' is 'Integer.MIN_VALUE'. Example: 'Comparator<String> lambda =\n    (a, b) -> a.length() > b.length()\n              ? 0\n              : Math.random() > 0.5 ? -1 : 1;' Inspection ID: ComparatorMethodParameterNotUsed",
                  "markdown": "Reports problems in `Comparator.compare()` and `Comparable.compareTo()` implementations.\n\nThe following cases are reported:\n\n* A parameter is not used. Most likely this is a typo and the other parameter is compared with itself, or the method is not implemented correctly.\n* It's evident that the method does not return `0` for the same elements. Such a comparison method violates the contract and can produce unpredictable results when equal elements are encountered. In particular, sorting may fail with an exception on some data.\n* The comparison method never returns positive or negative value. To fulfill the contract, if the comparison method returns positive values, it should also return negative ones if arguments are supplied in reversed order.\n* The comparison method returns `Integer.MIN_VALUE`. While allowed by the contract, it may be error-prone, as some call sites may incorrectly try to invert the return value of the comparison method using the unary minus operator. The negated value of `Integer.MIN_VALUE` is `Integer.MIN_VALUE`.\n\n**Example:**\n\n\n      Comparator<String> lambda =\n        (a, b) -> a.length() > b.length()\n                  ? 0\n                  : Math.random() > 0.5 ? -1 : 1;\n\nInspection ID: ComparatorMethodParameterNotUsed"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ComparatorMethodParameterNotUsed",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Annotation",
                "shortDescription": {
                  "text": "Annotation"
                },
                "fullDescription": {
                  "text": "Reports annotations. Annotations are not supported in Java 1.4 and earlier JVM. Inspection ID: Annotation",
                  "markdown": "Reports annotations. Annotations are not supported in Java 1.4 and earlier JVM.\n\n\nInspection ID: Annotation"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "Annotation",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level issues",
                      "index": 119,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryUnicodeEscape",
                "shortDescription": {
                  "text": "Unnecessary Unicode escape sequence"
                },
                "fullDescription": {
                  "text": "Reports unnecessary Unicode escape sequences. A Unicode escape sequence is unnecessary when the file encoding can handle the character without escaping it. This inspection does not report Unicode control characters, except for line feed and horizonal tab. Example: 'String s = \"\\u0078\";' After the quick-fix is applied: 'String s = \"x\";' Inspection ID: UnnecessaryUnicodeEscape",
                  "markdown": "Reports unnecessary Unicode escape sequences. A Unicode escape sequence is unnecessary when the file encoding can handle the character without escaping it. This inspection does not report Unicode control characters, except for line feed and horizonal tab.\n\n**Example:**\n\n\n      String s = \"\\u0078\";\n\nAfter the quick-fix is applied:\n\n\n      String s = \"x\";\n\nInspection ID: UnnecessaryUnicodeEscape"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnnecessaryUnicodeEscape",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Internationalization",
                      "index": 3,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PrimitiveArrayArgumentToVariableArgMethod",
                "shortDescription": {
                  "text": "Confusing primitive array argument to varargs method"
                },
                "fullDescription": {
                  "text": "Reports any calls to a variable arity method where the call has one primitive-type array in the variable arity parameter position. Such a primitive-array argument may be confusing, as it will be wrapped in a single-element array argument, rather than each element being a separate argument, as may be expected. Example: 'String.format(\"%s\", new int[]{1, 2, 3});' After the quick-fix is applied: 'String.format(\"%s\", (Object) new int[]{1, 2, 3});' This inspection depends on the Java feature 'Variable arity methods', which is available since Java 5. Inspection ID: PrimitiveArrayArgumentToVariableArgMethod",
                  "markdown": "Reports any calls to a variable arity method where the call has one primitive-type array in the variable arity parameter position. Such a primitive-array argument may be confusing, as it will be wrapped in a single-element array argument, rather than each element being a separate argument, as may be expected.\n\n**Example:**\n\n\n      String.format(\"%s\", new int[]{1, 2, 3});\n\nAfter the quick-fix is applied:\n\n\n      String.format(\"%s\", (Object) new int[]{1, 2, 3});\n\nThis inspection depends on the Java feature 'Variable arity methods', which is available since Java 5.\n\nInspection ID: PrimitiveArrayArgumentToVariableArgMethod"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PrimitiveArrayArgumentToVarargsMethod",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StringTokenizer",
                "shortDescription": {
                  "text": "Use of 'StringTokenizer'"
                },
                "fullDescription": {
                  "text": "Reports usages of the 'StringTokenizer' class. Excessive use of 'StringTokenizer' is incorrect in an internationalized environment. Inspection ID: StringTokenizer",
                  "markdown": "Reports usages of the `StringTokenizer` class. Excessive use of `StringTokenizer` is incorrect in an internationalized environment.\n\nInspection ID: StringTokenizer"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UseOfStringTokenizer",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Internationalization",
                      "index": 3,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SafeVarargsHasNoEffect",
                "shortDescription": {
                  "text": "@SafeVarargs do not suppress potentially unsafe operations"
                },
                "fullDescription": {
                  "text": "Reports write operations inside '@SafeVarargs' methods where vararg parameter is reassigned to something else. In this case, newly assigned array is not related to the variable arity arguments at the call site and might not be safe anymore. Example: '@SafeVarargs\n    public final <T> void test(T[] tt, T... t) {\n        t = tt;\n        System.out.println(t[0]);\n    }' This inspection depends on the Java feature 'Annotations', which is available since Java 5. Inspection ID: SafeVarargsHasNoEffect",
                  "markdown": "Reports write operations inside `@SafeVarargs` methods where vararg parameter is reassigned to something else. In this case, newly assigned array is not related to the variable arity arguments at the call site and might not be safe anymore.\n\n**Example:**\n\n\n        @SafeVarargs\n        public final <T> void test(T[] tt, T... t) {\n            t = tt;\n            System.out.println(t[0]);\n        }\n\nThis inspection depends on the Java feature 'Annotations', which is available since Java 5.\n\nInspection ID: SafeVarargsHasNoEffect"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SafeVarargsHasNoEffect",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseBulkOperation",
                "shortDescription": {
                  "text": "Bulk operation can be used instead of iteration"
                },
                "fullDescription": {
                  "text": "Reports single operations inside loops that could be replaced with a bulk method. Not only are bulk methods shorter, but in some cases they may be more performant as well. Example: 'void test(Collection<Integer> numbers) {\n    List<Integer> result = new ArrayList<>();\n    for (Integer i : numbers) {\n      result.add(i);\n    }\n  }' After the fix is applied: 'void test(Collection<Integer> numbers) {\n    List<Integer> result = new ArrayList<>();\n    result.addAll(numbers);\n  }' The Use Arrays.asList() to wrap arrays option allows to report arrays, even if the bulk method requires a collection. In this case the quick-fix will automatically wrap the array in 'Arrays.asList()' call. Inspection ID: UseBulkOperation New in 2017.1",
                  "markdown": "Reports single operations inside loops that could be replaced with a bulk method.\n\n\nNot only are bulk methods shorter, but in some cases they may be more performant as well.\n\n**Example:**\n\n      void test(Collection<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        for (Integer i : numbers) {\n          result.add(i);\n        }\n      }\n\nAfter the fix is applied:\n\n\n      void test(Collection<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        result.addAll(numbers);\n      }\n\n\nThe **Use Arrays.asList() to wrap arrays** option allows to report arrays, even if the bulk method requires a collection.\nIn this case the quick-fix will automatically wrap the array in `Arrays.asList()` call.\n\nInspection ID: UseBulkOperation\n\nNew in 2017.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UseBulkOperation",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Performance",
                      "index": 4,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BigDecimalEquals",
                "shortDescription": {
                  "text": "'equals()' called on 'BigDecimal'"
                },
                "fullDescription": {
                  "text": "Reports 'equals()' calls that compare two 'java.math.BigDecimal' numbers. This is normally a mistake, as two 'java.math.BigDecimal' numbers are only equal if they are equal in both value and scale. Example: 'if (new BigDecimal(\"2.0\").equals(\n    new BigDecimal(\"2.00\"))) {} // false' After the quick-fix is applied: 'if (new BigDecimal(\"2.0\").compareTo(\n    new BigDecimal(\"2.00\")) == 0) {} // true' Inspection ID: BigDecimalEquals",
                  "markdown": "Reports `equals()` calls that compare two `java.math.BigDecimal` numbers. This is normally a mistake, as two `java.math.BigDecimal` numbers are only equal if they are equal in both value and scale.\n\n**Example:**\n\n\n      if (new BigDecimal(\"2.0\").equals(\n        new BigDecimal(\"2.00\"))) {} // false\n\nAfter the quick-fix is applied:\n\n\n      if (new BigDecimal(\"2.0\").compareTo(\n        new BigDecimal(\"2.00\")) == 0) {} // true\n\nInspection ID: BigDecimalEquals"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "BigDecimalEquals",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Numeric issues",
                      "index": 25,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AccessToNonThreadSafeStaticFieldFromInstance",
                "shortDescription": {
                  "text": "Non-thread-safe 'static' field access"
                },
                "fullDescription": {
                  "text": "Reports access to 'static' fields that are of a non-thread-safe type. When a 'static' field is accessed from an instance method or a non-synchronized block, multiple threads can access that field. This can lead to unspecified side effects, like exceptions and incorrect results. Example: 'class Sample {\n    private static final SimpleDateFormat df = new SimpleDateFormat(\"yyyy-MM-dd\");\n    String method() {\n      return df.format(\"\");\n    }\n  }' You can specify which types should be considered not thread-safe. Only fields with these exact types or initialized with these exact types are reported, because there may exist thread-safe subclasses of these types. Inspection ID: AccessToNonThreadSafeStaticFieldFromInstance",
                  "markdown": "Reports access to `static` fields that are of a non-thread-safe type.\n\n\nWhen a `static` field is accessed from an instance method or a non-synchronized block,\nmultiple threads can access that field.\nThis can lead to unspecified side effects, like exceptions and incorrect results.\n\n**Example:**\n\n\n      class Sample {\n        private static final SimpleDateFormat df = new SimpleDateFormat(\"yyyy-MM-dd\");\n        String method() {\n          return df.format(\"\");\n        }\n      }\n\n\nYou can specify which types should be considered not thread-safe.\nOnly fields with these exact types or initialized with these exact types are reported,\nbecause there may exist thread-safe subclasses of these types.\n\nInspection ID: AccessToNonThreadSafeStaticFieldFromInstance"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AccessToNonThreadSafeStaticField",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Threading issues",
                      "index": 23,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AssignmentToCatchBlockParameter",
                "shortDescription": {
                  "text": "Assignment to 'catch' block parameter"
                },
                "fullDescription": {
                  "text": "Reports assignments to, 'catch' block parameters. Changing a 'catch' block parameter is very confusing and should be discouraged. The quick-fix adds a declaration of a new variable. Example: 'void processFile(String fileName) throws Exception {\n    try {\n      doProcessFile(fileName);\n    } catch(Exception ex) {\n      if (ex instanceof UncheckedIOException) {\n        // Warning: catch block parameter reassigned\n        ex = ((UncheckedIOException) ex).getCause();\n      }\n      throw ex;\n    }\n  }' After the quick-fix is applied: 'void processFile(String fileName) throws Exception {\n    try {\n      doProcessFile(fileName);\n    } catch(Exception ex) {\n      Exception unwrapped = ex;\n      if (unwrapped instanceof UncheckedIOException) {\n        unwrapped = ((UncheckedIOException)\n          unwrapped).getCause();\n      }\n      throw unwrapped;\n    }\n  }' Inspection ID: AssignmentToCatchBlockParameter",
                  "markdown": "Reports assignments to, `catch` block parameters.\n\nChanging a `catch` block parameter is very confusing and should be discouraged.\n\nThe quick-fix adds a declaration of a new variable.\n\n**Example:**\n\n\n      void processFile(String fileName) throws Exception {\n        try {\n          doProcessFile(fileName);\n        } catch(Exception ex) {\n          if (ex instanceof UncheckedIOException) {\n            // Warning: catch block parameter reassigned\n            ex = ((UncheckedIOException) ex).getCause();\n          }\n          throw ex;\n        }\n      }\n\nAfter the quick-fix is applied:\n\n\n      void processFile(String fileName) throws Exception {\n        try {\n          doProcessFile(fileName);\n        } catch(Exception ex) {\n          Exception unwrapped = ex;\n          if (unwrapped instanceof UncheckedIOException) {\n            unwrapped = ((UncheckedIOException)\n              unwrapped).getCause();\n          }\n          throw unwrapped;\n        }\n      }\n\nInspection ID: AssignmentToCatchBlockParameter"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AssignmentToCatchBlockParameter",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Assignment issues",
                      "index": 64,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AbstractMethodOverridesAbstractMethod",
                "shortDescription": {
                  "text": "Abstract method overrides abstract method"
                },
                "fullDescription": {
                  "text": "Reports 'abstract' methods that override 'abstract' methods. Such methods don't make sense because any concrete child class will have to implement the abstract method anyway. Methods whose return types, exception declarations, annotations, or modifiers differ from the overridden method are not reported by this inspection. Configure the inspection: Use the Ignore methods with different Javadoc than their super methods option to ignore any abstract methods whose JavaDoc comment differs from their super method. Inspection ID: AbstractMethodOverridesAbstractMethod",
                  "markdown": "Reports `abstract` methods that override `abstract` methods.\n\nSuch methods don't make sense because any concrete child class will have to implement the abstract method anyway.\n\n\nMethods whose return types, exception declarations, annotations, or modifiers differ from the overridden method are not reported by this inspection.\n\n\nConfigure the inspection:\n\n* Use the **Ignore methods with different Javadoc than their super methods** option to ignore any abstract methods whose JavaDoc comment differs from their super method.\n\nInspection ID: AbstractMethodOverridesAbstractMethod"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AbstractMethodOverridesAbstractMethod",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Inheritance issues",
                      "index": 121,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LoopStatementsThatDontLoop",
                "shortDescription": {
                  "text": "Loop statement that does not loop"
                },
                "fullDescription": {
                  "text": "Reports any instance of 'for', 'while', and 'do' statements whose bodies will be executed once at most. Normally, this is an indication of a bug. Use the Ignore enhanced for loops option to ignore the foreach loops. They are sometimes used to perform an action only on the first item of an iterable in a compact way. Example: 'for (String s : stringIterable) {\n    doSomethingOnFirstString(s);\n    break;\n  }' Inspection ID: LoopStatementsThatDontLoop",
                  "markdown": "Reports any instance of `for`, `while`, and `do` statements whose bodies will be executed once at most. Normally, this is an indication of a bug.\n\n\nUse the **Ignore enhanced for loops** option to ignore the foreach loops.\nThey are sometimes used to perform an action only on the first item of an iterable in a compact way.\n\nExample:\n\n\n      for (String s : stringIterable) {\n        doSomethingOnFirstString(s);\n        break;\n      }\n\nInspection ID: LoopStatementsThatDontLoop"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "LoopStatementThatDoesntLoop",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Control flow issues",
                      "index": 24,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ArrayCreationWithoutNewKeyword",
                "shortDescription": {
                  "text": "Array creation without 'new' expression"
                },
                "fullDescription": {
                  "text": "Reports array initializers without 'new' array expressions and suggests adding them. Example: 'int[] a = {42}' After the quick-fix is applied: 'int[] a = new int[]{42}' Inspection ID: ArrayCreationWithoutNewKeyword",
                  "markdown": "Reports array initializers without `new` array expressions and suggests adding them.\n\nExample:\n\n\n      int[] a = {42}\n\nAfter the quick-fix is applied:\n\n\n      int[] a = new int[]{42}\n\nInspection ID: ArrayCreationWithoutNewKeyword"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ArrayCreationWithoutNewKeyword",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConfusingOctalEscape",
                "shortDescription": {
                  "text": "Confusing octal escape sequence"
                },
                "fullDescription": {
                  "text": "Reports string literals containing an octal escape sequence immediately followed by a digit. Such strings may be confusing, and are often the result of errors in escape code creation. Example: 'System.out.println(\"\\1234\"); // Octal escape sequence '\\123' immediately followed by a digit' Inspection ID: ConfusingOctalEscape",
                  "markdown": "Reports string literals containing an octal escape sequence immediately followed by a digit.\n\nSuch strings may be confusing, and are often the result of errors in escape code creation.\n\n**Example:**\n\n\n      System.out.println(\"\\1234\"); // Octal escape sequence '\\123' immediately followed by a digit\n\nInspection ID: ConfusingOctalEscape"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ConfusingOctalEscapeSequence",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LambdaParameterHidingMemberVariable",
                "shortDescription": {
                  "text": "Lambda parameter hides field"
                },
                "fullDescription": {
                  "text": "Reports lambda parameters named identically to a field of a surrounding class. As a result of such naming, you may accidentally use the lambda parameter when using the identically named field is intended. A quick-fix is suggested to rename the lambda parameter. Example: 'public class MyClass {\n    public Object foo;\n\n    void sort(List<Integer> list) {\n      list.sort((foo, bar) -> foo - bar);\n    }\n  }' Use the option to choose whether to ignore fields that are not visible from the lambda expression. For example, private fields of a superclass. This inspection depends on the Java feature 'Lambda expressions', which is available since Java 8. Inspection ID: LambdaParameterHidingMemberVariable",
                  "markdown": "Reports lambda parameters named identically to a field of a surrounding class. As a result of such naming, you may accidentally use the lambda parameter when using the identically named field is intended.\n\nA quick-fix is suggested to rename the lambda parameter.\n\n**Example:**\n\n\n      public class MyClass {\n        public Object foo;\n\n        void sort(List<Integer> list) {\n          list.sort((foo, bar) -> foo - bar);\n        }\n      }\n\n\nUse the option to choose whether to ignore fields that are not visible from the lambda expression.\nFor example, private fields of a superclass.\n\n\nThis inspection depends on the Java feature 'Lambda expressions', which is available since Java 8.\n\nInspection ID: LambdaParameterHidingMemberVariable"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "LambdaParameterHidesMemberVariable",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Visibility",
                      "index": 73,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConstantMathCall",
                "shortDescription": {
                  "text": "Constant call to 'Math'"
                },
                "fullDescription": {
                  "text": "Reports calls to 'java.lang.Math' or 'java.lang.StrictMath' methods that can be replaced with simple compile-time constants. Example: 'double v = Math.sin(0.0);' After the quick-fix is applied: 'double v = 0.0;' Inspection ID: ConstantMathCall",
                  "markdown": "Reports calls to `java.lang.Math` or `java.lang.StrictMath` methods that can be replaced with simple compile-time constants.\n\n**Example:**\n\n    double v = Math.sin(0.0);\n\nAfter the quick-fix is applied:\n\n    double v = 0.0;\n\nInspection ID: ConstantMathCall"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ConstantMathCall",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Numeric issues",
                      "index": 25,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MissortedModifiers",
                "shortDescription": {
                  "text": "Missorted modifiers"
                },
                "fullDescription": {
                  "text": "Reports declaration modifiers that are not in the canonical preferred order (as stated in the Java Language Specification). Example: 'class Foo {\n    native public final void foo();\n  }' After the quick-fix is applied: 'class Foo {\n    public final native void foo();\n  }' Inspection ID: MissortedModifiers",
                  "markdown": "Reports declaration modifiers that are not in the canonical preferred order (as stated in the Java Language Specification).\n\n**Example:**\n\n\n      class Foo {\n        native public final void foo();\n      }\n\nAfter the quick-fix is applied:\n\n\n      class Foo {\n        public final native void foo();\n      }\n\nInspection ID: MissortedModifiers"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "MissortedModifiers",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TransientFieldInNonSerializableClass",
                "shortDescription": {
                  "text": "Transient field in non-serializable class"
                },
                "fullDescription": {
                  "text": "Reports 'transient' fields in classes that do not implement 'java.io.Serializable'. Example: 'public class NonSerializableClass {\n    private transient String password;\n  }' After the quick-fix is applied: 'public class NonSerializableClass {\n    private String password;\n  }' Inspection ID: TransientFieldInNonSerializableClass",
                  "markdown": "Reports `transient` fields in classes that do not implement `java.io.Serializable`.\n\n**Example:**\n\n\n      public class NonSerializableClass {\n        private transient String password;\n      }\n\nAfter the quick-fix is applied:\n\n\n      public class NonSerializableClass {\n        private String password;\n      }\n\nInspection ID: TransientFieldInNonSerializableClass"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "TransientFieldInNonSerializableClass",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Serialization issues",
                      "index": 18,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SlowListContainsAll",
                "shortDescription": {
                  "text": "Call to 'list.containsAll(collection)' may have poor performance"
                },
                "fullDescription": {
                  "text": "Reports calls to 'containsAll()' on 'java.util.List'. The time complexity of this method call is O(n·m), where n is the number of elements in the list on which the method is called, and m is the number of elements in the collection passed to the method as a parameter. When the list is large, this can be an expensive operation. The quick-fix wraps the list in 'new java.util.HashSet<>()' since the time required to create 'java.util.HashSet' from 'java.util.List' and execute 'containsAll()' on 'java.util.HashSet' is O(n+m). Example: 'public boolean check(List<String> list, Collection<String> collection) {\n    // O(n·m) complexity\n    return list.containsAll(collection);\n  }' After the quick-fix is applied: 'public boolean check(List<String> list, Collection<String> collection) {\n    // O(n+m) complexity\n    return new HashSet<>(list).containsAll(collection);\n  }' Inspection ID: SlowListContainsAll New in 2022.1",
                  "markdown": "Reports calls to `containsAll()` on `java.util.List`.\n\n\nThe time complexity of this method call is O(n·m), where n is the number of elements in the list on which\nthe method is called, and m is the number of elements in the collection passed to the method as a parameter.\nWhen the list is large, this can be an expensive operation.\n\n\nThe quick-fix wraps the list in `new java.util.HashSet<>()` since the time required to create\n`java.util.HashSet` from `java.util.List` and execute `containsAll()` on\n`java.util.HashSet` is O(n+m).\n\n**Example:**\n\n      public boolean check(List<String> list, Collection<String> collection) {\n        // O(n·m) complexity\n        return list.containsAll(collection);\n      }\n\nAfter the quick-fix is applied:\n\n      public boolean check(List<String> list, Collection<String> collection) {\n        // O(n+m) complexity\n        return new HashSet<>(list).containsAll(collection);\n      }\n\nInspection ID: SlowListContainsAll\n\nNew in 2022.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SlowListContainsAll",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Performance",
                      "index": 4,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ExceptionPackage",
                "shortDescription": {
                  "text": "Exception package"
                },
                "fullDescription": {
                  "text": "Reports packages that only contain classes that extend 'java.lang.Throwable', either directly or indirectly. Although exceptions usually don't depend on other classes for their implementation, they are normally not used separately. It is often a better design to locate exceptions in the same package as the classes that use them. Available only from Code | Inspect Code or Code | Analyze Code | Run Inspection by Name and isn't reported in the editor. Inspection ID: ExceptionPackage",
                  "markdown": "Reports packages that only contain classes that extend `java.lang.Throwable`, either directly or indirectly.\n\nAlthough exceptions usually don't depend on other classes for their implementation, they are normally not used separately.\nIt is often a better design to locate exceptions in the same package as the classes that use them.\n\nAvailable only from **Code \\| Inspect Code** or\n**Code \\| Analyze Code \\| Run Inspection by Name** and isn't reported in the editor.\n\nInspection ID: ExceptionPackage"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ExceptionPackage",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Packaging issues",
                      "index": 36,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeParameterExtendsObject",
                "shortDescription": {
                  "text": "Type parameter explicitly extends 'Object'"
                },
                "fullDescription": {
                  "text": "Reports type parameters and wildcard type arguments that are explicitly declared to extend 'java.lang.Object'. Such 'extends' clauses are redundant as 'java.lang.Object' is a supertype for all classes. Example: 'class ClassA<T extends Object> {}' If you need to preserve the 'extends Object' clause because of annotations, disable the Ignore when java.lang.Object is annotated option. This might be useful, for example, when you use a nullness analyzer, and the 'extends Object' clause holds a '@Nullable'/'@NotNull' annotation. Example: 'class MyClass<T extends @NotNull Object> {}' Inspection ID: TypeParameterExtendsObject",
                  "markdown": "Reports type parameters and wildcard type arguments that are explicitly declared to extend `java.lang.Object`.\n\nSuch 'extends' clauses are redundant as `java.lang.Object` is a supertype for all classes.\n\n**Example:**\n\n      class ClassA<T extends Object> {}\n\n\nIf you need to preserve the 'extends Object' clause because of annotations, disable the\n**Ignore when java.lang.Object is annotated** option.\nThis might be useful, for example, when you use a nullness analyzer, and the 'extends Object' clause\nholds a `@Nullable`/`@NotNull` annotation.\n\n**Example:**\n\n      class MyClass<T extends @NotNull Object> {}\n\nInspection ID: TypeParameterExtendsObject"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "TypeParameterExplicitlyExtendsObject",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StringConcatenationInsideStringBufferAppend",
                "shortDescription": {
                  "text": "String concatenation as argument to 'StringBuilder.append()' call"
                },
                "fullDescription": {
                  "text": "Reports 'String' concatenation used as the argument to 'StringBuffer.append()', 'StringBuilder.append()' or 'Appendable.append()'. Such calls may profitably be turned into chained append calls on the existing 'StringBuffer/Builder/Appendable' saving the cost of an extra 'StringBuffer/Builder' allocation. This inspection ignores compile-time evaluated 'String' concatenations, in which case the conversion would only worsen performance. Example: 'void bar(StringBuilder builder, String name) {\n    builder.append(\"Hello,\" + name);    //warning\n    builder.append(\"Hello,\" + \"world\"); //no warning\n  }' Inspection ID: StringConcatenationInsideStringBufferAppend",
                  "markdown": "Reports `String` concatenation used as the argument to `StringBuffer.append()`, `StringBuilder.append()` or `Appendable.append()`.\n\n\nSuch calls may profitably be turned into chained append calls on the existing `StringBuffer/Builder/Appendable`\nsaving the cost of an extra `StringBuffer/Builder` allocation.\nThis inspection ignores compile-time evaluated `String` concatenations, in which case the conversion would only\nworsen performance.\n\n**Example:**\n\n\n      void bar(StringBuilder builder, String name) {\n        builder.append(\"Hello,\" + name);    //warning\n        builder.append(\"Hello,\" + \"world\"); //no warning\n      }\n\n\nInspection ID: StringConcatenationInsideStringBufferAppend"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "StringConcatenationInsideStringBufferAppend",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Performance",
                      "index": 4,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FeatureEnvy",
                "shortDescription": {
                  "text": "Feature envy"
                },
                "fullDescription": {
                  "text": "Reports the Feature Envy code smell. The warning is thrown when a method calls methods on another class three or more times. Calls to library classes, parent classes, contained or containing classes are not counted by this inspection. Feature envy is often an indication of the fact that this functionality is located in a wrong class. Example: 'class JobManager {\n    // Warning: this method calls three methods\n    // of the Job class\n    // It would be better to move this chain of\n    // calls to the Job class itself.\n    void performJob(Job job) {\n      job.beforeStart();\n      job.process();\n      job.afterProcessing();\n    }\n  }' Inspection ID: FeatureEnvy",
                  "markdown": "Reports the *Feature Envy* code smell. The warning is thrown when a method calls methods on another class three or more times. Calls to library classes, parent classes, contained or containing classes are not counted by this inspection. Feature envy is often an indication of the fact that this functionality is located in a wrong class.\n\nExample:\n\n\n      class JobManager {\n        // Warning: this method calls three methods\n        // of the Job class\n        // It would be better to move this chain of\n        // calls to the Job class itself.\n        void performJob(Job job) {\n          job.beforeStart();\n          job.process();\n          job.afterProcessing();\n        }\n      }\n\nInspection ID: FeatureEnvy"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "FeatureEnvy",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Abstraction issues",
                      "index": 63,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BoxingBoxedValue",
                "shortDescription": {
                  "text": "Boxing of already boxed value"
                },
                "fullDescription": {
                  "text": "Reports boxing of already boxed values. This is a redundant operation since any boxed value will first be auto-unboxed before boxing the value again. If done inside an inner loop, such code may cause performance problems. Example: 'Integer value = 1;\n  method(Integer.valueOf(value));' After the quick fix is applied: 'Integer value = 1;\n  method(value);' Inspection ID: BoxingBoxedValue",
                  "markdown": "Reports boxing of already boxed values.\n\n\nThis is a redundant\noperation since any boxed value will first be auto-unboxed before boxing the\nvalue again. If done inside an inner loop, such code may cause performance\nproblems.\n\n**Example:**\n\n\n      Integer value = 1;\n      method(Integer.valueOf(value));\n\nAfter the quick fix is applied:\n\n\n      Integer value = 1;\n      method(value);\n\n\nInspection ID: BoxingBoxedValue"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "BoxingBoxedValue",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Performance",
                      "index": 4,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantCollectionOperation",
                "shortDescription": {
                  "text": "Redundant 'Collection' operation"
                },
                "fullDescription": {
                  "text": "Reports unnecessarily complex collection operations which have simpler alternatives. Example: 'void f(String[] array, Collection<String> collection) {\n    String[] strings = Arrays.asList(array).subList(0, 10).toArray(new String[0]);\n    boolean contains = collection.containsAll(Collections.singletonList(\"x\"));\n  }' After the quick-fix is applied: 'void f(String[] array, Collection<String> collection) {\n    String[] strings = Arrays.copyOf(array, 10);\n    boolean contains = collection.contains(\"x\");\n  }' Inspection ID: RedundantCollectionOperation New in 2018.1",
                  "markdown": "Reports unnecessarily complex collection operations which have simpler alternatives.\n\nExample:\n\n\n      void f(String[] array, Collection<String> collection) {\n        String[] strings = Arrays.asList(array).subList(0, 10).toArray(new String[0]);\n        boolean contains = collection.containsAll(Collections.singletonList(\"x\"));\n      }\n\nAfter the quick-fix is applied:\n\n\n      void f(String[] array, Collection<String> collection) {\n        String[] strings = Arrays.copyOf(array, 10);\n        boolean contains = collection.contains(\"x\");\n      }\n\nInspection ID: RedundantCollectionOperation\n\nNew in 2018.1"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RedundantCollectionOperation",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Verbose or redundant code constructs",
                      "index": 37,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OverriddenMethodCallDuringObjectConstruction",
                "shortDescription": {
                  "text": "Overridden method called during object construction"
                },
                "fullDescription": {
                  "text": "Reports any calls to overridden methods of the current class during object construction. This happens if an object construction is inside: A constructor A non-static instance initializer A non-static field initializer 'clone()' 'readObject()' 'readObjectNoData()' Such calls may result in subtle bugs, as the object is not guaranteed to be initialized before the method call occurs. Example: 'abstract class Parent {\n    void someMethod() { }\n  }\n\n  class Child extends Parent {\n    Child() {\n      someMethod();\n    }\n\n    @Override\n    void someMethod() { }\n  }' This inspection shares its functionality with: The Abstract method called during object construction inspection The Overridable method called during object construction inspection Only one inspection should be enabled at the same time to prevent duplicate warnings. Inspection ID: OverriddenMethodCallDuringObjectConstruction",
                  "markdown": "Reports any calls to overridden methods of the current class during object construction. This happens if an object construction is inside:\n\n* A constructor\n* A non-static instance initializer\n* A non-static field initializer\n* `clone()`\n* `readObject()`\n* `readObjectNoData()`\n\nSuch calls may result in subtle bugs, as the object is not guaranteed to be initialized before the method call occurs.\n\nExample:\n\n\n      abstract class Parent {\n        void someMethod() { }\n      }\n\n      class Child extends Parent {\n        Child() {\n          someMethod();\n        }\n\n        @Override\n        void someMethod() { }\n      }\n\nThis inspection shares its functionality with:\n\n* The **Abstract method called during object construction** inspection\n* The **Overridable method called during object construction** inspection\n\nOnly one inspection should be enabled at the same time to prevent duplicate warnings.\n\nInspection ID: OverriddenMethodCallDuringObjectConstruction"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "OverriddenMethodCallDuringObjectConstruction",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Initialization",
                      "index": 27,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AbstractClassWithoutAbstractMethods",
                "shortDescription": {
                  "text": "Abstract class without 'abstract' methods"
                },
                "fullDescription": {
                  "text": "Reports 'abstract' classes that have no 'abstract' methods. In most cases it does not make sense to have an 'abstract' class without any 'abstract' methods, and the 'abstract' modifier can be removed from the class. If the class was declared 'abstract' to prevent instantiation, it is often a better option to use a 'private' constructor to prevent instantiation instead. Example: 'abstract class Example {\n    public String getName() {\n      return \"IntelliJ IDEA\";\n    }\n  }' Use the option to ignore utility classes. Inspection ID: AbstractClassWithoutAbstractMethods",
                  "markdown": "Reports `abstract` classes that have no `abstract` methods. In most cases it does not make sense to have an `abstract` class without any `abstract` methods, and the `abstract` modifier can be removed from the class. If the class was declared `abstract` to prevent instantiation, it is often a better option to use a `private` constructor to prevent instantiation instead.\n\n**Example:**\n\n\n      abstract class Example {\n        public String getName() {\n          return \"IntelliJ IDEA\";\n        }\n      }\n\nUse the option to ignore utility classes.\n\nInspection ID: AbstractClassWithoutAbstractMethods"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AbstractClassWithoutAbstractMethods",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Inheritance issues",
                      "index": 121,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CastThatLosesPrecision",
                "shortDescription": {
                  "text": "Numeric cast that loses precision"
                },
                "fullDescription": {
                  "text": "Reports cast operations between primitive numeric types that may result in precision loss. Such casts are not necessarily a problem but may result in difficult to trace bugs if the loss of precision is unexpected. Example: 'int a = 420;\n  byte b = (byte) a;' Use the Ignore casts from int to char option to ignore casts from 'int' to 'char'. This type of cast is often used when implementing I/O operations because the 'read()' method of the 'java.io.Reader' class returns an 'int'. Use the Ignore casts from int 128-255 to byte option to ignore casts of constant values (128-255) from 'int' to 'byte'. Such values will overflow to negative numbers that still fit inside a byte. Inspection ID: CastThatLosesPrecision",
                  "markdown": "Reports cast operations between primitive numeric types that may result in precision loss.\n\nSuch casts are not necessarily a problem but may result in difficult to\ntrace bugs if the loss of precision is unexpected.\n\n**Example:**\n\n\n      int a = 420;\n      byte b = (byte) a;\n\nUse the **Ignore casts from int to char** option to ignore casts from `int` to `char`.\nThis type of cast is often used when implementing I/O operations because the `read()` method of the\n`java.io.Reader` class returns an `int`.\n\nUse the **Ignore casts from int 128-255 to byte** option to ignore casts of constant values (128-255) from `int` to\n`byte`.\nSuch values will overflow to negative numbers that still fit inside a byte.\n\nInspection ID: CastThatLosesPrecision"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NumericCastThatLosesPrecision",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Numeric issues/Cast",
                      "index": 112,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SameReturnValue",
                "shortDescription": {
                  "text": "Method always returns the same value"
                },
                "fullDescription": {
                  "text": "Reports methods and method hierarchies that always return the same constant. The inspection works differently in batch-mode (from Code | Inspect Code or Code | Analyze Code | Run Inspection by Name) and on-the-fly in the editor: In batch-mode, the inspection reports methods and method hierarchies that always return the same constant. In the editor, the inspection only reports methods that have more than one 'return' statement, do not have super methods, and cannot be overridden. If a method overrides or implements a method, a contract may require it to return a specific constant, but at the same time, we may want to have several exit points. If a method can be overridden, it is possible that a different value will be returned in subclasses. Example: 'class X {\n                // Warn only in batch-mode:\n    int xxx() { // Method 'xxx()' and all its overriding methods always return '0'\n      return 0;\n    }\n  }\n\n  class Y extends X {\n    @Override\n    int xxx() {\n        return 0;\n    }\n\n                // Warn only in batch-mode:\n    int yyy() { // Method 'yyy()' always returns '0'\n        return 0;\n    }\n\n                                  // Warn both in batch-mode and on-the-fly:\n    final int zzz(boolean flag) { // Method 'zzz()' always returns '0'\n        if (Math.random() > 0.5) {\n            return 0;\n        }\n        return 0;\n    }\n  }' Inspection ID: SameReturnValue",
                  "markdown": "Reports methods and method hierarchies that always return the same constant.\n\n\nThe inspection works differently in batch-mode\n(from **Code \\| Inspect Code** or **Code \\| Analyze Code \\| Run Inspection by Name**)\nand on-the-fly in the editor:\n\n* In batch-mode, the inspection reports methods and method hierarchies that always return the same constant.\n* In the editor, the inspection only reports methods that have more than one `return` statement, do not have super methods, and cannot be overridden. If a method overrides or implements a method, a contract may require it to return a specific constant, but at the same time, we may want to have several exit points. If a method can be overridden, it is possible that a different value will be returned in subclasses.\n\n**Example:**\n\n\n      class X {\n                    // Warn only in batch-mode:\n        int xxx() { // Method 'xxx()' and all its overriding methods always return '0'\n          return 0;\n        }\n      }\n\n      class Y extends X {\n        @Override\n        int xxx() {\n            return 0;\n        }\n\n                    // Warn only in batch-mode:\n        int yyy() { // Method 'yyy()' always returns '0'\n            return 0;\n        }\n\n                                      // Warn both in batch-mode and on-the-fly:\n        final int zzz(boolean flag) { // Method 'zzz()' always returns '0'\n            if (Math.random() > 0.5) {\n                return 0;\n            }\n            return 0;\n        }\n      }\n\nInspection ID: SameReturnValue"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SameReturnValue",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Declaration redundancy",
                      "index": 9,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StringBufferMustHaveInitialCapacity",
                "shortDescription": {
                  "text": "'StringBuilder' without initial capacity"
                },
                "fullDescription": {
                  "text": "Reports attempts to instantiate a new 'StringBuffer' or 'StringBuilder' object without specifying its initial capacity. If no initial capacity is specified, a default capacity is used, which will rarely be optimal. Failing to specify the initial capacity for 'StringBuffer' may result in performance issues if space needs to be reallocated and memory copied when the initial capacity is exceeded. Example: '// Capacity is not specified\n  var sb = new StringBuilder();' Inspection ID: StringBufferMustHaveInitialCapacity",
                  "markdown": "Reports attempts to instantiate a new `StringBuffer` or `StringBuilder` object without specifying its initial capacity.\n\n\nIf no initial capacity is specified, a default capacity is used, which will rarely be optimal.\nFailing to specify the initial capacity for `StringBuffer` may result\nin performance issues if space needs to be reallocated and memory copied\nwhen the initial capacity is exceeded.\n\nExample:\n\n\n      // Capacity is not specified\n      var sb = new StringBuilder();\n\nInspection ID: StringBufferMustHaveInitialCapacity"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "StringBufferWithoutInitialCapacity",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Performance",
                      "index": 4,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ThrowablePrintStackTrace",
                "shortDescription": {
                  "text": "Call to 'printStackTrace()'"
                },
                "fullDescription": {
                  "text": "Reports calls to 'Throwable.printStackTrace()' without arguments. Such statements are often used for temporary debugging and should be either removed from the production code or replaced with a more robust logging facility. Inspection ID: ThrowablePrintStackTrace",
                  "markdown": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.\n\nInspection ID: ThrowablePrintStackTrace"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CallToPrintStackTrace",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code maturity",
                      "index": 46,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ThreadWithDefaultRunMethod",
                "shortDescription": {
                  "text": "Instantiating a 'Thread' with default 'run()' method"
                },
                "fullDescription": {
                  "text": "Reports instantiations of 'Thread' or an inheritor without specifying a 'Runnable' parameter or overriding the 'run()' method. Such threads do nothing useful. Example: 'new Thread().start();' Inspection ID: ThreadWithDefaultRunMethod",
                  "markdown": "Reports instantiations of `Thread` or an inheritor without specifying a `Runnable` parameter or overriding the `run()` method. Such threads do nothing useful.\n\n**Example:**\n\n\n      new Thread().start();\n\nInspection ID: ThreadWithDefaultRunMethod"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "InstantiatingAThreadWithDefaultRunMethod",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Threading issues",
                      "index": 23,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ThreeNegationsPerMethod",
                "shortDescription": {
                  "text": "Method with more than three negations"
                },
                "fullDescription": {
                  "text": "Reports methods with three or more negations. Such methods may be confusing. Example: 'void doSmth(int a, int b, boolean flag1, boolean flag2) {\n    if (!flag && !flag2) {\n      if (a != b) {\n        doOther();\n      }\n    }\n  }' Without negations, the method becomes easier to understand: 'void doSmth(int a, int b, boolean flag1, boolean flag2) {\n    if (flag1 || flag2 || a == b) return;\n    doOther();\n  }' Configure the inspection: Use the Ignore negations in 'equals()' methods option to disable the inspection within 'equals()' methods. Use the Ignore negations in 'assert' statements to disable the inspection within 'assert' statements. Inspection ID: ThreeNegationsPerMethod",
                  "markdown": "Reports methods with three or more negations. Such methods may be confusing.\n\n**Example:**\n\n\n      void doSmth(int a, int b, boolean flag1, boolean flag2) {\n        if (!flag && !flag2) {\n          if (a != b) {\n            doOther();\n          }\n        }\n      }\n\nWithout negations, the method becomes easier to understand:\n\n\n      void doSmth(int a, int b, boolean flag1, boolean flag2) {\n        if (flag1 || flag2 || a == b) return;\n        doOther();\n      }\n\nConfigure the inspection:\n\n* Use the **Ignore negations in 'equals()' methods** option to disable the inspection within `equals()` methods.\n* Use the **Ignore negations in 'assert' statements** to disable the inspection within `assert` statements.\n\nInspection ID: ThreeNegationsPerMethod"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MethodWithMoreThanThreeNegations",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Method metrics",
                      "index": 108,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TestOnlyProblems",
                "shortDescription": {
                  "text": "Test-only usage in production code"
                },
                "fullDescription": {
                  "text": "Reports '@TestOnly'- and '@VisibleForTesting'-annotated methods and classes that are used in production code. Also reports usage of applying '@TestOnly' '@VisibleForTesting' to the same element. The problems are not reported if such method or class is referenced from: Code under the Test Sources folder A test class (JUnit/TestNG) Another '@TestOnly'-annotated method Example (in production code): '@TestOnly\n  fun foo() { ... }\n\n  fun main () {\n    foo()\n  }' Inspection ID: TestOnlyProblems",
                  "markdown": "Reports `@TestOnly`- and `@VisibleForTesting`-annotated methods and classes that are used in production code. Also reports usage of applying `@TestOnly` `@VisibleForTesting` to the same element.\n\nThe problems are not reported if such method or class is referenced from:\n\n* Code under the **Test Sources** folder\n* A test class (JUnit/TestNG)\n* Another `@TestOnly`-annotated method\n\n**Example (in production code):**\n\n\n      @TestOnly\n      fun foo() { ... }\n\n      fun main () {\n        foo()\n      }\n\nInspection ID: TestOnlyProblems"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "TestOnlyProblems",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JVM languages/Test frameworks",
                      "index": 95,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Java8MapApi",
                "shortDescription": {
                  "text": "Simplifiable 'Map' operations"
                },
                "fullDescription": {
                  "text": "Reports common usage patterns of 'java.util.Map' and suggests replacing them with: 'getOrDefault()', 'computeIfAbsent()', 'putIfAbsent()', 'merge()', or 'replaceAll()'. Example: 'map.containsKey(key) ? map.get(key) : \"default\";' After the quick-fix is applied: 'map.getOrDefault(key, \"default\");' Example: 'List<String> list = map.get(key);\n  if (list == null) {\n    list = new ArrayList<>();\n    map.put(key, list);\n  }' After the quick-fix is applied: 'map.computeIfAbsent(key, localKey -> new ArrayList<>());' Example: 'Integer val = map.get(key);\n  if (val == null) map.put(key, 1);\n  else map.put(key, val + 1);' After the quick-fix is applied: 'map.merge(key, 1, (localKey, localValue) -> localValue + 1);' Example: 'for (Map.Entry<String, String> entry : map.entrySet()) {\n    map.put(entry.getKey(), transform(entry.getValue()));\n  }' After the quick-fix is applied: 'map.replaceAll((localKey, localValue) -> transform(localValue));' Note that the replacement with 'computeIfAbsent()' or 'merge()' might work incorrectly for some 'Map' implementations if the code extracted to the lambda expression modifies the same 'Map'. By default, the warning doesn't appear if this code might have side effects. If necessary, enable the Suggest replacement even if lambda may have side effects option to always show the warning. Also, due to different handling of the 'null' value in old methods like 'put()' and newer methods like 'computeIfAbsent()' or 'merge()', semantics might change if storing the 'null' value into given 'Map' is important. The inspection won't suggest the replacement when the value is statically known to be nullable, but for values with unknown nullability the replacement is still suggested. In these cases, we recommended suppressing the warning and adding an explanatory comment. This inspection depends on the Java feature 'Lambda methods in collections', which is available since Java 8. Inspection ID: Java8MapApi",
                  "markdown": "Reports common usage patterns of `java.util.Map` and suggests replacing them with: `getOrDefault()`, `computeIfAbsent()`, `putIfAbsent()`, `merge()`, or `replaceAll()`.\n\nExample:\n\n\n      map.containsKey(key) ? map.get(key) : \"default\";\n\nAfter the quick-fix is applied:\n\n\n      map.getOrDefault(key, \"default\");\n\nExample:\n\n\n      List<String> list = map.get(key);\n      if (list == null) {\n        list = new ArrayList<>();\n        map.put(key, list);\n      }\n\nAfter the quick-fix is applied:\n\n\n      map.computeIfAbsent(key, localKey -> new ArrayList<>());\n\nExample:\n\n\n      Integer val = map.get(key);\n      if (val == null) map.put(key, 1);\n      else map.put(key, val + 1);\n\nAfter the quick-fix is applied:\n\n\n      map.merge(key, 1, (localKey, localValue) -> localValue + 1);\n\nExample:\n\n\n      for (Map.Entry<String, String> entry : map.entrySet()) {\n        map.put(entry.getKey(), transform(entry.getValue()));\n      }\n\nAfter the quick-fix is applied:\n\n\n      map.replaceAll((localKey, localValue) -> transform(localValue));\n\nNote that the replacement with `computeIfAbsent()` or `merge()` might work incorrectly for some `Map`\nimplementations if the code extracted to the lambda expression modifies the same `Map`. By default,\nthe warning doesn't appear if this code might have side effects. If necessary, enable the\n**Suggest replacement even if lambda may have side effects** option to always show the warning.\n\nAlso, due to different handling of the `null` value in old methods like `put()` and newer methods like\n`computeIfAbsent()` or `merge()`, semantics might change if storing the `null` value into given\n`Map` is important. The inspection won't suggest the replacement when the value is statically known to be nullable,\nbut for values with unknown nullability the replacement is still suggested. In these cases, we recommended suppressing the warning\nand adding an explanatory comment.\n\nThis inspection depends on the Java feature 'Lambda methods in collections', which is available since Java 8.\n\nInspection ID: Java8MapApi"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "Java8MapApi",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level migration aids/Java 8",
                      "index": 94,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MeaninglessRecordAnnotationInspection",
                "shortDescription": {
                  "text": "Meaningless record annotation"
                },
                "fullDescription": {
                  "text": "Reports annotations used on record components that have no effect. This can happen in two cases: The reported annotation has the METHOD target, but the corresponding accessor is explicitly defined. The reported annotation has the PARAMETER target, but the canonical constructor is explicitly defined. Example: '@Target(ElementType.METHOD)\n@interface A { }\n  \n// The annotation will not appear in bytecode at all,\n// as it should be propagated to the accessor but accessor is explicitly defined \nrecord R(@A int x) {\n  public int x() { return x; }\n}' This inspection depends on the Java feature 'Records', which is available since Java 16. Inspection ID: MeaninglessRecordAnnotationInspection New in 2021.1",
                  "markdown": "Reports annotations used on record components that have no effect.\n\nThis can happen in two cases:\n\n* The reported annotation has the METHOD target, but the corresponding accessor is explicitly defined.\n* The reported annotation has the PARAMETER target, but the canonical constructor is explicitly defined.\n\nExample:\n\n\n    @Target(ElementType.METHOD)\n    @interface A { }\n      \n    // The annotation will not appear in bytecode at all,\n    // as it should be propagated to the accessor but accessor is explicitly defined \n    record R(@A int x) {\n      public int x() { return x; }\n    }\n\nThis inspection depends on the Java feature 'Records', which is available since Java 16.\n\nInspection ID: MeaninglessRecordAnnotationInspection\n\nNew in 2021.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MeaninglessRecordAnnotationInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FillPermitsList",
                "shortDescription": {
                  "text": "Same file subclasses are missing from permits clause of a sealed class"
                },
                "fullDescription": {
                  "text": "Reports 'sealed' classes without an explicit 'permits' list. Sealed classes that only have subclasses in the same file are not required to have an explicit 'permits' list. By default, this inspection does not highlight in the editor, but only provides a fix. Example: 'sealed class A {}\n  final class B extends A {}' After the quick-fix is applied: 'sealed class A permits B {}\n  final class B extends A {}' This inspection depends on the Java feature 'Sealed classes', which is available since Java 17. Inspection ID: FillPermitsList New in 2020.3",
                  "markdown": "Reports `sealed` classes without an explicit `permits` list. Sealed classes that only have subclasses in the same file are not required to have an explicit `permits` list. By default, this inspection does not highlight in the editor, but only provides a fix.\n\nExample:\n\n\n      sealed class A {}\n      final class B extends A {}\n\nAfter the quick-fix is applied:\n\n\n      sealed class A permits B {}\n      final class B extends A {}\n\nThis inspection depends on the Java feature 'Sealed classes', which is available since Java 17.\n\nInspection ID: FillPermitsList\n\nNew in 2020.3"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "FillPermitsList",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SuspiciousDateFormat",
                "shortDescription": {
                  "text": "Suspicious date format pattern"
                },
                "fullDescription": {
                  "text": "Reports date format patterns that are likely used by mistake. The following patterns are reported: Uppercase \"Y\", unless \"w\" appears nearby. It stands for \"Week year\" that is almost always the same as normal \"Year\" (lowercase \"y\" pattern), but may point to the next year at the end of December. Uppercase \"M\" (month) close to \"H\", \"K\", \"h\", or \"k\" (hour). It's likely that a lowercase \"m\" (minute) was intended. Lowercase \"m\" (minute) close to \"y\" (year) or \"d\" (day in month). It's likely that an uppercase \"M\" (month) was intended. Uppercase \"D\" (day in year) close to \"M\", or \"L\" (month). It's likely that a lowercase \"d\" (day in month) was intended. Uppercase \"S\" (milliseconds) close to \"m\" (minutes). It's likely that a lowercase \"s\" (seconds) was intended. Examples: 'new SimpleDateFormat(\"YYYY-MM-dd\")': likely '\"yyyy-MM-dd\"' was intended. 'new SimpleDateFormat(\"yyyy-MM-DD\")': likely '\"yyyy-MM-dd\"' was intended. 'new SimpleDateFormat(\"HH:MM\")': likely '\"HH:mm\"' was intended. Inspection ID: SuspiciousDateFormat New in 2020.1",
                  "markdown": "Reports date format patterns that are likely used by mistake.\n\nThe following patterns are reported:\n\n* Uppercase \"Y\", unless \"w\" appears nearby. It stands for \"Week year\" that is almost always the same as normal \"Year\" (lowercase \"y\" pattern), but may point to the next year at the end of December.\n* Uppercase \"M\" (month) close to \"H\", \"K\", \"h\", or \"k\" (hour). It's likely that a lowercase \"m\" (minute) was intended.\n* Lowercase \"m\" (minute) close to \"y\" (year) or \"d\" (day in month). It's likely that an uppercase \"M\" (month) was intended.\n* Uppercase \"D\" (day in year) close to \"M\", or \"L\" (month). It's likely that a lowercase \"d\" (day in month) was intended.\n* Uppercase \"S\" (milliseconds) close to \"m\" (minutes). It's likely that a lowercase \"s\" (seconds) was intended.\n\n\nExamples:  \n\n`new SimpleDateFormat(\"YYYY-MM-dd\")`: likely `\"yyyy-MM-dd\"` was intended.  \n\n`new SimpleDateFormat(\"yyyy-MM-DD\")`: likely `\"yyyy-MM-dd\"` was intended.  \n\n`new SimpleDateFormat(\"HH:MM\")`: likely `\"HH:mm\"` was intended.\n\nInspection ID: SuspiciousDateFormat\n\nNew in 2020.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SuspiciousDateFormat",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MagicConstant",
                "shortDescription": {
                  "text": "Magic constant"
                },
                "fullDescription": {
                  "text": "Reports expressions that can be replaced with \"magic\" constants. Example 1: '// Bare literal \"2\" is used, warning:\n  Font font = new Font(\"Arial\", 2)' Example 2: '// Predefined constant is used, good:\n  Font font = new Font(\"Arial\", Font.ITALIC)' When possible, the quick-fix inserts an appropriate predefined constant. The behavior of this inspection is controlled by 'org.intellij.lang.annotations.MagicConstant' annotation. Some standard Java library methods are pre-annotated, but you can use this annotation in your code as well. Inspection ID: MagicConstant",
                  "markdown": "Reports expressions that can be replaced with \"magic\" constants.\n\nExample 1:\n\n\n      // Bare literal \"2\" is used, warning:\n      Font font = new Font(\"Arial\", 2)\n\nExample 2:\n\n\n      // Predefined constant is used, good:\n      Font font = new Font(\"Arial\", Font.ITALIC)\n\n\nWhen possible, the quick-fix inserts an appropriate predefined constant.\n\n\nThe behavior of this inspection is controlled by `org.intellij.lang.annotations.MagicConstant` annotation.\nSome standard Java library methods are pre-annotated, but you can use this annotation in your code as well.\n\nInspection ID: MagicConstant"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MagicConstant",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NumericToString",
                "shortDescription": {
                  "text": "Call to 'Number.toString()'"
                },
                "fullDescription": {
                  "text": "Reports 'toString()' calls on objects of a class extending 'Number'. Such calls are usually incorrect in an internationalized environment and some locale specific formatting should be used instead. Example: 'void print(Double d) {\n    System.out.println(d.toString());\n  }' A possible way to fix this problem could be: 'void print(Double d) {\n    System.out.printf(\"%f%n\", d);\n  }' This formats the number using the default locale which is set during the startup of the JVM and is based on the host environment. Inspection ID: NumericToString",
                  "markdown": "Reports `toString()` calls on objects of a class extending `Number`. Such calls are usually incorrect in an internationalized environment and some locale specific formatting should be used instead.\n\n**Example:**\n\n\n      void print(Double d) {\n        System.out.println(d.toString());\n      }\n\nA possible way to fix this problem could be:\n\n\n      void print(Double d) {\n        System.out.printf(\"%f%n\", d);\n      }\n\nThis formats the number using the default locale which is set during the startup of the JVM and is based on the host environment.\n\nInspection ID: NumericToString"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CallToNumericToString",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Internationalization",
                      "index": 3,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryDefault",
                "shortDescription": {
                  "text": "Unnecessary 'default' for enum 'switch' statement"
                },
                "fullDescription": {
                  "text": "Reports enum 'switch' statements or expression with 'default' branches which can never be taken, because all possible values are covered by a 'case' branch. Such elements are redundant, especially for 'switch' expressions, because they don't compile when all enum constants are not covered by a 'case' branch. The language level needs to be configured to 14 to report 'switch' expressions. The provided quick-fix removes 'default' branches. Example: 'enum E { A, B }\n  int foo(E e) {\n    return switch (e) {\n      case A -> 1;\n      case B -> 2;\n      default -> 3;\n    };\n  }' After the quick-fix is applied: 'enum E { A, B }\n  int foo(E e) {\n    return switch (e) {\n      case A -> 1;\n      case B -> 2;\n    };\n  }' Use the Only report switch expressions option to report only redundant 'default' branches in switch expressions. Inspection ID: UnnecessaryDefault",
                  "markdown": "Reports enum `switch` statements or expression with `default` branches which can never be taken, because all possible values are covered by a `case` branch.\n\nSuch elements are redundant, especially for `switch` expressions, because they don't compile when all\nenum constants are not covered by a `case` branch.\n\n\nThe language level needs to be configured to 14 to report `switch` expressions.\n\nThe provided quick-fix removes `default` branches.\n\nExample:\n\n\n      enum E { A, B }\n      int foo(E e) {\n        return switch (e) {\n          case A -> 1;\n          case B -> 2;\n          default -> 3;\n        };\n      }\n\nAfter the quick-fix is applied:\n\n\n      enum E { A, B }\n      int foo(E e) {\n        return switch (e) {\n          case A -> 1;\n          case B -> 2;\n        };\n      }\n\nUse the **Only report switch expressions** option to report only redundant `default` branches in switch expressions.\n\nInspection ID: UnnecessaryDefault"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnnecessaryDefault",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Verbose or redundant code constructs",
                      "index": 37,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VolatileArrayField",
                "shortDescription": {
                  "text": "Volatile array field"
                },
                "fullDescription": {
                  "text": "Reports array fields that are declared 'volatile'. Such declarations may be confusing because accessing the array itself follows the rules for 'volatile' fields, but accessing the array's contents does not. Example: 'class Data {\n    private volatile int[] idx = new int[0];\n  }' If such volatile access is needed for array contents, consider using 'java.util.concurrent.atomic' classes instead: 'class Data {\n    private final AtomicIntegerArray idx = new AtomicIntegerArray(new int[0]);\n  }' Inspection ID: VolatileArrayField",
                  "markdown": "Reports array fields that are declared `volatile`. Such declarations may be confusing because accessing the array itself follows the rules for `volatile` fields, but accessing the array's contents does not.\n\n**Example:**\n\n\n      class Data {\n        private volatile int[] idx = new int[0];\n      }\n\n\nIf such volatile access is needed for array contents, consider using\n`java.util.concurrent.atomic` classes instead:\n\n\n      class Data {\n        private final AtomicIntegerArray idx = new AtomicIntegerArray(new int[0]);\n      }\n\nInspection ID: VolatileArrayField"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "VolatileArrayField",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Threading issues",
                      "index": 23,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryInheritDoc",
                "shortDescription": {
                  "text": "Unnecessary '{@inheritDoc}' Javadoc comment"
                },
                "fullDescription": {
                  "text": "Reports Javadoc comments that contain only an '{@inheritDoc}' tag. Since Javadoc copies the super class' comment if no comment is present, a comment containing only '{@inheritDoc}' adds nothing. Also, it reports the '{@inheritDoc}' usages in invalid locations, for example, in fields. Suggests removing the unnecessary Javadoc comment. Example: 'class Example implements Comparable<Example> {\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int compareTo(Example o) {\n      return 0;\n    }\n  }' After the quick-fix is applied: 'class Example implements Comparable<Example> {\n    @Override\n    public int compareTo(Example o) {\n      return 0;\n    }\n  }' Inspection ID: UnnecessaryInheritDoc",
                  "markdown": "Reports Javadoc comments that contain only an `{@inheritDoc}` tag. Since Javadoc copies the super class' comment if no comment is present, a comment containing only `{@inheritDoc}` adds nothing.\n\nAlso, it reports the `{@inheritDoc}` usages in invalid locations, for example, in fields.\n\nSuggests removing the unnecessary Javadoc comment.\n\n**Example:**\n\n\n      class Example implements Comparable<Example> {\n        /**\n         * {@inheritDoc}\n         */\n        @Override\n        public int compareTo(Example o) {\n          return 0;\n        }\n      }\n\nAfter the quick-fix is applied:\n\n\n      class Example implements Comparable<Example> {\n        @Override\n        public int compareTo(Example o) {\n          return 0;\n        }\n      }\n\n\nInspection ID: UnnecessaryInheritDoc"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnnecessaryInheritDoc",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Javadoc",
                      "index": 58,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NonReproducibleMathCall",
                "shortDescription": {
                  "text": "Non-reproducible call to 'Math'"
                },
                "fullDescription": {
                  "text": "Reports calls to 'java.lang.Math' methods, which results are not guaranteed to be reproduced precisely. In environments where reproducibility of results is required, 'java.lang.StrictMath' should be used instead. Inspection ID: NonReproducibleMathCall",
                  "markdown": "Reports calls to `java.lang.Math` methods, which results are not guaranteed to be reproduced precisely.\n\nIn environments where reproducibility of results is required, `java.lang.StrictMath`\nshould be used instead.\n\nInspection ID: NonReproducibleMathCall"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NonReproducibleMathCall",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Numeric issues",
                      "index": 25,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ParametersPerConstructor",
                "shortDescription": {
                  "text": "Constructor with too many parameters"
                },
                "fullDescription": {
                  "text": "Reports constructors whose number of parameters exceeds the specified maximum. Such objects are hard to instantiate, especially if some parameters are optional. Constructors with too many parameters may indicate that refactoring is necessary. Consider applying the builder pattern, for example. Example: 'public BankAccount(long accountNumber,\n                     String owner,\n                     double balance,\n                     double interestRate) {\n    // fields initialization\n  }' Configure the inspection: Use the Parameter limit field to specify the maximum allowed number of parameters in a constructor. Use the Ignore constructors with visibility list to specify whether the inspection should ignore constructors with specific visibility. Inspection ID: ParametersPerConstructor",
                  "markdown": "Reports constructors whose number of parameters exceeds the specified maximum. Such objects are hard to instantiate, especially if some parameters are optional. Constructors with too many parameters may indicate that refactoring is necessary. Consider applying the builder pattern, for example.\n\n**Example:**\n\n\n      public BankAccount(long accountNumber,\n                         String owner,\n                         double balance,\n                         double interestRate) {\n        // fields initialization\n      }\n\nConfigure the inspection:\n\n* Use the **Parameter limit** field to specify the maximum allowed number of parameters in a constructor.\n* Use the **Ignore constructors with visibility** list to specify whether the inspection should ignore constructors with specific visibility.\n\nInspection ID: ParametersPerConstructor"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ConstructorWithTooManyParameters",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Method metrics",
                      "index": 108,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MappingBeforeCount",
                "shortDescription": {
                  "text": "Mapping call before count()"
                },
                "fullDescription": {
                  "text": "Reports redundant 'Stream' API calls like 'map()', or 'boxed()' right before the 'count()' call. Such calls don't change the final count, so could be removed. It's possible that the code relies on a side effect from the lambda inside such a mapping call. However, relying on side effects inside the stream chain is extremely bad practice. There are no guarantees that the call will not be optimized out in future Java versions. Example: '// map() call is redundant\n  long count = list.stream().filter(s -> !s.isEmpty()).map(s -> s.trim()).count();' This inspection depends on the Java feature 'Stream and Optional API', which is available since Java 8. Inspection ID: MappingBeforeCount New in 2024.1",
                  "markdown": "Reports redundant `Stream` API calls like `map()`, or `boxed()` right before the `count()` call.\n\n\nSuch calls don't change the final count, so could be removed. It's possible that the code relies on\na side effect from the lambda inside such a mapping call. However, relying on side effects inside\nthe stream chain is extremely bad practice. There are no guarantees that the call will not be\noptimized out in future Java versions.\n\n**Example:**\n\n\n      // map() call is redundant\n      long count = list.stream().filter(s -> !s.isEmpty()).map(s -> s.trim()).count();\n\nThis inspection depends on the Java feature 'Stream and Optional API', which is available since Java 8.\n\nInspection ID: MappingBeforeCount\n\nNew in 2024.1"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MappingBeforeCount",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Verbose or redundant code constructs",
                      "index": 37,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NonExtendableApiUsage",
                "shortDescription": {
                  "text": "Class, interface, or method should not be extended"
                },
                "fullDescription": {
                  "text": "Reports classes, interfaces, and methods that extend, implement, or override API elements marked with '@ApiStatus.NonExtendable'. The '@ApiStatus.NonExtendable' annotation indicates that the class, interface, or method must not be extended, implemented, or overridden. Since casting such interfaces and classes to the internal library implementation is rather common, if a client provides a different implementation, you will get 'ClassCastException'. Adding new abstract methods to such classes and interfaces will break the compatibility with the client's implementations. Example: '// In upstream library code\n  @ApiStatus.NonExtendable\n  public interface MyService {\n    public void perform();\n  }\n\n  // In downstream client code\n  public class MyServiceImpl implements MyService {\n    @Override\n    public void perform() {\n      // ...\n    }\n  }' This inspection also detects the following problems related to applying the annotation incorrectly: Annotating classes/methods that cannot be extended/overridden Redundantly annotating methods from a class already annotated with '@ApiStatus.NonExtendable' Inspection ID: NonExtendableApiUsage",
                  "markdown": "Reports classes, interfaces, and methods that extend, implement, or override API elements marked with `@ApiStatus.NonExtendable`.\n\n\nThe `@ApiStatus.NonExtendable` annotation indicates that the class, interface, or method **must not be extended,\nimplemented, or overridden** .\nSince casting such interfaces and classes to the internal library implementation is rather common,\nif a client provides a different implementation, you will get `ClassCastException`.\nAdding new abstract methods to such classes and interfaces will break the compatibility with the client's implementations.\n\n**Example:**\n\n\n      // In upstream library code\n      @ApiStatus.NonExtendable\n      public interface MyService {\n        public void perform();\n      }\n\n      // In downstream client code\n      public class MyServiceImpl implements MyService {\n        @Override\n        public void perform() {\n          // ...\n        }\n      }\n\nThis inspection also detects the following problems related to applying the annotation incorrectly:\n\n* Annotating classes/methods that cannot be extended/overridden\n* Redundantly annotating methods from a class already annotated with `@ApiStatus.NonExtendable`\n\nInspection ID: NonExtendableApiUsage"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NonExtendableApiUsage",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JVM languages",
                      "index": 1,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnqualifiedFieldAccess",
                "shortDescription": {
                  "text": "Instance field access not qualified with 'this'"
                },
                "fullDescription": {
                  "text": "Reports field access operations that are not qualified with 'this' or some other qualifier. Some coding styles mandate that all field access operations are qualified to prevent confusion with local variable or parameter access. Example: 'class Foo {\n    int foo;\n\n    void bar() {\n      foo += 1;\n    }\n  }' After the quick-fix is applied: 'class Foo {\n    int foo;\n\n    void bar() {\n      this.foo += 1;\n    }\n  }' Inspection ID: UnqualifiedFieldAccess",
                  "markdown": "Reports field access operations that are not qualified with `this` or some other qualifier.\n\n\nSome coding styles mandate that all field access operations are qualified to prevent confusion with local\nvariable or parameter access.\n\n**Example:**\n\n\n      class Foo {\n        int foo;\n\n        void bar() {\n          foo += 1;\n        }\n      }\n\nAfter the quick-fix is applied:\n\n\n      class Foo {\n        int foo;\n\n        void bar() {\n          this.foo += 1;\n        }\n      }\n\nInspection ID: UnqualifiedFieldAccess"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnqualifiedFieldAccess",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MismatchedCollectionQueryUpdate",
                "shortDescription": {
                  "text": "Mismatched query and update of collection"
                },
                "fullDescription": {
                  "text": "Reports collections whose contents are either queried and not updated, or updated and not queried. Such inconsistent queries and updates are pointless and may indicate either dead code or a typo. Use the inspection settings to specify name patterns that correspond to update/query methods. Query methods that return an element are automatically detected, and only those that write data to an output parameter (for example, an 'OutputStream') need to be specified. Example: Suppose you have your custom 'FixedStack' class with method 'store()': 'public class FixedStack<T> extends Collection<T> {\n    public T store(T t) {\n      // implementation\n    }\n  }' You can add 'store' to the update methods table in order to report mismatched queries like: 'void test(int i) {\n    FixedStack<Integer> stack = new FixedStack<>();\n    stack.store(i);\n  }' Inspection ID: MismatchedCollectionQueryUpdate",
                  "markdown": "Reports collections whose contents are either queried and not updated, or updated and not queried.\n\n\nSuch inconsistent queries and updates are pointless and may indicate\neither dead code or a typo.\n\n\nUse the inspection settings to specify name patterns that correspond to update/query methods.\nQuery methods that return an element are automatically detected, and only\nthose that write data to an output parameter (for example, an `OutputStream`) need to be specified.\n\n\n**Example:**\n\nSuppose you have your custom `FixedStack` class with method `store()`:\n\n\n      public class FixedStack<T> extends Collection<T> {\n        public T store(T t) {\n          // implementation\n        }\n      }\n\nYou can add `store` to the update methods table in order to report mismatched queries like:\n\n\n      void test(int i) {\n        FixedStack<Integer> stack = new FixedStack<>();\n        stack.store(i);\n      }\n\nInspection ID: MismatchedCollectionQueryUpdate"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MismatchedQueryAndUpdateOfCollection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CharacterComparison",
                "shortDescription": {
                  "text": "Character comparison"
                },
                "fullDescription": {
                  "text": "Reports ordinal comparisons of 'char' values. In an internationalized environment, such comparisons are rarely correct. Inspection ID: CharacterComparison",
                  "markdown": "Reports ordinal comparisons of `char` values. In an internationalized environment, such comparisons are rarely correct.\n\nInspection ID: CharacterComparison"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CharacterComparison",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Internationalization",
                      "index": 3,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SafeVarargsOnNonReifiableType",
                "shortDescription": {
                  "text": "@SafeVarargs is not applicable to reifiable types"
                },
                "fullDescription": {
                  "text": "Reports reifiable type of variable arity method annotated with '@SafeVarargs'. In this case, the annotation is redundant. Example: '@SafeVarargs\n    public final void processStrings(String... strings) {\n    }' This inspection depends on the Java feature 'Annotations', which is available since Java 5. Inspection ID: SafeVarargsOnNonReifiableType",
                  "markdown": "Reports reifiable type of variable arity method annotated with `@SafeVarargs`. In this case, the annotation is redundant.\n\n**Example:**\n\n\n        @SafeVarargs\n        public final void processStrings(String... strings) {\n        }\n\nThis inspection depends on the Java feature 'Annotations', which is available since Java 5.\n\nInspection ID: SafeVarargsOnNonReifiableType"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SafeVarargsOnNonReifiableType",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Declaration redundancy",
                      "index": 9,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SynchronizeOnThis",
                "shortDescription": {
                  "text": "Synchronization on 'this'"
                },
                "fullDescription": {
                  "text": "Reports synchronization on 'this' or 'class' expressions. The reported constructs include 'synchronized' blocks and calls to 'wait()', 'notify()' or 'notifyAll()'. There are several reasons synchronization on 'this' or 'class' expressions may be a bad idea: it makes synchronization a part of the external interface of the class, which makes a future change to a different locking mechanism difficult, it becomes hard to track just who is locking on a given object, it makes a denial-of-service attack possible, either on purpose or it can happen easily by accident when subclassing. As an alternative, consider synchronizing on a 'private final' lock object, access to which can be completely controlled. Example: 'public void print() {\n    synchronized(this) { // warning: Lock operations on 'this' may have unforeseen side-effects\n      System.out.println(\"synchronized\");\n    }\n  }' Inspection ID: SynchronizeOnThis",
                  "markdown": "Reports synchronization on `this` or `class` expressions. The reported constructs include `synchronized` blocks and calls to `wait()`, `notify()` or `notifyAll()`.\n\nThere are several reasons synchronization on `this` or `class` expressions may be a bad idea:\n\n1. it makes synchronization a part of the external interface of the class, which makes a future change to a different locking mechanism difficult,\n2. it becomes hard to track just who is locking on a given object,\n3. it makes a denial-of-service attack possible, either on purpose or it can happen easily by accident when subclassing.\n\nAs an alternative, consider synchronizing on a `private final` lock object, access to which can be completely controlled.\n\n**Example:**\n\n\n      public void print() {\n        synchronized(this) { // warning: Lock operations on 'this' may have unforeseen side-effects\n          System.out.println(\"synchronized\");\n        }\n      }\n      \nInspection ID: SynchronizeOnThis"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SynchronizeOnThis",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Threading issues",
                      "index": 23,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedAssignment",
                "shortDescription": {
                  "text": "Unused assignment"
                },
                "fullDescription": {
                  "text": "Reports assignment values that are not used after assignment. If the assignment value is unused, it's better to remove the assignment to shorten the code and avoid redundant allocations. The following cases are reported: variables that are never read after assignment variables that are always overwritten with a new value before being read variable initializers that are redundant (for one of the two reasons above) Configure the inspection: Use the Report redundant initializers option to report redundant initializers: 'int getI() {\n    int i = 0; // redundant initialization\n    i = 2;\n    return i;\n  }' Use the Report prefix expressions that can be replaced with binary expressions option to report cases where an '++i' expression may be replaced with 'i + 1': 'int preInc(int value) {\n    int res = value;\n    return ++res;\n  }' Use the Report postfix expressions where the changed value is not used option to report 'i++' cases where the value of 'i' is not used later: 'int postInc(int value) {\n    int res = value;\n    return res++;\n  }' Use the Report pattern variables whose values are never used option to report cases where the value of a pattern variable is overwritten before it is read: 'if (object instanceof String s) {\n      s = \"hello\";\n      System.out.println(s);\n  }' Use the Report iteration parameters whose values are never used option to report cases where the value of an iteration parameter of an enhanced 'for' statements is overwritten before it is read: 'for (String arg : args) {\n      arg = \"test\";\n      System.out.println(arg);\n  }' Inspection ID: UnusedAssignment",
                  "markdown": "Reports assignment values that are not used after assignment. If the assignment value is unused, it's better to remove the assignment to shorten the code and avoid redundant allocations.\n\nThe following cases are reported:\n\n* variables that are never read after assignment\n* variables that are always overwritten with a new value before being read\n* variable initializers that are redundant (for one of the two reasons above)\n\nConfigure the inspection:\n\n\nUse the **Report redundant initializers** option to report redundant initializers:\n\n\n      int getI() {\n        int i = 0; // redundant initialization\n        i = 2;\n        return i;\n      }\n\n\nUse the **Report prefix expressions that can be replaced with binary expressions** option to report cases\nwhere an `++i` expression may be replaced with `i + 1`:\n\n\n      int preInc(int value) {\n        int res = value;\n        return ++res;\n      }\n\n\nUse the **Report postfix expressions where the changed value is not used** option to report `i++` cases\nwhere the value of `i` is not used later:\n\n\n      int postInc(int value) {\n        int res = value;\n        return res++;\n      }\n\n\nUse the **Report pattern variables whose values are never used** option to report cases where the value of a pattern variable\nis overwritten before it is read:\n\n\n      if (object instanceof String s) {\n          s = \"hello\";\n          System.out.println(s);\n      }\n\n\nUse the **Report iteration parameters whose values are never used** option to report cases where the value of an iteration parameter\nof an enhanced `for` statements is overwritten before it is read:\n\n\n      for (String arg : args) {\n          arg = \"test\";\n          System.out.println(arg);\n      }\n\nInspection ID: UnusedAssignment"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnusedAssignment",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JavaModuleDefinition",
                "shortDescription": {
                  "text": "Java module definition problems"
                },
                "fullDescription": {
                  "text": "Reports miscellaneous problems with the module-info.java file. For example, it reports a service which is provided but not exported or used. Example: 'module myModule {\n  // Service is provided but its containing package is not exported\n  provides com.example.MyService with com.example.MyServiceImpl;\n}' Inspection ID: JavaModuleDefinition",
                  "markdown": "Reports miscellaneous problems with the module-info.java file. For example, it reports a service which is provided but not exported or used.\n\n**Example:**\n\n\n    module myModule {\n      // Service is provided but its containing package is not exported\n      provides com.example.MyService with com.example.MyServiceImpl;\n    }\n\nInspection ID: JavaModuleDefinition"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JavaModuleDefinition",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Declaration redundancy",
                      "index": 9,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HashCodeUsesNonFinalVariable",
                "shortDescription": {
                  "text": "Non-final field referenced in 'hashCode()'"
                },
                "fullDescription": {
                  "text": "Reports implementations of 'hashCode()' that access non-'final' variables. Such access may result in 'hashCode()' returning different values at different points in the object's lifecycle, which may in turn cause problems when using the standard collections classes. Example: 'class Drink {\n    String name;\n    Drink(String name) { this.name = name; }\n    @Override public int hashCode() {\n      return Objects.hash(name); //warning\n    }\n  }\n  ...\n    Drink coffee = new Drink(\"Coffee\");\n    priceMap.put(coffee, 10.0);\n    coffee.name = \"Tea\";\n    double coffeePrice = priceMap.get(coffee); //not found' A quick-fix is suggested to make the field final: 'class Drink {\n    final String name;\n    ...\n  }' Inspection ID: HashCodeUsesNonFinalVariable",
                  "markdown": "Reports implementations of `hashCode()` that access non-`final` variables.\n\n\nSuch access may result in `hashCode()`\nreturning different values at different points in the object's lifecycle, which may in turn cause problems when\nusing the standard collections classes.\n\n**Example:**\n\n\n      class Drink {\n        String name;\n        Drink(String name) { this.name = name; }\n        @Override public int hashCode() {\n          return Objects.hash(name); //warning\n        }\n      }\n      ...\n        Drink coffee = new Drink(\"Coffee\");\n        priceMap.put(coffee, 10.0);\n        coffee.name = \"Tea\";\n        double coffeePrice = priceMap.get(coffee); //not found\n\nA quick-fix is suggested to make the field final:\n\n\n      class Drink {\n        final String name;\n        ...\n      }\n\nInspection ID: HashCodeUsesNonFinalVariable"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NonFinalFieldReferencedInHashCode",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ProtectedField",
                "shortDescription": {
                  "text": "Protected field"
                },
                "fullDescription": {
                  "text": "Reports 'protected' fields. Constants (that is, variables marked 'static' or 'final') are not reported. Example: 'public class A {\n    protected Object object;              // warning\n    protected final static int MODE = 0;  // constant, no warning\n  }' Inspection ID: ProtectedField",
                  "markdown": "Reports `protected` fields.\n\nConstants (that is, variables marked `static` or `final`) are not reported.\n\n**Example:**\n\n\n      public class A {\n        protected Object object;              // warning\n        protected final static int MODE = 0;  // constant, no warning\n      }\n\nInspection ID: ProtectedField"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ProtectedField",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Encapsulation",
                      "index": 100,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AssignmentUsedAsCondition",
                "shortDescription": {
                  "text": "Assignment used as condition"
                },
                "fullDescription": {
                  "text": "Reports assignments that are used as a condition of an 'if', 'while', 'for', or 'do' statement, or a conditional expression. Although occasionally intended, this usage is confusing and may indicate a typo, for example, '=' instead of '=='. The quick-fix replaces '=' with '=='. Example: 'void update(String str, boolean empty) {\n    // Warning: 'empty' is reassigned,\n    // not compared to str.isEmpty()\n    if (empty = str.isEmpty()) {\n      ...\n    }\n  }' After the quick-fix is applied: 'void update(String str, boolean empty) {\n    if (empty == str.isEmpty()) {\n      ...\n    }\n  }' Inspection ID: AssignmentUsedAsCondition",
                  "markdown": "Reports assignments that are used as a condition of an `if`, `while`, `for`, or `do` statement, or a conditional expression.\n\nAlthough occasionally intended, this usage is confusing and may indicate a typo, for example, `=` instead of `==`.\n\nThe quick-fix replaces `=` with `==`.\n\n**Example:**\n\n\n      void update(String str, boolean empty) {\n        // Warning: 'empty' is reassigned,\n        // not compared to str.isEmpty()\n        if (empty = str.isEmpty()) {\n          ...\n        }\n      }\n\nAfter the quick-fix is applied:\n\n\n      void update(String str, boolean empty) {\n        if (empty == str.isEmpty()) {\n          ...\n        }\n      }\n\nInspection ID: AssignmentUsedAsCondition"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AssignmentUsedAsCondition",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Assignment issues",
                      "index": 64,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InstanceofThis",
                "shortDescription": {
                  "text": "'instanceof' check for 'this'"
                },
                "fullDescription": {
                  "text": "Reports usages of 'instanceof' or 'getClass() == SomeClass.class' in which a 'this' expression is checked. Such expressions indicate a failure of the object-oriented design, and should be replaced by polymorphic constructions. Example: 'class Super {\n  void process() {\n    if (this instanceof Sub) { // warning\n      doSomething();\n    } else {\n      doSomethingElse();\n    }\n  }\n}\n  \nclass Sub extends Super {}' To fix the problem, use an overriding method: 'class Super {\n  void process() {\n    doSomethingElse();\n  }\n}\n  \nclass Sub extends Super {\n  @Override\n  void process() {\n    doSomething();\n  }\n}' Inspection ID: InstanceofThis",
                  "markdown": "Reports usages of `instanceof` or `getClass() == SomeClass.class` in which a `this` expression is checked.\n\nSuch expressions indicate a failure of the object-oriented design, and should be replaced by\npolymorphic constructions.\n\nExample:\n\n\n    class Super {\n      void process() {\n        if (this instanceof Sub) { // warning\n          doSomething();\n        } else {\n          doSomethingElse();\n        }\n      }\n    }\n      \n    class Sub extends Super {}\n\nTo fix the problem, use an overriding method:\n\n\n    class Super {\n      void process() {\n        doSomethingElse();\n      }\n    }\n      \n    class Sub extends Super {\n      @Override\n      void process() {\n        doSomething();\n      }\n    }  \n\nInspection ID: InstanceofThis"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "InstanceofThis",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Abstraction issues",
                      "index": 63,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PackageInMultipleModules",
                "shortDescription": {
                  "text": "Package with classes in multiple modules"
                },
                "fullDescription": {
                  "text": "Reports non-empty packages that are present in several modules. When packages are contained in several modules, it is very easy to create a class with the same name in two modules. A module which depends on these modules will see a conflict if it tries to use such a class. The Java Platform Module System disallows packages contained in more than one module (also called split packages) Available only from Code | Inspect Code or Code | Analyze Code | Run Inspection by Name and isn't reported in the editor. Inspection ID: PackageInMultipleModules",
                  "markdown": "Reports non-empty packages that are present in several modules. When packages are contained in several modules, it is very easy to create a class with the same name in two modules. A module which depends on these modules will see a conflict if it tries to use such a class. The Java Platform Module System disallows packages contained in more than one module (also called *split packages* )\n\nAvailable only from **Code \\| Inspect Code** or\n**Code \\| Analyze Code \\| Run Inspection by Name** and isn't reported in the editor.\n\nInspection ID: PackageInMultipleModules"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PackageInMultipleModules",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Packaging issues",
                      "index": 36,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FloatingPointEquality",
                "shortDescription": {
                  "text": "Floating-point equality comparison"
                },
                "fullDescription": {
                  "text": "Reports floating-point values that are being compared using the '==' or '!=' operator. Floating-point values are inherently inaccurate, and comparing them for exact equality is seldom the desired semantics. This inspection ignores comparisons with zero and infinity literals. Example: 'void m(double d1, double d2) {\n    if (d1 == d2) {}\n  }' Inspection ID: FloatingPointEquality",
                  "markdown": "Reports floating-point values that are being compared using the `==` or `!=` operator.\n\nFloating-point values are inherently inaccurate, and comparing them for exact equality is seldom the desired semantics.\n\nThis inspection ignores comparisons with zero and infinity literals.\n\n**Example:**\n\n\n      void m(double d1, double d2) {\n        if (d1 == d2) {}\n      }\n\nInspection ID: FloatingPointEquality"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "FloatingPointEquality",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Numeric issues",
                      "index": 25,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SequencedCollectionMethodCanBeUsed",
                "shortDescription": {
                  "text": "SequencedCollection method can be used"
                },
                "fullDescription": {
                  "text": "Reports collection API method calls that can be simplified using 'SequencedCollection' methods. The following conversions are supported: 'list.add(0, element)' → 'list.addFirst(element);' 'list.get(0)' → 'list.getFirst();' 'list.get(list.size() - 1)' → 'list.getLast();' 'list.remove(0)' → 'list.removeFirst();' 'list.remove(list.size() - 1)' → 'list.removeLast();' 'collection.iterator().next()' → 'collection.getFirst();' This inspection depends on the Java feature 'Sequenced Collections', which is available since Java 21. Inspection ID: SequencedCollectionMethodCanBeUsed New in 2023.3",
                  "markdown": "Reports collection API method calls that can be simplified using `SequencedCollection` methods.\n\nThe following conversions are supported:\n\n* `list.add(0, element)` → `list.addFirst(element);`\n* `list.get(0)` → `list.getFirst();`\n* `list.get(list.size() - 1)` → `list.getLast();`\n* `list.remove(0)` → `list.removeFirst();`\n* `list.remove(list.size() - 1)` → `list.removeLast();`\n* `collection.iterator().next()` → `collection.getFirst();`\n\nThis inspection depends on the Java feature 'Sequenced Collections', which is available since Java 21.\n\nInspection ID: SequencedCollectionMethodCanBeUsed\n\nNew in 2023.3"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SequencedCollectionMethodCanBeUsed",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level migration aids/Java 21",
                      "index": 161,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PublicField",
                "shortDescription": {
                  "text": "'public' field"
                },
                "fullDescription": {
                  "text": "Reports 'public' fields. Constants (fields marked with 'static' and 'final') are not reported. Example: 'class Main {\n    public String name;\n  }' After the quick-fix is applied: 'class Main {\n    private String name;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n  }' Configure the inspection: Use the Ignore If Annotated By list to specify annotations to ignore. The inspection will ignore fields with any of these annotations. Use the Ignore 'public final' fields of an enum option to ignore 'public final' fields of the 'enum' type. Inspection ID: PublicField",
                  "markdown": "Reports `public` fields. Constants (fields marked with `static` and `final`) are not reported.\n\n**Example:**\n\n\n      class Main {\n        public String name;\n      }\n\nAfter the quick-fix is applied:\n\n\n      class Main {\n        private String name;\n\n        public String getName() {\n            return name;\n        }\n\n        public void setName(String name) {\n            this.name = name;\n        }\n      }\n\nConfigure the inspection:\n\n* Use the **Ignore If Annotated By** list to specify annotations to ignore. The inspection will ignore fields with any of these annotations.\n* Use the **Ignore 'public final' fields of an enum** option to ignore `public final` fields of the `enum` type.\n\nInspection ID: PublicField"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "PublicField",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Encapsulation",
                      "index": 100,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SerialAnnotationUsedOnWrongMember",
                "shortDescription": {
                  "text": "'@Serial' annotation used on wrong member"
                },
                "fullDescription": {
                  "text": "Reports methods and fields in the 'Serializable' and 'Externalizable' classes that are not suitable to be annotated with the 'java.io.Serial' annotation. Examples: 'class Test implements Serializable {\n  @Serial // The annotated field is not a part of serialization mechanism because it's not final\n  private static long serialVersionUID = 7874493593505141603L;\n\n  @Serial // The annotated method is not a part of the serialization mechanism because it's not private\n  void writeObject(ObjectOutputStream out) throws IOException {\n  }\n}' 'class Test implements Externalizable {\n  @Serial // The annotated method is not a part of the serialization mechanism as it's inside Externalizable class\n  private void writeObject(ObjectOutputStream out) throws IOException {\n  }\n}' For information about all valid cases, refer to the Javadoc of the 'java.io.Serial' class. This inspection depends on the Java feature '@Serial annotation', which is available since Java 14. Inspection ID: SerialAnnotationUsedOnWrongMember New in 2020.3",
                  "markdown": "Reports methods and fields in the `Serializable` and `Externalizable` classes that are not suitable to be annotated with the `java.io.Serial` annotation.\n\n**Examples:**\n\n\n    class Test implements Serializable {\n      @Serial // The annotated field is not a part of serialization mechanism because it's not final\n      private static long serialVersionUID = 7874493593505141603L;\n\n      @Serial // The annotated method is not a part of the serialization mechanism because it's not private\n      void writeObject(ObjectOutputStream out) throws IOException {\n      }\n    }\n\n\n    class Test implements Externalizable {\n      @Serial // The annotated method is not a part of the serialization mechanism as it's inside Externalizable class\n      private void writeObject(ObjectOutputStream out) throws IOException {\n      }\n    }\n\nFor information about all valid cases, refer to the Javadoc of the `java.io.Serial` class.\n\nThis inspection depends on the Java feature '@Serial annotation', which is available since Java 14.\n\nInspection ID: SerialAnnotationUsedOnWrongMember\n\nNew in 2020.3"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "serial",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Serialization issues",
                      "index": 18,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ThrowsRuntimeException",
                "shortDescription": {
                  "text": "Unchecked exception declared in 'throws' clause"
                },
                "fullDescription": {
                  "text": "Reports declaration of an unchecked exception ('java.lang.RuntimeException' or one of its subclasses) in the 'throws' clause of a method. Declarations of unchecked exceptions are not required and may be deleted or moved to a Javadoc '@throws' tag. Example: 'public class InvalidDataException extends RuntimeException {}\n\n  class TextEditor {\n    void readSettings() throws InvalidDataException {} // warning: Unchecked exception 'InvalidDataException' declared in 'throws' clause\n  }' Inspection ID: ThrowsRuntimeException",
                  "markdown": "Reports declaration of an unchecked exception (`java.lang.RuntimeException` or one of its subclasses) in the `throws` clause of a method.\n\nDeclarations of unchecked exceptions are not required and may be deleted or moved to a Javadoc `@throws` tag.\n\n**Example:**\n\n\n      public class InvalidDataException extends RuntimeException {}\n\n      class TextEditor {\n        void readSettings() throws InvalidDataException {} // warning: Unchecked exception 'InvalidDataException' declared in 'throws' clause\n      }\n\nInspection ID: ThrowsRuntimeException"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ThrowsRuntimeException",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Error handling",
                      "index": 10,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NewObjectEquality",
                "shortDescription": {
                  "text": "New object is compared using '=='"
                },
                "fullDescription": {
                  "text": "Reports code that applies '==' or '!=' to a newly allocated object instead of calling 'equals()'. The references to newly allocated objects cannot point at existing objects, thus the comparison will always evaluate to 'false'. The inspection may also report newly created objects returned from simple methods. Example: 'void test(Object obj) {\n    if (new Object() == obj) {...}\n  }' After the quick-fix is applied: 'void test(Object obj) {\n    if (new Object().equals(obj)) {...}\n  }' New in 2018.3 Inspection ID: NewObjectEquality",
                  "markdown": "Reports code that applies `==` or `!=` to a newly allocated object instead of calling `equals()`.\n\n\nThe references to newly allocated objects cannot point at existing objects,\nthus the comparison will always evaluate to `false`. The inspection may also report newly\ncreated objects returned from simple methods.\n\n**Example:**\n\n\n      void test(Object obj) {\n        if (new Object() == obj) {...}\n      }\n\nAfter the quick-fix is applied:\n\n\n      void test(Object obj) {\n        if (new Object().equals(obj)) {...}\n      }\n\n\nNew in 2018.3\n\nInspection ID: NewObjectEquality"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NewObjectEquality",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JNDIResource",
                "shortDescription": {
                  "text": "JNDI resource opened but not safely closed"
                },
                "fullDescription": {
                  "text": "Reports JNDI resources that are not safely closed. JNDI resources reported by this inspection include 'javax.naming.InitialContext', and 'javax.naming.NamingEnumeration'. By default, the inspection assumes that the resources can be closed by any method with 'close' or 'cleanup' in its name. Example: 'Object findObject(Properties properties, String name) throws NamingException {\n    Context context = new InitialContext(properties); //context is not closed\n    return context.lookup(name);\n  }' Use the following options to configure the inspection: Whether a JNDI Resource is allowed to be opened inside a 'try' block. This style is less desirable because it is more verbose than opening a resource in front of a 'try' block. Whether the resource can be closed by any method call with the resource passed as argument. Inspection ID: JNDIResource",
                  "markdown": "Reports JNDI resources that are not safely closed. JNDI resources reported by this inspection include `javax.naming.InitialContext`, and `javax.naming.NamingEnumeration`.\n\n\nBy default, the inspection assumes that the resources can be closed by any method with\n'close' or 'cleanup' in its name.\n\n**Example:**\n\n\n      Object findObject(Properties properties, String name) throws NamingException {\n        Context context = new InitialContext(properties); //context is not closed\n        return context.lookup(name);\n      }\n\n\nUse the following options to configure the inspection:\n\n* Whether a JNDI Resource is allowed to be opened inside a `try` block. This style is less desirable because it is more verbose than opening a resource in front of a `try` block.\n* Whether the resource can be closed by any method call with the resource passed as argument.\n\nInspection ID: JNDIResource"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JNDIResourceOpenedButNotSafelyClosed",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Resource management",
                      "index": 109,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TryWithIdenticalCatches",
                "shortDescription": {
                  "text": "Identical 'catch' branches in 'try' statement"
                },
                "fullDescription": {
                  "text": "Reports identical 'catch' sections in a single 'try' statement. Collapsing such sections into one multi-catch block reduces code duplication and prevents the situations when one 'catch' section is updated, and another one is not. Example: 'try {\n        doSmth();\n    }\n    catch (IOException e) {\n        LOG.error(e);\n    }\n    catch (URISyntaxException e) {\n        LOG.error(e);\n    }' A quick-fix is available to make the code more compact: 'try {\n        doSmth();\n    }\n    catch (IOException | URISyntaxException e) {\n        LOG.error(e);\n    }' This inspection depends on the Java feature 'Multi-catches', which is available since Java 7. Inspection ID: TryWithIdenticalCatches",
                  "markdown": "Reports identical `catch` sections in a single `try` statement.\n\nCollapsing such sections into one *multi-catch* block reduces code duplication and prevents\nthe situations when one `catch` section is updated, and another one is not.\n\n**Example:**\n\n\n        try {\n            doSmth();\n        }\n        catch (IOException e) {\n            LOG.error(e);\n        }\n        catch (URISyntaxException e) {\n            LOG.error(e);\n        }\n\nA quick-fix is available to make the code more compact:\n\n\n        try {\n            doSmth();\n        }\n        catch (IOException | URISyntaxException e) {\n            LOG.error(e);\n        }\n\nThis inspection depends on the Java feature 'Multi-catches', which is available since Java 7.\n\nInspection ID: TryWithIdenticalCatches"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "TryWithIdenticalCatches",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level migration aids/Java 7",
                      "index": 128,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LambdaCanBeReplacedWithAnonymous",
                "shortDescription": {
                  "text": "Lambda can be replaced with anonymous class"
                },
                "fullDescription": {
                  "text": "Reports lambda expressions that can be replaced with anonymous classes. Expanding lambda expressions to anonymous classes may be useful if you need to implement other methods inside an anonymous class. Example: 's -> System.out.println(s)' After the quick-fix is applied: 'new Consumer<String>() {\n  @Override\n  public void accept(String s) {\n    System.out.println(s);\n  }\n}' This inspection depends on the Java feature 'Lambda expressions', which is available since Java 8. Inspection ID: LambdaCanBeReplacedWithAnonymous",
                  "markdown": "Reports lambda expressions that can be replaced with anonymous classes.\n\n\nExpanding lambda expressions to anonymous classes may be useful if you need to implement other\nmethods inside an anonymous class.\n\nExample:\n\n\n      s -> System.out.println(s)\n\nAfter the quick-fix is applied:\n\n    new Consumer<String>() {\n      @Override\n      public void accept(String s) {\n        System.out.println(s);\n      }\n    }\n\nThis inspection depends on the Java feature 'Lambda expressions', which is available since Java 8.\n\nInspection ID: LambdaCanBeReplacedWithAnonymous"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "LambdaCanBeReplacedWithAnonymous",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantCompareCall",
                "shortDescription": {
                  "text": "Redundant 'compare()' method call"
                },
                "fullDescription": {
                  "text": "Reports comparisons in which the 'compare' method is superfluous. Example: 'boolean result = Integer.compare(a, b) == 0;' After the quick-fix is applied: 'boolean result = a == b;' Inspection ID: RedundantCompareCall New in 2018.2",
                  "markdown": "Reports comparisons in which the `compare` method is superfluous.\n\nExample:\n\n\n      boolean result = Integer.compare(a, b) == 0;\n\nAfter the quick-fix is applied:\n\n\n      boolean result = a == b;\n\nInspection ID: RedundantCompareCall\n\nNew in 2018.2"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RedundantCompareCall",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Verbose or redundant code constructs",
                      "index": 37,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TextBlockBackwardMigration",
                "shortDescription": {
                  "text": "Text block can be replaced with regular string literal"
                },
                "fullDescription": {
                  "text": "Reports text blocks that can be replaced with regular string literals. This may help to downgrade for backward compatibility with earlier Java versions. Example: 'Object obj = engine.eval(\"\"\"\n                           function hello() {\n                             print('\"Hello, world\"');\n                           }\n\n                           hello();\n                           \"\"\");' After the quick fix is applied: 'Object obj = engine.eval(\"function hello() {\\n\" +\n                           \"  print('\\\"Hello, world\\\"');\\n\" +\n                           \"}\\n\" +\n                           \"\\n\" +\n                           \"hello();\\n\");' This inspection depends on the Java feature 'Text block literals', which is available since Java 15. Inspection ID: TextBlockBackwardMigration New in 2019.3",
                  "markdown": "Reports text blocks that can be replaced with regular string literals. This may help to downgrade for backward compatibility with earlier Java versions.\n\n**Example:**\n\n\n      Object obj = engine.eval(\"\"\"\n                               function hello() {\n                                 print('\"Hello, world\"');\n                               }\n\n                               hello();\n                               \"\"\");\n\nAfter the quick fix is applied:\n\n\n      Object obj = engine.eval(\"function hello() {\\n\" +\n                               \"  print('\\\"Hello, world\\\"');\\n\" +\n                               \"}\\n\" +\n                               \"\\n\" +\n                               \"hello();\\n\");\n\nThis inspection depends on the Java feature 'Text block literals', which is available since Java 15.\n\nInspection ID: TextBlockBackwardMigration\n\nNew in 2019.3"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "TextBlockBackwardMigration",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level migration aids/Java 15",
                      "index": 106,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EmptyClass",
                "shortDescription": {
                  "text": "Empty class"
                },
                "fullDescription": {
                  "text": "Reports empty classes and empty Java files. A class is empty if it doesn't contain any fields, methods, constructors, or initializers. Empty classes are sometimes left over after significant changes or refactorings. Example: 'class Example {\n    List<String> getList() {\n       return new ArrayList<>() {\n\n       };\n    }\n  }' After the quick-fix is applied: 'class Example {\n    List<String> getList() {\n       return new ArrayList<>();\n    }\n  }' Configure the inspection: Use the Ignore if annotated by option to specify special annotations. The inspection will ignore the classes marked with these annotations. Use the Ignore class if it is a parametrization of a super type option to ignore classes that parameterize a superclass. For example: 'class MyList extends ArrayList<String> {}' Use the Ignore subclasses of java.lang.Throwable to ignore classes that extend 'java.lang.Throwable'. Use the Comments count as content option to ignore classes that contain comments. Inspection ID: EmptyClass",
                  "markdown": "Reports empty classes and empty Java files.\n\nA class is empty if it doesn't contain any fields, methods, constructors, or initializers. Empty classes are sometimes left over\nafter significant changes or refactorings.\n\n**Example:**\n\n\n      class Example {\n        List<String> getList() {\n           return new ArrayList<>() {\n\n           };\n        }\n      }\n\nAfter the quick-fix is applied:\n\n\n      class Example {\n        List<String> getList() {\n           return new ArrayList<>();\n        }\n      }\n\nConfigure the inspection:\n\n* Use the **Ignore if annotated by** option to specify special annotations. The inspection will ignore the classes marked with these annotations.\n*\n  Use the **Ignore class if it is a parametrization of a super type** option to ignore classes that parameterize a superclass. For example:\n\n      class MyList extends ArrayList<String> {}\n\n* Use the **Ignore subclasses of java.lang.Throwable** to ignore classes that extend `java.lang.Throwable`.\n* Use the **Comments count as content** option to ignore classes that contain comments.\n\nInspection ID: EmptyClass"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EmptyClass",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Class structure",
                      "index": 17,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConditionalCanBeOptional",
                "shortDescription": {
                  "text": "Conditional can be replaced with Optional"
                },
                "fullDescription": {
                  "text": "Reports null-check conditions and suggests replacing them with 'Optional' chains. Example: 'return str == null ? \"\" : str.trim();' After applying the quick-fix: 'return Optional.ofNullable(str).map(String::trim).orElse(\"\");' While the replacement is not always shorter, it could be helpful for further refactoring (for example, for changing the method return value to 'Optional'). Note that when a not-null branch of the condition returns null, the corresponding mapping step will produce an empty 'Optional' possibly changing the semantics. If it cannot be statically proven that semantics will be preserved, the quick-fix action name will contain the \"(may change semantics)\" notice, and the inspection highlighting will be turned off. This inspection depends on the Java feature 'Stream and Optional API', which is available since Java 8. Inspection ID: ConditionalCanBeOptional New in 2018.1",
                  "markdown": "Reports null-check conditions and suggests replacing them with `Optional` chains.\n\nExample:\n\n\n      return str == null ? \"\" : str.trim();\n\nAfter applying the quick-fix:\n\n\n      return Optional.ofNullable(str).map(String::trim).orElse(\"\");\n\nWhile the replacement is not always shorter, it could be helpful for further refactoring\n(for example, for changing the method return value to `Optional`).\n\nNote that when a not-null branch of the condition returns null, the corresponding mapping step will\nproduce an empty `Optional` possibly changing the semantics. If it cannot be statically\nproven that semantics will be preserved, the quick-fix action name will contain the \"(may change semantics)\"\nnotice, and the inspection highlighting will be turned off.\n\nThis inspection depends on the Java feature 'Stream and Optional API', which is available since Java 8.\n\nInspection ID: ConditionalCanBeOptional\n\nNew in 2018.1"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ConditionalCanBeOptional",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AssignmentToLambdaParameter",
                "shortDescription": {
                  "text": "Assignment to lambda parameter"
                },
                "fullDescription": {
                  "text": "Reports assignment to, or modification of lambda parameters. Although occasionally intended, this construct may be confusing and is often caused by a typo or use of a wrong variable. The quick-fix adds a declaration of a new variable. Example: 'list.forEach(s -> {\n    s = s.trim();\n    System.out.println(\"String: \" + s);\n  });' After the quick-fix is applied: 'list.forEach(s -> {\n    String trimmed = s.trim();\n    System.out.println(\"String: \" + trimmed);\n  });' Use the Ignore if assignment is a transformation of the original parameter option to ignore assignments that modify the parameter value based on its previous value. This inspection depends on the Java feature 'Lambda expressions', which is available since Java 8. Inspection ID: AssignmentToLambdaParameter",
                  "markdown": "Reports assignment to, or modification of lambda parameters. Although occasionally intended, this construct may be confusing and is often caused by a typo or use of a wrong variable.\n\nThe quick-fix adds a declaration of a new variable.\n\n**Example:**\n\n\n      list.forEach(s -> {\n        s = s.trim();\n        System.out.println(\"String: \" + s);\n      });\n\nAfter the quick-fix is applied:\n\n\n      list.forEach(s -> {\n        String trimmed = s.trim();\n        System.out.println(\"String: \" + trimmed);\n      });\n\nUse the **Ignore if assignment is a transformation of the original parameter** option to ignore assignments that modify the parameter\nvalue based on its previous value.\n\nThis inspection depends on the Java feature 'Lambda expressions', which is available since Java 8.\n\nInspection ID: AssignmentToLambdaParameter"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AssignmentToLambdaParameter",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Assignment issues",
                      "index": 64,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SystemGetenv",
                "shortDescription": {
                  "text": "Call to 'System.getenv()'"
                },
                "fullDescription": {
                  "text": "Reports calls to 'System.getenv()'. Calls to 'System.getenv()' are inherently unportable. Inspection ID: SystemGetenv",
                  "markdown": "Reports calls to `System.getenv()`. Calls to `System.getenv()` are inherently unportable.\n\nInspection ID: SystemGetenv"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CallToSystemGetenv",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Portability",
                      "index": 69,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConstantExpression",
                "shortDescription": {
                  "text": "Constant expression can be evaluated"
                },
                "fullDescription": {
                  "text": "Reports constant expressions, whose value can be evaluated statically, and suggests replacing them with their actual values. For example, you will be prompted to replace '2 + 2' with '4', or 'Math.sqrt(9.0)' with '3.0'. Inspection ID: ConstantExpression New in 2018.1",
                  "markdown": "Reports constant expressions, whose value can be evaluated statically, and suggests replacing them with their actual values. For example, you will be prompted to replace `2 + 2` with `4`, or `Math.sqrt(9.0)` with `3.0`.\n\nInspection ID: ConstantExpression\n\nNew in 2018.1"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ConstantExpression",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PackageDotHtmlMayBePackageInfo",
                "shortDescription": {
                  "text": "'package.html' may be converted to 'package-info.java'"
                },
                "fullDescription": {
                  "text": "Reports any 'package.html' files which are used for documenting packages. Since JDK 1.5, it is recommended that you use 'package-info.java' files instead, as such files can also contain package annotations. This way, package-info.java becomes a sole repository for package level annotations and documentation. Example: 'package.html' '<html>\n  <body>\n    Documentation example.\n  </body>\n</html>' After the quick-fix is applied: 'package-info.java' '/**\n * Documentation example.\n */\npackage com.sample;' Inspection ID: PackageDotHtmlMayBePackageInfo",
                  "markdown": "Reports any `package.html` files which are used for documenting packages.\n\nSince JDK 1.5, it is recommended that you use `package-info.java` files instead, as such\nfiles can also contain package annotations. This way, package-info.java becomes a\nsole repository for package level annotations and documentation.\n\nExample: `package.html`\n\n\n    <html>\n      <body>\n        Documentation example.\n      </body>\n    </html>\n\nAfter the quick-fix is applied: `package-info.java`\n\n\n    /**\n     * Documentation example.\n     */\n    package com.sample;\n\nInspection ID: PackageDotHtmlMayBePackageInfo"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PackageDotHtmlMayBePackageInfo",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Javadoc",
                      "index": 58,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LongLiteralsEndingWithLowercaseL",
                "shortDescription": {
                  "text": "'long' literal ending with 'l' instead of 'L'"
                },
                "fullDescription": {
                  "text": "Reports 'long' literals ending with lowercase 'l'. These literals may be confusing, as the lowercase 'l' looks very similar to a literal '1' (one). Example: 'long nights = 100l;' After the quick-fix is applied: 'long nights = 100L;' Inspection ID: LongLiteralsEndingWithLowercaseL",
                  "markdown": "Reports `long` literals ending with lowercase 'l'. These literals may be confusing, as the lowercase 'l' looks very similar to a literal '1' (one).\n\n**Example:**\n\n\n      long nights = 100l;\n\nAfter the quick-fix is applied:\n\n\n      long nights = 100L;\n\nInspection ID: LongLiteralsEndingWithLowercaseL"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "LongLiteralEndingWithLowercaseL",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Numeric issues",
                      "index": 25,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantArrayCreation",
                "shortDescription": {
                  "text": "Redundant array creation"
                },
                "fullDescription": {
                  "text": "Reports arrays that are created specifically to be passed as a varargs parameter. Example: 'Arrays.asList(new String[]{\"Hello\", \"world\"})' The quick-fix replaces the array initializer with individual arguments: 'Arrays.asList(\"Hello\", \"world\")' Inspection ID: RedundantArrayCreation",
                  "markdown": "Reports arrays that are created specifically to be passed as a varargs parameter.\n\nExample:\n\n`Arrays.asList(new String[]{\"Hello\", \"world\"})`\n\nThe quick-fix replaces the array initializer with individual arguments:\n\n`Arrays.asList(\"Hello\", \"world\")`\n\nInspection ID: RedundantArrayCreation"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RedundantArrayCreation",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Verbose or redundant code constructs",
                      "index": 37,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NonShortCircuitBoolean",
                "shortDescription": {
                  "text": "Non-short-circuit boolean expression"
                },
                "fullDescription": {
                  "text": "Reports usages of the non-short-circuit forms of boolean 'and' and 'or' ('&', '|', '&=' and '|='). Although the non-short-circuit versions are occasionally useful, in most cases the short-circuit forms ('&&' and '||') are intended and such unintentional usages may lead to subtle bugs. A quick-fix is suggested to use the short-circuit versions. Example: 'void foo(boolean x, boolean y, boolean z) {\n    if (x | y) { x |= z; }\n  }' After the quick-fix is applied: 'void foo(boolean x, boolean y) {\n    if (x || y) { x = x || z; }\n  }' Inspection ID: NonShortCircuitBoolean",
                  "markdown": "Reports usages of the non-short-circuit forms of boolean 'and' and 'or' (`&`, `|`, `&=` and `|=`). Although the non-short-circuit versions are occasionally useful, in most cases the short-circuit forms (`&&` and `||`) are intended and such unintentional usages may lead to subtle bugs.\n\n\nA quick-fix is suggested to use the short-circuit versions.\n\n**Example:**\n\n\n      void foo(boolean x, boolean y, boolean z) {\n        if (x | y) { x |= z; }\n      }\n\nAfter the quick-fix is applied:\n\n\n      void foo(boolean x, boolean y) {\n        if (x || y) { x = x || z; }\n      }\n\nInspection ID: NonShortCircuitBoolean"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NonShortCircuitBooleanExpression",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PatternValidation",
                "shortDescription": {
                  "text": "Validate annotated patterns"
                },
                "fullDescription": {
                  "text": "Reports expressions passed as arguments for '@Pattern' parameters and returned from '@Pattern'-annotated methods that do not match the specified pattern. Example: '@Pattern(\"\\\\d\\\\d-\\\\d\\\\d\\\\d\") String getId() {\n    return \"1\";\n  }' Use the Flag non compile-time constant expressions option to let the inspection report expressions with an unknown value and offer to add a substitution ('@Subst') annotation. Inspection ID: PatternValidation",
                  "markdown": "Reports expressions passed as arguments for `@Pattern` parameters and returned from `@Pattern`-annotated methods that do not match the specified pattern.\n\n**Example:**\n\n\n      @Pattern(\"\\\\d\\\\d-\\\\d\\\\d\\\\d\") String getId() {\n        return \"1\";\n      }\n\n\nUse the **Flag non compile-time constant expressions** option to let the inspection report expressions with\nan unknown value and offer to add a substitution (`@Subst`) annotation.\n\nInspection ID: PatternValidation"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PatternValidation",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Pattern validation",
                      "index": 114,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ThrowablePrintedToSystemOut",
                "shortDescription": {
                  "text": "'Throwable' printed to 'System.out'"
                },
                "fullDescription": {
                  "text": "Reports calls to 'System.out.println()' with an exception as an argument. Using print statements for logging exceptions hides the stack trace from you, which can complicate the investigation of the problem. It is recommended that you use logger instead. Calls to 'System.out.print()', 'System.err.println()', and 'System.err.print()' with an exception argument are also reported. It is better to use a logger to log exceptions instead. The provided quick-fix supports SLF4J and Log4j 2. It replaces 'System.out.println()' call with log calls Example: 'try {\n      foo();\n  } catch (Exception e) {\n      System.out.println(e);\n  }' After the quick-fix is applied: 'try {\n      foo();\n  } catch (Exception e) {\n    log.error(\"e: \", e);\n  }' Use the Log method for fix option to specify a method which it is used to log a message. Inspection ID: ThrowablePrintedToSystemOut",
                  "markdown": "Reports calls to `System.out.println()` with an exception as an argument.\n\nUsing print statements for logging exceptions hides the stack trace from you, which can complicate the investigation of the problem.\nIt is recommended that you use logger instead.\n\nCalls to `System.out.print()`, `System.err.println()`, and `System.err.print()` with an exception argument are also\nreported. It is better to use a logger to log exceptions instead.\n\nThe provided quick-fix supports **SLF4J** and **Log4j 2** .\nIt replaces `System.out.println()` call with log calls\n\n**Example:**\n\n\n      try {\n          foo();\n      } catch (Exception e) {\n          System.out.println(e);\n      }\n\nAfter the quick-fix is applied:\n\n\n      try {\n          foo();\n      } catch (Exception e) {\n        log.error(\"e: \", e);\n      }\n\n\nUse the **Log method for fix** option to specify a method which it is used to log a message.\n\nInspection ID: ThrowablePrintedToSystemOut"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ThrowablePrintedToSystemOut",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code maturity",
                      "index": 46,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantRecordConstructor",
                "shortDescription": {
                  "text": "Redundant record constructor"
                },
                "fullDescription": {
                  "text": "Reports redundant constructors declared inside Java records. Example 1: 'record Point(int x, int y) {\n    public Point {} // could be removed\n  }\n  \n  record Point(int x, int y) {\n    public Point(int x, int y) { // could be removed\n      this.x = x;\n      this.y = y;\n    }\n  }' The quick-fix removes the redundant constructors. Example 2: '// could be converted to compact constructor\n  record Range(int from, int to) {\n    public Range(int from, int to) {\n      if (from > to) throw new IllegalArgumentException();\n      this.from = from;\n      this.to = to;\n    }\n  }' The quick-fix converts this code into a compact constructor. This inspection depends on the Java feature 'Records', which is available since Java 16. Inspection ID: RedundantRecordConstructor New in 2020.1",
                  "markdown": "Reports redundant constructors declared inside Java records.\n\n**Example 1:**\n\n\n      record Point(int x, int y) {\n        public Point {} // could be removed\n      }\n      \n      record Point(int x, int y) {\n        public Point(int x, int y) { // could be removed\n          this.x = x;\n          this.y = y;\n        }\n      }\n\nThe quick-fix removes the redundant constructors.\n\n**Example 2:**\n\n\n       // could be converted to compact constructor\n      record Range(int from, int to) {\n        public Range(int from, int to) {\n          if (from > to) throw new IllegalArgumentException();\n          this.from = from;\n          this.to = to;\n        }\n      }\n\nThe quick-fix converts this code into a compact constructor.\n\nThis inspection depends on the Java feature 'Records', which is available since Java 16.\n\nInspection ID: RedundantRecordConstructor\n\nNew in 2020.1"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RedundantRecordConstructor",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Declaration redundancy",
                      "index": 9,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AmbiguousMethodCall",
                "shortDescription": {
                  "text": "Call to inherited method looks like call to local method"
                },
                "fullDescription": {
                  "text": "Reports calls to a superclass method from an anonymous, inner or local class, if a method with the same signature exists in the code surrounding the class. In this case it may seem that a method from the surrounding code is called, when in fact it is a call to a method from the superclass. To clarify the intent of the code, it is recommended to add an explicit 'super' qualifier to the method call. Example: 'class Parent {\n    void ambiguous(){}\n  }\n\n  class Example {\n    void ambiguous(){}\n\n    class Inner extends Parent {\n      void example(){\n        ambiguous(); //warning\n      }\n    }\n  }' After the quick-fix is applied: 'class Parent {\n    void ambiguous(){}\n  }\n\n  class Example {\n    void ambiguous(){}\n\n    class Inner extends Parent {\n      void example(){\n        super.ambiguous();\n      }\n    }\n  }' Inspection ID: AmbiguousMethodCall",
                  "markdown": "Reports calls to a superclass method from an anonymous, inner or local class, if a method with the same signature exists in the code surrounding the class. In this case it may seem that a method from the surrounding code is called, when in fact it is a call to a method from the superclass.\n\n\nTo clarify the intent of the code, it is recommended to add an explicit\n`super` qualifier to the method call.\n\n**Example:**\n\n\n      class Parent {\n        void ambiguous(){}\n      }\n\n      class Example {\n        void ambiguous(){}\n\n        class Inner extends Parent {\n          void example(){\n            ambiguous(); //warning\n          }\n        }\n      }\n      \nAfter the quick-fix is applied:\n\n\n      class Parent {\n        void ambiguous(){}\n      }\n\n      class Example {\n        void ambiguous(){}\n\n        class Inner extends Parent {\n          void example(){\n            super.ambiguous();\n          }\n        }\n      }\n\nInspection ID: AmbiguousMethodCall"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AmbiguousMethodCall",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Visibility",
                      "index": 73,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StaticInheritance",
                "shortDescription": {
                  "text": "Static inheritance"
                },
                "fullDescription": {
                  "text": "Reports interfaces that are implemented only to provide access to constants. This kind of inheritance is often confusing and may hide important dependency information. Inspection ID: StaticInheritance",
                  "markdown": "Reports interfaces that are implemented only to provide access to constants. This kind of inheritance is often confusing and may hide important dependency information.\n\n\nInspection ID: StaticInheritance"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "StaticInheritance",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Inheritance issues",
                      "index": 121,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantUnmodifiable",
                "shortDescription": {
                  "text": "Redundant usage of unmodifiable collection wrappers"
                },
                "fullDescription": {
                  "text": "Reports redundant calls to unmodifiable collection wrappers from the 'Collections' class. If the argument that is passed to an unmodifiable collection wrapper is already immutable, such a wrapping becomes redundant. Example: 'List<String> x = Collections.unmodifiableList(Collections.singletonList(\"abc\"));' After the quick-fix is applied: 'List<String> x = Collections.singletonList(\"abc\");' In order to detect the methods that return unmodifiable collections, the inspection uses the 'org.jetbrains.annotations.Unmodifiable' and 'org.jetbrains.annotations.UnmodifiableView' annotations. Use them to extend the inspection to your own unmodifiable collection wrappers. Inspection ID: RedundantUnmodifiable New in 2020.3",
                  "markdown": "Reports redundant calls to unmodifiable collection wrappers from the `Collections` class.\n\nIf the argument that is passed to an unmodifiable\ncollection wrapper is already immutable, such a wrapping becomes redundant.\n\nExample:\n\n\n      List<String> x = Collections.unmodifiableList(Collections.singletonList(\"abc\"));\n\nAfter the quick-fix is applied:\n\n\n      List<String> x = Collections.singletonList(\"abc\");\n\nIn order to detect the methods that return unmodifiable collections, the\ninspection uses the `org.jetbrains.annotations.Unmodifiable`\nand `org.jetbrains.annotations.UnmodifiableView` annotations.\nUse them to extend the inspection to your own unmodifiable collection\nwrappers.\n\nInspection ID: RedundantUnmodifiable\n\nNew in 2020.3"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RedundantUnmodifiable",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Verbose or redundant code constructs",
                      "index": 37,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConstantValue",
                "shortDescription": {
                  "text": "Constant values"
                },
                "fullDescription": {
                  "text": "Reports expressions and conditions that always produce the same result, like 'true', 'false', 'null', or '0'. Such expressions can be replaced with the corresponding constant value, or may indicate there is a bug in the code. Examples: '// always true\n  // cause: || is used instead of &&\n  if (x > 0 || x < 10) {}\n\n  System.out.println(str.trim());\n  // always false\n  // cause: variable was dereferenced before null-check\n  if (str == null) {}' The inspection's behavior may be controlled by annotations, such as nullability annotations, '@Contract' annotation, '@Range' annotation and so on. Configure the inspection: Use the Don't report assertions with condition statically proven to be always true option to avoid reporting assertions that were statically proven to be always true. This includes conditions like 'if (alwaysFalseCondition) throw new IllegalArgumentException();'. Use the Ignore assert statements option to control how the inspection treats 'assert' statements. By default, assertions are assumed to be executed ('-ea' mode). When the option is enabled, assertions will be ignored ('-da' mode). Use the Warn when constant is stored in variable option to display warnings when a variable is used, whose value is known to be constant. Before IntelliJ IDEA 2022.3, this inspection was part of the Constant Conditions & Exceptions inspection. This inspection has been split into two inspections: Constant Values and Nullability and data flow problems. Inspection ID: ConstantValue",
                  "markdown": "Reports expressions and conditions that always produce the same result, like `true`, `false`, `null`, or `0`. Such expressions can be replaced with the corresponding constant value, or may indicate there is a bug in the code.\n\nExamples:\n\n      // always true\n      // cause: || is used instead of &&\n      if (x > 0 || x < 10) {}\n\n      System.out.println(str.trim());\n      // always false\n      // cause: variable was dereferenced before null-check\n      if (str == null) {}\n\n\nThe inspection's behavior may be controlled by annotations, such as\n[nullability](https://www.jetbrains.com/help/idea/nullable-and-notnull-annotations.html) annotations,\n[@Contract](https://www.jetbrains.com/help/idea/contract-annotations.html) annotation,\n`@Range` annotation and so on.\n\nConfigure the inspection:\n\n* Use the **Don't report assertions with condition statically proven to be always true** option to avoid reporting assertions that were statically proven to be always true. This includes conditions like `if (alwaysFalseCondition) throw new IllegalArgumentException();`.\n* Use the **Ignore assert statements** option to control how the inspection treats `assert` statements. By default, assertions are assumed to be executed (`-ea` mode). When the option is enabled, assertions will be ignored (`-da` mode).\n* Use the **Warn when constant is stored in variable** option to display warnings when a variable is used, whose value is known to be constant.\n\n\nBefore IntelliJ IDEA 2022.3, this inspection was part of the *Constant Conditions \\& Exceptions* inspection.\nThis inspection has been split into two inspections: *Constant Values* and *Nullability and data flow problems*.\n\nInspection ID: ConstantValue"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ConstantValue",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CastCanBeReplacedWithVariable",
                "shortDescription": {
                  "text": "Cast can be replaced with variable"
                },
                "fullDescription": {
                  "text": "Reports type cast operations that can be replaced with existing local or pattern variables with the same value. Example: 'void foo(Object obj) {\n    String s = (String) obj;\n    System.out.println(((String) obj).trim());\n  }' After the quick-fix is applied: 'void foo(Object obj) {\n    String s = (String) obj;\n    System.out.println(s.trim());\n  }' Inspection ID: CastCanBeReplacedWithVariable New in 2022.3",
                  "markdown": "Reports type cast operations that can be replaced with existing local or pattern variables with the same value.\n\nExample:\n\n\n      void foo(Object obj) {\n        String s = (String) obj;\n        System.out.println(((String) obj).trim());\n      }\n\nAfter the quick-fix is applied:\n\n\n      void foo(Object obj) {\n        String s = (String) obj;\n        System.out.println(s.trim());\n      }\n\nInspection ID: CastCanBeReplacedWithVariable\n\nNew in 2022.3"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "CastCanBeReplacedWithVariable",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Verbose or redundant code constructs",
                      "index": 37,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Convert2Diamond",
                "shortDescription": {
                  "text": "Explicit type can be replaced with '<>'"
                },
                "fullDescription": {
                  "text": "Reports 'new' expressions with type arguments that can be replaced a with diamond type '<>'. Example: 'List<String> list = new ArrayList<String>(); // reports array list type argument' After the quick-fix is applied: 'List<String> list = new ArrayList<>();' This inspection depends on the Java feature 'Diamond types', which is available since Java 7. Inspection ID: Convert2Diamond",
                  "markdown": "Reports `new` expressions with type arguments that can be replaced a with diamond type `<>`.\n\nExample:\n\n\n      List<String> list = new ArrayList<String>(); // reports array list type argument\n\nAfter the quick-fix is applied:\n\n\n      List<String> list = new ArrayList<>();\n\nThis inspection depends on the Java feature 'Diamond types', which is available since Java 7.\n\nInspection ID: Convert2Diamond"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "Convert2Diamond",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level migration aids/Java 7",
                      "index": 128,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VarargParameter",
                "shortDescription": {
                  "text": "Varargs method"
                },
                "fullDescription": {
                  "text": "Reports methods that accept an arbitrary number of parameters (also known as varargs methods). Example: 'enum EnumConstants {\n  A(null), B, C;\n\n  EnumConstants(String... ss) {}\n}' A quick-fix is available to replace a variable argument parameter with an equivalent array parameter. Relevant arguments in method calls are wrapped in an array initializer expression. After the quick-fix is applied: 'enum EnumConstants {\n  A(null), B(new String[]{}), C(new String[]{});\n\n  EnumConstants(String[] ss) {}\n}' Varargs method appeared in Java 5. This inspection can help to downgrade for backward compatibility with earlier Java versions. Inspection ID: VarargParameter",
                  "markdown": "Reports methods that accept an arbitrary number of parameters (also known as varargs methods).\n\n**Example:**\n\n\n      enum EnumConstants {\n      A(null), B, C;\n\n      EnumConstants(String... ss) {}\n    }\n\nA quick-fix is available to replace a variable argument\nparameter with an equivalent array parameter. Relevant arguments in method calls are wrapped in an array initializer expression.\nAfter the quick-fix is applied:\n\n\n      enum EnumConstants {\n      A(null), B(new String[]{}), C(new String[]{});\n\n      EnumConstants(String[] ss) {}\n    }\n\n\n*Varargs method* appeared in Java 5.\nThis inspection can help to downgrade for backward compatibility with earlier Java versions.\n\nInspection ID: VarargParameter"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "VariableArgumentMethod",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level issues",
                      "index": 119,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ArrayLengthInLoopCondition",
                "shortDescription": {
                  "text": "Array.length in loop condition"
                },
                "fullDescription": {
                  "text": "Reports accesses to the '.length' property of an array in the condition part of a loop statement. In highly resource constrained environments, such calls may have adverse performance implications. This inspection is intended for Java ME and other highly resource constrained environments. Applying the results of this inspection without consideration might have negative effects on code clarity and design. Example: 'void foo(Object[] x) {\n    for (int i = 0; i < x.length; i++) { /**/ }\n  }' Inspection ID: ArrayLengthInLoopCondition",
                  "markdown": "Reports accesses to the `.length` property of an array in the condition part of a loop statement. In highly resource constrained environments, such calls may have adverse performance implications.\n\n\nThis inspection is intended for Java ME and other highly resource constrained environments.\nApplying the results of this inspection without consideration might have negative effects on code clarity and design.\n\n**Example:**\n\n\n      void foo(Object[] x) {\n        for (int i = 0; i < x.length; i++) { /**/ }\n      }\n\nInspection ID: ArrayLengthInLoopCondition"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ArrayLengthInLoopCondition",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Performance/Embedded",
                      "index": 137,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckForOutOfMemoryOnLargeArrayAllocation",
                "shortDescription": {
                  "text": "Large array allocation with no OutOfMemoryError check"
                },
                "fullDescription": {
                  "text": "Reports large array allocations which do not check for 'java.lang.OutOfMemoryError'. In memory constrained environments, allocations of large data objects should probably be checked for memory depletion. This inspection is intended for Java ME and other highly resource constrained environments. Applying the results of this inspection without consideration might have negative effects on code clarity and design. Use the option to specify the maximum number of elements to allow in unchecked array allocations. Inspection ID: CheckForOutOfMemoryOnLargeArrayAllocation",
                  "markdown": "Reports large array allocations which do not check for `java.lang.OutOfMemoryError`. In memory constrained environments, allocations of large data objects should probably be checked for memory depletion.\n\n\nThis inspection is intended for Java ME and other highly resource constrained environments.\nApplying the results of this inspection without consideration might have negative effects on code clarity and design.\n\n\nUse the option to specify the maximum number of elements to allow in unchecked array allocations.\n\nInspection ID: CheckForOutOfMemoryOnLargeArrayAllocation"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CheckForOutOfMemoryOnLargeArrayAllocation",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Performance/Embedded",
                      "index": 137,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ClassWithoutConstructor",
                "shortDescription": {
                  "text": "Class without constructor"
                },
                "fullDescription": {
                  "text": "Reports classes without constructors. Some coding standards prohibit such classes. Inspection ID: ClassWithoutConstructor",
                  "markdown": "Reports classes without constructors.\n\nSome coding standards prohibit such classes.\n\n\nInspection ID: ClassWithoutConstructor"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ClassWithoutConstructor",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/JavaBeans issues",
                      "index": 113,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PackageInfoWithoutPackage",
                "shortDescription": {
                  "text": "'package-info.java' without 'package' statement"
                },
                "fullDescription": {
                  "text": "Reports 'package-info.java' files without a 'package' statement. The Javadoc tool considers such files documentation for the default package even when the file is located somewhere else. Inspection ID: PackageInfoWithoutPackage",
                  "markdown": "Reports `package-info.java` files without a `package` statement.\n\n\nThe Javadoc tool considers such files documentation for the default package even when the file is located somewhere else.\n\nInspection ID: PackageInfoWithoutPackage"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PackageInfoWithoutPackage",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Javadoc",
                      "index": 58,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NonSerializableWithSerializationMethods",
                "shortDescription": {
                  "text": "Non-serializable class with 'readObject()' or 'writeObject()'"
                },
                "fullDescription": {
                  "text": "Reports non-'Serializable' classes that define 'readObject()' or 'writeObject()' methods. Such methods in that context normally indicate an error. Example: 'public class SampleClass {\n    private void readObject(ObjectInputStream str) {}\n    private void writeObject(ObjectOutputStream str) {}\n  }' Inspection ID: NonSerializableWithSerializationMethods",
                  "markdown": "Reports non-`Serializable` classes that define `readObject()` or `writeObject()` methods. Such methods in that context normally indicate an error.\n\n**Example:**\n\n\n      public class SampleClass {\n        private void readObject(ObjectInputStream str) {}\n        private void writeObject(ObjectOutputStream str) {}\n      }\n\nInspection ID: NonSerializableWithSerializationMethods"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NonSerializableClassWithSerializationMethods",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Serialization issues",
                      "index": 18,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CloneReturnsClassType",
                "shortDescription": {
                  "text": "'clone()' should have return type equal to the class it contains"
                },
                "fullDescription": {
                  "text": "Reports 'clone()' methods with return types different from the class they're located in. Often a 'clone()' method will have a return type of 'java.lang.Object', which makes it harder to use by its clients. Effective Java (the second and third editions) recommends making the return type of the 'clone()' method the same as the class type of the object it returns. Example: 'class Foo implements Cloneable {\n    public Object clone() {\n      try {\n        return super.clone();\n      } catch (CloneNotSupportedException e) {\n        throw new AssertionError();\n      }\n    }\n  }' After the quick-fix is applied: 'class Foo implements Cloneable {\n    public Foo clone() {\n      try {\n        return (Foo)super.clone();\n      } catch (CloneNotSupportedException e) {\n        throw new AssertionError();\n      }\n    }\n  }' Inspection ID: CloneReturnsClassType",
                  "markdown": "Reports `clone()` methods with return types different from the class they're located in.\n\nOften a `clone()` method will have a return type of `java.lang.Object`, which makes it harder to use by its clients.\n*Effective Java* (the second and third editions) recommends making the return type of the `clone()` method the same as the\nclass type of the object it returns.\n\n**Example:**\n\n\n      class Foo implements Cloneable {\n        public Object clone() {\n          try {\n            return super.clone();\n          } catch (CloneNotSupportedException e) {\n            throw new AssertionError();\n          }\n        }\n      }\n\nAfter the quick-fix is applied:\n\n\n      class Foo implements Cloneable {\n        public Foo clone() {\n          try {\n            return (Foo)super.clone();\n          } catch (CloneNotSupportedException e) {\n            throw new AssertionError();\n          }\n        }\n      }\n\nInspection ID: CloneReturnsClassType"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CloneReturnsClassType",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Cloning issues",
                      "index": 89,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OptionalToIf",
                "shortDescription": {
                  "text": "'Optional' can be replaced with sequence of 'if' statements"
                },
                "fullDescription": {
                  "text": "Reports 'Optional' call chains that can be replaced with a sequence of 'if' statements. Example: 'return Optional.ofNullable(name)\n    .map(this::extractInitials)\n    .map(initials -> initials.toUpperCase(Locale.ENGLISH))\n    .orElseGet(this::getDefault);' After the quick-fix is applied: 'if (name != null) {\n    String initials = extractInitials(name);\n    if (initials != null) return initials.toUpperCase(Locale.ENGLISH);\n  }\n  return getDefault();' This inspection can help to downgrade for backward compatibility with earlier Java versions. This inspection depends on the Java feature 'Stream and Optional API', which is available since Java 8. Inspection ID: OptionalToIf New in 2020.2",
                  "markdown": "Reports `Optional` call chains that can be replaced with a sequence of `if` statements.\n\nExample:\n\n\n      return Optional.ofNullable(name)\n        .map(this::extractInitials)\n        .map(initials -> initials.toUpperCase(Locale.ENGLISH))\n        .orElseGet(this::getDefault);\n\nAfter the quick-fix is applied:\n\n\n      if (name != null) {\n        String initials = extractInitials(name);\n        if (initials != null) return initials.toUpperCase(Locale.ENGLISH);\n      }\n      return getDefault();\n\n\nThis inspection can help to downgrade for backward compatibility with earlier Java versions.\n\nThis inspection depends on the Java feature 'Stream and Optional API', which is available since Java 8.\n\nInspection ID: OptionalToIf\n\nNew in 2020.2"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "OptionalToIf",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IllegalDependencyOnInternalPackage",
                "shortDescription": {
                  "text": "Illegal dependency on internal package"
                },
                "fullDescription": {
                  "text": "Reports references in modules without 'module-info.java' on packages which are not exported from named modules. Such configuration may occur when some modules in the project are already migrated to Java modules but others are still non-modular. By analogy to the JDK, such non-modular code should not get access to the code in named modules which is not explicitly exported. Inspection ID: IllegalDependencyOnInternalPackage",
                  "markdown": "Reports references in modules without `module-info.java` on packages which are not exported from named modules.\n\nSuch configuration may occur when some modules in the project are already migrated to Java modules but others are still non-modular.\nBy analogy to the JDK, such non-modular code should not get access to the code in named modules which is not explicitly exported.\n\nInspection ID: IllegalDependencyOnInternalPackage"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "IllegalDependencyOnInternalPackage",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JVM languages",
                      "index": 1,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BigDecimalMethodWithoutRoundingCalled",
                "shortDescription": {
                  "text": "Call to 'BigDecimal' method without a rounding mode argument"
                },
                "fullDescription": {
                  "text": "Reports calls to 'divide()' or 'setScale()' without a rounding mode argument. Such calls can lead to an 'ArithmeticException' when the exact value cannot be represented in the result (for example, because it has a non-terminating decimal expansion). Specifying a rounding mode prevents the 'ArithmeticException'. Example: 'BigDecimal.valueOf(1).divide(BigDecimal.valueOf(3));' Inspection ID: BigDecimalMethodWithoutRoundingCalled",
                  "markdown": "Reports calls to `divide()` or `setScale()` without a rounding mode argument.\n\nSuch calls can lead to an `ArithmeticException` when the exact value cannot be represented in the result\n(for example, because it has a non-terminating decimal expansion).\n\nSpecifying a rounding mode prevents the `ArithmeticException`.\n\n**Example:**\n\n\n      BigDecimal.valueOf(1).divide(BigDecimal.valueOf(3));\n\nInspection ID: BigDecimalMethodWithoutRoundingCalled"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "BigDecimalMethodWithoutRoundingCalled",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Numeric issues",
                      "index": 25,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OverlyComplexArithmeticExpression",
                "shortDescription": {
                  "text": "Overly complex arithmetic expression"
                },
                "fullDescription": {
                  "text": "Reports arithmetic expressions with the excessive number of terms. Such expressions might be hard to understand and might contain errors. Parameters, field references, and other primary expressions are counted as a term. Example: 'int calc(int a, int b) {\n        return a + a + a + b + b + b + b; // The line contains 7 terms and will be reported.\n    }' Use the field below to specify a number of terms allowed in arithmetic expressions. Inspection ID: OverlyComplexArithmeticExpression",
                  "markdown": "Reports arithmetic expressions with the excessive number of terms. Such expressions might be hard to understand and might contain errors.\n\nParameters, field references, and other primary expressions are counted as a term.\n\n**Example:**\n\n    int calc(int a, int b) {\n            return a + a + a + b + b + b + b; // The line contains 7 terms and will be reported.\n        }\n\nUse the field below to specify a number of terms allowed in arithmetic expressions.\n\nInspection ID: OverlyComplexArithmeticExpression"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "OverlyComplexArithmeticExpression",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Numeric issues",
                      "index": 25,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DriverManagerGetConnection",
                "shortDescription": {
                  "text": "Use of 'DriverManager' to get JDBC connection"
                },
                "fullDescription": {
                  "text": "Reports any uses of 'java.sql.DriverManager' to acquire a JDBC connection. 'java.sql.DriverManager' has been superseded by 'javax.sql.Datasource', which allows for connection pooling and other optimizations. Example: 'Connection conn = DriverManager.getConnection(url, username, password);' Inspection ID: DriverManagerGetConnection",
                  "markdown": "Reports any uses of `java.sql.DriverManager` to acquire a JDBC connection.\n\n\n`java.sql.DriverManager`\nhas been superseded by `javax.sql.Datasource`, which\nallows for connection pooling and other optimizations.\n\n**Example:**\n\n      Connection conn = DriverManager.getConnection(url, username, password);\n\nInspection ID: DriverManagerGetConnection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CallToDriverManagerGetConnection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Resource management",
                      "index": 109,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LanguageMismatch",
                "shortDescription": {
                  "text": "Language mismatch"
                },
                "fullDescription": {
                  "text": "Reports when the language of a reference does not match the expected language of the usage context. Example: '@Language(\"JavaScript\")\n  String JS_CODE = \"var x;\";\n\n  @Language(\"XPath\")\n  String XPATH_CODE = JS_CODE; // warning here' Inspection ID: LanguageMismatch",
                  "markdown": "Reports when the language of a reference does not match the expected language of the usage context.\n\nExample:\n\n\n      @Language(\"JavaScript\")\n      String JS_CODE = \"var x;\";\n\n      @Language(\"XPath\")\n      String XPATH_CODE = JS_CODE; // warning here\n\nInspection ID: LanguageMismatch"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "LanguageMismatch",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language injection",
                      "index": 0,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ThreadDumpStack",
                "shortDescription": {
                  "text": "Call to 'Thread.dumpStack()'"
                },
                "fullDescription": {
                  "text": "Reports usages of 'Thread.dumpStack()'. Such statements are often used for temporary debugging and should be either removed from the production code or replaced with a more robust logging facility. Inspection ID: ThreadDumpStack",
                  "markdown": "Reports usages of `Thread.dumpStack()`.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.\n\nInspection ID: ThreadDumpStack"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CallToThreadDumpStack",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code maturity",
                      "index": 46,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryBlockStatement",
                "shortDescription": {
                  "text": "Unnecessary code block"
                },
                "fullDescription": {
                  "text": "Reports code blocks that are redundant to the semantics of the program and can be replaced with their contents. The code blocks that are the bodies of 'if', 'do', 'while', or 'for' statements will not be reported by this inspection. Example: 'void foo() {\n    { // unnecessary\n      int result = call();\n      analyze(result);\n    } // unnecessary\n  }' Configure the inspection: Use the Ignore branches of 'switch' statements option to ignore the code blocks that are used as branches of switch statements. Inspection ID: UnnecessaryBlockStatement",
                  "markdown": "Reports code blocks that are redundant to the semantics of the program and can be replaced with their contents.\n\nThe code blocks that are the bodies of `if`, `do`,\n`while`, or `for` statements will not be reported by this\ninspection.\n\nExample:\n\n\n      void foo() {\n        { // unnecessary\n          int result = call();\n          analyze(result);\n        } // unnecessary\n      }\n\nConfigure the inspection:\n\n\nUse the **Ignore branches of 'switch' statements** option to ignore the code blocks that are used as branches of switch statements.\n\n\nInspection ID: UnnecessaryBlockStatement"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "UnnecessaryCodeBlock",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FinalMethodInFinalClass",
                "shortDescription": {
                  "text": "'final' method in 'final' class"
                },
                "fullDescription": {
                  "text": "Reports 'final' methods in 'final' classes. Since 'final' classes cannot be inherited, marking a method as 'final' may be unnecessary and confusing. Example: 'record Bar(int a, int b) {\n  public final int sum() { \n     return a + b;\n  }\n}'\n After the quick-fix is applied: 'record Bar(int a, int b) {\n  public int sum() { \n     return a + b;\n  }\n}' As shown in the example, a class can be marked as 'final' explicitly or implicitly. Inspection ID: FinalMethodInFinalClass",
                  "markdown": "Reports `final` methods in `final` classes.\n\nSince `final` classes cannot be inherited, marking a method as `final`\nmay be unnecessary and confusing.\n\n**Example:**\n\n    record Bar(int a, int b) {\n      public final int sum() { \n         return a + b;\n      }\n    }\n\nAfter the quick-fix is applied:\n\n    record Bar(int a, int b) {\n      public int sum() { \n         return a + b;\n      }\n    }\n\nAs shown in the example, a class can be marked as `final` explicitly or implicitly.\n\n\nInspection ID: FinalMethodInFinalClass"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "FinalMethodInFinalClass",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Declaration redundancy",
                      "index": 9,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FinalPrivateMethod",
                "shortDescription": {
                  "text": "'private' method declared 'final'"
                },
                "fullDescription": {
                  "text": "Reports methods that are marked with both 'final' and 'private' keywords. Since 'private' methods cannot be meaningfully overridden because of their visibility, declaring them 'final' is redundant. Inspection ID: FinalPrivateMethod",
                  "markdown": "Reports methods that are marked with both `final` and `private` keywords.\n\nSince `private` methods cannot be meaningfully overridden because of their visibility, declaring them\n`final` is redundant.\n\nInspection ID: FinalPrivateMethod"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "FinalPrivateMethod",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Class structure",
                      "index": 17,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AssignmentOrReturnOfFieldWithMutableType",
                "shortDescription": {
                  "text": "Assignment or return of field with mutable type"
                },
                "fullDescription": {
                  "text": "Reports return of, or assignment from a method parameter to a field of an array or a mutable type such as 'Collection', 'Date', 'Map', 'Calendar', etc. Because such types are mutable, this construct may result in unexpected modifications of an object's state from outside the owning class. Although this construct may be useful for performance reasons, it is inherently prone to bugs. The following mutable types are reported: 'java.util.Date' 'java.util.Calendar' 'java.util.Collection' 'java.util.Map' 'com.google.common.collect.Multimap' 'com.google.common.collect.Table' The quick-fix adds a call to the field's '.clone()' method for arrays or uses an unmodifiable collection wrapper. Example: 'import java.util.*;\n  class Log {\n    private String[] messages = {\"one\", \"two\", \"three\"};\n    private Map<String, String> map = new HashMap<>();\n\n    String[] getMessages() {\n      return messages; // warning: Return of String[] field 'messages'\n    }\n\n    Map<String, String> mapping() {\n      return map; // warning: Return of Map<String, String> field 'map'\n    }\n  }' After the quick-fix is applied: 'import java.util.*;\n  class Log {\n    String[] messages = {\"one\", \"two\", \"three\"};\n    private Map<String, String> map = new HashMap<>();\n\n    String[] getMessages() {\n      return messages.clone();\n    }\n\n    Map<String, String> mapping() {\n      return Collections.unmodifiableMap(map);\n    }\n  }' Use the Ignore assignments in and returns from private methods option to ignore assignments and returns in 'private' methods. Inspection ID: AssignmentOrReturnOfFieldWithMutableType",
                  "markdown": "Reports return of, or assignment from a method parameter to a field of an array or a mutable type such as `Collection`, `Date`, `Map`, `Calendar`, etc.\n\nBecause such types are mutable, this construct may\nresult in unexpected modifications of an object's state from outside the owning class. Although this construct may be useful for\nperformance reasons, it is inherently prone to bugs.\n\nThe following mutable types are reported:\n\n* `java.util.Date`\n* `java.util.Calendar`\n* `java.util.Collection`\n* `java.util.Map`\n* `com.google.common.collect.Multimap`\n* `com.google.common.collect.Table`\n\nThe quick-fix adds a call to the field's `.clone()` method for arrays or uses an unmodifiable collection wrapper.\n\n**Example:**\n\n\n      import java.util.*;\n      class Log {\n        private String[] messages = {\"one\", \"two\", \"three\"};\n        private Map<String, String> map = new HashMap<>();\n\n        String[] getMessages() {\n          return messages; // warning: Return of String[] field 'messages'\n        }\n\n        Map<String, String> mapping() {\n          return map; // warning: Return of Map<String, String> field 'map'\n        }\n      }\n\nAfter the quick-fix is applied:\n\n\n      import java.util.*;\n      class Log {\n        String[] messages = {\"one\", \"two\", \"three\"};\n        private Map<String, String> map = new HashMap<>();\n\n        String[] getMessages() {\n          return messages.clone();\n        }\n\n        Map<String, String> mapping() {\n          return Collections.unmodifiableMap(map);\n        }\n      }\n\nUse the **Ignore assignments in and returns from private methods** option to ignore assignments and returns in `private` methods.\n\nInspection ID: AssignmentOrReturnOfFieldWithMutableType"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AssignmentOrReturnOfFieldWithMutableType",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Encapsulation",
                      "index": 100,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryUnboxing",
                "shortDescription": {
                  "text": "Unnecessary unboxing"
                },
                "fullDescription": {
                  "text": "Reports unboxing, that is explicit unwrapping of wrapped primitive values. Unboxing is unnecessary as of Java 5 and later, and can safely be removed. Examples: 'Integer i = Integer.valueOf(42).intValue();' → 'Integer i = Integer.valueOf(42);' 'int k = Integer.valueOf(42).intValue();' → 'int k = Integer.valueOf(42);' (reports only when the Only report truly superfluously unboxed expressions option is not checked) Use the Only report truly superfluously unboxed expressions option to only report truly superfluous unboxing, where an unboxed value is immediately boxed either implicitly or explicitly. In this case, the entire unboxing-boxing step can be removed. The inspection doesn't report simple explicit unboxing. This inspection only reports if the language level of the project or module is 5 or higher. Inspection ID: UnnecessaryUnboxing",
                  "markdown": "Reports unboxing, that is explicit unwrapping of wrapped primitive values.\n\nUnboxing is unnecessary as of Java 5 and later, and can safely be removed.\n\n**Examples:**\n\n* `Integer i = Integer.valueOf(42).intValue();` → `Integer i = Integer.valueOf(42);`\n* `int k = Integer.valueOf(42).intValue();` → `int k = Integer.valueOf(42);`\n\n  (reports only when the **Only report truly superfluously unboxed expressions** option is not checked)\n\n\nUse the **Only report truly superfluously unboxed expressions** option to only report truly superfluous unboxing,\nwhere an unboxed value is immediately boxed either implicitly or explicitly.\nIn this case, the entire unboxing-boxing step can be removed. The inspection doesn't report simple explicit unboxing.\n\nThis inspection only reports if the language level of the project or module is 5 or higher.\n\nInspection ID: UnnecessaryUnboxing"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnnecessaryUnboxing",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level migration aids/Java 5",
                      "index": 93,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OptionalAssignedToNull",
                "shortDescription": {
                  "text": "Null value for Optional type"
                },
                "fullDescription": {
                  "text": "Reports 'null' assigned to an 'Optional' variable or returned from a method returning 'Optional'. It's recommended that you use 'Optional.empty()' (or 'Optional.absent()' for Guava) to denote an empty value. Example: 'Optional<Integer> foo(boolean flag) {\n    return flag ? Optional.of(42) : null;\n  }' After the quick-fix is applied: 'Optional<Integer> foo(boolean flag) {\n    return flag ? Optional.of(42) : Optional.empty();\n  }' Configure the inspection: Use the Report comparison of Optional with null option to also report comparisons like 'optional == null'. While in rare cases (e.g. lazily initialized optional field) this might be correct, optional variable is usually never null, and probably 'optional.isPresent()' was intended. New in 2017.2 This inspection depends on the Java feature 'Stream and Optional API', which is available since Java 8. Inspection ID: OptionalAssignedToNull",
                  "markdown": "Reports `null` assigned to an `Optional` variable or returned from a method returning `Optional`.\n\nIt's recommended that you use `Optional.empty()` (or `Optional.absent()` for Guava) to denote an empty value.\n\nExample:\n\n\n      Optional<Integer> foo(boolean flag) {\n        return flag ? Optional.of(42) : null;\n      }\n\nAfter the quick-fix is applied:\n\n\n      Optional<Integer> foo(boolean flag) {\n        return flag ? Optional.of(42) : Optional.empty();\n      }\n\nConfigure the inspection:\n\n\nUse the **Report comparison of Optional with null** option to also report comparisons like `optional == null`. While in rare cases (e.g. lazily initialized\noptional field) this might be correct, optional variable is usually never null, and probably `optional.isPresent()` was\nintended.\n\nNew in 2017.2\n\nThis inspection depends on the Java feature 'Stream and Optional API', which is available since Java 8.\n\nInspection ID: OptionalAssignedToNull"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "OptionalAssignedToNull",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code maturity",
                      "index": 46,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PointlessIndexOfComparison",
                "shortDescription": {
                  "text": "Pointless 'indexOf()' comparison"
                },
                "fullDescription": {
                  "text": "Reports unnecessary comparisons with '.indexOf()' expressions. An example of such an expression is comparing the result of '.indexOf()' with numbers smaller than -1. Inspection ID: PointlessIndexOfComparison",
                  "markdown": "Reports unnecessary comparisons with `.indexOf()` expressions. An example of such an expression is comparing the result of `.indexOf()` with numbers smaller than -1.\n\nInspection ID: PointlessIndexOfComparison"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PointlessIndexOfComparison",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Control flow issues",
                      "index": 24,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EqualsAndHashcode",
                "shortDescription": {
                  "text": "'equals()' and 'hashCode()' not paired"
                },
                "fullDescription": {
                  "text": "Reports classes that override the 'equals()' method but do not override the 'hashCode()' method or vice versa, which can potentially lead to problems when the class is added to a 'Collection' or a 'HashMap'. The quick-fix generates the default implementation for an absent method. Example: 'class StringHolder {\n  String s;\n\n  @Override public int hashCode() {\n    return s != null ? s.hashCode() : 0;\n  }\n}' After the quick-fix is applied: 'class StringHolder {\n  String s;\n\n  @Override public int hashCode() {\n    return s != null ? s.hashCode() : 0;\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (!(o instanceof StringHolder)) return false;\n\n    StringHolder holder = (StringHolder)o;\n\n    if (s != null ? !s.equals(holder.s) : holder.s != null) return false;\n\n    return true;\n  }\n}' Inspection ID: EqualsAndHashcode",
                  "markdown": "Reports classes that override the `equals()` method but do not override the `hashCode()` method or vice versa, which can potentially lead to problems when the class is added to a `Collection` or a `HashMap`.\n\nThe quick-fix generates the default implementation for an absent method.\n\nExample:\n\n\n    class StringHolder {\n      String s;\n\n      @Override public int hashCode() {\n        return s != null ? s.hashCode() : 0;\n      }\n    }\n\nAfter the quick-fix is applied:\n\n\n    class StringHolder {\n      String s;\n\n      @Override public int hashCode() {\n        return s != null ? s.hashCode() : 0;\n      }\n\n      @Override\n      public boolean equals(Object o) {\n        if (this == o) return true;\n        if (!(o instanceof StringHolder)) return false;\n\n        StringHolder holder = (StringHolder)o;\n\n        if (s != null ? !s.equals(holder.s) : holder.s != null) return false;\n\n        return true;\n      }\n    }\n\nInspection ID: EqualsAndHashcode"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EqualsAndHashcode",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IteratorHasNextCallsIteratorNext",
                "shortDescription": {
                  "text": "'Iterator.hasNext()' which calls 'next()'"
                },
                "fullDescription": {
                  "text": "Reports implementations of 'Iterator.hasNext()' or 'ListIterator.hasPrevious()' that call 'Iterator.next()' or 'ListIterator.previous()' on the iterator instance. Such calls are almost certainly an error, as methods like 'hasNext()' should not modify the iterators state, while 'next()' should. Example: 'class MyIterator implements Iterator<Integer> {\n    public boolean hasNext() {\n      return next() != null;\n    }\n  }' Inspection ID: IteratorHasNextCallsIteratorNext",
                  "markdown": "Reports implementations of `Iterator.hasNext()` or `ListIterator.hasPrevious()` that call `Iterator.next()` or `ListIterator.previous()` on the iterator instance. Such calls are almost certainly an error, as methods like `hasNext()` should not modify the iterators state, while `next()` should.\n\n**Example:**\n\n\n      class MyIterator implements Iterator<Integer> {\n        public boolean hasNext() {\n          return next() != null;\n        }\n      }\n\nInspection ID: IteratorHasNextCallsIteratorNext"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "IteratorHasNextCallsIteratorNext",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StringRepeatCanBeUsed",
                "shortDescription": {
                  "text": "String.repeat() can be used"
                },
                "fullDescription": {
                  "text": "Reports loops that can be replaced with a single 'String.repeat()' method (available since Java 11). Example: 'void append(StringBuilder sb, int count, Object obj) {\n    for (int i = 0; i < count; i++) {\n      sb.append(obj);\n    }\n  }' After the quick-fix is applied: 'void append(StringBuilder sb, int count, Object obj) {\n    sb.append(String.valueOf(obj).repeat(Math.max(0, count)));\n  }' By default, the inspection may wrap 'count' with 'Math.max(0, count)' if it cannot prove statically that 'count' is not negative. This is done to prevent possible semantics change, as 'String.repeat()' rejects negative numbers. Use the Add Math.max(0,count) to avoid possible semantics change option to disable this behavior if required. Similarly, a string you want to repeat can be wrapped in 'String.valueOf' to prevent possible 'NullPointerException' if it's unknown whether it can be 'null'. This inspection only reports if the language level of the project or module is 11 or higher. Inspection ID: StringRepeatCanBeUsed New in 2019.1",
                  "markdown": "Reports loops that can be replaced with a single `String.repeat()` method (available since Java 11).\n\n**Example:**\n\n\n      void append(StringBuilder sb, int count, Object obj) {\n        for (int i = 0; i < count; i++) {\n          sb.append(obj);\n        }\n      }\n\nAfter the quick-fix is applied:\n\n\n      void append(StringBuilder sb, int count, Object obj) {\n        sb.append(String.valueOf(obj).repeat(Math.max(0, count)));\n      }\n\n\nBy default, the inspection may wrap `count` with `Math.max(0, count)` if it cannot prove statically that `count` is\nnot negative. This is done to prevent possible semantics change, as `String.repeat()` rejects negative numbers.\nUse the **Add Math.max(0,count) to avoid possible semantics change** option to disable this behavior if required.\n\nSimilarly, a string you want to repeat can be wrapped in\n`String.valueOf` to prevent possible `NullPointerException` if it's unknown whether it can be `null`.\n\nThis inspection only reports if the language level of the project or module is 11 or higher.\n\nInspection ID: StringRepeatCanBeUsed\n\nNew in 2019.1"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "StringRepeatCanBeUsed",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level migration aids/Java 11",
                      "index": 146,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MathRoundingWithIntArgument",
                "shortDescription": {
                  "text": "Call math rounding with 'int' argument"
                },
                "fullDescription": {
                  "text": "Reports calls to 'round()', 'ceil()', 'floor()', 'rint()' methods for 'Math' and 'StrictMath' with 'int' as the argument. These methods could be called in case the argument is expected to be 'long' or 'double', and it may have unexpected results. The inspection provides a fix that simplify such expressions (except 'round') to cast to 'double'. Example: 'int i = 2;\n  double d1 = Math.floor(i);' After the quick-fix is applied: 'int i = 2;\n  double d1 = i;' Inspection ID: MathRoundingWithIntArgument New in 2023.1",
                  "markdown": "Reports calls to `round()`, `ceil()`, `floor()`, `rint()` methods for `Math` and `StrictMath` with `int` as the argument.\n\nThese methods could be called in case the argument is expected to be `long` or `double`, and it may have unexpected results.\n\nThe inspection provides a fix that simplify such expressions (except `round`) to cast to `double`.\n\n**Example:**\n\n\n      int i = 2;\n      double d1 = Math.floor(i);\n\nAfter the quick-fix is applied:\n\n\n      int i = 2;\n      double d1 = i;\n\nInspection ID: MathRoundingWithIntArgument\n\nNew in 2023.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MathRoundingWithIntArgument",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SynchronizationOnStaticField",
                "shortDescription": {
                  "text": "Synchronization on 'static' field"
                },
                "fullDescription": {
                  "text": "Reports synchronization on 'static' fields. While not strictly incorrect, synchronization on 'static' fields can lead to bad performance because of contention. Inspection ID: SynchronizationOnStaticField",
                  "markdown": "Reports synchronization on `static` fields. While not strictly incorrect, synchronization on `static` fields can lead to bad performance because of contention.\n\nInspection ID: SynchronizationOnStaticField"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SynchronizationOnStaticField",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Threading issues",
                      "index": 23,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SwitchStatementWithConfusingDeclaration",
                "shortDescription": {
                  "text": "Local variable used and declared in different 'switch' branches"
                },
                "fullDescription": {
                  "text": "Reports local variables declared in one branch of a 'switch' statement and used in another branch. Such declarations can be extremely confusing. Example: 'switch(i) {\n      case 2:\n          int x = 0;\n          break;\n      case 3:\n          x = 3;\n          System.out.println(x);\n          break;\n    }' Inspection ID: SwitchStatementWithConfusingDeclaration",
                  "markdown": "Reports local variables declared in one branch of a `switch` statement and used in another branch. Such declarations can be extremely confusing.\n\nExample:\n\n\n        switch(i) {\n          case 2:\n              int x = 0;\n              break;\n          case 3:\n              x = 3;\n              System.out.println(x);\n              break;\n        }\n\nInspection ID: SwitchStatementWithConfusingDeclaration"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "LocalVariableUsedAndDeclaredInDifferentSwitchBranches",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Control flow issues",
                      "index": 24,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FieldMayBeFinal",
                "shortDescription": {
                  "text": "Field may be 'final'"
                },
                "fullDescription": {
                  "text": "Reports fields that can be safely made 'final'. All 'final' fields have a value and this value does not change, which can make the code easier to reason about. To avoid too expensive analysis, this inspection only reports if the field has a 'private' modifier or it is defined in a local or anonymous class. A field can be 'final' if: It is 'static' and initialized once in its declaration or in one 'static' initializer. It is non-'static' and initialized once in its declaration, in one instance initializer or in every constructor And it is not modified anywhere else. Example: 'public class Person {\n    private String name; // can be final\n\n    Person(String name) {\n      this.name = name;\n    }\n\n    public String getName() {\n      return name;\n    }\n  }' After the quick-fix is applied: 'public class Person {\n    private final String name;\n\n    Person(String name) {\n      this.name = name;\n    }\n\n    public String getName() {\n      return name;\n    }\n  }' Use the \"Annotations\" button to modify the list of annotations that assume implicit field write. Inspection ID: FieldMayBeFinal",
                  "markdown": "Reports fields that can be safely made `final`. All `final` fields have a value and this value does not change, which can make the code easier to reason about.\n\nTo avoid too expensive analysis, this inspection only reports if the field has a `private` modifier\nor it is defined in a local or anonymous class.\nA field can be `final` if:\n\n* It is `static` and initialized once in its declaration or in one `static` initializer.\n* It is non-`static` and initialized once in its declaration, in one instance initializer or in every constructor\n\nAnd it is not modified anywhere else.\n\n**Example:**\n\n\n      public class Person {\n        private String name; // can be final\n\n        Person(String name) {\n          this.name = name;\n        }\n\n        public String getName() {\n          return name;\n        }\n      }\n\nAfter the quick-fix is applied:\n\n\n      public class Person {\n        private final String name;\n\n        Person(String name) {\n          this.name = name;\n        }\n\n        public String getName() {\n          return name;\n        }\n      }\n\n\nUse the \"Annotations\" button to modify the list of annotations that assume implicit field write.\n\nInspection ID: FieldMayBeFinal"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "FieldMayBeFinal",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SuspiciousArrayMethodCall",
                "shortDescription": {
                  "text": "Suspicious 'Arrays' method call"
                },
                "fullDescription": {
                  "text": "Reports calls to non-generic-array manipulation methods like 'Arrays.fill()' with mismatched argument types. Such calls don't do anything useful and are likely to be mistakes. Example: 'int foo(String[] strings) {\n    return Arrays.binarySearch(strings, 1);\n  }' Inspection ID: SuspiciousArrayMethodCall New in 2017.2",
                  "markdown": "Reports calls to non-generic-array manipulation methods like `Arrays.fill()` with mismatched argument types. Such calls don't do anything useful and are likely to be mistakes.\n\n**Example:**\n\n\n      int foo(String[] strings) {\n        return Arrays.binarySearch(strings, 1);\n      }\n\nInspection ID: SuspiciousArrayMethodCall\n\nNew in 2017.2"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SuspiciousArrayMethodCall",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ClassHasNoToStringMethod",
                "shortDescription": {
                  "text": "Class does not override 'toString()' method"
                },
                "fullDescription": {
                  "text": "Reports classes without a 'toString()' method. Inspection ID: ClassHasNoToStringMethod",
                  "markdown": "Reports classes without a `toString()` method.\n\nInspection ID: ClassHasNoToStringMethod"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ClassHasNoToStringMethod",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/toString() issues",
                      "index": 170,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FieldAccessNotGuarded",
                "shortDescription": {
                  "text": "Unguarded field access or method call"
                },
                "fullDescription": {
                  "text": "Reports accesses of fields declared as '@GuardedBy' that are not guarded by an appropriate synchronization structure. Example: '@GuardedBy(\"this\")\n    void x() {\n        notify();\n    }\n    void y() {\n        x(); // unguarded method call\n    }' Supported '@GuardedBy' annotations are: 'net.jcip.annotations.GuardedBy' 'javax.annotation.concurrent.GuardedBy' 'org.apache.http.annotation.GuardedBy' 'com.android.annotations.concurrency.GuardedBy' 'androidx.annotation.GuardedBy' 'com.google.errorprone.annotations.concurrent.GuardedBy' Inspection ID: FieldAccessNotGuarded",
                  "markdown": "Reports accesses of fields declared as `@GuardedBy` that are not guarded by an appropriate synchronization structure.\n\nExample:\n\n\n        @GuardedBy(\"this\")\n        void x() {\n            notify();\n        }\n        void y() {\n            x(); // unguarded method call\n        }\n\nSupported `@GuardedBy` annotations are:\n\n* `net.jcip.annotations.GuardedBy`\n* `javax.annotation.concurrent.GuardedBy`\n* `org.apache.http.annotation.GuardedBy`\n* `com.android.annotations.concurrency.GuardedBy`\n* `androidx.annotation.GuardedBy`\n* `com.google.errorprone.annotations.concurrent.GuardedBy`\n\nInspection ID: FieldAccessNotGuarded"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "FieldAccessNotGuarded",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Concurrency annotation issues",
                      "index": 75,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PublicStaticArrayField",
                "shortDescription": {
                  "text": "'public static' array field"
                },
                "fullDescription": {
                  "text": "Reports 'public' 'static' array fields. Such fields are often used to store arrays of constant values. Still, they represent a security hazard, as their contents may be modified, even if the field is declared 'final'. Example: 'public static String[] allowedPasswords = {\"foo\", \"bar\"};' Inspection ID: PublicStaticArrayField",
                  "markdown": "Reports `public` `static` array fields.\n\n\nSuch fields are often used to store arrays of constant values. Still, they represent a security\nhazard, as their contents may be modified, even if the field is declared `final`.\n\n**Example:**\n\n\n      public static String[] allowedPasswords = {\"foo\", \"bar\"};\n\n\nInspection ID: PublicStaticArrayField"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PublicStaticArrayField",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Security",
                      "index": 31,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MagicNumber",
                "shortDescription": {
                  "text": "Magic number"
                },
                "fullDescription": {
                  "text": "Reports \"magic numbers\": numeric literals that are not named by a constant declaration. Using magic numbers can lead to unclear code, as well as errors if a magic number is changed in one location but remains unchanged not another. The numbers 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 100, 1000, 0L, 1L, 2L, 0.0, 1.0, 0.0F and 1.0F are not reported by this inspection. Example: 'void checkFileSize(long bytes) {\n    if (bytes > 1_048_576) {\n      throw new IllegalArgumentException(\"too big\");\n    }\n  }' A quick-fix introduces a new constant: 'static final int MAX_SUPPORTED_FILE_SIZE = 1_048_576;\n\n  void checkFileSize(long bytes) {\n    if (bytes > MAX_SUPPORTED_FILE_SIZE) {\n      throw new IllegalArgumentException(\"too big\");\n    }\n  }' Configure the inspection: Use the Ignore constants in 'hashCode()' methods option to disable this inspection within 'hashCode()' methods. Use the Ignore in annotations option to ignore magic numbers in annotations. Use the Ignore initial capacity for StringBuilders and Collections option to ignore magic numbers used as initial capacity when constructing 'Collection', 'Map', 'StringBuilder' or 'StringBuffer' objects. Inspection ID: MagicNumber",
                  "markdown": "Reports \"magic numbers\": numeric literals that are not named by a constant declaration.\n\nUsing magic numbers can lead to unclear code, as well as errors if a magic\nnumber is changed in one location but remains unchanged not another. The numbers 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 100, 1000, 0L, 1L, 2L,\n0.0, 1.0, 0.0F and 1.0F are not reported by this inspection.\n\nExample:\n\n\n      void checkFileSize(long bytes) {\n        if (bytes > 1_048_576) {\n          throw new IllegalArgumentException(\"too big\");\n        }\n      }\n\nA quick-fix introduces a new constant:\n\n\n      static final int MAX_SUPPORTED_FILE_SIZE = 1_048_576;\n\n      void checkFileSize(long bytes) {\n        if (bytes > MAX_SUPPORTED_FILE_SIZE) {\n          throw new IllegalArgumentException(\"too big\");\n        }\n      }\n\nConfigure the inspection:\n\n* Use the **Ignore constants in 'hashCode()' methods** option to disable this inspection within `hashCode()` methods.\n* Use the **Ignore in annotations** option to ignore magic numbers in annotations.\n* Use the **Ignore initial capacity for StringBuilders and Collections** option to ignore magic numbers used as initial capacity when constructing `Collection`, `Map`, `StringBuilder` or `StringBuffer` objects.\n\nInspection ID: MagicNumber"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MagicNumber",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Abstraction issues",
                      "index": 63,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EnumSwitchStatementWhichMissesCases",
                "shortDescription": {
                  "text": "Enum 'switch' statement that misses case"
                },
                "fullDescription": {
                  "text": "Reports 'switch' statements over enumerated types that are not exhaustive. Example: 'enum AlphaBetaGamma {\n    A, B, C;\n\n    void x(AlphaBetaGamma e) {\n      switch (e) {\n\n      }\n    }\n  }' After the quick-fix is applied: 'enum AlphaBetaGamma {\n    A, B, C;\n\n    void x(AlphaBetaGamma e) {\n      switch (e) {\n        case A -> {}\n        case B -> {}\n        case C -> {}\n      }\n    }\n  }' Use the Ignore switch statements with a default branch option to ignore 'switch' statements that have a 'default' branch. This inspection depends on the Java feature 'Enums', which is available since Java 5. Inspection ID: EnumSwitchStatementWhichMissesCases",
                  "markdown": "Reports `switch` statements over enumerated types that are not exhaustive.\n\n**Example:**\n\n\n      enum AlphaBetaGamma {\n        A, B, C;\n\n        void x(AlphaBetaGamma e) {\n          switch (e) {\n\n          }\n        }\n      }\n\nAfter the quick-fix is applied:\n\n\n      enum AlphaBetaGamma {\n        A, B, C;\n\n        void x(AlphaBetaGamma e) {\n          switch (e) {\n            case A -> {}\n            case B -> {}\n            case C -> {}\n          }\n        }\n      }\n\n\nUse the **Ignore switch statements with a default branch** option to ignore `switch`\nstatements that have a `default` branch.\n\n\nThis inspection depends on the Java feature 'Enums', which is available since Java 5.\n\nInspection ID: EnumSwitchStatementWhichMissesCases"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "EnumSwitchStatementWhichMissesCases",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Control flow issues",
                      "index": 24,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SuspiciousIntegerDivAssignment",
                "shortDescription": {
                  "text": "Suspicious integer division assignment"
                },
                "fullDescription": {
                  "text": "Reports assignments whose right side is a division that shouldn't be truncated to integer. While occasionally intended, this construction is often buggy. Example: 'int x = 18;\n  x *= 3/2; // doesn't change x because of the integer division result' This code should be replaced with: 'int x = 18;\n  x *= 3.0/2;' In the inspection options, you can disable warnings for suspicious but possibly correct divisions, for example, when the dividend can't be calculated statically. 'void calc(int d) {\n     int x = 18;\n     x *= d/2;\n  }' New in 2019.2 Inspection ID: SuspiciousIntegerDivAssignment",
                  "markdown": "Reports assignments whose right side is a division that shouldn't be truncated to integer.\n\nWhile occasionally intended, this construction is often buggy.\n\n**Example:**\n\n\n      int x = 18;\n      x *= 3/2; // doesn't change x because of the integer division result\n\n\nThis code should be replaced with:\n\n\n      int x = 18;\n      x *= 3.0/2;\n\n\nIn the inspection options, you can disable warnings for suspicious but possibly correct divisions,\nfor example, when the dividend can't be calculated statically.\n\n\n      void calc(int d) {\n         int x = 18;\n         x *= d/2;\n      }\n\n\nNew in 2019.2\n\nInspection ID: SuspiciousIntegerDivAssignment"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SuspiciousIntegerDivAssignment",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NegativelyNamedBooleanVariable",
                "shortDescription": {
                  "text": "Negatively named boolean variable"
                },
                "fullDescription": {
                  "text": "Reports negatively named variables, for example: 'disabled', 'hidden', or 'isNotChanged'. Usually, inverting the 'boolean' value and removing the negation from the name makes the code easier to understand. Example: 'boolean disabled = false;' Inspection ID: NegativelyNamedBooleanVariable",
                  "markdown": "Reports negatively named variables, for example: `disabled`, `hidden`, or `isNotChanged`.\n\nUsually, inverting the `boolean` value and removing the negation from the name makes the code easier to understand.\n\nExample:\n\n\n        boolean disabled = false;\n\n\nInspection ID: NegativelyNamedBooleanVariable"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NegativelyNamedBooleanVariable",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Data flow",
                      "index": 51,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MethodWithMultipleLoops",
                "shortDescription": {
                  "text": "Method with multiple loops"
                },
                "fullDescription": {
                  "text": "Reports methods that contain more than one loop statement. Example: The method below will be reported because it contains two loops: 'void methodWithTwoLoops(int n1, int n2) {\n    for (int i = 0; i < n1; i++) {\n      System.out.println(i);\n    }\n\n    int j = 0;\n    while (j < n2) {\n      System.out.println(j);\n      j++;\n    }\n  }' The following method will also be reported because it contains a nested loop: 'void methodWithNestedLoop(int n1, int n2) {\n    for (int i = 0; i < n1; i++) {\n      for (int j = 0; j < n2; j++) {\n        System.out.println(i + j);\n      }\n    }\n  }' Inspection ID: MethodWithMultipleLoops",
                  "markdown": "Reports methods that contain more than one loop statement.\n\n**Example:**\n\nThe method below will be reported because it contains two loops:\n\n\n      void methodWithTwoLoops(int n1, int n2) {\n        for (int i = 0; i < n1; i++) {\n          System.out.println(i);\n        }\n\n        int j = 0;\n        while (j < n2) {\n          System.out.println(j);\n          j++;\n        }\n      }\n\nThe following method will also be reported because it contains a nested loop:\n\n\n      void methodWithNestedLoop(int n1, int n2) {\n        for (int i = 0; i < n1; i++) {\n          for (int j = 0; j < n2; j++) {\n            System.out.println(i + j);\n          }\n        }\n      }\n\nInspection ID: MethodWithMultipleLoops"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MethodWithMultipleLoops",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Method metrics",
                      "index": 108,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SleepWhileHoldingLock",
                "shortDescription": {
                  "text": "Call to 'Thread.sleep()' while synchronized"
                },
                "fullDescription": {
                  "text": "Reports calls to 'java.lang.Thread.sleep()' methods that occur within a 'synchronized' block or method. 'sleep()' within a 'synchronized' block may result in decreased performance, poor scalability, and possibly even deadlocking. Consider using 'wait()' instead, as it will release the lock held. Example: 'synchronized (lock) {\n    Thread.sleep(100);\n  }' Inspection ID: SleepWhileHoldingLock",
                  "markdown": "Reports calls to `java.lang.Thread.sleep()` methods that occur within a `synchronized` block or method.\n\n\n`sleep()` within a\n`synchronized` block may result in decreased performance, poor scalability, and possibly\neven deadlocking. Consider using `wait()` instead,\nas it will release the lock held.\n\n**Example:**\n\n\n      synchronized (lock) {\n        Thread.sleep(100);\n      }\n\nInspection ID: SleepWhileHoldingLock"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SleepWhileHoldingLock",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Threading issues",
                      "index": 23,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DeprecatedClassUsageInspection",
                "shortDescription": {
                  "text": "Deprecated API usage in XML"
                },
                "fullDescription": {
                  "text": "Reports usages of deprecated classes and methods in XML files. Inspection ID: DeprecatedClassUsageInspection",
                  "markdown": "Reports usages of deprecated classes and methods in XML files.\n\nInspection ID: DeprecatedClassUsageInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "DeprecatedClassUsageInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 88,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MethodReturnAlwaysConstant",
                "shortDescription": {
                  "text": "Method returns per-class constant"
                },
                "fullDescription": {
                  "text": "Reports methods that only return a constant, which may differ for various inheritors. Available only from Code | Inspect Code or Code | Analyze Code | Run Inspection by Name and isn't reported in the editor. Inspection ID: MethodReturnAlwaysConstant",
                  "markdown": "Reports methods that only return a constant, which may differ for various inheritors.\n\nAvailable only from **Code \\| Inspect Code** or\n**Code \\| Analyze Code \\| Run Inspection by Name** and isn't reported in the editor.\n\nInspection ID: MethodReturnAlwaysConstant"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MethodReturnAlwaysConstant",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Class structure",
                      "index": 17,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DuplicateBranchesInSwitch",
                "shortDescription": {
                  "text": "Duplicate branches in 'switch'"
                },
                "fullDescription": {
                  "text": "Reports 'switch' statements or expressions that contain the same code in different branches and suggests merging the duplicate branches. Example: 'switch (n) {\n    case 1:\n      System.out.println(n);\n      break;\n    case 2:\n      System.out.println(n);\n      break;\n    default:\n      System.out.println(\"default\");\n  }' After the quick-fix is applied: 'switch (n) {\n    case 1:\n    case 2:\n      System.out.println(n);\n      break;\n    default:\n      System.out.println(\"default\");\n  }' Inspection ID: DuplicateBranchesInSwitch New in 2019.1",
                  "markdown": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nInspection ID: DuplicateBranchesInSwitch\n\nNew in 2019.1"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "DuplicateBranchesInSwitch",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Verbose or redundant code constructs",
                      "index": 37,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SingleElementAnnotation",
                "shortDescription": {
                  "text": "Non-normalized annotation"
                },
                "fullDescription": {
                  "text": "Reports annotations in a shorthand form and suggests rewriting them in a normal form with an attribute name. Example: '@SuppressWarnings(\"foo\")' After the quick-fix is applied: '@SuppressWarnings(value = \"foo\")' Inspection ID: SingleElementAnnotation",
                  "markdown": "Reports annotations in a shorthand form and suggests rewriting them in a normal form with an attribute name.\n\nExample:\n\n\n      @SuppressWarnings(\"foo\")\n\nAfter the quick-fix is applied:\n\n\n      @SuppressWarnings(value = \"foo\")\n\nInspection ID: SingleElementAnnotation"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "SingleElementAnnotation",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MigrateFromJavaLangIo",
                "shortDescription": {
                  "text": "Method from 'System.out' can be used instead of 'java.lang.IO'"
                },
                "fullDescription": {
                  "text": "Reports 'IO.println()' and 'IO.print()' calls and suggests replacing them with 'System.out' methods. This inspection helps migrate code from 'java.lang.IO' class back to traditional 'System.out' calls. Example: 'IO.println(\"Hello, World!\");' After the quick-fix is applied: 'System.out.println(\"Hello, World!\");' This inspection can help to downgrade for backward compatibility with earlier Java versions. Inspection ID: MigrateFromJavaLangIo New in 2025.2",
                  "markdown": "Reports `IO.println()` and `IO.print()` calls and suggests replacing them with `System.out` methods.\n\n\nThis inspection helps migrate code from `java.lang.IO` class back to traditional `System.out` calls.\n\n\n**Example:**\n\n    IO.println(\"Hello, World!\");\n\nAfter the quick-fix is applied:\n\n    System.out.println(\"Hello, World!\");\n\n\nThis inspection can help to downgrade for backward compatibility with earlier Java versions.\n\nInspection ID: MigrateFromJavaLangIo\n\nNew in 2025.2"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "MigrateFromJavaLangIo",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level migration aids/Java 25",
                      "index": 138,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ManualMinMaxCalculation",
                "shortDescription": {
                  "text": "Manual min/max calculation"
                },
                "fullDescription": {
                  "text": "Reports cases where the minimum or the maximum of two numbers can be calculated using a 'Math.max()' or 'Math.min()' call, instead of doing it manually. Example: 'public int min(int a, int b) {\n    return b < a ? b : a;\n  }' After the quick-fix is applied: 'public int min(int a, int b) {\n    return Math.min(a, b);\n  }' Use the Disable for float and double option to disable this inspection for 'double' and 'float' types. This is useful because the quick-fix may slightly change the semantics for 'float'/ 'double' types when handling 'NaN'. Nevertheless, in most cases this will actually fix a subtle bug where 'NaN' is not taken into account. Inspection ID: ManualMinMaxCalculation New in 2019.2",
                  "markdown": "Reports cases where the minimum or the maximum of two numbers can be calculated using a `Math.max()` or `Math.min()` call, instead of doing it manually.\n\n**Example:**\n\n\n      public int min(int a, int b) {\n        return b < a ? b : a;\n      }\n\nAfter the quick-fix is applied:\n\n\n      public int min(int a, int b) {\n        return Math.min(a, b);\n      }\n\n\nUse the **Disable for float and double** option to disable this inspection for `double` and `float` types.\nThis is useful because the quick-fix may slightly change the semantics for `float`/\n`double` types when handling `NaN`. Nevertheless, in most cases this will actually fix\na subtle bug where `NaN` is not taken into account.\n\nInspection ID: ManualMinMaxCalculation\n\nNew in 2019.2"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ManualMinMaxCalculation",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Verbose or redundant code constructs",
                      "index": 37,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SillyAssignment",
                "shortDescription": {
                  "text": "Variable is assigned to itself"
                },
                "fullDescription": {
                  "text": "Reports assignments of a variable to itself. Example: 'a = a;' The quick-fix removes the assigment. Inspection ID: SillyAssignment",
                  "markdown": "Reports assignments of a variable to itself.\n\n**Example:**\n\n\n      a = a;\n\nThe quick-fix removes the assigment.\n\nInspection ID: SillyAssignment"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SillyAssignment",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Declaration redundancy",
                      "index": 9,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BoundedWildcard",
                "shortDescription": {
                  "text": "Can use bounded wildcard"
                },
                "fullDescription": {
                  "text": "Reports generic method parameters that can make use of bounded wildcards. Example: 'void process(Consumer<Number> consumer);' should be replaced with: 'void process(Consumer<? super Number> consumer);' This method signature is more flexible because it accepts more types: not only 'Consumer<Number>', but also 'Consumer<Object>'. Likewise, type parameters in covariant position: 'T produce(Producer<T> p);' should be replaced with: 'T produce(Producer<? extends T> p);' To quote Joshua Bloch in Effective Java third Edition: Item 31: Use bounded wildcards to increase API flexibility Using wildcard types in your APIs, while tricky, makes the APIs far more flexible. If you write a library that will be widely used, the proper use of wildcard types should be considered mandatory. Remember the basic rule: producer-extends, consumer-super (PECS). Also remember that all Comparables and Comparators are consumers. Use the inspection options to toggle the reporting for: invariant classes. An example of an invariant class is 'java.util.List<T>' because it both accepts values (via the 'List.add(T)' method) and produces values (via the 'T List.get()' method). On the other hand, 'contravariant' classes only receive values, for example, 'java.util.function.Consumer<T>' with the only method 'accept(T)'. Similarly, 'covariant' classes only produce values, for example, 'java.util.function.Supplier<T>' with the only method 'T get()'. People often use bounded wildcards in covariant/contravariant classes but avoid wildcards in invariant classes, for example, 'void process(List<? extends T> l)'. Disable this option to ignore such invariant classes and leave them rigidly typed, for example, 'void process(List<T> l)'. 'private' methods, which can be considered as not a part of the public API instance methods Inspection ID: BoundedWildcard",
                  "markdown": "Reports generic method parameters that can make use of [bounded wildcards](https://en.wikipedia.org/wiki/Wildcard_(Java)).\n\n**Example:**\n\n\n      void process(Consumer<Number> consumer);\n\nshould be replaced with:\n\n\n      void process(Consumer<? super Number> consumer);\n\n\nThis method signature is more flexible because it accepts more types: not only\n`Consumer<Number>`, but also `Consumer<Object>`.\n\nLikewise, type parameters in covariant position:\n\n\n      T produce(Producer<T> p);\n\nshould be replaced with:\n\n\n      T produce(Producer<? extends T> p);\n\n\nTo quote [Joshua Bloch](https://en.wikipedia.org/wiki/Joshua_Bloch#Effective_Java) in *Effective Java* third Edition:\n>\n> #### Item 31: Use bounded wildcards to increase API flexibility\n>\n> Using wildcard types in your APIs, while tricky, makes the APIs far more flexible. If you write a library that will be widely used, the proper use of wildcard types should be considered mandatory. Remember the basic rule: producer-extends, consumer-super (PECS). Also remember that all Comparables and Comparators are consumers.\n\n\nUse the inspection options to toggle the reporting for:\n\n*\n  invariant classes. An example of an invariant class is `java.util.List<T>` because it both accepts values\n  (via the `List.add(T)` method)\n  and produces values (via the `T List.get()` method).\n\n\n  On the\n  other hand, `contravariant` classes only receive values, for example, `java.util.function.Consumer<T>`\n  with the only method `accept(T)`. Similarly, `covariant` classes\n  only produce values, for example, `java.util.function.Supplier<T>`\n  with the only method `T get()`.\n\n\n  People often use bounded wildcards in covariant/contravariant\n  classes but avoid wildcards in invariant classes, for example, `void process(List<? extends T> l)`.\n  Disable this option to ignore such invariant classes and leave them rigidly typed, for example, `void\n  process(List<T> l)`.\n*\n  `private` methods, which can be considered as not a part of the public API\n\n*\n  instance methods\n\nInspection ID: BoundedWildcard"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "BoundedWildcard",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code style issues",
                      "index": 8,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InstanceVariableInitialization",
                "shortDescription": {
                  "text": "Instance field may not be initialized"
                },
                "fullDescription": {
                  "text": "Reports instance variables that may be uninitialized upon object initialization. Example: 'class Foo {\n    public int bar;\n\n    static { }\n  }' Note that this inspection uses a very conservative dataflow algorithm and may incorrectly report instance variables as uninitialized. Variables reported as initialized will always be initialized. Use the Ignore primitive fields option to ignore uninitialized primitive fields. Inspection ID: InstanceVariableInitialization",
                  "markdown": "Reports instance variables that may be uninitialized upon object initialization.\n\n**Example:**\n\n\n      class Foo {\n        public int bar;\n\n        static { }\n      }\n\nNote that this inspection uses a very conservative dataflow algorithm and may incorrectly report instance variables as uninitialized. Variables\nreported as initialized will always be initialized.\n\nUse the **Ignore primitive fields** option to ignore uninitialized primitive fields.\n\nInspection ID: InstanceVariableInitialization"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "InstanceVariableMayNotBeInitialized",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Initialization",
                      "index": 27,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IfStatementWithTooManyBranches",
                "shortDescription": {
                  "text": "'if' statement with too many branches"
                },
                "fullDescription": {
                  "text": "Reports 'if' statements with too many branches. Such statements may be confusing and are often a sign of inadequate levels of design abstraction. Use the Maximum number of branches field to specify the maximum number of branches an 'if' statement is allowed to have. Inspection ID: IfStatementWithTooManyBranches",
                  "markdown": "Reports `if` statements with too many branches.\n\nSuch statements may be confusing and are often a sign of inadequate levels of design\nabstraction.\n\n\nUse the **Maximum number of branches** field to specify the maximum number of branches an `if` statement is allowed to have.\n\n\nInspection ID: IfStatementWithTooManyBranches"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "IfStatementWithTooManyBranches",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Control flow issues",
                      "index": 24,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NonSerializableObjectPassedToObjectStream",
                "shortDescription": {
                  "text": "Non-serializable object passed to 'ObjectOutputStream'"
                },
                "fullDescription": {
                  "text": "Reports non-'Serializable' objects used as arguments to 'java.io.ObjectOutputStream.write()'. Such calls will result in runtime exceptions. This inspection assumes objects of the types 'java.util.Collection' and 'java.util.Map' to be 'Serializable', unless the types they are declared in are non-'Serializable'. Example: 'public class IWantToSerializeThis {\n    public static void main(String[] args) throws IOException {\n      try(var stream = new ObjectOutputStream(Files.newOutputStream(Paths.get(\"output\")))) {\n        // Warning -- will fail with NotSerializableException\n        stream.writeObject(new IWantToSerializeThis());\n      }\n    }\n  }' Inspection ID: NonSerializableObjectPassedToObjectStream",
                  "markdown": "Reports non-`Serializable` objects used as arguments to `java.io.ObjectOutputStream.write()`. Such calls will result in runtime exceptions.\n\n\nThis inspection assumes objects of the types `java.util.Collection` and\n`java.util.Map` to be `Serializable`, unless the types\nthey are declared in are non-`Serializable`.\n\n**Example:**\n\n\n      public class IWantToSerializeThis {\n        public static void main(String[] args) throws IOException {\n          try(var stream = new ObjectOutputStream(Files.newOutputStream(Paths.get(\"output\")))) {\n            // Warning -- will fail with NotSerializableException\n            stream.writeObject(new IWantToSerializeThis());\n          }\n        }\n      }\n\nInspection ID: NonSerializableObjectPassedToObjectStream"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NonSerializableObjectPassedToObjectStream",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Serialization issues",
                      "index": 18,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ModuleWithTooFewClasses",
                "shortDescription": {
                  "text": "Module with too few classes"
                },
                "fullDescription": {
                  "text": "Reports modules that contain too few classes. Overly small modules may indicate a too fragmented design. Java, Kotlin and Groovy classes are counted. Available only from Code | Inspect Code or Code | Analyze Code | Run Inspection by Name and isn't reported in the editor. Use the Minimum number of classes field to specify the minimum number of classes a module may have. Inspection ID: ModuleWithTooFewClasses",
                  "markdown": "Reports modules that contain too few classes. Overly small modules may indicate a too fragmented design. Java, Kotlin and Groovy classes are counted.\n\nAvailable only from **Code \\| Inspect Code** or\n**Code \\| Analyze Code \\| Run Inspection by Name** and isn't reported in the editor.\n\nUse the **Minimum number of classes** field to specify the minimum number of classes a module may have.\n\n\nInspection ID: ModuleWithTooFewClasses"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ModuleWithTooFewClasses",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Modularization issues",
                      "index": 57,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NullArgumentToVariableArgMethod",
                "shortDescription": {
                  "text": "Confusing argument to varargs method"
                },
                "fullDescription": {
                  "text": "Reports calls to variable arity methods that have a single argument in the vararg parameter position, which is either a 'null' or an array of a subtype of the vararg parameter. Such an argument may be confusing as it is unclear if a varargs or non-varargs call is desired. Example: 'String[] ss = new String[]{\"foo\", \"bar\"};\n  System.out.printf(\"%s\", ss);' In this example only the first element of the array will be printed, not the entire array. This inspection depends on the Java feature 'Variable arity methods', which is available since Java 5. Inspection ID: NullArgumentToVariableArgMethod",
                  "markdown": "Reports calls to variable arity methods that have a single argument in the vararg parameter position, which is either a `null` or an array of a subtype of the vararg parameter. Such an argument may be confusing as it is unclear if a varargs or non-varargs call is desired.\n\n**Example:**\n\n\n      String[] ss = new String[]{\"foo\", \"bar\"};\n      System.out.printf(\"%s\", ss);\n\nIn this example only the first element of the array will be printed, not the entire array.\n\nThis inspection depends on the Java feature 'Variable arity methods', which is available since Java 5.\n\nInspection ID: NullArgumentToVariableArgMethod"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ConfusingArgumentToVarargsMethod",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 12,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseOfObsoleteDateTimeApi",
                "shortDescription": {
                  "text": "Use of obsolete date-time API"
                },
                "fullDescription": {
                  "text": "Reports usages of 'java.util.Date', 'java.util.Calendar', 'java.util.GregorianCalendar', 'java.util.TimeZone', and 'java.util.SimpleTimeZone'. While still supported, these classes were made obsolete by the JDK8 Date-Time API and should probably not be used in new development. Inspection ID: UseOfObsoleteDateTimeApi",
                  "markdown": "Reports usages of `java.util.Date`, `java.util.Calendar`, `java.util.GregorianCalendar`, `java.util.TimeZone`, and `java.util.SimpleTimeZone`.\n\nWhile still supported, these classes were made obsolete by the JDK8 Date-Time API and should probably\nnot be used in new development.\n\nInspection ID: UseOfObsoleteDateTimeApi"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UseOfObsoleteDateTimeApi",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Code maturity",
                      "index": 46,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OverloadedVarargsMethod",
                "shortDescription": {
                  "text": "Overloaded varargs method"
                },
                "fullDescription": {
                  "text": "Reports varargs methods with the same name as other methods in the class or in a superclass. Overloaded methods that take a variable number of arguments can be very confusing because it is often unclear which overload gets called. Example: 'public void execute(Runnable... r) {} // warning\n    public void execute(Runnable r1, Runnable r2) {}' Use the option to ignore overloaded methods whose parameter types are definitely incompatible. Inspection ID: OverloadedVarargsMethod",
                  "markdown": "Reports varargs methods with the same name as other methods in the class or in a superclass. Overloaded methods that take a variable number of arguments can be very confusing because it is often unclear which overload gets called.\n\n**Example:**\n\n\n        public void execute(Runnable... r) {} // warning\n        public void execute(Runnable r1, Runnable r2) {}\n\n\nUse the option to ignore overloaded methods whose parameter types are definitely incompatible.\n\nInspection ID: OverloadedVarargsMethod"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "OverloadedVarargsMethod",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Naming conventions/Method",
                      "index": 83,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AnonymousInnerClassMayBeStatic",
                "shortDescription": {
                  "text": "Anonymous class may be a named 'static' inner class"
                },
                "fullDescription": {
                  "text": "Reports anonymous classes that may be safely replaced with 'static' inner classes. An anonymous class may be a 'static' inner class if it doesn't explicitly reference its enclosing instance or local classes from its surrounding method. A 'static' inner class does not keep an implicit reference to its enclosing instance. This prevents a common cause of memory leaks and uses less memory per class instance. Since Java 18, only serializable anonymous classes keep an implicit reference to their enclosing instance, if this reference is not used. Therefore, when the module language level is Java 18 or higher, this inspection reports serializable classes only. The quick-fix extracts the anonymous class into a named 'static' inner class. Example: 'void sample() {\n    Thread thread = new Thread(new Runnable() {\n      @Override\n      public void run() {\n      }\n    });\n  }' After the quick-fix is applied: 'void sample() {\n    Thread thread = new Thread(new Task());\n  }\n\n  private static class Task implements Runnable {\n    @Override\n    public void run() {\n    }\n  }' Inspection ID: AnonymousInnerClassMayBeStatic",
                  "markdown": "Reports anonymous classes that may be safely replaced with `static` inner classes. An anonymous class may be a `static` inner class if it doesn't explicitly reference its enclosing instance or local classes from its surrounding method.\n\n\nA `static` inner class does not keep an implicit reference to its enclosing instance.\nThis prevents a common cause of memory leaks and uses less memory per class instance.\n\n\nSince Java 18, only serializable anonymous classes keep an implicit reference to their enclosing instance,\nif this reference is not used. Therefore, when the module language level is Java 18 or higher,\nthis inspection reports serializable classes only.\n\nThe quick-fix extracts the anonymous class into a named `static` inner class.\n\n**Example:**\n\n\n      void sample() {\n        Thread thread = new Thread(new Runnable() {\n          @Override\n          public void run() {\n          }\n        });\n      }\n\nAfter the quick-fix is applied:\n\n\n      void sample() {\n        Thread thread = new Thread(new Task());\n      }\n\n      private static class Task implements Runnable {\n        @Override\n        public void run() {\n        }\n      }\n\nInspection ID: AnonymousInnerClassMayBeStatic"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AnonymousInnerClassMayBeStatic",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Memory",
                      "index": 132,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PublicConstructor",
                "shortDescription": {
                  "text": "'public' constructor can be replaced with factory method"
                },
                "fullDescription": {
                  "text": "Reports 'public' constructors. Some coding standards discourage the use of 'public' constructors and recommend 'static' factory methods instead. This way the implementation can be swapped out without affecting the call sites. Example: 'class Test {\n    private String name;\n\n    public Test(String name) {\n        this.name = name;\n    }\n\n    public void test() {\n        System.out.println(name);\n    }\n\n    public static void main(String[] args) {\n        new Test(\"str\").test();\n    }\n  }' After quick-fix is applied: 'class Test {\n    private String name;\n\n    private Test(String name) {\n        this.name = name;\n    }\n\n    public static Test getInstance(String name) {\n        return new Test(name);\n    }\n\n    public void test() {\n        System.out.println(name);\n    }\n\n    public static void main(String[] args) {\n        getInstance(\"str\").test();\n    }\n  }' Inspection ID: PublicConstructor",
                  "markdown": "Reports `public` constructors.\n\nSome coding standards discourage the use of `public` constructors and recommend\n`static` factory methods instead.\nThis way the implementation can be swapped out without affecting the call sites.\n\n**Example:**\n\n\n      class Test {\n        private String name;\n\n        public Test(String name) {\n            this.name = name;\n        }\n\n        public void test() {\n            System.out.println(name);\n        }\n\n        public static void main(String[] args) {\n            new Test(\"str\").test();\n        }\n      }\n\nAfter quick-fix is applied:\n\n\n      class Test {\n        private String name;\n\n        private Test(String name) {\n            this.name = name;\n        }\n\n        public static Test getInstance(String name) {\n            return new Test(name);\n        }\n\n        public void test() {\n            System.out.println(name);\n        }\n\n        public static void main(String[] args) {\n            getInstance(\"str\").test();\n        }\n      }\n\nInspection ID: PublicConstructor"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PublicConstructor",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Class structure",
                      "index": 17,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantEmbeddedExpression",
                "shortDescription": {
                  "text": "Redundant embedded expression in string template"
                },
                "fullDescription": {
                  "text": "Reports redundant embedded expressions in 'STR' templates, such as trivial literals or empty expressions. Example: 'System.out.println(STR.\"Hello \\{\"world\"}\");' After the quick-fix is applied: 'System.out.println(STR.\"Hello world\");' This inspection depends on the Java feature 'String templates', which is available since Java 21-preview. Inspection ID: RedundantEmbeddedExpression New in 2023.3",
                  "markdown": "Reports redundant embedded expressions in `STR` templates, such as trivial literals or empty expressions.\n\nExample:\n\n\n      System.out.println(STR.\"Hello \\{\"world\"}\");\n\nAfter the quick-fix is applied:\n\n\n      System.out.println(STR.\"Hello world\");\n\nThis inspection depends on the Java feature 'String templates', which is available since Java 21-preview.\n\nInspection ID: RedundantEmbeddedExpression\n\nNew in 2023.3"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RedundantEmbeddedExpression",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Verbose or redundant code constructs",
                      "index": 37,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SwitchStatementWithTooFewBranches",
                "shortDescription": {
                  "text": "Minimum 'switch' branches"
                },
                "fullDescription": {
                  "text": "Reports 'switch' statements and expressions with too few 'case' labels, and suggests rewriting them as 'if' and 'else if' statements. Example (minimum branches == 3): 'switch (expression) {\n    case \"foo\" -> foo();\n    case \"bar\" -> bar();\n  }' After the quick-fix is applied: 'if (\"foo\".equals(expression)) {\n    foo();\n  } else if (\"bar\".equals(expression)) {\n    bar();\n  }' Exhaustive switch expressions (Java 14+) or pattern switch statements (Java 17 preview) without the 'default' branch are not reported. That's because compile-time exhaustiveness check will be lost when the 'switch' is converted to 'if' which might be undesired. Configure the inspection: Use the Minimum number of branches field to specify the minimum expected number of 'case' labels. Use the Do not report pattern switch statements option to avoid reporting switch statements and expressions that have pattern branches. E.g.: 'String result = switch(obj) {\n    case String str -> str.trim();\n    default -> \"none\";\n  };' It might be preferred to keep the switch even with a single pattern branch, rather than using the 'instanceof' statement. Inspection ID: SwitchStatementWithTooFewBranches",
                  "markdown": "Reports `switch` statements and expressions with too few `case` labels, and suggests rewriting them as `if` and `else if` statements.\n\nExample (minimum branches == 3):\n\n\n      switch (expression) {\n        case \"foo\" -> foo();\n        case \"bar\" -> bar();\n      }\n\nAfter the quick-fix is applied:\n\n\n      if (\"foo\".equals(expression)) {\n        foo();\n      } else if (\"bar\".equals(expression)) {\n        bar();\n      }\n\nExhaustive switch expressions (Java 14+) or pattern switch statements (Java 17 preview) without the 'default' branch are not reported.\nThat's because compile-time exhaustiveness check will be lost when the `switch` is converted to `if`\nwhich might be undesired.\n\nConfigure the inspection:\n\nUse the **Minimum number of branches** field to specify the minimum expected number of `case` labels.\n\nUse the **Do not report pattern switch statements** option to avoid reporting switch statements and expressions that\nhave pattern branches. E.g.:\n\n\n      String result = switch(obj) {\n        case String str -> str.trim();\n        default -> \"none\";\n      };\n\nIt might be preferred to keep the switch even with a single pattern branch, rather than using the `instanceof` statement.\n\nInspection ID: SwitchStatementWithTooFewBranches"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SwitchStatementWithTooFewBranches",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Control flow issues",
                      "index": 24,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UsagesOfObsoleteApi",
                "shortDescription": {
                  "text": "Usages of ApiStatus.@Obsolete"
                },
                "fullDescription": {
                  "text": "Reports declarations (classes, methods, fields) annotated as '@ApiStatus.Obsolete'. Sometimes it's impossible to delete the current API, though it might not work correctly, there is a newer, or better, or more generic API. This way, it's a weaker variant of '@Deprecated' annotation. The annotated API is not supposed to be used in the new code, but it's permitted to postpone the migration of the existing code, therefore the usage is not considered a warning. Inspection ID: UsagesOfObsoleteApi",
                  "markdown": "Reports declarations (classes, methods, fields) annotated as `@ApiStatus.Obsolete`.\n\n\nSometimes it's impossible to delete the current API, though it might not work correctly, there is a newer, or better, or more generic API.\nThis way, it's a weaker variant of `@Deprecated` annotation.\nThe annotated API is not supposed to be used in the new code, but it's permitted to postpone the migration of the existing code,\ntherefore the usage is not considered a warning.\n\nInspection ID: UsagesOfObsoleteApi"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "UsagesOfObsoleteApi",
                    "ideaSeverity": "TEXT ATTRIBUTES",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JVM languages",
                      "index": 1,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConstantDeclaredInInterface",
                "shortDescription": {
                  "text": "Constant declared in interface"
                },
                "fullDescription": {
                  "text": "Reports constants ('public static final' fields) declared in interfaces. Some coding standards require declaring constants in abstract classes instead. Inspection ID: ConstantDeclaredInInterface",
                  "markdown": "Reports constants (`public static final` fields) declared in interfaces.\n\nSome coding standards require declaring constants in abstract classes instead.\n\nInspection ID: ConstantDeclaredInInterface"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ConstantDeclaredInInterface",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Class structure",
                      "index": 17,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StaticImport",
                "shortDescription": {
                  "text": "Static import"
                },
                "fullDescription": {
                  "text": "Reports 'import static' statements. Such 'import' statements are not supported under Java 1.4 or earlier JVMs. Configure the inspection: Use the table below to specify the classes that will be ignored by the inspection when used in an 'import static' statement. Use the Ignore single field static imports checkbox to ignore single-field 'import static' statements. Use the Ignore single method static imports checkbox to ignore single-method 'import static' statements. Inspection ID: StaticImport",
                  "markdown": "Reports `import static` statements.\n\nSuch `import` statements are not supported under Java 1.4 or earlier JVMs.\n\nConfigure the inspection:\n\n* Use the table below to specify the classes that will be ignored by the inspection when used in an `import static` statement.\n* Use the **Ignore single field static imports** checkbox to ignore single-field `import static` statements.\n* Use the **Ignore single method static imports** checkbox to ignore single-method `import static` statements.\n\nInspection ID: StaticImport"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "StaticImport",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Imports",
                      "index": 19,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NoExplicitFinalizeCalls",
                "shortDescription": {
                  "text": "'finalize()' called explicitly"
                },
                "fullDescription": {
                  "text": "Reports calls to 'Object.finalize()'. Calling 'Object.finalize()' explicitly may result in objects being placed in an inconsistent state. The garbage collector automatically calls this method on an object when it determines that there are no references to this object. The inspection doesn't report calls to 'super.finalize()' from within implementations of 'finalize()' as they're benign. Example: 'MyObject m = new MyObject();\n  m.finalize();\n  System.gc()' Inspection ID: NoExplicitFinalizeCalls",
                  "markdown": "Reports calls to `Object.finalize()`.\n\nCalling `Object.finalize()` explicitly may result in objects being placed in an\ninconsistent state.\nThe garbage collector automatically calls this method on an object when it determines that there are no references to this object.\n\nThe inspection doesn't report calls to `super.finalize()` from within implementations of `finalize()` as\nthey're benign.\n\n**Example:**\n\n\n      MyObject m = new MyObject();\n      m.finalize();\n      System.gc()\n\nInspection ID: NoExplicitFinalizeCalls"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "FinalizeCalledExplicitly",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Finalization",
                      "index": 56,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceNullCheck",
                "shortDescription": {
                  "text": "Null check can be replaced with method call"
                },
                "fullDescription": {
                  "text": "Reports 'null' checks that can be replaced with a call to a static method from 'Objects' or 'Stream'. Example: 'if (message == null) {\n    application.messageStorage().save(new EmptyMessage());\n  } else {\n    application.messageStorage().save(message);\n  }' After the quick-fix is applied: 'application.messageStorage()\n    .save(Objects.requireNonNullElseGet(message, () -> new EmptyMessage()));' Use the Don't warn if the replacement is longer than the original option to ignore the cases when the replacement is longer than the original code. Inspection ID: ReplaceNullCheck New in 2017.3",
                  "markdown": "Reports `null` checks that can be replaced with a call to a static method from `Objects` or `Stream`.\n\n**Example:**\n\n\n      if (message == null) {\n        application.messageStorage().save(new EmptyMessage());\n      } else {\n        application.messageStorage().save(message);\n      }\n\nAfter the quick-fix is applied:\n\n\n      application.messageStorage()\n        .save(Objects.requireNonNullElseGet(message, () -> new EmptyMessage()));\n\n\nUse the **Don't warn if the replacement is longer than the original** option to ignore the cases when the replacement is longer than the\noriginal code.\n\nInspection ID: ReplaceNullCheck\n\nNew in 2017.3"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ReplaceNullCheck",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Java language level migration aids/Java 9",
                      "index": 66,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NegatedIfElse",
                "shortDescription": {
                  "text": "'if' statement with negated condition"
                },
                "fullDescription": {
                  "text": "Reports 'if' statements that contain 'else' branches and whose conditions are negated. Flipping the order of the 'if' and 'else' branches usually increases the clarity of such statements. There is a fix that inverts the current 'if' statement. Example: 'void m(Object o1, Object o2) {\n        if (o1 != o2) {\n            System.out.println(1);\n        }\n        else {\n            System.out.println(2);\n        }\n    }' After applying the quick-fix: 'void m(Object o1, Object o2) {\n        if (o1 == o2) {\n            System.out.println(2);\n        } else {\n            System.out.println(1);\n        }\n    }' Use the Ignore '!= null' comparisons option to ignore comparisons of the '!= null' form. Use the Ignore '!= 0' comparisons option to ignore comparisons of the '!= 0' form. Inspection ID: NegatedIfElse",
                  "markdown": "Reports `if` statements that contain `else` branches and whose conditions are negated.\n\nFlipping the order of the `if` and `else`\nbranches usually increases the clarity of such statements.\n\nThere is a fix that inverts the current `if` statement.\n\nExample:\n\n\n        void m(Object o1, Object o2) {\n            if (o1 != o2) {\n                System.out.println(1);\n            }\n            else {\n                System.out.println(2);\n            }\n        }\n\nAfter applying the quick-fix:\n\n\n        void m(Object o1, Object o2) {\n            if (o1 == o2) {\n                System.out.println(2);\n            } else {\n                System.out.println(1);\n            }\n        }\n\nUse the **Ignore '!= null' comparisons** option to ignore comparisons of the `!= null` form.\n\nUse the **Ignore '!= 0' comparisons** option to ignore comparisons of the `!= 0` form.\n\nInspection ID: NegatedIfElse"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "IfStatementWithNegatedCondition",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Control flow issues",
                      "index": 24,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FieldCount",
                "shortDescription": {
                  "text": "Class with too many fields"
                },
                "fullDescription": {
                  "text": "Reports classes whose number of fields exceeds the specified maximum. Classes with a large number of fields are often trying to do too much. Consider splitting such a class into multiple smaller classes. Configure the inspection: Use the Field count limit field to specify the maximum allowed number of fields in a class. Use the Include constant fields in count option to indicate whether constant fields should be counted. By default only immutable 'static final' objects are counted as constants. Use the 'static final' fields count as constant option to count any 'static final' field as constant. Use the Include enum constants in count option to specify whether 'enum' constants in 'enum' classes should be counted. Inspection ID: FieldCount",
                  "markdown": "Reports classes whose number of fields exceeds the specified maximum.\n\nClasses with a large number of fields are often trying to do too much. Consider splitting such a class into multiple smaller classes.\n\nConfigure the inspection:\n\n* Use the **Field count limit** field to specify the maximum allowed number of fields in a class.\n* Use the **Include constant fields in count** option to indicate whether constant fields should be counted.\n* By default only immutable `static final` objects are counted as constants. Use the **'static final' fields count as constant** option to count any `static final` field as constant.\n* Use the **Include enum constants in count** option to specify whether `enum` constants in `enum` classes should be counted.\n\nInspection ID: FieldCount"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ClassWithTooManyFields",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Class metrics",
                      "index": 96,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.spring",
            "version": "253.22441.34",
            "rules": [
              {
                "id": "SpringBeanConstructorArgInspection",
                "shortDescription": {
                  "text": "Incorrect constructor injection in XML Spring bean"
                },
                "fullDescription": {
                  "text": "Reports Spring '<bean>' using constructor-based dependency injection. The inspection triggers when it can't find an appropriate constructor or factory method for '<bean>' with the configured '<constructor-arg>' tags and defined 'autowire' policy. Example: 'public class MyComponent {\n    // constructor\n    public MyComponent(MyBean bean) {}\n    // factory method\n    public static MyComponent getInstance(String name, int port) {\n    }' '<beans>\n      <bean class=\"beans.MyComponent\" id=\"foo\"> <!-- reports \"No matching constructor found in class 'MyComponent\" -->\n         <constructor-arg ref=\"myBean\"/>\n         <constructor-arg value=\"123\"/>\n      </bean>\n\n      <bean class=\"beans.MyComponent\" factory-method=\"getInstance\"> <!-- reports \"No matching factory method found in class\" -->\n         <constructor-arg value=\"123\"/>\n      </bean>\n    </beans>' Inspection ID: SpringBeanConstructorArgInspection",
                  "markdown": "Reports Spring `<bean>` using constructor-based dependency injection.\n\nThe inspection triggers when it can't find an appropriate constructor or factory method for `<bean>` with the configured\n`<constructor-arg>` tags and defined `autowire` policy.\n\n**Example:**\n\n\n        public class MyComponent {\n        // constructor\n        public MyComponent(MyBean bean) {}\n        // factory method\n        public static MyComponent getInstance(String name, int port) {\n        }\n\n\n        <beans>\n          <bean class=\"beans.MyComponent\" id=\"foo\"> <!-- reports \"No matching constructor found in class 'MyComponent\" -->\n             <constructor-arg ref=\"myBean\"/>\n             <constructor-arg value=\"123\"/>\n          </bean>\n\n          <bean class=\"beans.MyComponent\" factory-method=\"getInstance\"> <!-- reports \"No matching factory method found in class\" -->\n             <constructor-arg value=\"123\"/>\n          </bean>\n        </beans>\n\nInspection ID: SpringBeanConstructorArgInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "SpringBeanConstructorArgInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Core/XML",
                      "index": 7,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringTestingSqlInspection",
                "shortDescription": {
                  "text": "Invalid @Sql and @SqlGroup configurations"
                },
                "fullDescription": {
                  "text": "Reports unresolved file references in the 'scripts' attributes of the @Sql annotation and the corresponding aliased attributes of the '@Sql' meta annotations. Example: '@SqlGroup({\n     @Sql(\"not-found\"), // reports \"Cannot resolve file 'not-found\"\n     @Sql(\"found.sql\")\n  })\n  public class MyTestWithSqlData {...}' Inspection ID: SpringTestingSqlInspection",
                  "markdown": "Reports unresolved file references in the `scripts` attributes of the\n[@Sql](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/test/context/jdbc/Sql.html)\nannotation and the corresponding aliased attributes of the `@Sql` meta annotations.\n\n**Example:**\n\n\n      @SqlGroup({\n         @Sql(\"not-found\"), // reports \"Cannot resolve file 'not-found\"\n         @Sql(\"found.sql\")\n      })\n      public class MyTestWithSqlData {...}\n\nInspection ID: SpringTestingSqlInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SpringTestingSqlInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Core/Code",
                      "index": 11,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringJavaAutowiredFieldsWarningInspection",
                "shortDescription": {
                  "text": "Non-recommended field injections"
                },
                "fullDescription": {
                  "text": "Reports injected or autowired fields in Spring components. The quick-fix suggests the recommended constructor-based dependency injection in beans and assertions for mandatory fields. Example: 'class MyComponent {\n  @Inject MyCollaborator collaborator; // injected field\n\n  public void myBusinessMethod() {\n    collaborator.doSomething(); // throws NullPointerException\n  }\n}' After applying the quick-fix: 'class MyComponent {\n\n  private final MyCollaborator collaborator;\n\n  @Inject\n  public MyComponent(MyCollaborator collaborator) {\n    Assert.notNull(collaborator, \"MyCollaborator must not be null!\");\n    this.collaborator = collaborator;\n  }\n\n  public void myBusinessMethod() {\n    collaborator.doSomething(); // now this call is safe\n  }\n}' Inspection ID: SpringJavaAutowiredFieldsWarningInspection",
                  "markdown": "Reports injected or autowired fields in Spring components.\n\nThe quick-fix suggests the recommended constructor-based dependency injection in beans\nand assertions for mandatory fields.\n\n**Example:**\n\n\n    class MyComponent {\n      @Inject MyCollaborator collaborator; // injected field\n\n      public void myBusinessMethod() {\n        collaborator.doSomething(); // throws NullPointerException\n      }\n    }\n\nAfter applying the quick-fix:\n\n\n    class MyComponent {\n\n      private final MyCollaborator collaborator;\n\n      @Inject\n      public MyComponent(MyCollaborator collaborator) {\n        Assert.notNull(collaborator, \"MyCollaborator must not be null!\");\n        this.collaborator = collaborator;\n      }\n\n      public void myBusinessMethod() {\n        collaborator.doSomething(); // now this call is safe\n      }\n    }\n\nInspection ID: SpringJavaAutowiredFieldsWarningInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "SpringJavaAutowiredFieldsWarningInspection",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Core/Code",
                      "index": 11,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringBeanInstantiationInspection",
                "shortDescription": {
                  "text": "Invalid non-abstract bean instantiation"
                },
                "fullDescription": {
                  "text": "Reports instantiation errors on interface/abstract class <bean> declarations. Example: '<beans>\n    <bean class=\"java.util.List\"/>\n    <!-- reports 'Interface not allowed for non-abstract beans' -->\n  </beans>' Inspection ID: SpringBeanInstantiationInspection",
                  "markdown": "Reports instantiation errors on interface/abstract class **\\<bean\\>** declarations.\n\n**Example:**\n\n\n      <beans>\n        <bean class=\"java.util.List\"/>\n        <!-- reports 'Interface not allowed for non-abstract beans' -->\n      </beans>\n\nInspection ID: SpringBeanInstantiationInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "SpringBeanInstantiationInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Core/XML",
                      "index": 7,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RequiredBeanTypeInspection",
                "shortDescription": {
                  "text": "Incorrect injected bean type"
                },
                "fullDescription": {
                  "text": "Reports incorrect types of custom schema bean injections defined in the XML application context. Example: 'public class SimpleBean{}' '<beans ...>\n    <bean class=\"SimpleBean\" id=\"simpleBean\"/>\n       <mvc:annotation-driven\n         conversion-service=\"simpleBean\"      <!-- reports \"Bean must be of 'org.springframework.core.convert.ConversionService' type\" -->\n         message-codes-resolver=\"simpleBean\"  <!-- reports 'Bean must be of org.springframework.validation.MessageCodesResolver' type\" -->\n         validator=\"simpleBean\"               <!-- reports \"Bean must be of 'org.springframework.validation.Validator' type\" -->\n    />\n  </beans>' Inspection ID: RequiredBeanTypeInspection",
                  "markdown": "Reports incorrect types of custom schema bean injections defined in the XML application context.\n\n**Example:**\n\n\n      public class SimpleBean{}\n\n\n      <beans ...>\n        <bean class=\"SimpleBean\" id=\"simpleBean\"/>\n           <mvc:annotation-driven\n             conversion-service=\"simpleBean\"      <!-- reports \"Bean must be of 'org.springframework.core.convert.ConversionService' type\" -->\n             message-codes-resolver=\"simpleBean\"  <!-- reports 'Bean must be of org.springframework.validation.MessageCodesResolver' type\" -->\n             validator=\"simpleBean\"               <!-- reports \"Bean must be of 'org.springframework.validation.Validator' type\" -->\n        />\n      </beans>\n\nInspection ID: RequiredBeanTypeInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "RequiredBeanTypeInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Core/XML",
                      "index": 7,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ContextComponentScanInconsistencyInspection",
                "shortDescription": {
                  "text": "Invalid filter definition in XML-based component scans"
                },
                "fullDescription": {
                  "text": "Reports inconsistent <filter> definitions in <component-scan> of XML application contexts. Example: 'public class NonAnnotationTypeClass {}' '<beans>\n    <ctx:component-scan base-package=\"com.my.company\">\n      <ctx:exclude-filter expression=\"com.my.company.anno.NonAnnotationTypeClass\" type=\"annotation\"/>\n    </ctx:component-scan>\n  </beans>' In this example, 'NonAnnotationTypeClass' is expected to be an annotation type. Inspection ID: ContextComponentScanInconsistencyInspection",
                  "markdown": "Reports inconsistent **\\<filter\\>** definitions in **\\<component-scan\\>** of XML application contexts.\n\n**Example:**\n\n\n      public class NonAnnotationTypeClass {}\n\n\n      <beans>\n        <ctx:component-scan base-package=\"com.my.company\">\n          <ctx:exclude-filter expression=\"com.my.company.anno.NonAnnotationTypeClass\" type=\"annotation\"/>\n        </ctx:component-scan>\n      </beans>\n\nIn this example, `NonAnnotationTypeClass` is expected to be an annotation type.\n\nInspection ID: ContextComponentScanInconsistencyInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "ContextComponentScanInconsistencyInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Core/XML",
                      "index": 7,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UtilSchemaInspection",
                "shortDescription": {
                  "text": "Incorrectly configured 'util' schema beans defined in XML application context"
                },
                "fullDescription": {
                  "text": "Reports incorrect schema beans defined in XML application contexts. '<beans ... xmlns:util=\"https://www.springframework.org/schema/util\">\n    <bean class=\"MyBean\" id=\"myBean\"/>\n    <bean class=\"ErrTypeBean\" id=\"errTypeBean\"/>\n    <util:list list-class=\"java.lang.String\"/> // reports \"Class must be inheritor of 'java.util.List'\"\n    <util:set value-type=\"MyBean\">\n      <ref bean=\"fooBean\"/>\n      <ref bean=\"errTypeBean\"/> // reports \"Cannot be added in collection of 'MyBean' type\"\n    </util:set>\n  </beans>' Inspection ID: UtilSchemaInspection",
                  "markdown": "Reports incorrect [schema beans](https://www.springframework.org/schema/util) defined in XML application contexts.\n\n\n      <beans ... xmlns:util=\"https://www.springframework.org/schema/util\">\n        <bean class=\"MyBean\" id=\"myBean\"/>\n        <bean class=\"ErrTypeBean\" id=\"errTypeBean\"/>\n        <util:list list-class=\"java.lang.String\"/> // reports \"Class must be inheritor of 'java.util.List'\"\n        <util:set value-type=\"MyBean\">\n          <ref bean=\"fooBean\"/>\n          <ref bean=\"errTypeBean\"/> // reports \"Cannot be added in collection of 'MyBean' type\"\n        </util:set>\n      </beans>\n\nInspection ID: UtilSchemaInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "UtilSchemaInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Core/XML",
                      "index": 7,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringContextConfigurationInspection",
                "shortDescription": {
                  "text": "Invalid @ContextConfiguration"
                },
                "fullDescription": {
                  "text": "Reports incorrect Spring context configurations. Unresolved files and directories in 'locations' attributes and corresponding aliased attributes of '@ContextConfiguration' meta annotations Missing default application context file For more information, see @ContextConfiguration. Example: '@ContextConfiguration(locations = \"classpath:META-INF/unknown-context.xml\") // reports \"Cannot resolve file 'unknown-context.xml'\"\n  class MyTests {...}' Inspection ID: SpringContextConfigurationInspection",
                  "markdown": "Reports incorrect Spring context configurations.\n\n* Unresolved files and directories in `locations` attributes and corresponding aliased attributes of `@ContextConfiguration` meta annotations\n* Missing default application context file\n\nFor more information, see [@ContextConfiguration](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/test/context/ContextConfiguration.html).\n\n**Example:**\n\n\n      @ContextConfiguration(locations = \"classpath:META-INF/unknown-context.xml\") // reports \"Cannot resolve file 'unknown-context.xml'\"\n      class MyTests {...}\n\nInspection ID: SpringContextConfigurationInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "SpringContextConfigurationInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Core/Code",
                      "index": 11,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringScopesInspection",
                "shortDescription": {
                  "text": "Unknown <bean> scope"
                },
                "fullDescription": {
                  "text": "Reports unknown values of the 'scope' attribute in '<bean>' elements. Example: '<beans>\n    <bean class=\"beans.FooComponent\" id=\"foo\" scope=\"unknown\"/>\n    <!-- reports \"Cannot resolve symbol 'unknown'\" >\n    <bean class=\"beans.BarComponent\" id=\"bar\" scope=\"prototype\"/>\n  </beans>' Inspection ID: SpringScopesInspection",
                  "markdown": "Reports unknown values of the `scope` attribute in `<bean>` elements.\n\n**Example:**\n\n\n      <beans>\n        <bean class=\"beans.FooComponent\" id=\"foo\" scope=\"unknown\"/>\n        <!-- reports \"Cannot resolve symbol 'unknown'\" >\n        <bean class=\"beans.BarComponent\" id=\"bar\" scope=\"prototype\"/>\n      </beans>\n\nInspection ID: SpringScopesInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "SpringScopesInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Core/XML",
                      "index": 7,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringPublicFactoryMethodInspection",
                "shortDescription": {
                  "text": "Incorrect non-public method referenced in a \"factory-method\" attribute"
                },
                "fullDescription": {
                  "text": "Reports non-public methods referenced in the 'factory-method' attributes of <bean> elements. Example: 'public class MyFactory {\n  private static FooBean createBean() {...}\n  }\n}' '<beans>\n  <bean class=\"MyFactory\" factory-method=\"createBean\"/>\n  // reports \"Factory method 'createBean' should be public\"\n</beans>' Inspection ID: SpringPublicFactoryMethodInspection",
                  "markdown": "Reports non-public methods referenced in the `factory-method` attributes of **\\<bean\\>** elements.\n\n**Example:**\n\n\n    public class MyFactory {\n      private static FooBean createBean() {...}\n      }\n    }\n\n\n    <beans>\n      <bean class=\"MyFactory\" factory-method=\"createBean\"/>\n      // reports \"Factory method 'createBean' should be public\"\n    </beans>\n\nInspection ID: SpringPublicFactoryMethodInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SpringPublicFactoryMethodInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Core/XML",
                      "index": 7,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringElStaticFieldInjectionInspection",
                "shortDescription": {
                  "text": "Incorrect injecting of SpEL in a static field"
                },
                "fullDescription": {
                  "text": "Reports attempts to inject Spring Expression Language (SpEL) into static fields ('null' value is injected). Example: '@Controller\npublic class MyController {\n    @Value(\"#{systemProperties['some.key']}\")  //  Injection to static fields is not allowed\n    static String spelWithDefaultValue;\n}' Inspection ID: SpringElStaticFieldInjectionInspection",
                  "markdown": "Reports attempts to inject Spring Expression Language (SpEL) into static fields ('null' value is injected).\n\n**Example:**\n\n\n    @Controller\n    public class MyController {\n        @Value(\"#{systemProperties['some.key']}\")  //  Injection to static fields is not allowed\n        static String spelWithDefaultValue;\n    }\n\nInspection ID: SpringElStaticFieldInjectionInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SpringElStaticFieldInjectionInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Security"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Core",
                      "index": 6,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringElInspection",
                "shortDescription": {
                  "text": "Incorrect Spring Expression Language (SpEl) syntax"
                },
                "fullDescription": {
                  "text": "Reports syntax errors in the Spring Expression Language (SpEL) code, such as unresolved references and invalid locations. Example: '@Controller\npublic class MyController {\n    @Value(\"#{T(java.lang.Math).unknown()}\") // Cannot resolve property or method 'unknown'\n    public void setValue(String s) {}\n}' Inspection ID: SpringElInspection",
                  "markdown": "Reports syntax errors in the Spring Expression Language (SpEL) code, such as unresolved references and invalid locations.\n\n**Example:**\n\n\n    @Controller\n    public class MyController {\n        @Value(\"#{T(java.lang.Math).unknown()}\") // Cannot resolve property or method 'unknown'\n        public void setValue(String s) {}\n    }\n\nInspection ID: SpringElInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SpringElInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Core",
                      "index": 6,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringRequiredAnnotationInspection",
                "shortDescription": {
                  "text": "@Required Spring bean property is not injected"
                },
                "fullDescription": {
                  "text": "Reports '@Required' setter bean properties that are not injected or autowired. Example: '<beans>\n  <bean class=\"beans.MyComponent\" id=\"foo\"/>\n  <!-- reports \"Required properties missing: 'port'\" -->\n</beans>' 'public class MyComponent {\n   @Required\n   public void setPort(int port) // reports \"Required property 'port' is not injected\"\n   {...}\n}' Inspection ID: SpringRequiredAnnotationInspection",
                  "markdown": "Reports `@Required` setter bean properties that are not injected or autowired.\n\n**Example:**\n\n\n    <beans>\n      <bean class=\"beans.MyComponent\" id=\"foo\"/>\n      <!-- reports \"Required properties missing: 'port'\" -->\n    </beans>\n\n\n    public class MyComponent {\n       @Required\n       public void setPort(int port) // reports \"Required property 'port' is not injected\"\n       {...}\n    }\n\nInspection ID: SpringRequiredAnnotationInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "SpringRequiredAnnotationInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Core/Code",
                      "index": 11,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringCacheableComponentsInspection",
                "shortDescription": {
                  "text": "Incorrectly configured 'caching' annotation"
                },
                "fullDescription": {
                  "text": "Reports incorrect 'caching' annotations: '@Cacheable', '@CacheEvict', '@CachePut', '@CacheConfig', and so on. Example: '@org.springframework.stereotype.Component\npublic class MyCacheManager implements CacheManager {...}\n\npublic class MyConfiguration {\n   @Cacheable(value = \"a\",\n       cacheResolver =\"myCacheManager\") // reports \"Bean must be of 'org.springframework.cache.interceptor.CacheResolver' type\"\n   public String getCache(String isbn) {...}\n\n   @Cacheable(value = \"abc\",\n   private String getAbc() // reports \"Caching annotations should be defined on public methods\"\n   {...}\n}' Inspection ID: SpringCacheableComponentsInspection",
                  "markdown": "Reports incorrect 'caching' annotations: `@Cacheable`, `@CacheEvict`, `@CachePut`, `@CacheConfig`, and so on.\n\n**Example:**\n\n\n    @org.springframework.stereotype.Component\n    public class MyCacheManager implements CacheManager {...}\n\n    public class MyConfiguration {\n       @Cacheable(value = \"a\",\n           cacheResolver =\"myCacheManager\") // reports \"Bean must be of 'org.springframework.cache.interceptor.CacheResolver' type\"\n       public String getCache(String isbn) {...}\n\n       @Cacheable(value = \"abc\",\n       private String getAbc() // reports \"Caching annotations should be defined on public methods\"\n       {...}\n    }\n\nInspection ID: SpringCacheableComponentsInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "SpringCacheableComponentsInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Core/Code",
                      "index": 11,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringFactoryMethodInspection",
                "shortDescription": {
                  "text": "Incorrectly defined method referenced in a \"factory-method\" attribute"
                },
                "fullDescription": {
                  "text": "Reports incorrect method references in the 'factory-method' attribute of the '<bean>' element. Example: 'public class MyFactory {\npublic static FooBean createBean() {}\n}' '<beans>\n  <bean class=\"MyFactory\" id=\"factory\"/>\n  <bean factory-bean=\"factory\" factory-method=\"createBean\"/> <!-- Factory method 'createBean' must not be static -->\n</beans>' Inspection ID: SpringFactoryMethodInspection",
                  "markdown": "Reports incorrect method references in the `factory-method` attribute of the `<bean>` element.\n\n**Example:**\n\n\n    public class MyFactory {\n    public static FooBean createBean() {}\n    }\n\n\n    <beans>\n      <bean class=\"MyFactory\" id=\"factory\"/>\n      <bean factory-bean=\"factory\" factory-method=\"createBean\"/> <!-- Factory method 'createBean' must not be static -->\n    </beans>\n\nInspection ID: SpringFactoryMethodInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "SpringFactoryMethodInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Core/XML",
                      "index": 7,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringComponentScan",
                "shortDescription": {
                  "text": "Invalid package in @ComponentScan or its meta-annotation"
                },
                "fullDescription": {
                  "text": "Reports unresolved packages in @ComponentScan annotations and corresponding aliased attributes of '@ComponentScan' meta annotations. Example: '@ComponentScan(basePackages = {\n     \"com.my.company\",\n     \"com.unknown\" // reports \"'Cannot resolve package 'unknown'\"\n  }) +\n  @Configuration +\n  public class MyConfiguration {}' Inspection ID: SpringComponentScan",
                  "markdown": "Reports unresolved packages in\n[@ComponentScan](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/ComponentScan.html)\nannotations and corresponding aliased attributes of `@ComponentScan` meta annotations.  \n\n**Example:**\n\n\n      @ComponentScan(basePackages = {\n         \"com.my.company\",\n         \"com.unknown\" // reports \"'Cannot resolve package 'unknown'\"\n      }) +\n      @Configuration +\n      public class MyConfiguration {}\n\nInspection ID: SpringComponentScan"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "SpringComponentScan",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Core/Code",
                      "index": 11,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ScheduledMethodInspection",
                "shortDescription": {
                  "text": "Incorrect @Scheduled method signature"
                },
                "fullDescription": {
                  "text": "Reports incorrect @Scheduled methods. According to Spring Documentation, methods to be scheduled must return void and must not expect any arguments. If the method needs to interact with other objects from the Application Context, they should be provided through dependency injection. Inspection ID: ScheduledMethodInspection",
                  "markdown": "Reports incorrect [@Scheduled](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/scheduling/annotation/Scheduled.html) methods.\n\nAccording to Spring Documentation, methods to be scheduled must return void and must not expect any arguments.\nIf the method needs to interact with other objects from the Application Context,\nthey should be provided through dependency injection.\n\nInspection ID: ScheduledMethodInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ScheduledMethodInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Core/Code",
                      "index": 11,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringLookupInjectionInspection",
                "shortDescription": {
                  "text": "Incorrectly referenced bean in @Lookup annotation of a Spring component"
                },
                "fullDescription": {
                  "text": "Reports incorrect bean references in the 'value' parameter of the @Lookup annotation. Example: '@Component public class FooBean {...}\n  @Component public class OtherBean {...}\n\n  @Component public class MyComponent {\n  @Lookup(\"fooBean\")\n  public FooBean fooBean() {...}\n\n  @Lookup(\"fooBean\") // reports \"Bean must be of 'OtherBean' type\"\n  public OtherBean otherBean() {...}\n\n  @Lookup(\"unknown\") // reports \"Cannot resolve bean 'unknown'\"\n  public OtherBean fooBean() {...}\n  }' Inspection ID: SpringLookupInjectionInspection",
                  "markdown": "Reports incorrect bean references in the `value` parameter of the\n[@Lookup](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/annotation/Lookup.html)\nannotation.\n\n**Example:**\n\n\n      @Component public class FooBean {...}\n      @Component public class OtherBean {...}\n\n      @Component public class MyComponent {\n      @Lookup(\"fooBean\")\n      public FooBean fooBean() {...}\n\n      @Lookup(\"fooBean\") // reports \"Bean must be of 'OtherBean' type\"\n      public OtherBean otherBean() {...}\n\n      @Lookup(\"unknown\") // reports \"Cannot resolve bean 'unknown'\"\n      public OtherBean fooBean() {...}\n      }\n\nInspection ID: SpringLookupInjectionInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "SpringLookupInjectionInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Core/Code",
                      "index": 11,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringTestingTransactionalInspection",
                "shortDescription": {
                  "text": "Invalid transactional lifecycle method declaration"
                },
                "fullDescription": {
                  "text": "Reports invalid transactional lifecycle method declarations annotated with @BeforeTransaction and @AfterTransaction in testing classes annotated as @Transactional. Annotated methods must have no arguments and no return type. Example: '@ContextConfiguration\n  @Transactional\n  public class AbstractShowcaseTest {\n    @BeforeTransaction // Expected method return type is 'void'\n    public boolean setupData() {...}\n\n    @AfterTransaction // Wrong number of arguments\n    public void disposeData(boolean a) throws Exception {...}\n  }' Inspection ID: SpringTestingTransactionalInspection",
                  "markdown": "Reports invalid transactional lifecycle method declarations annotated with\n[@BeforeTransaction](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/test/context/transaction/BeforeTransaction.html)\nand [@AfterTransaction](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/test/context/transaction/AfterTransaction.html)\nin testing classes annotated as\n[@Transactional](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/transaction/annotation/Transactional.html).\n\nAnnotated methods must have no arguments and no return type.\n\n**Example:**\n\n\n      @ContextConfiguration\n      @Transactional\n      public class AbstractShowcaseTest {\n        @BeforeTransaction // Expected method return type is 'void'\n        public boolean setupData() {...}\n\n        @AfterTransaction // Wrong number of arguments\n        public void disposeData(boolean a) throws Exception {...}\n      }\n\nInspection ID: SpringTestingTransactionalInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SpringTestingTransactionalInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Core/Code",
                      "index": 11,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AsyncMethodInspection",
                "shortDescription": {
                  "text": "Incorrect @Async method signature"
                },
                "fullDescription": {
                  "text": "Reports incorrect return types of @Async methods. For target method signatures, any parameter types are allowed. However, the return type should be either 'void' or Future. It is also possible to return the more specific ListenableFuture or CompletableFuture types, which allow for richer interaction with the asynchronous task and for immediate composition with further processing steps. Inspection ID: AsyncMethodInspection",
                  "markdown": "Reports incorrect return types of [@Async](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/scheduling/annotation/Async.html) methods.\n\nFor target method signatures, any parameter types are allowed.\nHowever, the return type should be either `void` or [Future](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Future.html).\nIt is also possible to return the more specific [ListenableFuture](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/util/concurrent/ListenableFuture.html) or [CompletableFuture](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html) types,\nwhich allow for richer interaction with the asynchronous task and for immediate composition with further processing steps.\n\nInspection ID: AsyncMethodInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AsyncMethodInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Core/Code",
                      "index": 11,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringXmlModelInspection",
                "shortDescription": {
                  "text": "Incorrect Spring Core XML-based application context"
                },
                "fullDescription": {
                  "text": "Reports issues with the Spring Framework XML-based application context: Unresolved bean references Missing required tags or attributes Incorrect property types Inconsistent 'enum' properties Incorrect types of referenced beans Inspection ID: SpringXmlModelInspection",
                  "markdown": "Reports issues with the [Spring Framework](https://spring.io/projects/spring-framework) XML-based application context:\n\n* Unresolved bean references\n* Missing required tags or attributes\n* Incorrect property types\n* Inconsistent `enum` properties\n* Incorrect types of referenced beans\n\nInspection ID: SpringXmlModelInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "SpringXmlModelInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Core/XML",
                      "index": 7,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringTransactionalMethodCallsInspection",
                "shortDescription": {
                  "text": "@Transactional self-invocation method calls"
                },
                "fullDescription": {
                  "text": "Using @Transactional: In proxy mode (which is the default), only external method calls coming in through the proxy are intercepted. This means that self-invocation (in effect, a method within the target object calling another method of the target object) does not lead to an actual transaction at runtime even if the invoked method is marked with @Transactional. Inspection ID: SpringTransactionalMethodCallsInspection",
                  "markdown": "[Using\n@Transactional](https://docs.spring.io/spring-framework/docs/current/reference/html/data-access.html#transaction-declarative-annotations): In proxy mode (which is the default), only external method calls coming in through the proxy are intercepted. This means that self-invocation (in effect, a method within the target object calling another method of the target object) does not lead to an actual transaction at runtime even if the invoked method is marked with @Transactional.\n\nInspection ID: SpringTransactionalMethodCallsInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SpringTransactionalMethodCallsInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Core/Code",
                      "index": 11,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringJavaInjectionPointsAutowiringInspection",
                "shortDescription": {
                  "text": "Incorrect autowiring in Spring bean components"
                },
                "fullDescription": {
                  "text": "Reports autowiring problems on injection points of Spring beans @Component, @Service, and so on. More than one bean of 'concrete' type No beans of 'concrete' type No bean with qualifier Incorrect usages of '@Autowired' on Spring bean constructors Injected or autowired fields/methods in classes that are not valid Spring beans Example: 'public interface FooInterface {...}\n  @Component public class FooBean implements FooInterface {...}\n  @Component public class OtherBean implements FooInterface {...}\n\n@Component\npublic class MyComponent {\n\t@Autowired\n\tFooInterface foo;  // \"Could not autowire. There is more than one bean of 'FooInterface' type.\n                     // Beans: fooBean(FooBean.java), otherBean(OtherBean.java)\"\n}' Example: '@Component\npublic class MyComponent {\n\t@Autowired\n\tpublic MyComponent(BarBean bean) {...} // reports 'Only one @Autowired constructor is allowed'\n\n\t@Autowired\n\tpublic MyComponent(FooBean bean) {...} // reports 'Only one @Autowired constructor is allowed'\n}\n\n@Component\npublic class MyFactory {  // reports ' No matching @Autowired constructor'\n\tpublic MyFactory(String str) {...}\n\tpublic MyFactory(int count) {...}\n}' Example: 'public class FooBeanClass {\n  @Autowired   // reports 'Autowired members must be defined in valid Spring beans: @Component, @Service, and so on'\n  ServiceBean bean;\n  }' Inspection ID: SpringJavaInjectionPointsAutowiringInspection",
                  "markdown": "Reports autowiring problems on injection points of Spring beans\n[@Component](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Component.html),\n[@Service](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Service.html),\nand so on.\n\n* More than one bean of 'concrete' type\n* No beans of 'concrete' type\n* No bean with qualifier\n* Incorrect usages of `@Autowired` on Spring bean constructors\n* Injected or autowired fields/methods in classes that are not valid Spring beans\n\n**Example:**\n\n\n    public interface FooInterface {...}\n      @Component public class FooBean implements FooInterface {...}\n      @Component public class OtherBean implements FooInterface {...}\n\n    @Component\n    public class MyComponent {\n    \t@Autowired\n    \tFooInterface foo;  // \"Could not autowire. There is more than one bean of 'FooInterface' type.\n                         // Beans: fooBean(FooBean.java), otherBean(OtherBean.java)\"\n    }\n\n**Example:**\n\n\n    @Component\n    public class MyComponent {\n    \t@Autowired\n    \tpublic MyComponent(BarBean bean) {...} // reports 'Only one @Autowired constructor is allowed'\n\n    \t@Autowired\n    \tpublic MyComponent(FooBean bean) {...} // reports 'Only one @Autowired constructor is allowed'\n    }\n\n    @Component\n    public class MyFactory {  // reports ' No matching @Autowired constructor'\n    \tpublic MyFactory(String str) {...}\n    \tpublic MyFactory(int count) {...}\n    }\n\n**Example:**\n\n\n    public class FooBeanClass {\n      @Autowired   // reports 'Autowired members must be defined in valid Spring beans: @Component, @Service, and so on'\n      ServiceBean bean;\n      }\n\nInspection ID: SpringJavaInjectionPointsAutowiringInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "SpringJavaInjectionPointsAutowiringInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Core/Code",
                      "index": 11,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringBeanAttributesInspection",
                "shortDescription": {
                  "text": "Conflicting Spring bean attribute"
                },
                "fullDescription": {
                  "text": "Reports configuration conflicts on '<bean>' attributes. Example: '<beans>\n    <bean class=\"java.lang.String\" factory-bean=\"factoryBean\"/>\n    <!-- Exactly one of 'class' or 'factory-bean' is required -->\n    <bean factory-bean=\"factoryBean\" id=\"missingFactoryMethod\"/> <!-- When factory-bean exists, factory-method is required -->\n\n    <!-- Attribute abstract with default value 'false' is superfluous -->\n    <bean abstract=\"false\" id=\"superfluousDefaultAttributeAbstract\"/>\n\n    <!-- Attribute scope with default value 'singleton' is superfluous -->\n    <bean id=\"superfluousDefaultAttributeScope\" scope=\"singleton\"/>\n\n    <bean class=\"java.lang.StringBuilder\">\n      <property name=\"length\">\n        <!-- Attributes id, name, and scope are superfluous -->\n        <bean id=\"beanId\" name=\"beanName\" scope=\"prototype\"/>\n      </property>\n    </bean>\n  </beans>' Inspection ID: SpringBeanAttributesInspection",
                  "markdown": "Reports configuration conflicts on `<bean>` attributes.\n\n**Example:**\n\n\n      <beans>\n        <bean class=\"java.lang.String\" factory-bean=\"factoryBean\"/>\n        <!-- Exactly one of 'class' or 'factory-bean' is required -->\n        <bean factory-bean=\"factoryBean\" id=\"missingFactoryMethod\"/> <!-- When factory-bean exists, factory-method is required -->\n\n        <!-- Attribute abstract with default value 'false' is superfluous -->\n        <bean abstract=\"false\" id=\"superfluousDefaultAttributeAbstract\"/>\n\n        <!-- Attribute scope with default value 'singleton' is superfluous -->\n        <bean id=\"superfluousDefaultAttributeScope\" scope=\"singleton\"/>\n\n        <bean class=\"java.lang.StringBuilder\">\n          <property name=\"length\">\n            <!-- Attributes id, name, and scope are superfluous -->\n            <bean id=\"beanId\" name=\"beanName\" scope=\"prototype\"/>\n          </property>\n        </bean>\n      </beans>\n\nInspection ID: SpringBeanAttributesInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SpringBeanAttributesInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Core/XML",
                      "index": 7,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringInactiveProfileHighlightingInspection",
                "shortDescription": {
                  "text": "Inactive profile highlighting"
                },
                "fullDescription": {
                  "text": "Reports inactive profiles in the Spring XML application contexts. Example: '<!-- active profile 'DEV' is chosen for this application context -->\n  <beans profile=\"DEV\">\n    <bean class=\"MyFactory\" factory-method=\"createBean\"/>\n  </beans>\n  <!--  content of this tag is highlighted as 'unused' -->\n  <beans profile=\"TESTS\">\n    <bean class=\"MyTestFactory\" factory-method=\"createBean\"/>\n  </beans>\n  <!--  end of 'unused' section -->\n  </beans>' Inspection ID: SpringInactiveProfileHighlightingInspection",
                  "markdown": "Reports inactive profiles in the Spring XML application contexts.\n\n**Example:**\n\n\n      <!-- active profile 'DEV' is chosen for this application context -->\n      <beans profile=\"DEV\">\n        <bean class=\"MyFactory\" factory-method=\"createBean\"/>\n      </beans>\n      <!--  content of this tag is highlighted as 'unused' -->\n      <beans profile=\"**TESTS**\">\n    <bean class=\"MyTestFactory\" factory-method=\"createBean\"/>\n    </beans>\n      <!--  end of 'unused' section -->\n      </beans>\n\nInspection ID: SpringInactiveProfileHighlightingInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SpringInactiveProfileHighlightingInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Core/XML",
                      "index": 7,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringTestingOverridenBeanResolveInspection",
                "shortDescription": {
                  "text": "Incorrectly referenced bean in @MockitoBean, @MockitoSpyBean and @TestBean annotations"
                },
                "fullDescription": {
                  "text": "Reports incorrect bean/method references in the 'value' parameter of the @MockitoBean, @MockitoSpyBean and @TestBean annotations. Example: '@SpringBootTest\nclass TestBeanApplicationTests {\n   @TestBean(value = \"unknownBean\", methodName=\"createUserService\")  // reports 1. \"Cannot resolve 'unknownBean' bean\"  and 2. \"Cannot resolve symbol 'createUserService'\"\n   UserService userService;\n\n  @TestBean  // reports \"Cannot find static factory method\"\n  UserService userService;\n}' Inspection ID: SpringTestingOverridenBeanResolveInspection",
                  "markdown": "Reports incorrect bean/method references in the `value` parameter of the @MockitoBean, @MockitoSpyBean and @TestBean annotations.\n\n**Example:**\n\n\n    @SpringBootTest\n    class TestBeanApplicationTests {\n       @TestBean(value = \"unknownBean\", methodName=\"createUserService\")  // reports 1. \"Cannot resolve 'unknownBean' bean\"  and 2. \"Cannot resolve symbol 'createUserService'\"\n       UserService userService;\n\n      @TestBean  // reports \"Cannot find static factory method\"\n      UserService userService;\n    }\n\nInspection ID: SpringTestingOverridenBeanResolveInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "SpringTestingOverridenBeanResolveInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Core/Code",
                      "index": 11,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringInjectionValueStyleInspection",
                "shortDescription": {
                  "text": "Injection value in XML application context violates conventions"
                },
                "fullDescription": {
                  "text": "Reports properties configured via '<value>' or '<ref>' sub-elements and offers to replace them with the corresponding attributes. Example: '<beans>\n    <bean class=\"MyBean\" id=\"myBean\"/>\n\n    <bean class=\"MyFactory\">\n      <property name=\"bean\">\n        <ref bean=\"myBean\"/> <!-- reports 'Usage of explicit <ref> element' -->\n      </property>\n    </bean>\n  </beans>' After applying the quick-fix: '<beans>\n    <bean class=\"MyBean\" id=\"myBean\"/>\n    <bean class=\"MyFactory\">\n      <property name=\"bean\" ref=\"myBean\"/>\n    </bean>\n  </beans>' Inspection ID: SpringInjectionValueStyleInspection",
                  "markdown": "Reports properties configured via `<value>` or `<ref>` sub-elements and offers to replace them with the corresponding attributes.\n\n**Example:**\n\n\n      <beans>\n        <bean class=\"MyBean\" id=\"myBean\"/>\n\n        <bean class=\"MyFactory\">\n          <property name=\"bean\">\n            <ref bean=\"myBean\"/> <!-- reports 'Usage of explicit <ref> element' -->\n          </property>\n        </bean>\n      </beans>\n\nAfter applying the quick-fix:\n\n\n      <beans>\n        <bean class=\"MyBean\" id=\"myBean\"/>\n        <bean class=\"MyFactory\">\n          <property name=\"bean\" ref=\"myBean\"/>\n        </bean>\n      </beans>\n\nInspection ID: SpringInjectionValueStyleInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SpringInjectionValueStyleInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Core/XML",
                      "index": 7,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringEventListenerInspection",
                "shortDescription": {
                  "text": "Incorrectly configured @EventListener methods"
                },
                "fullDescription": {
                  "text": "Reports incorrect @EventListener methods. Example: '@Configuration @ComponentScan\n  open class Config\n\n  data class MyEvent(val string: String)\n\n  @Component\n  class LogComponent {\n    @EventListener // Method annotated with @EventListener must be public\n    private fun logCommands(commandName: MyEvent) {}\n\n    @EventListener // Method must have maximum one parameter\n    fun processCommand(commandName: MyEvent, text: String) {}\n  }' Inspection ID: SpringEventListenerInspection",
                  "markdown": "Reports incorrect\n[@EventListener](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/event/EventListener.html) methods.\n\n**Example:**\n\n\n      @Configuration @ComponentScan\n      open class Config\n\n      data class MyEvent(val string: String)\n\n      @Component\n      class LogComponent {\n        @EventListener // Method annotated with @EventListener must be public\n        private fun logCommands(commandName: MyEvent) {}\n\n        @EventListener // Method must have maximum one parameter\n        fun processCommand(commandName: MyEvent, text: String) {}\n      }\n\nInspection ID: SpringEventListenerInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SpringEventListenerInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Core/Code",
                      "index": 11,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InjectionValueTypeInspection",
                "shortDescription": {
                  "text": "Unassignable injection point type in XML application context"
                },
                "fullDescription": {
                  "text": "Reports invalid injection point types (properties and constructor arguments). The following injection point types are allowed: 'ref', 'idref', any collection type, inner beans, and so on. Example: 'public class InjectionValueTypes{\n  public List<MyBean> setListBeans() {...}\n    public MyBean setMyBean() {...}\n    }\n  }' '<beans>\n    <bean class=\"MyBean\" id=\"myBean\"/>\n    <bean class=\"ErrTypeBean\" id=\"errTypeBean\"/>\n    <bean class=\"InjectionValueTypes\" id=\"kt\">\n      <property name=\"myBean\" ref=\"errTypeBean\"/>\n      <!--  reports \"Property of 'MyBean' type cannot be injected by 'ErrTypeBean'\" -->\n      <property name=\"listBeans\">\n        <list>\n          <idref local=\"myBean\"/>\n          <ref bean=\"myBean\"/>\n          <ref bean=\"errTypeBean\"/> <!--  reports \"Cannot be added in collection of 'MyBean' type\" -->\n          <bean class=\"ErrTypeBean\"/> <!--  reports \"Bean must be of 'MyBean' type\" -->\n        </list>\n      </property>\n    </bean>\n  </beans>' Inspection ID: InjectionValueTypeInspection",
                  "markdown": "Reports invalid injection point types (properties and constructor arguments).\n\nThe following injection point types are allowed: `ref`, `idref`, any collection type, inner beans, and so on.\n\n**Example:**\n\n\n      public class InjectionValueTypes{\n      public List<MyBean> setListBeans() {...}\n        public MyBean setMyBean() {...}\n        }\n      }\n\n\n      <beans>\n        <bean class=\"MyBean\" id=\"myBean\"/>\n        <bean class=\"ErrTypeBean\" id=\"errTypeBean\"/>\n        <bean class=\"InjectionValueTypes\" id=\"kt\">\n          <property name=\"myBean\" ref=\"errTypeBean\"/>\n          <!--  reports \"Property of 'MyBean' type cannot be injected by 'ErrTypeBean'\" -->\n          <property name=\"listBeans\">\n            <list>\n              <idref local=\"myBean\"/>\n              <ref bean=\"myBean\"/>\n              <ref bean=\"errTypeBean\"/> <!--  reports \"Cannot be added in collection of 'MyBean' type\" -->\n              <bean class=\"ErrTypeBean\"/> <!--  reports \"Bean must be of 'MyBean' type\" -->\n            </list>\n          </property>\n        </bean>\n      </beans>\n\nInspection ID: InjectionValueTypeInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "InjectionValueTypeInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Core/XML",
                      "index": 7,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringInjectionValueConsistencyInspection",
                "shortDescription": {
                  "text": "Inconsistent injection value in XML application context"
                },
                "fullDescription": {
                  "text": "Reports inconsistent tags and attributes on injection points in XML application contexts. '<property>' and '<constructor-arg>' must specify a 'ref', 'value', or a sub-element '<property>' and '<constructor-arg>' cannot contain more than one sub-element '<ref>' can contain either a 'bean' attribute, a 'local' attribute, or a 'parent' attribute '<ref>' must specify a bean '<idref>' can contain either a 'bean' attribute or a 'local' attribute '<idref>' must specify a bean '<map>' must specify a key '<idref>' can contain either a 'key' attribute, a 'key-ref' attribute, or a '<key>' sub-element Example: '<beans>\n\n  <!-- 1.  Property is only allowed to contain either \"ref\" attribute OR \"value\" attribute OR sub-element -->\n  <bean class=\"MyClass\">\n    <property name=\"bean\" ref=\"myBean\" value=\"foo\"/>\n    <!-- Property is only allowed to contain either \"ref\" attribute OR \"value\" attribute OR sub-element -->\n  </bean>\n\n  <!--  2.  Property must not contain more than one sub-element -->\n  <bean class=\"MyFactory\">\n    <property name=\"bean\">\n    <ref>bean</ref> <!-- Property must not contain more than one sub-element -->\n     <value>foo</value> <!-- Property must not contain more than one sub-element -->\n     </property>\n  </bean>\n\n  <!-- 3. Map entry must specify a key  -->\n  <bean class=\"MyBean\">\n     <property name=\"map\">\n        <map>\n           <entry value=\"foo\"/>  <!-- Map entry must specify a key -->\n        </map>\n     </property>\n  </bean>\n  </beans>' Inspection ID: SpringInjectionValueConsistencyInspection",
                  "markdown": "Reports inconsistent tags and attributes on injection points in XML application contexts.\n\n* `<property>` and `<constructor-arg>` must specify a `ref`, `value`, or a sub-element\n* `<property>` and `<constructor-arg>` cannot contain more than one sub-element\n* `<ref>` can contain either a `bean` attribute, a `local` attribute, or a `parent` attribute\n* `<ref>` must specify a bean\n* `<idref>` can contain either a `bean` attribute or a `local` attribute\n* `<idref>` must specify a bean\n* `<map>` must specify a key\n* `<idref>` can contain either a `key` attribute, a `key-ref` attribute, or a `<key>` sub-element\n\n**Example:**\n\n\n      <beans>\n\n      <!-- 1. Property is only allowed to contain either \"ref\" attribute OR \"value\" attribute OR sub-element -->\n      <bean class=\"MyClass\">\n        <property name=\"bean\" ref=\"myBean\" value=\"foo\"/>\n        <!-- Property is only allowed to contain either \"ref\" attribute OR \"value\" attribute OR sub-element -->\n      </bean>\n\n      <!-- 2. Property must not contain more than one sub-element -->\n      <bean class=\"MyFactory\">\n        <property name=\"bean\">\n        <ref>bean</ref> <!-- Property must not contain more than one sub-element -->\n         <value>foo</value> <!-- Property must not contain more than one sub-element -->\n         </property>\n      </bean>\n\n      <!-- 3. Map entry must specify a key -->\n      <bean class=\"MyBean\">\n         <property name=\"map\">\n            <map>\n               <entry value=\"foo\"/>  <!-- Map entry must specify a key -->\n            </map>\n         </property>\n      </bean>\n      </beans>\n\nInspection ID: SpringInjectionValueConsistencyInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "SpringInjectionValueConsistencyInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Core/XML",
                      "index": 7,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ContextJavaBeanUnresolvedMethodsInspection",
                "shortDescription": {
                  "text": "Unknown init/destroy method in the @Bean annotation"
                },
                "fullDescription": {
                  "text": "Reports unresolved method references on 'initMethod' and 'destroyMethod' parameters of the @Bean annotation. Example: \"Cannot resolve method\" will be reported on 'doInit' expression if MyBean class doesn't contain 'public void 'doInit'(){...}' method 'public class MyBean {...}\n\n  @Component\n  public class MyComponent {\n     @Bean(initMethod=\"doInit\" )\n     public MyBean myBean() {...}\n  }' In this example, the inspection will report an unresolved method reference if 'MyBean' doesn't define the 'doInit()' method. Inspection ID: ContextJavaBeanUnresolvedMethodsInspection",
                  "markdown": "Reports unresolved method references on `initMethod` and `destroyMethod` parameters\nof the [@Bean](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/Bean.html) annotation.\n\n**Example:**\n\"Cannot resolve method\" will be reported on 'doInit' expression if MyBean class doesn't contain 'public void 'doInit'(){...}' method\n\n\n      public class MyBean {...}\n\n      @Component\n      public class MyComponent {\n         @Bean(initMethod=\"doInit\" )\n         public MyBean myBean() {...}\n      }\n\nIn this example, the inspection will report an unresolved method reference if `MyBean` doesn't define the `doInit()` method.\n\nInspection ID: ContextJavaBeanUnresolvedMethodsInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "ContextJavaBeanUnresolvedMethodsInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Core/Code",
                      "index": 11,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DuplicatedBeanNamesInspection",
                "shortDescription": {
                  "text": "Duplicated bean names in XML-based application context"
                },
                "fullDescription": {
                  "text": "Reports duplicate bean names defined in the application context. Example: '<beans profile=\"PROD\">\n    <bean class=\"...\" id=\"duplicatedName\"/>  <!--  error -->\n    <bean class=\"...\" name=\"foo_name, duplicatedName\"/> <!--  'duplicatedName' error -->\n    <bean class=\"...\" id=\"toBeAliased\"/>\n\n    <alias alias=\"duplicatedName\" name=\"toBeAliased\"/> <!--  'duplicatedName' error -->\n  </beans>' Inspection ID: DuplicatedBeanNamesInspection",
                  "markdown": "Reports duplicate bean names defined in the application context.\n\n**Example:**\n\n\n      <beans profile=\"PROD\">\n        <bean class=\"...\" id=\"duplicatedName\"/>  <!--  error -->\n        <bean class=\"...\" name=\"foo_name, duplicatedName\"/> <!--  'duplicatedName' error -->\n        <bean class=\"...\" id=\"toBeAliased\"/>\n\n        <alias alias=\"duplicatedName\" name=\"toBeAliased\"/> <!--  'duplicatedName' error -->\n      </beans>\n\nInspection ID: DuplicatedBeanNamesInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "DuplicatedBeanNamesInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Core/XML",
                      "index": 7,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringCacheAnnotationsOnInterfaceInspection",
                "shortDescription": {
                  "text": "Cache* annotations defined on interfaces/interface methods"
                },
                "fullDescription": {
                  "text": "Reports '@Cache*' annotations on interfaces. You should annotate only concrete classes (and methods of concrete classes) with '@Cache*'. Annotating an interface (or an interface method) with '@Cache*' requires using interface-based proxies. Since Java annotations are not inherited from interfaces, the proxying and weaving infrastructure will not be able to recognize the caching settings when using class-based proxies ('proxy-target-class=\"true\"') or the weaving-based aspect ('mode=\"aspectj\"'). As a result, the object will not be wrapped in a caching proxy. Inspection ID: SpringCacheAnnotationsOnInterfaceInspection",
                  "markdown": "Reports `@Cache*` annotations on interfaces.\n\nYou should annotate only concrete classes (and methods of concrete classes) with `@Cache*`.\nAnnotating an interface (or an interface method) with `@Cache*` requires using interface-based proxies.\nSince Java annotations are not inherited from interfaces, the proxying and weaving infrastructure will not be able to recognize the caching settings\nwhen using class-based proxies (`proxy-target-class=\"true\"`) or the weaving-based aspect (`mode=\"aspectj\"`).\nAs a result, the object will not be wrapped in a caching proxy.\n\nInspection ID: SpringCacheAnnotationsOnInterfaceInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SpringCacheAnnotationsOnInterfaceInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Core/Code",
                      "index": 11,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringDependsOnUnresolvedBeanInspection",
                "shortDescription": {
                  "text": "Incorrectly referenced bean in @DependsOn annotation"
                },
                "fullDescription": {
                  "text": "Reports incorrect bean references in the 'value' parameter of the @DependsOn annotation. Example: '@Component\n  @DependsOn(\"unknown\")  // reports \"Cannot resolve bean 'unknown'\"\n  public class MyComponent {\n  }' Inspection ID: SpringDependsOnUnresolvedBeanInspection",
                  "markdown": "Reports incorrect bean references in the `value` parameter of the\n[@DependsOn](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/DependsOn.html)\nannotation.\n\n**Example:**\n\n\n      @Component\n      @DependsOn(\"unknown\")  // reports \"Cannot resolve bean 'unknown'\"\n      public class MyComponent {\n      }\n\nInspection ID: SpringDependsOnUnresolvedBeanInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "SpringDependsOnUnresolvedBeanInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Core/Code",
                      "index": 11,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringIncorrectResourceTypeInspection",
                "shortDescription": {
                  "text": "Incorrect resource type"
                },
                "fullDescription": {
                  "text": "Reports incorrect files referenced in the XML application context. Example: '<beans>\n    <import resource=\"imported-app-context.xml\"/>\n    <import resource=\"banner.txt\"/> <!-- reports 'Incorrect resource type' as Spring XML application context is expected here -->\n  </beans>' Inspection ID: SpringIncorrectResourceTypeInspection",
                  "markdown": "Reports incorrect files referenced in the XML application context.\n\n**Example:**\n\n\n      <beans>\n        <import resource=\"imported-app-context.xml\"/>\n        <import resource=\"banner.txt\"/> <!-- reports 'Incorrect resource type' as Spring XML application context is expected here -->\n      </beans>\n\nInspection ID: SpringIncorrectResourceTypeInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "SpringIncorrectResourceTypeInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Core/XML",
                      "index": 7,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringRequiredPropertyInspection",
                "shortDescription": {
                  "text": "Missing @Required property injections in the spring XML bean declaration"
                },
                "fullDescription": {
                  "text": "Reports '@Required' setter bean properties that are not injected or autowired. Example: '<beans>\n  <bean class=\"beans.MyComponent\" id=\"foo\"/>\n  <!-- reports \"Required properties missing: 'port'\" -->\n</beans>' 'public class MyComponent {\n   @Required\n   public void setPort(int port) // reports \"Required property 'port' is not injected\"\n   {...}\n}' Inspection ID: SpringRequiredPropertyInspection",
                  "markdown": "Reports `@Required` setter bean properties that are not injected or autowired.\n\n**Example:**\n\n\n    <beans>\n      <bean class=\"beans.MyComponent\" id=\"foo\"/>\n      <!-- reports \"Required properties missing: 'port'\" -->\n    </beans>\n\n\n    public class MyComponent {\n       @Required\n       public void setPort(int port) // reports \"Required property 'port' is not injected\"\n       {...}\n    }\n\nInspection ID: SpringRequiredPropertyInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "SpringRequiredPropertyInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Core/XML",
                      "index": 7,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringScheduledMethodsInspection",
                "shortDescription": {
                  "text": "Incorrectly referenced bean in @Scheduled annotation"
                },
                "fullDescription": {
                  "text": "Reports incorrect bean references in the 'scheduler' parameter of the @Scheduled annotation. Example: '@Component public class UserController {...}\n  @Component public class UserServiceAsyncTaskScheduler extends SimpleAsyncTaskScheduler {...}\n\n  @Component public class UserService {\n    @Scheduled(scheduler=\"userServiceAsyncTaskScheduler\", cron=\"1 * * * * * ?\")\n    public void scheduleTask() {...}\n\n    @Scheduled(scheduler=\"userController\", cron=\"1 * * * * * ?\") // reports \"Bean must be one of these types: TaskScheduler,ScheduledExecutorService \"\n    public void scheduleTask_2() {...}\n\n    @Scheduled(scheduler=\"unknown\", cron=\"1 * * * * * ?\")   // reports \"Cannot resolve bean 'unknown'\"\n    public void scheduleTask_3() {...}\n  }' Inspection ID: SpringScheduledMethodsInspection",
                  "markdown": "Reports incorrect bean references in the `scheduler` parameter of the @Scheduled annotation.\n\n**Example:**\n\n\n      @Component public class UserController {...}\n      @Component public class UserServiceAsyncTaskScheduler extends SimpleAsyncTaskScheduler {...}\n\n      @Component public class UserService {\n        @Scheduled(scheduler=\"userServiceAsyncTaskScheduler\", cron=\"1 * * * * * ?\")\n        public void scheduleTask() {...}\n\n        @Scheduled(scheduler=\"userController\", cron=\"1 * * * * * ?\") // reports \"Bean must be one of these types: TaskScheduler,ScheduledExecutorService \"\n        public void scheduleTask_2() {...}\n\n        @Scheduled(scheduler=\"unknown\", cron=\"1 * * * * * ?\")   // reports \"Cannot resolve bean 'unknown'\"\n        public void scheduleTask_3() {...}\n      }\n\nInspection ID: SpringScheduledMethodsInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "SpringScheduledMethodsInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Core/Code",
                      "index": 11,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringXmlAutowiringInspection",
                "shortDescription": {
                  "text": "Incorrect XML Spring bean autowiring"
                },
                "fullDescription": {
                  "text": "Reports incorrect autowiring of Spring beans configured in XML application contexts. Example: 'public interface FooInterface {...}\n@Component public class FooBean implements FooInterface {...}\n@Component public class OtherBean implements FooInterface {...}\n\n@Component\npublic class MyComponent {\n\t public void setFooInterface(FooInterface foo) {...}\n}' '<beans>\n\t<bean class=\"beans.OtherBean\" id=\"otherBean\"/>\n\t<bean class=\"beans.FooBean\" id=\"fooBean\"/>\n\n\t<bean autowire=\"byType\" class=\"beans.MyComponent\" id=\"foo\"/> <!-- reports \"Could not autowire. There is more than one bean of 'FooInterface' type. -->\n                                                                   <!--          Beans: otherBean,fooBean. Properties: 'fooInterface' \" -->\n</beans>' Inspection ID: SpringXmlAutowiringInspection",
                  "markdown": "Reports incorrect autowiring of Spring beans configured in XML application contexts.\n\n**Example:**\n\n\n    public interface FooInterface {...}\n    @Component public class FooBean implements FooInterface {...}\n    @Component public class OtherBean implements FooInterface {...}\n\n    @Component\n    public class MyComponent {\n    \t public void setFooInterface(FooInterface foo) {...}\n    }\n\n\n    <beans>\n    \t<bean class=\"beans.OtherBean\" id=\"otherBean\"/>\n    \t<bean class=\"beans.FooBean\" id=\"fooBean\"/>\n\n    \t<bean autowire=\"byType\" class=\"beans.MyComponent\" id=\"foo\"/> <!-- reports \"Could not autowire. There is more than one bean of 'FooInterface' type. -->\n                                                                       <!--          Beans: otherBean,fooBean. Properties: 'fooInterface' \" -->\n    </beans>\n\nInspection ID: SpringXmlAutowiringInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "SpringXmlAutowiringInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Core/XML",
                      "index": 7,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringCacheableAndCachePutInspection",
                "shortDescription": {
                  "text": "Incorrect usage of @CachePut and @Cacheable on the same method"
                },
                "fullDescription": {
                  "text": "Reports @CachePut and @Cacheable annotations declared on the same method. While '@Cacheable' causes the method to skip the execution using the cache, '@CachePut' forces the execution in order to update the cache. This leads to unexpected behavior and should be avoided, except in very specific cases when conditions in annotations exclude them from each other. Note also that such conditions should not rely on the result object (the '#result' variable) as these are validated upfront to confirm the exclusion. Inspection ID: SpringCacheableAndCachePutInspection",
                  "markdown": "Reports [@CachePut](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/cache/annotation/CachePut.html)\nand [@Cacheable](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/cache/annotation/Cacheable.html)\nannotations declared on the same method.\nWhile `@Cacheable` causes the method to skip the execution using the cache, `@CachePut` forces the execution in order to update the cache. This leads to unexpected behavior and should be avoided, except in very specific cases when conditions in annotations exclude them from each other. Note also that such conditions should not rely on the result object (the `#result` variable) as these are validated upfront to confirm the exclusion.\n\nInspection ID: SpringCacheableAndCachePutInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SpringCacheableAndCachePutInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Core/Code",
                      "index": 11,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringConfigurationProxyMethods",
                "shortDescription": {
                  "text": "@Configuration proxyMethods usage warnings"
                },
                "fullDescription": {
                  "text": "Reports warnings on incorrectly used proxy methods. Spring Framework 5.2 has introduced an optimization for @Configuration class processing that can be enabled via an attribute @Configuration(proxyBeanMethods = false). If you disable 'proxyBeanMethods', the proxy instances are no longer created and calling the method invokes it again (returning a new instance every time). As a result, you have no guarantee that you're actually injecting the corresponding bean in the context. Incorrect bean method call example: '@Configuration(proxyBeanMethods = false)\nclass TestConfiguration {\n  @Bean\n  public FirstBean firstBean() {\n    return new FirstBean();\n  }\n\n  @Bean\n  public SecondBean secondBean() {\n    return new SecondBean(firstBean()); // -> incorrect call\n  }\n}' You can set 'proxyBeanMethods' to true or rewrite the code as follows: '@Configuration(proxyBeanMethods = false)\nclass TestConfiguration {\n  @Bean\n  public FirstBean firstBean() {\n    return new FirstBean();\n  }\n\n  @Bean\n  public SecondBean secondBean(FirstBean someBean) { // -> correct injected instance\n    return new SecondBean(someBean);\n  }\n}' Also, the inspection checks '@Bean' method calls in a class without the '@Configuration' stereotype (in \"bean lite mode\"): '@Component\nclass TestComponent {\n  @Bean\n  public FirstBean firstBean() {\n    return new FirstBean();\n  }\n\n  @Bean\n  public SecondBean secondBean() {\n    return new SecondBean(firstBean()); // -> incorrect call\n  }\n}' Inspection ID: SpringConfigurationProxyMethods",
                  "markdown": "Reports warnings on incorrectly used proxy methods. Spring Framework 5.2 has introduced an optimization for @Configuration class processing that can be enabled via an attribute @Configuration(proxyBeanMethods = false).\n\n\nIf you disable `proxyBeanMethods`,\nthe proxy instances are no longer created and calling the method invokes it again (returning a new instance every time).\nAs a result, you have no guarantee that you're actually injecting the corresponding bean in the context.\n\nIncorrect bean method call example:\n\n\n    @Configuration(proxyBeanMethods = false)\n    class TestConfiguration {\n      @Bean\n      public FirstBean firstBean() {\n        return new FirstBean();\n      }\n\n      @Bean\n      public SecondBean secondBean() {\n        return new SecondBean(firstBean()); // -> incorrect call\n      }\n    }\n\nYou can set `proxyBeanMethods` to true or rewrite the code as follows:\n\n\n    @Configuration(proxyBeanMethods = false)\n    class TestConfiguration {\n      @Bean\n      public FirstBean firstBean() {\n        return new FirstBean();\n      }\n\n      @Bean\n      public SecondBean secondBean(FirstBean someBean) { // -> correct injected instance\n        return new SecondBean(someBean);\n      }\n    }\n\nAlso, the inspection checks `@Bean` method calls in a class without the `@Configuration` stereotype (in \"bean lite mode\"):\n\n\n    @Component\n    class TestComponent {\n      @Bean\n      public FirstBean firstBean() {\n        return new FirstBean();\n      }\n\n      @Bean\n      public SecondBean secondBean() {\n        return new SecondBean(firstBean()); // -> incorrect call\n      }\n    }\n\nInspection ID: SpringConfigurationProxyMethods"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "SpringConfigurationProxyMethods",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Core/Code",
                      "index": 11,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringBeanNameConventionInspection",
                "shortDescription": {
                  "text": "Spring bean name violates conventions"
                },
                "fullDescription": {
                  "text": "Reports <bean> names that don't follow the bean naming conventions. The convention is to use the standard Java convention for instance field names when naming beans. That is, bean names start with a lowercase letter and are camel-cased from there. Examples of such names include 'accountManager', 'accountService', 'userDao', 'loginController', and so on. Naming beans consistently makes your configuration easier to read and understand. Also, if you are using Spring AOP, it helps a lot when applying an advice to a set of beans related by name. Inspection ID: SpringBeanNameConventionInspection",
                  "markdown": "Reports **\\<bean\\>** names that don't follow the bean naming conventions.\n\n\nThe convention is to use the standard Java convention for instance field names when naming beans.\nThat is, bean names start with a lowercase letter and are camel-cased from there.\nExamples of such names include `accountManager`, `accountService`, `userDao`, `loginController`, and so on.\nNaming beans consistently makes your configuration easier to read and understand.\nAlso, if you are using Spring AOP, it helps a lot when applying an advice to a set of beans related by name.\n\nInspection ID: SpringBeanNameConventionInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SpringBeanNameConventionInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Core/XML",
                      "index": 7,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnparsedCustomBeanInspection",
                "shortDescription": {
                  "text": "Unparsed custom Spring beans"
                },
                "fullDescription": {
                  "text": "Reports unknown Spring bean types that have not yet been parsed or if a bean uses an unsupported tag for the custom namespace. Inspection ID: UnparsedCustomBeanInspection",
                  "markdown": "Reports unknown Spring bean types that have not yet been parsed or if a bean uses an unsupported tag for the custom namespace.\n\nInspection ID: UnparsedCustomBeanInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnparsedCustomBeanInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Core/XML",
                      "index": 7,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringXmlAutowireExplicitlyInspection",
                "shortDescription": {
                  "text": "Unnecessary autowired dependency in XML application context"
                },
                "fullDescription": {
                  "text": "Reports 'autowire' attributes in '<bean>' elements and suggests to explicitly inject bean properties if possible. Example: 'public class MyComponent {\n    public void setOtherBean(OtherBean bean){...}\n  }' '<beans>\n    <bean class=\"beans.OtherBean\" id=\"bar\"/>\n    <bean autowire=\"byType\" class=\"beans.MyComponent\"/>\n    <!-- \"Unnecessary autowired dependency\" -->\n    <!-- suggests \"Make autowired dependency explicit\" -->\n  </beans>' After applying the quick-fix: '<beans>\n    <bean class=\"beans.OtherBean\" id=\"bar\"/>\n    <bean class=\"beans.MyComponent\" id=\"foo\">\n      <property name=\"otherBean\" ref=\"otherBean\"/>\n    </bean>\n  </beans>' Inspection ID: SpringXmlAutowireExplicitlyInspection",
                  "markdown": "Reports `autowire` attributes in `<bean>` elements and suggests to explicitly inject bean properties if possible.\n\n**Example:**\n\n\n      public class MyComponent {\n        public void setOtherBean(OtherBean bean){...}\n      }\n\n\n      <beans>\n        <bean class=\"beans.OtherBean\" id=\"bar\"/>\n        <bean autowire=\"byType\" class=\"beans.MyComponent\"/>\n        <!-- \"Unnecessary autowired dependency\" -->\n        <!-- suggests \"Make autowired dependency explicit\" -->\n      </beans>\n\nAfter applying the quick-fix:\n\n\n      <beans>\n        <bean class=\"beans.OtherBean\" id=\"bar\"/>\n        <bean class=\"beans.MyComponent\" id=\"foo\">\n          <property name=\"otherBean\" ref=\"otherBean\"/>\n        </bean>\n      </beans>\n\nInspection ID: SpringXmlAutowireExplicitlyInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SpringXmlAutowireExplicitlyInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Core/XML",
                      "index": 7,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringHandlersSchemasHighlighting",
                "shortDescription": {
                  "text": "Unresolved file or class reference in 'spring.handlers' or 'spring.schemas' file"
                },
                "fullDescription": {
                  "text": "Reports unresolved class and file references in 'spring.handlers' and 'spring.schemas' files. Example 'spring.handlers' file: 'a=my.company.MyHandler\n   b=my.company.UnknownHandler // reports \"Cannot resolve class 'my.company.UnknownHandler'\"' Inspection ID: SpringHandlersSchemasHighlighting",
                  "markdown": "Reports unresolved class and file references in `spring.handlers` and `spring.schemas` files.\n\n**Example `spring.handlers` file:**\n\n\n       a=my.company.MyHandler\n       b=my.company.UnknownHandler // reports \"Cannot resolve class 'my.company.UnknownHandler'\"\n\nInspection ID: SpringHandlersSchemasHighlighting"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "SpringHandlersSchemasHighlighting",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Core",
                      "index": 6,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringTestingDirtiesContextInspection",
                "shortDescription": {
                  "text": "Invalid @DirtiesContext 'mode' configuration"
                },
                "fullDescription": {
                  "text": "Reports incorrect 'mode' configuration in the @DirtiesContext annotation. Example: '@ContextConfiguration\n  @DirtiesContext(methodMode = MethodMode.AFTER_METHOD, // Setting the method mode on an annotated test class has no meaning. For class-level control, use classMode instead.\n                  hierarchyMode = DirtiesContext.HierarchyMode.CURRENT_LEVEL) // hierarchyMode should be used when the context is configured as part of a hierarchy via @ContextHierarchy\n  public class MyTest {\n    @DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_CLASS, // Setting the class mode on an annotated test method has no meaning. For method-level control use methodMode instead..\n                     hierarchyMode = DirtiesContext.HierarchyMode.CURRENT_LEVEL) // hierarchyMode should be used when the context is configured as part of a hierarchy via @ContextHierarchy\n    public void testFoo() {...}\n  }' Inspection ID: SpringTestingDirtiesContextInspection",
                  "markdown": "Reports incorrect 'mode' configuration in the\n[@DirtiesContext](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/test/annotation/DirtiesContext.html)\nannotation.\n\n**Example:**\n\n\n      @ContextConfiguration\n      @DirtiesContext(methodMode = MethodMode.AFTER_METHOD, // Setting the method mode on an annotated test class has no meaning. For class-level control, use classMode instead.\n                      hierarchyMode = DirtiesContext.HierarchyMode.CURRENT_LEVEL) // hierarchyMode should be used when the context is configured as part of a hierarchy via @ContextHierarchy\n      public class MyTest {\n        @DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_CLASS, // Setting the class mode on an annotated test method has no meaning. For method-level control use methodMode instead..\n                         hierarchyMode = DirtiesContext.HierarchyMode.CURRENT_LEVEL) // hierarchyMode should be used when the context is configured as part of a hierarchy via @ContextHierarchy\n        public void testFoo() {...}\n      }\n\nInspection ID: SpringTestingDirtiesContextInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SpringTestingDirtiesContextInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Core/Code",
                      "index": 11,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringCacheNamesInspection",
                "shortDescription": {
                  "text": "Incorrect required cache names definition"
                },
                "fullDescription": {
                  "text": "Reports incorrect '@Cache*' annotation names. At least one cache name should be provided per cache operation: '@Cacheable(\"cache_name\")' or '@Cacheable(cacheNames =\"cache_name\")'. '@CacheConfig#cacheNames()' can be used for sharing common cache-related settings at the class level. Inspection ID: SpringCacheNamesInspection",
                  "markdown": "Reports incorrect `@Cache*` annotation names.\n\nAt least one cache name should be provided per cache operation: `@Cacheable(\"cache_name\")` or `@Cacheable(cacheNames =\"cache_name\")`.\n`@CacheConfig#cacheNames()` can be used for sharing common cache-related settings at the class level.\n\nInspection ID: SpringCacheNamesInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SpringCacheNamesInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Core/Code",
                      "index": 11,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringJavaStaticMembersAutowiringInspection",
                "shortDescription": {
                  "text": "Incorrect Spring component autowiring or injection on a static class member"
                },
                "fullDescription": {
                  "text": "Reports autowired and injected static methods/fields of Spring components. Example: '@Component\npublic class MyComponent {\n\t@Autowired\n\tstatic FooInterface foo;  // reports \"Don't autowire static members\"\n}' Inspection ID: SpringJavaStaticMembersAutowiringInspection",
                  "markdown": "Reports autowired and injected static methods/fields of Spring components.\n\n**Example:**\n\n\n    @Component\n    public class MyComponent {\n    \t@Autowired\n    \tstatic FooInterface foo;  // reports \"Don't autowire static members\"\n    }\n\nInspection ID: SpringJavaStaticMembersAutowiringInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SpringJavaStaticMembersAutowiringInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Core/Code",
                      "index": 11,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringPlaceholdersInspection",
                "shortDescription": {
                  "text": "Unresolved placeholders configured in the Spring XML application context"
                },
                "fullDescription": {
                  "text": "Reports unresolved placeholders configured in Spring XML contexts. Example: '<beans>\n    <ctx:property-placeholder location=\"application.properties\"/>\n\n    <bean class=\"beans.ServerComponent\">\n      <property name=\"serverName\" value=\"${server.name}}\"/>\n      <property name=\"port\" value=\"${unknown.property}}\"/> <!-- reports \"Cannot resolve property key\" -->\n    </bean>\n  </beans>' Inspection ID: SpringPlaceholdersInspection",
                  "markdown": "Reports unresolved placeholders configured in Spring XML contexts.\n\n**Example:**\n\n\n      <beans>\n        <ctx:property-placeholder location=\"application.properties\"/>\n\n        <bean class=\"beans.ServerComponent\">\n          <property name=\"serverName\" value=\"${server.name}}\"/>\n          <property name=\"port\" value=\"${unknown.property}}\"/> <!-- reports \"Cannot resolve property key\" -->\n        </bean>\n      </beans>\n\nInspection ID: SpringPlaceholdersInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SpringPlaceholdersInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Core/XML",
                      "index": 7,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringCacheableMethodCallsInspection",
                "shortDescription": {
                  "text": "@Cacheable self-invocation method calls"
                },
                "fullDescription": {
                  "text": "Using @Cacheable: In proxy mode (which is the default), only external method calls coming in through the proxy are intercepted. This means that self-invocation (in effect, a method within the target object calling another method of the target object) will not lead to an actual caching at runtime even if the invoked method is marked with @Cacheable Inspection ID: SpringCacheableMethodCallsInspection",
                  "markdown": "[Using @Cacheable](https://docs.spring.io/spring-framework/reference/integration/cache/annotations.html): In proxy mode (which is the default), only external method calls coming in through the proxy are intercepted. This means that self-invocation (in effect, a method within the target object calling another method of the target object) will not lead to an actual caching at runtime even if the invoked method is marked with @Cacheable\n\nInspection ID: SpringCacheableMethodCallsInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SpringCacheableMethodCallsInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Core/Code",
                      "index": 11,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringImportResource",
                "shortDescription": {
                  "text": "Unresolved file references in @ImportResource locations"
                },
                "fullDescription": {
                  "text": "Reports unresolved files and directories in 'locations' attributes of @ImportResource annotations and the corresponding aliased attributes of the '@ImportResource' meta annotations. Example: '@Configuration\n  @ImportResource(locations = \"classpath:META-INF/unknown-context.xml\") // reports \"Cannot resolve file 'unknown-context.xml'\"\n  public class MyConfiguration {...}' Inspection ID: SpringImportResource",
                  "markdown": "Reports unresolved files and directories in `locations` attributes\nof [@ImportResource](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/ImportResource.html) annotations\nand the corresponding aliased attributes of the `@ImportResource` meta annotations.\n\n**Example:**\n\n\n      @Configuration\n      @ImportResource(locations = \"classpath:META-INF/unknown-context.xml\") // reports \"Cannot resolve file 'unknown-context.xml'\"\n      public class MyConfiguration {...}\n\nInspection ID: SpringImportResource"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SpringImportResource",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Core/Code",
                      "index": 11,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringTransactionalComponentInspection",
                "shortDescription": {
                  "text": "Invalid 'PlatformTransactionManager' declaration in @Transactional component"
                },
                "fullDescription": {
                  "text": "Reports PlatformTransactionManager classes that are not correctly defined in the application context for the current @Transactional component. Inspection ID: SpringTransactionalComponentInspection",
                  "markdown": "Reports [PlatformTransactionManager](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/transaction/PlatformTransactionManager.html) classes that are not correctly defined in the application context for the current [@Transactional](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/transaction/annotation/Transactional.html) component.\n\nInspection ID: SpringTransactionalComponentInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "SpringTransactionalComponentInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Core/Code",
                      "index": 11,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringBeanLookupMethodInspection",
                "shortDescription": {
                  "text": "Incorrectly configured XML bean lookup-method"
                },
                "fullDescription": {
                  "text": "Reports incorrect <lookup-method> for a bean in XML application contexts. Example: 'public abstract class FooLookupBean {\n    protected abstract FooBean createCommand();\n    private FooBean createCommand() {...}\n    protected static FooBean createCommandStatic() {...}\n    protected abstract FooBean createWithArgs(String foo);\n    protected abstract OtherBean createOtherBean();\n  }' '<beans>\n    <bean class=\"FooLookupBean\" id=\"lookupTest\">\n      <lookup-method bean=\"fooBean\" name=\"createCommand\"/>\n      <!-- private -->\n      <lookup-method bean=\"fooBean\" name=\"createCommand\"/> <!-- \"Method must be public or protected\" -->\n      <!-- static -->\n      <lookup-method bean=\"fooBean\" name=\"createCommandStatic\"/> <!-- Static method not allowed here -->\n      <!-- with arguments -->\n      <lookup-method bean=\"fooBean\" name=\"createWithArgs\"/> <!-- Method must have no parameters -->\n      <!-- not exist -->\n      <lookup-method bean=\"fooBean\" name=\"unknown\"/> <!-- unknown method -->\n      <!-- mismatch -->\n      <lookup-method bean=\"fooBean\" name=\"createOtherBean\"/> <!-- Lookup method return type does not match the 'FooBean' bean class -->\n    </bean>\n\n    <bean class=\"FooBean\" id=\"fooBean\"/>\n    <bean class=\"OtherBean\" id=\"otherBean\"/>\n  </beans>' Inspection ID: SpringBeanLookupMethodInspection",
                  "markdown": "Reports incorrect **\\<lookup-method\\>** for a bean in XML application contexts.\n\n**Example:**\n\n\n      public abstract class FooLookupBean {\n        protected abstract FooBean createCommand();\n        private FooBean createCommand() {...}\n        protected static FooBean createCommandStatic() {...}\n        protected abstract FooBean createWithArgs(String foo);\n        protected abstract OtherBean createOtherBean();\n      }\n      \n\n      <beans>\n        <bean class=\"FooLookupBean\" id=\"lookupTest\">\n          <lookup-method bean=\"fooBean\" name=\"createCommand\"/>\n          <!-- private -->\n          <lookup-method bean=\"fooBean\" name=\"createCommand\"/> <!-- \"Method must be public or protected\" -->\n          <!-- static -->\n          <lookup-method bean=\"fooBean\" name=\"createCommandStatic\"/> <!-- Static method not allowed here -->\n          <!-- with arguments -->\n          <lookup-method bean=\"fooBean\" name=\"createWithArgs\"/> <!-- Method must have no parameters -->\n          <!-- not exist -->\n          <lookup-method bean=\"fooBean\" name=\"unknown\"/> <!-- unknown method -->\n          <!-- mismatch -->\n          <lookup-method bean=\"fooBean\" name=\"createOtherBean\"/> <!-- Lookup method return type does not match the 'FooBean' bean class -->\n        </bean>\n\n        <bean class=\"FooBean\" id=\"fooBean\"/>\n        <bean class=\"OtherBean\" id=\"otherBean\"/>\n      </beans>\n\nInspection ID: SpringBeanLookupMethodInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "SpringBeanLookupMethodInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Core/XML",
                      "index": 7,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringPropertySource",
                "shortDescription": {
                  "text": "Unresolved file references in @PropertySource and @TestPropertySource locations"
                },
                "fullDescription": {
                  "text": "Reports unresolved files or directories in @PropertySource and @TestPropertySource annotations. Example: '@Configuration\n  @PropertySource(\"classpath:/com/mycompany/unknown.properties\") // reports \"Cannot resolve file unknown.properties\"\n  public class AppConfig {...}' Inspection ID: SpringPropertySource",
                  "markdown": "Reports unresolved files or directories in\n[@PropertySource](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/PropertySource.html)\nand [@TestPropertySource](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/test/context/TestPropertySource.html)\nannotations.\n\n**Example:**\n\n\n      @Configuration\n      @PropertySource(\"classpath:/com/mycompany/unknown.properties\") // reports \"Cannot resolve file unknown.properties\"\n      public class AppConfig {...}\n\nInspection ID: SpringPropertySource"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SpringPropertySource",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Core/Code",
                      "index": 11,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringProfileExpression",
                "shortDescription": {
                  "text": "Incorrectly configured @Profile expression"
                },
                "fullDescription": {
                  "text": "Reports incorrect @Profile expressions: Spring profiles must not be empty '&' and '|' operators must not be mixed without parentheses in Spring profile expressions Examples: '// correctly configured\n  @Configuration\n  @Profile(\"a & (b | c)\")\n  public class MyConfiguration {...}\n\n  // empty\n  @Configuration\n  @Profile() // reports \"Profile expression must contain text\"\n  public class MyConfiguration {...}\n\n  // mixed operators without parentheses\n  @Configuration\n  @Profile(\"a & b | c\") // reports \"Malformed profile expression\"\n  public class MyConfiguration {...}' Inspection ID: SpringProfileExpression",
                  "markdown": "Reports incorrect\n[@Profile](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/Profile.html)\nexpressions:\n\n* Spring profiles must not be empty\n* '\\&' and '\\|' operators must not be mixed without parentheses in Spring profile expressions\n\n**Examples:**\n\n\n      // correctly configured\n      @Configuration\n      @Profile(\"a & (b | c)\")\n      public class MyConfiguration {...}\n\n      // empty\n      @Configuration\n      @Profile() // reports \"Profile expression must contain text\"\n      public class MyConfiguration {...}\n\n      // mixed operators without parentheses\n      @Configuration\n      @Profile(\"a & b | c\") // reports \"Malformed profile expression\"\n      public class MyConfiguration {...}\n\nInspection ID: SpringProfileExpression"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "SpringProfileExpression",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Core/Code",
                      "index": 11,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AbstractBeanReferencesInspection",
                "shortDescription": {
                  "text": "Incorrect reference to abstract bean"
                },
                "fullDescription": {
                  "text": "Reports referenced abstract beans. Abstract beans can be used only as template bean definitions, that is, parents for child definitions. Trying to use such an abstract parent bean on its own by referring to it as a ref property of another bean, or by calling 'getBean()' with the parent bean id, will result in an error. Example: '<bean abstract=\"true\" id=\"parentBeanWithoutClass\"/>\n  <bean class=\"com.my.company.FooBean\" id=\"childBean\" parent=\"parentBeanWithoutClass\">\n  <!--  properties -->\n  </bean>' In this example, the parent bean can't be instantiated on its own since it is incomplete and explicitly marked as abstract. Inspection ID: AbstractBeanReferencesInspection",
                  "markdown": "Reports referenced abstract beans.\n\nAbstract beans can be used only as template bean definitions, that is, parents for child definitions.\nTrying to use such an abstract parent bean on its own by referring to it as a ref property of another bean,\nor by calling `getBean()` with the parent bean id, will result in an error.\n\n**Example:**\n\n\n      <bean abstract=\"true\" id=\"parentBeanWithoutClass\"/>\n      <bean class=\"com.my.company.FooBean\" id=\"childBean\" parent=\"parentBeanWithoutClass\">\n      <!--  properties -->\n      </bean>\n\nIn this example, the parent bean can't be instantiated on its own since it is incomplete and explicitly marked as abstract.\n\nInspection ID: AbstractBeanReferencesInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AbstractBeanReferencesInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Core/XML",
                      "index": 7,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.spring.cloud",
            "version": "253.22441.33",
            "rules": [
              {
                "id": "SpringBootBootstrapConfigurationInspection",
                "shortDescription": {
                  "text": "Bootstrap configuration included in application context"
                },
                "fullDescription": {
                  "text": "Reports 'BootstrapConfiguration' included into the Spring Boot application context via a component scan where it might not be needed. For more information, see Spring Cloud Commons documentation. Inspection ID: SpringBootBootstrapConfigurationInspection",
                  "markdown": "Reports `BootstrapConfiguration` included into the Spring Boot application context via a component scan where it might not be needed.\n\nFor more information, see [Spring Cloud Commons documentation](https://docs.spring.io/spring-cloud-commons/docs/current/reference/html/#customizing-the-bootstrap-configuration).\n\nInspection ID: SpringBootBootstrapConfigurationInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "SpringBootBootstrapConfigurationInspection",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Cloud",
                      "index": 13,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringCloudStreamMessageChannelInspection",
                "shortDescription": {
                  "text": "Unresolved message channel"
                },
                "fullDescription": {
                  "text": "Reports unresolved channel attributes in '@StreamListener', '@SendTo', '@Output', and '@Input' annotations. Using invalid binding name results in 'bean not found' error at runtime. Example: '@EnableBinding(Sink.class)\n  public class LogSource {\n    @StreamListener(Sink.class)\n\t  public void log1() {\n    }\n\n    @StreamListener(\"invalid\")  // Reports 'Cannot find channel'\n\t  public void log2() {\n    }\n  }' Inspection ID: SpringCloudStreamMessageChannelInspection",
                  "markdown": "Reports unresolved channel attributes in `@StreamListener`, `@SendTo`, `@Output`, and `@Input` annotations.\n\nUsing invalid binding name results in 'bean not found' error at runtime.\n\n**Example:**\n\n\n      @EnableBinding(Sink.class)\n      public class LogSource {\n        @StreamListener(Sink.class)\n    \t  public void log1() {\n        }\n\n        @StreamListener(\"invalid\")  // Reports 'Cannot find channel'\n    \t  public void log2() {\n        }\n      }\n\nInspection ID: SpringCloudStreamMessageChannelInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SpringCloudStreamMessageChannelInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Cloud Stream",
                      "index": 145,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringCloudStreamInconsistencyInspection",
                "shortDescription": {
                  "text": "Stream handler method error"
                },
                "fullDescription": {
                  "text": "Reports inconsistency errors in stream handler methods. Input and output stream handler methods annotated with '@StreamListener' or '@StreamEmitter' have various constraints. Violation of the constraints results in errors at runtime. For example: Channel defined in '@StreamListener' 'value' attribute may never be combined with method parameters annotated with '@Input' or '@Output' An input channel must be specified for a method annotated with '@StreamListener' An output channel must be specified for a method that can return a value An output channel cannot be specified for a method that does not return a value '@StreamListener' 'condition' attribute cannot be set for methods that return a value Inspection ID: SpringCloudStreamInconsistencyInspection",
                  "markdown": "Reports inconsistency errors in stream handler methods.\n\n\nInput and output stream handler methods annotated with `@StreamListener` or `@StreamEmitter` have various constraints.\nViolation of the constraints results in errors at runtime.\n\nFor example:\n\n* Channel defined in `@StreamListener` `value` attribute may never be combined with method parameters annotated with `@Input` or `@Output`\n* An input channel must be specified for a method annotated with `@StreamListener`\n* An output channel must be specified for a method that can return a value\n* An output channel cannot be specified for a method that does not return a value\n* `@StreamListener` `condition` attribute cannot be set for methods that return a value\n\nInspection ID: SpringCloudStreamInconsistencyInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SpringCloudStreamInconsistencyInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Cloud Stream",
                      "index": 145,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "Karma",
            "version": "253.22441.33",
            "rules": [
              {
                "id": "KarmaConfigFile",
                "shortDescription": {
                  "text": "Invalid Karma configuration file"
                },
                "fullDescription": {
                  "text": "Reports a potential error in a file path ('basePath', 'files') for a Karma configuration file, for example, 'karma.conf.js'. Inspection ID: KarmaConfigFile",
                  "markdown": "Reports a potential error in a file path ('basePath', 'files') for a Karma configuration file, for example, `karma.conf.js`.\n\nInspection ID: KarmaConfigFile"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "KarmaConfigFile",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Unit testing",
                      "index": 15,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "tanvd.grazi",
            "version": "253.22441.33",
            "rules": [
              {
                "id": "GrazieStyle",
                "shortDescription": {
                  "text": "Style"
                },
                "fullDescription": {
                  "text": "Check the writing style defined in: Grazie rule files (e.g. '.grazie.en.yaml' for English) for this project or its specific subdirectories. To create such a file, invoke New menu on any (e.g. root) directory of the project. Style rules in Editor | Natural languages | Rules settings This inspection only returns results via Code | Analyze Code | Run Inspection By Name... or in offline analysis. Editor highlighting of style issues is performed independently of this inspection's settings. Inspection ID: GrazieStyle",
                  "markdown": "Check the writing style defined in:\n\n* Grazie rule files (e.g. `.grazie.en.yaml` for English) for this project or its specific subdirectories. To create such a file, invoke **New** menu on any (e.g. root) directory of the project.\n* *Style* rules in *Editor \\| Natural languages \\| Rules* settings\n\nThis inspection only returns results via **Code \\| Analyze Code \\| Run Inspection By Name...** or in offline analysis. Editor highlighting of style issues is performed independently of this inspection's settings.\n\nInspection ID: GrazieStyle"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "GrazieStyle",
                    "ideaSeverity": "STYLE_SUGGESTION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Proofreading",
                      "index": 16,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpellCheckingInspection",
                "shortDescription": {
                  "text": "Spelling"
                },
                "fullDescription": {
                  "text": "Reports typos and misspellings in your code, comments, and literals and fixes them with one click. Inspection ID: SpellCheckingInspection",
                  "markdown": "Reports typos and misspellings in your code, comments, and literals and fixes them with one click.\n\nInspection ID: SpellCheckingInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "SpellCheckingInspection",
                    "ideaSeverity": "TYPO",
                    "qodanaSeverity": "Low",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Proofreading",
                      "index": 16,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LanguageDetectionInspection",
                "shortDescription": {
                  "text": "Natural language detection"
                },
                "fullDescription": {
                  "text": "Detects natural languages and suggests enabling corresponding grammar and spelling checks. Inspection ID: LanguageDetectionInspection",
                  "markdown": "Detects natural languages and suggests enabling corresponding grammar and spelling checks.\n\nInspection ID: LanguageDetectionInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "LanguageDetectionInspection",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Proofreading",
                      "index": 16,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GrazieInspection",
                "shortDescription": {
                  "text": "Grammar"
                },
                "fullDescription": {
                  "text": "Reports grammar mistakes in your text. You can configure the inspection in Settings | Editor | Natural Languages | Grammar and Style. Inspection ID: GrazieInspection",
                  "markdown": "Reports grammar mistakes in your text. You can configure the inspection in [Settings \\| Editor \\| Natural Languages \\| Grammar and Style](settings://reference.settingsdialog.project.grazie).\n\nInspection ID: GrazieInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "GrazieInspection",
                    "ideaSeverity": "GRAMMAR_ERROR",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Proofreading",
                      "index": 16,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.jetbrains.idea.maven",
            "version": "253.22441.33",
            "rules": [
              {
                "id": "MavenDuplicatePluginInspection",
                "shortDescription": {
                  "text": "Duplicate plugin declaration"
                },
                "fullDescription": {
                  "text": "Reports the duplication of the plugin declaration in pom.xml Inspection ID: MavenDuplicatePluginInspection",
                  "markdown": "Reports the duplication of the plugin declaration in pom.xml\n\nInspection ID: MavenDuplicatePluginInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MavenDuplicatePluginInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Maven",
                      "index": 20,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MavenNewElementsInOldSchema",
                "shortDescription": {
                  "text": "Wrong model version. Model version should be 4.1.0 for this tag"
                },
                "fullDescription": {
                  "text": "Reports the new model tags in the old project schema and suggests updating the project schema Inspection ID: MavenNewElementsInOldSchema",
                  "markdown": "Reports the new model tags in the old project schema\n\n\nand suggests updating the project schema\n\nInspection ID: MavenNewElementsInOldSchema"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "MavenNewElementsInOldSchema",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Maven",
                      "index": 20,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MavenPropertyInParent",
                "shortDescription": {
                  "text": "Usage of properties in parent description"
                },
                "fullDescription": {
                  "text": "Reports that the usage of properties in modules parent definition is prohibited Inspection ID: MavenPropertyInParent",
                  "markdown": "Reports that the usage of properties in modules parent definition is prohibited\n\nInspection ID: MavenPropertyInParent"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MavenPropertyInParent",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Maven",
                      "index": 20,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MavenModelVersionMissed",
                "shortDescription": {
                  "text": "'modelVersion' child tag should be defined"
                },
                "fullDescription": {
                  "text": "Reports the absence of <modelVersion> tag For Maven 4 and newer, it is optional, as it is derived from schema location. Inspection ID: MavenModelVersionMissed",
                  "markdown": "Reports the absence of \\<modelVersion\\> tag\n\n\nFor Maven 4 and newer, it is optional, as it is derived from schema location.\n\nInspection ID: MavenModelVersionMissed"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "MavenModelVersionMissed",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Maven",
                      "index": 20,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MavenDuplicateDependenciesInspection",
                "shortDescription": {
                  "text": "Duplicate Dependencies"
                },
                "fullDescription": {
                  "text": "Reports duplicate dependencies Inspection ID: MavenDuplicateDependenciesInspection",
                  "markdown": "Reports duplicate dependencies\n\nInspection ID: MavenDuplicateDependenciesInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MavenDuplicateDependenciesInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Maven",
                      "index": 20,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MavenModelInspection",
                "shortDescription": {
                  "text": "Maven Model Inspection"
                },
                "fullDescription": {
                  "text": "Reports resolution problems in a Maven model Inspection ID: MavenModelInspection",
                  "markdown": "Reports resolution problems in a Maven model\n\nInspection ID: MavenModelInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "MavenModelInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Maven",
                      "index": 20,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MavenParentMissedVersionInspection",
                "shortDescription": {
                  "text": "Parent version missed"
                },
                "fullDescription": {
                  "text": "Reports the absence of the parent version element for versions that do not support consumer POM feature Inspection ID: MavenParentMissedVersionInspection",
                  "markdown": "Reports the absence of the parent version element for versions that do not support consumer POM feature\n\nInspection ID: MavenParentMissedVersionInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "MavenParentMissedVersionInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Maven",
                      "index": 20,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MavenRedundantGroupId",
                "shortDescription": {
                  "text": "Redundant groupId"
                },
                "fullDescription": {
                  "text": "Reports the unnecessary <groupId> definition since it is already defined in the parent pom.xml Inspection ID: MavenRedundantGroupId",
                  "markdown": "Reports the unnecessary \\<groupId\\> definition since it is already defined in the parent pom.xml\n\nInspection ID: MavenRedundantGroupId"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MavenRedundantGroupId",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Maven",
                      "index": 20,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MavenNewModelVersionInOldSchema",
                "shortDescription": {
                  "text": "Wrong model version. Model version should be 4.1.0 for this tag"
                },
                "fullDescription": {
                  "text": "Reports the new model version in the old project schema and suggests updating the project schema Inspection ID: MavenNewModelVersionInOldSchema",
                  "markdown": "Reports the new model version in the old project schema\n\n\nand suggests updating the project schema\n\nInspection ID: MavenNewModelVersionInOldSchema"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "MavenNewModelVersionInOldSchema",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Maven",
                      "index": 20,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MavenParentMissedGroupIdArtifactIdInspection",
                "shortDescription": {
                  "text": "Parent groupId or artifactId is missing"
                },
                "fullDescription": {
                  "text": "Reports the absence of <groupId> and <artifactId> elements in the <parent> tag. (for Maven 4 and later, they are optional if a parent POM could be found by the relativePath). Inspection ID: MavenParentMissedGroupIdArtifactIdInspection",
                  "markdown": "Reports the absence of \\<groupId\\> and \\<artifactId\\> elements in the \\<parent\\> tag.\n\n(for Maven 4 and later, they are optional if a parent POM could be found by the relativePath).\n\nInspection ID: MavenParentMissedGroupIdArtifactIdInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "MavenParentMissedGroupIdArtifactIdInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Maven",
                      "index": 20,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.persistence",
            "version": "253.22441.33",
            "rules": [
              {
                "id": "MongoDBJsonDuplicatePropertyKeys",
                "shortDescription": {
                  "text": "Duplicate keys in object literals"
                },
                "fullDescription": {
                  "text": "Reports a duplicate key in an object literal. Inspection ID: MongoDBJsonDuplicatePropertyKeys",
                  "markdown": "Reports a duplicate key in an object literal.\n\nInspection ID: MongoDBJsonDuplicatePropertyKeys"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MongoDBJsonDuplicatePropertyKeys",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 21,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlSourceToSinkFlow",
                "shortDescription": {
                  "text": "Non-safe string is used as SQL"
                },
                "fullDescription": {
                  "text": "Reports cases for Java and Kotlin languages when a non-safe string is passed to a method as a SQL query. It can be a cause of SQL injections. The list of methods is taken from Settings - Language Injections for 'SQL', 'JPA QL', 'Hibernate QL' and 'PostgreSQL' A safe object is: a string literal, interface instance, or enum object, int and its wrapper, boolean and its wrapper, class object a call result of a method, whose receiver and arguments are safe a private field in the same file, which is assigned only with a string literal and has a safe initializer a final field in the same file, which has a safe initializer a local variable which is assigned from safe-objects This field, local variable, or parameter must not be passed as arguments to methods or used as a qualifier or must be a primitive, its wrapper or immutable. Static final fields are considered as safe. The analysis is performed only inside one file. Example: 'public void save(String sql) {\n        JdbcTemplate jdbcTemplate = new JdbcTemplate();\n        jdbcTemplate.queryForList(sql);\n    }'\n Inspection ID: SqlSourceToSinkFlow New in 2023.2",
                  "markdown": "Reports cases for Java and Kotlin languages when a non-safe string is passed to a method as a SQL query. It can be a cause of SQL injections. The list of methods is taken from **Settings** - **Language Injections** for `SQL`, `JPA QL`, `Hibernate QL` and `PostgreSQL`\n\n\nA safe object is:\n\n* a string literal, interface instance, or enum object, int and its wrapper, boolean and its wrapper, class object\n* a call result of a method, whose receiver and arguments are safe\n* a private field in the same file, which is assigned only with a string literal and has a safe initializer\n* a final field in the same file, which has a safe initializer\n* a local variable which is assigned from safe-objects\n\nThis field, local variable, or parameter must not be passed as arguments to methods or used as a qualifier or must be a primitive, its wrapper or immutable. Static final fields are considered as safe.\n\n\nThe analysis is performed only inside one file.\nExample:\n\n\n        public void save(String sql) {\n            JdbcTemplate jdbcTemplate = new JdbcTemplate();\n            jdbcTemplate.queryForList(sql);\n        }\n\nInspection ID: SqlSourceToSinkFlow\n\nNew in 2023.2"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlSourceToSinkFlow",
                    "cweIds": [
                      89,
                      564
                    ],
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Security"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JVM languages",
                      "index": 1,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.database",
            "version": "253.22441.33",
            "rules": [
              {
                "id": "MysqlLoadDataPathInspection",
                "shortDescription": {
                  "text": "LOAD statement path"
                },
                "fullDescription": {
                  "text": "No description available",
                  "markdown": "No description available"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MysqlLoadDataPath",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "MySQL",
                      "index": 22,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlMissingReturnInspection",
                "shortDescription": {
                  "text": "Missing return statement"
                },
                "fullDescription": {
                  "text": "Reports functions that have no RETURN statements. Example (Oracle): 'CREATE FUNCTION foo RETURN int AS\nBEGIN\nEND;' The 'foo' function must return the integer value but the function body returns nothing. To fix the error, add a RETURN statement (for example, 'return 1;'). 'CREATE FUNCTION foo RETURN int AS\nBEGIN\n RETURN 1;\nEND;' Inspection ID: SqlMissingReturnInspection",
                  "markdown": "Reports functions that have no RETURN statements.\n\nExample (Oracle):\n\n    CREATE FUNCTION foo RETURN int AS\n    BEGIN\n    END;\n\nThe `foo` function must return the integer value but the function body returns nothing. To fix the error,\nadd a RETURN statement (for example, `return 1;`).\n\n    CREATE FUNCTION foo RETURN int AS\n    BEGIN\n     RETURN 1;\n    END;\n\nInspection ID: SqlMissingReturnInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "SqlMissingReturn",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 48,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlCaseVsIfInspection",
                "shortDescription": {
                  "text": "Using CASE instead of conditional function and vice versa"
                },
                "fullDescription": {
                  "text": "Reports situations when CASE and IF are interchangeable. Example (MySQL): 'SELECT CASE\nWHEN C1 IS NULL THEN 1\nELSE 0\nEND\nFROM dual;' To keep your code short, you can replace the CASE structure with IF. You can do that by applying the Replace with 'IF' call intention action. The example code will look as follows: 'SELECT IF(C1 IS NULL, 1, 0)\nFROM dual;' To revert IF to CASE, click IF and apply the Replace with CASE expression intention action. Inspection ID: SqlCaseVsIfInspection",
                  "markdown": "Reports situations when CASE and IF are interchangeable.\n\nExample (MySQL):\n\n    SELECT CASE\n    WHEN C1 IS NULL THEN 1\n    ELSE 0\n    END\n    FROM dual;\n\nTo keep your code short, you can replace the CASE structure with IF. You can do that by applying the **Replace with 'IF' call**\nintention action. The example code will look as follows:\n\n    SELECT IF(C1 IS NULL, 1, 0)\n    FROM dual;\n\nTo revert IF to CASE, click IF and apply the **Replace with CASE expression** intention action.\n\nInspection ID: SqlCaseVsIfInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlCaseVsIf",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 48,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlShouldBeInGroupByInspection",
                "shortDescription": {
                  "text": "Column should be in group by clause"
                },
                "fullDescription": {
                  "text": "Reports columns that are not in the GROUP BY clause or inside an aggregate function call. Example (Microsoft SQL Server): 'CREATE TABLE t1 (a INT, b INT);\nSELECT a, b FROM t1 GROUP BY a;' If you run the SELECT query, you will receive an error because Microsoft SQL Server expects the 'b' column in GROUP BY or used inside an aggregate function. The following two examples will fix the error. 'SELECT a, b FROM t1 GROUP BY a, b;\nSELECT a, max(b) max_b FROM t1 GROUP BY a;' Inspection ID: SqlShouldBeInGroupByInspection",
                  "markdown": "Reports columns that are not in the GROUP BY clause or inside an aggregate function call.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE t1 (a INT, b INT);\n    SELECT a, b FROM t1 GROUP BY a;\n\nIf you run the SELECT query, you will receive an error because Microsoft SQL Server expects the `b` column in GROUP BY or used\ninside an aggregate function. The following two examples will fix the error.\n\n    SELECT a, b FROM t1 GROUP BY a, b;\n    SELECT a, max(b) max_b FROM t1 GROUP BY a;\n\nInspection ID: SqlShouldBeInGroupByInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlShouldBeInGroupBy",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 48,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlDtInspection",
                "shortDescription": {
                  "text": "Ill-formed date/time literals"
                },
                "fullDescription": {
                  "text": "Reports errors in date and time literals. This inspection is available in MySQL, Oracle, Db2, and H2. Example (MySQL): 'SELECT TIME '10 -12:13:14' FROM dual;\nSELECT TIME ' 12 : 13 : 14 ' FROM dual;\nSELECT TIME '12 13 14' FROM dual;\nSELECT TIME '12-13-14' FROM dual;\nSELECT TIME '12.13.14' FROM dual;\nSELECT TIME '12:13:' FROM dual;\nSELECT TIME '12:13' FROM dual;\nSELECT TIME '12:' FROM dual;' In this example, dates ignore the MySQL standard for date and time literals. Therefore, they will be highlighted. For more information about date and time literals in MySQL, see Date and Time Literals at dev.mysql.com. The following date and type literals are valid for MySQL. 'SELECT TIME '12:13:14' FROM dual;\nSELECT TIME '12:13:14.555' FROM dual;\nSELECT TIME '12:13:14.' FROM dual;\nSELECT TIME '-12:13:14' FROM dual;\nSELECT TIME '10 12:13:14' FROM dual;\nSELECT TIME '-10 12:13:14' FROM dual;' Inspection ID: SqlDtInspection",
                  "markdown": "Reports errors in date and time literals. This inspection is available in MySQL, Oracle, Db2, and H2.\n\nExample (MySQL):\n\n    SELECT TIME '10 -12:13:14' FROM dual;\n    SELECT TIME ' 12 : 13 : 14 ' FROM dual;\n    SELECT TIME '12 13 14' FROM dual;\n    SELECT TIME '12-13-14' FROM dual;\n    SELECT TIME '12.13.14' FROM dual;\n    SELECT TIME '12:13:' FROM dual;\n    SELECT TIME '12:13' FROM dual;\n    SELECT TIME '12:' FROM dual;\n\nIn this example, dates ignore the MySQL standard for date and time literals. Therefore, they will be highlighted.\nFor more information about date and time literals in MySQL, see [Date and Time Literals at dev.mysql.com](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-literals.html).\n\nThe following date and type literals are valid for MySQL.\n\n    SELECT TIME '12:13:14' FROM dual;\n    SELECT TIME '12:13:14.555' FROM dual;\n    SELECT TIME '12:13:14.' FROM dual;\n    SELECT TIME '-12:13:14' FROM dual;\n    SELECT TIME '10 12:13:14' FROM dual;\n    SELECT TIME '-10 12:13:14' FROM dual;\n\nInspection ID: SqlDtInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlDateTime",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 48,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlNoDataSourceInspection",
                "shortDescription": {
                  "text": "No data sources configured"
                },
                "fullDescription": {
                  "text": "Reports the absence of data sources in the Database tool window (View | Tool Windows | Database). Inspection ID: SqlNoDataSourceInspection",
                  "markdown": "Reports the absence of data sources in the **Database** tool window (**View \\| Tool Windows \\| Database** ).\n\nInspection ID: SqlNoDataSourceInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlNoDataSourceInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 48,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlMisleadingReferenceInspection",
                "shortDescription": {
                  "text": "Misleading references"
                },
                "fullDescription": {
                  "text": "Reports ambiguous references in SQL code. For example, when a name refer to both a table column and a routine parameter. The execution of such code might lead to errors or unexpected results due to counter-intuitive resolution logic. Usually, names with a more local scope have higher priority. Example (PostgreSQL): 'CREATE TABLE foo\n(\n    id   INT,\n    name VARCHAR(5)\n);\nCREATE FUNCTION func(name VARCHAR(5)) RETURNS INT AS\n$$\nDECLARE\n    b INT;\nBEGIN\n      -- `name` is ambiguous as it is used as a column name and a parameter\n    SELECT COUNT(*) INTO b FROM foo t WHERE t.name = name;\n    RETURN b;\nEND;\n$$ LANGUAGE plpgsql;' In PostgreSQL, you can use the '#variable_conflict' directives to explicitly specify a correct reference. For example, use '#variable_conflict use_column' to refer to a column name, or '#variable_conflict use_variable' to refer to a parameter. 'CREATE TABLE foo\n(\n    id   INT,\n    name VARCHAR(5)\n);\nCREATE FUNCTION func(name VARCHAR(5)) RETURNS INT AS\n$$\n    #variable_conflict use_column\nDECLARE\n    b INT;\nBEGIN\n    SELECT COUNT(*) INTO b FROM foo t WHERE t.name = name;\n    RETURN b;\nEND;\n$$ LANGUAGE plpgsql;' Inspection ID: SqlMisleadingReferenceInspection",
                  "markdown": "Reports ambiguous references in SQL code.\n\nFor example, when a name refer to both a table column and a routine parameter. The execution of such code might lead to errors or unexpected\nresults due to counter-intuitive resolution logic. Usually, names with a more local scope have higher priority.\n\nExample (PostgreSQL):\n\n    CREATE TABLE foo\n    (\n        id   INT,\n        name VARCHAR(5)\n    );\n    CREATE FUNCTION func(name VARCHAR(5)) RETURNS INT AS\n    $$\n    DECLARE\n        b INT;\n    BEGIN\n          -- `name` is ambiguous as it is used as a column name and a parameter\n        SELECT COUNT(*) INTO b FROM foo t WHERE t.name = name;\n        RETURN b;\n    END;\n    $$ LANGUAGE plpgsql;\n\nIn PostgreSQL, you can use the `#variable_conflict` directives to explicitly specify a correct reference. For example,\nuse `#variable_conflict use_column` to refer to a column name, or `#variable_conflict use_variable` to refer to a\nparameter.\n\n    CREATE TABLE foo\n    (\n        id   INT,\n        name VARCHAR(5)\n    );\n    CREATE FUNCTION func(name VARCHAR(5)) RETURNS INT AS\n    $$\n        #variable_conflict use_column\n    DECLARE\n        b INT;\n    BEGIN\n        SELECT COUNT(*) INTO b FROM foo t WHERE t.name = name;\n        RETURN b;\n    END;\n    $$ LANGUAGE plpgsql;\n\nInspection ID: SqlMisleadingReferenceInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlMisleadingReference",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 48,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlRedundantAliasInspection",
                "shortDescription": {
                  "text": "Redundant alias expressions"
                },
                "fullDescription": {
                  "text": "Reports alias expressions that duplicate names of columns in tables and might be redundant. Example (PostgreSQL): 'CREATE TABLE foo(a INT, b INT);\n\nSELECT * FROM foo foo(a, b);\nSELECT * FROM foo foo(a);\nSELECT * FROM foo foo(x);\nSELECT * FROM foo foo(x, y);' The first two aliases use the same column names as in the 'foo' table. They are considered redundant because they column names are identical. Inspection ID: SqlRedundantAliasInspection",
                  "markdown": "Reports alias expressions that duplicate names of columns in tables and might be redundant.\n\nExample (PostgreSQL):\n\n    CREATE TABLE foo(a INT, b INT);\n\n    SELECT * FROM foo foo(a, b);\n    SELECT * FROM foo foo(a);\n    SELECT * FROM foo foo(x);\n    SELECT * FROM foo foo(x, y);\n\nThe first two aliases use the same column names as in the `foo` table. They are considered redundant because they\ncolumn names are identical.\n\nInspection ID: SqlRedundantAliasInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlRedundantAlias",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 48,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlConstantExpressionInspection",
                "shortDescription": {
                  "text": "Constant expression"
                },
                "fullDescription": {
                  "text": "Reports conditions and expressions that are always true, false or null. Example (MySQL): 'CREATE TABLE t1 (a TEXT, b INT, c BOOLEAN);\nSELECT a FROM t1 WHERE 'Cat' = 'Cat';\nSELECT a FROM t1 WHERE 'Cat' = null;' The ''Cat' = 'Cat'' is always true and will be reported. The ''Cat' = null' is always null and will be reported. Inspection ID: SqlConstantExpressionInspection",
                  "markdown": "Reports conditions and expressions that are always true, false or null.\n\nExample (MySQL):\n\n    CREATE TABLE t1 (a TEXT, b INT, c BOOLEAN);\n    SELECT a FROM t1 WHERE 'Cat' = 'Cat';\n    SELECT a FROM t1 WHERE 'Cat' = null;\n\nThe `'Cat' = 'Cat'` is always true and will be reported.\n\nThe `'Cat' = null` is always null and will be reported.\n\nInspection ID: SqlConstantExpressionInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlConstantExpression",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 48,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OraUnmatchedForwardDeclarationInspection",
                "shortDescription": {
                  "text": "Forward declaration without definition"
                },
                "fullDescription": {
                  "text": "No description available",
                  "markdown": "No description available"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "SqlUnmatchedForwardDeclaration",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Oracle",
                      "index": 124,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlWithoutWhereInspection",
                "shortDescription": {
                  "text": "Delete or update statement without where clauses"
                },
                "fullDescription": {
                  "text": "Reports usages of DELETE or UPDATE statements without WHERE clauses. Without WHERE clauses, DELETE drops all the data from the table, and UPDATE overwrites values for all the table rows. Example (MySQL): 'CREATE TABLE t1 (a TEXT, b INT, c BOOLEAN);\nupdate t1 set  a = 'Smith';\ndelete from t1;' Inspection ID: SqlWithoutWhereInspection",
                  "markdown": "Reports usages of DELETE or UPDATE statements without WHERE clauses.\n\nWithout WHERE clauses, DELETE drops all the data from the table, and UPDATE overwrites values for all the table rows.\n\nExample (MySQL):\n\n    CREATE TABLE t1 (a TEXT, b INT, c BOOLEAN);\n    update t1 set  a = 'Smith';\n    delete from t1;\n\nInspection ID: SqlWithoutWhereInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlWithoutWhere",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Security"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 48,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlUnusedCteInspection",
                "shortDescription": {
                  "text": "Unused common table expression"
                },
                "fullDescription": {
                  "text": "Reports unused common table expressions (CTE) inside the query. Example (PostgreSQL): 'CREATE TABLE foo(a INT);\n\nWITH a AS (SELECT 1 AS x FROM foo)\nSELECT 1 + 2 FROM foo;' By using WITH, we create a temporary named result set with the name 'a', also known as a common table expression (CTE). But we do not use this CTE later in the code. The unused CTE is greyed out. Inspection ID: SqlUnusedCteInspection",
                  "markdown": "Reports unused common table expressions (CTE) inside the query.\n\nExample (PostgreSQL):\n\n    CREATE TABLE foo(a INT);\n\n    WITH a AS (SELECT 1 AS x FROM foo)\n    SELECT 1 + 2 FROM foo;\n\nBy using WITH, we create a temporary named result set with the name `a`, also known as a common table expression (CTE). But\nwe do not use this CTE later in the code. The unused CTE is greyed out.\n\nInspection ID: SqlUnusedCteInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlUnusedCte",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Performance"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 48,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MongoJSResolveInspection",
                "shortDescription": {
                  "text": "Resolution problems"
                },
                "fullDescription": {
                  "text": "No description available",
                  "markdown": "No description available"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MongoJSResolve",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "MongoJS",
                      "index": 131,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MongoJSSideEffectsInspection",
                "shortDescription": {
                  "text": "Statement with side effects"
                },
                "fullDescription": {
                  "text": "Reports statements that can cause side effects while the data source is in read-only mode. For more information about enabling read-only mode, see Enable read-only mode for a connection in the IDE documentation. The Disable read-only mode quick-fix turns off the read-only mode for the respective data source. Example: 'db.my_collection.insertOne()' Inspection ID: MongoJSSideEffectsInspection",
                  "markdown": "Reports statements that can cause side effects while the data source is in read-only mode.\n\nFor more information about enabling read-only mode, see\n[Enable\nread-only mode for a connection in the IDE documentation](https://www.jetbrains.com/help/datagrip/configuring-database-connections.html#enable-read-only-mode-for-a-connection).\n\nThe **Disable read-only mode** quick-fix turns off the read-only mode for the respective data source.\n\nExample:\n\n\n    db.my_collection.insertOne()\n\nInspection ID: MongoJSSideEffectsInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MongoJSSideEffects",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Security"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "MongoJS",
                      "index": 131,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MongoJSExtSideEffectsInspection",
                "shortDescription": {
                  "text": "Statement with side effects"
                },
                "fullDescription": {
                  "text": "Reports statements that may cause side effects while the data source is in read-only mode. The quick-fix turns off the read-only mode for the respective data source. Example: 'db.my_collection.insertOne()' Inspection ID: MongoJSExtSideEffectsInspection",
                  "markdown": "Reports statements that may cause side effects while the data source is in read-only mode.\n\nThe quick-fix turns off the read-only mode for the respective data source.\n\nExample:\n\n\n    db.my_collection.insertOne()\n\nInspection ID: MongoJSExtSideEffectsInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MongoJSSideEffects",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Security"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "MongoJS",
                      "index": 131,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlUnusedSubqueryItemInspection",
                "shortDescription": {
                  "text": "Unused subquery item"
                },
                "fullDescription": {
                  "text": "Reports columns, aliases, and other subquery items that are not referenced in the outer query expression. Example (PostgreSQL): 'CREATE TABLE for_subquery(id INT);\nSELECT a, q FROM (SELECT 1 AS a, 10 AS b, 2 + 3 AS q, id\n      FROM for_subquery) x;' We reference 'a' and 'q' aliases from a subquery. But the 'b' alias and the 'id' column are not referenced in the outer SELECT statement. Therefore, 'b' and 'id' are grayed out. Inspection ID: SqlUnusedSubqueryItemInspection",
                  "markdown": "Reports columns, aliases, and other subquery items that are not referenced in the outer query expression.\n\nExample (PostgreSQL):\n\n    CREATE TABLE for_subquery(id INT);\n    SELECT a, q FROM (SELECT 1 AS a, 10 AS b, 2 + 3 AS q, id\n          FROM for_subquery) x;\n\nWe reference `a` and `q` aliases from a subquery. But the `b` alias and the `id` column are\nnot referenced in the outer SELECT statement. Therefore, `b` and `id` are grayed out.\n\nInspection ID: SqlUnusedSubqueryItemInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlUnused",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Performance"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 48,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlSideEffectsInspection",
                "shortDescription": {
                  "text": "Statement with side effects"
                },
                "fullDescription": {
                  "text": "Reports statements that might lead to modification of a database during a read-only connection. To enable read-only mode for a connection, right-click a data source in the Database tool window (View | Tool Windows | Database) and select Properties. In the Data Sources and Drivers dialog, click the Options tab and select the Read-only checkbox. Example (MySQL): 'CREATE TABLE foo(a INT);\nINSERT INTO foo VALUES (1);' As 'CREATE TABLE' and 'INSERT INTO' statements lead to a database modification, these statements will be highlighted in read-only connection mode. Inspection ID: SqlSideEffectsInspection",
                  "markdown": "Reports statements that might lead to modification of a database during a read-only connection.\n\nTo enable read-only mode for a\nconnection,\nright-click a data source in the **Database** tool window (**View \\| Tool Windows \\| Database** ) and select **Properties** .\nIn the **Data Sources and Drivers** dialog, click the **Options** tab and select the **Read-only** checkbox.\n\nExample (MySQL):\n\n    CREATE TABLE foo(a INT);\n    INSERT INTO foo VALUES (1);\n\nAs `CREATE TABLE` and `INSERT INTO` statements lead to a database modification, these statements will be highlighted\nin read-only connection mode.\n\nInspection ID: SqlSideEffectsInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlSideEffects",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Security"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 48,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlJoinWithoutOnInspection",
                "shortDescription": {
                  "text": "Unsafe 'join' clause in 'delete' statement"
                },
                "fullDescription": {
                  "text": "Reports missing conditional checks for statements that might modify the whole database. For example, usages of JOIN clauses inside DELETE statements without ON or WHERE. Without conditional checks on JOIN, DELETE drops contents of the entire table. Example (MySQL): 'CREATE TABLE foo (a INT,b INT,c INT);\nCREATE TABLE bar (a INT,b INT,c INT);\n\nDELETE table1 FROM foo table1  INNER JOIN bar table2;' Inspection ID: SqlJoinWithoutOnInspection",
                  "markdown": "Reports missing conditional checks for statements that might modify the whole database.\n\nFor example, usages of JOIN clauses inside DELETE statements without ON or WHERE. Without conditional checks on JOIN, DELETE drops\ncontents of the entire table.\n\nExample (MySQL):\n\n    CREATE TABLE foo (a INT,b INT,c INT);\n    CREATE TABLE bar (a INT,b INT,c INT);\n\n    DELETE table1 FROM foo table1  INNER JOIN bar table2;\n\nInspection ID: SqlJoinWithoutOnInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlJoinWithoutOn",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Security"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 48,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlDropIndexedColumnInspection",
                "shortDescription": {
                  "text": "Index is dependent on column"
                },
                "fullDescription": {
                  "text": "Reports cases when you try to drop columns from indexed tables. This inspection is available in Microsoft SQL Server and Sybase ASE. Example (Microsoft SQL Server): 'CREATE TABLE test_index\n(\ncol  INT NOT NULL,\ncol2 INT NOT NULL,\ncol3 INT NOT NULL UNIQUE,\ncol4 VARCHAR(200)\n);\n\nCREATE UNIQUE INDEX aaaa ON test_index (col, col2);\n\nALTER TABLE test_index\nDROP COLUMN col;' You cannot delete the 'col' column because it is in the indexed table. To delete the column, you need to delete the 'aaaa' index first (for example, DROP INDEX aaaa). Inspection ID: SqlDropIndexedColumnInspection",
                  "markdown": "Reports cases when you try to drop columns from indexed tables. This inspection is available in Microsoft SQL Server and Sybase ASE.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE test_index\n    (\n    col  INT NOT NULL,\n    col2 INT NOT NULL,\n    col3 INT NOT NULL UNIQUE,\n    col4 VARCHAR(200)\n    );\n\n    CREATE UNIQUE INDEX aaaa ON test_index (col, col2);\n\n    ALTER TABLE test_index\n    DROP COLUMN col;\n\nYou cannot delete the `col` column because it is in the indexed table. To delete the column, you need to delete the\n`aaaa` index first (for example, DROP INDEX aaaa).\n\nInspection ID: SqlDropIndexedColumnInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlDropIndexedColumn",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 48,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlDialectInspection",
                "shortDescription": {
                  "text": "SQL dialect detection"
                },
                "fullDescription": {
                  "text": "Reports situations when a dialect is not assigned to an SQL file. For example, when you open a new SQL file without assigning a dialect to it, you see a notification where the best matching dialect is advised. Click the Use <dialect> link to use the advised dialect. Alternatively, click the Change dialect to link to select the other dialect. Inspection ID: SqlDialectInspection",
                  "markdown": "Reports situations when a dialect is not assigned to an SQL file.\n\nFor example, when you open a new SQL file without assigning a dialect\nto it, you see a notification where the best matching dialect is advised. Click the **Use \\<dialect\\>** link to use the advised\ndialect. Alternatively, click the **Change dialect to** link to select the other dialect.\n\nInspection ID: SqlDialectInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlDialectInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 48,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MongoJSExtDeprecationInspection",
                "shortDescription": {
                  "text": "Deprecated element"
                },
                "fullDescription": {
                  "text": "Reports usages of deprecated methods in MongoDB and JavaScript code. The quick-fix replaces deprecated methods with recommended alternatives. Example: 'db.my_collection.insert()' After the quick-fix is applied: 'db.my_collection.insertOne()' Inspection ID: MongoJSExtDeprecationInspection",
                  "markdown": "Reports usages of deprecated methods in MongoDB and JavaScript code.\n\nThe quick-fix replaces deprecated methods with recommended alternatives.\n\nExample:\n\n\n      db.my_collection.insert()\n\nAfter the quick-fix is applied:\n\n\n      db.my_collection.insertOne()\n\nInspection ID: MongoJSExtDeprecationInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MongoJSDeprecation",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "MongoJS",
                      "index": 131,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MongoJSDeprecationInspection",
                "shortDescription": {
                  "text": "Deprecated element"
                },
                "fullDescription": {
                  "text": "No description available",
                  "markdown": "No description available"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MongoJSDeprecation",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "MongoJS",
                      "index": 131,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlTypeInspection",
                "shortDescription": {
                  "text": "Types compatibility"
                },
                "fullDescription": {
                  "text": "Reports type-related errors. Inspection ID: SqlTypeInspection",
                  "markdown": "Reports type-related errors.\n\nInspection ID: SqlTypeInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlType",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 48,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlUnicodeStringLiteralInspection",
                "shortDescription": {
                  "text": "Unicode usage in SQL"
                },
                "fullDescription": {
                  "text": "Reports string literals that use national characters without the 'N' prefix. Without the N prefix, the string is converted to the default code page of the database. This default code page may not recognize certain characters. For more information, see nchar and nvarchar (Transact-SQL) at docs.microsoft.com. Example (Microsoft SQL Server): 'SELECT 'abcde' AS a;\nSELECT N'abcde' AS b;\nSELECT 'абвгд' AS c;\nSELECT N'абвгд' AS d;' The 'SELECT 'абвгд' AS c;' does not have the 'N' prefix, the ''абвгд'' part will be highlighted. Inspection ID: SqlUnicodeStringLiteralInspection",
                  "markdown": "Reports string literals that use national characters without the `N` prefix.\n\nWithout the N prefix, the string is converted to the default\ncode page of the database. This default code page may not recognize certain characters. For more information, see\n[nchar and nvarchar\n(Transact-SQL)\nat docs.microsoft.com](https://docs.microsoft.com/en-us/sql/t-sql/data-types/nchar-and-nvarchar-transact-sql).\n\nExample (Microsoft SQL Server):\n\n    SELECT 'abcde' AS a;\n    SELECT N'abcde' AS b;\n    SELECT 'абвгд' AS c;\n    SELECT N'абвгд' AS d;\n\nThe `SELECT 'абвгд' AS c;` does not have the `N` prefix, the `'абвгд'` part will be highlighted.\n\nInspection ID: SqlUnicodeStringLiteralInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlUnicodeStringLiteral",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 48,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlUnusedVariableInspection",
                "shortDescription": {
                  "text": "Unused variable"
                },
                "fullDescription": {
                  "text": "Reports unused arguments, variables, or parameters. Example (PostgreSQL): 'CREATE FUNCTION foo(PARAMUSED INT, PARAMUNUSED INT) RETURNS INT AS\n$$\nBEGIN\n    RETURN PARAMUSED;\nEND\n$$ LANGUAGE plpgsql;' The 'PARAMUNUSED' parameter is not used in the function and might be deleted. Inspection ID: SqlUnusedVariableInspection",
                  "markdown": "Reports unused arguments, variables, or parameters.\n\nExample (PostgreSQL):\n\n    CREATE FUNCTION foo(PARAMUSED INT, PARAMUNUSED INT) RETURNS INT AS\n    $$\n    BEGIN\n        RETURN PARAMUSED;\n    END\n    $$ LANGUAGE plpgsql;\n\nThe `PARAMUNUSED` parameter is not used in the function and might be deleted.\n\nInspection ID: SqlUnusedVariableInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlUnused",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 48,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PgSelectFromProcedureInspection",
                "shortDescription": {
                  "text": "Postgres: Select from procedure call"
                },
                "fullDescription": {
                  "text": "No description available",
                  "markdown": "No description available"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PgSelectFromProcedure",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "PostgreSQL",
                      "index": 147,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MsBuiltinInspection",
                "shortDescription": {
                  "text": "Builtin functions"
                },
                "fullDescription": {
                  "text": "No description available",
                  "markdown": "No description available"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MssqlBuiltin",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL server",
                      "index": 148,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlMultipleLimitClausesInspection",
                "shortDescription": {
                  "text": "Multiple row limiting/offset clauses in queries"
                },
                "fullDescription": {
                  "text": "Reports usages of multiple row limiting clauses in a single query. Example (Microsoft SQL Server): 'create table foo(a int);\nselect top 1 * from foo order by a offset 10 rows fetch next 20 rows only;' The SELECT TOP clause is used to specify that only 1 record must be returned. The FETCH clause specifies the number of rows to return after the OFFSET clause has been processed. But as we already have the SELECT TOP limiting clause, the FETCH clause might be redundant. Inspection ID: SqlMultipleLimitClausesInspection",
                  "markdown": "Reports usages of multiple row limiting clauses in a single query.\n\nExample (Microsoft SQL Server):\n\n    create table foo(a int);\n    select top 1 * from foo order by a offset 10 rows fetch next 20 rows only;\n\nThe SELECT TOP clause is used to specify that only 1 record must be\nreturned. The FETCH clause specifies the number of rows to return after the OFFSET\nclause has been processed. But as we already have the SELECT TOP limiting clause, the FETCH clause might be redundant.\n\nInspection ID: SqlMultipleLimitClausesInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlMultipleLimitClauses",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Performance"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 48,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlStorageInspection",
                "shortDescription": {
                  "text": "SQL source modification detection"
                },
                "fullDescription": {
                  "text": "Reports situations when source code of a database object has been changed. The inspection is triggered when you perform database or object introspection. The introspection is run when you open source code of an object, run statements, and perform code refactoring. Also, you can run introspection by right-clicking an object and selecting Refresh. The inspection covers the following situations: Object source code was changed in the database but code in the editor was not updated. Works in PostgreSQL, Microsoft SQL Server, Oracle, and Sybase ASE. You changed the object source code, introspected the database, but source code has been already changed by someone else. The database introspector was updated in the IDE and you need to download new object properties that were missing in the previous introspector version. Inspection ID: SqlStorageInspection",
                  "markdown": "Reports situations when source code of a database object has been changed.\n\nThe inspection is triggered when you perform database or object introspection. The introspection is run when you open source code of an\nobject, run statements, and perform code refactoring.\nAlso, you can run introspection by right-clicking an object and selecting **Refresh**.\n\nThe inspection covers the following situations:\n\n* Object source code was changed in the database but code in the editor was not updated. Works in PostgreSQL, Microsoft SQL Server, Oracle, and Sybase ASE.\n* You changed the object source code, introspected the database, but source code has been already changed by someone else.\n* The database introspector was updated in the IDE and you need to download new object properties that were missing in the previous introspector version.\n\nInspection ID: SqlStorageInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlStorageInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 48,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlSignatureInspection",
                "shortDescription": {
                  "text": "Function signature"
                },
                "fullDescription": {
                  "text": "Reports signature issues for built-in functions. The inspection will report a wrong number of arguments, invalid keywords, wrong data types, and other issues. Example (MySQL): 'CREATE TABLE foo (a INT, b INT, c INT)\n\nSELECT IFNULL() FROM foo; -- error\nSELECT IFNULL(a) FROM foo; -- error\nSELECT IFNULL(a, b) FROM foo; -- OK\nSELECT IFNULL(a, b, c) FROM foo; -- error' In MySQL, the 'IFNULL()' function accepts strictly two arguments. So, only the 'SELECT IFNULL(a, b) FROM foo;' query is correct. Inspection ID: SqlSignatureInspection",
                  "markdown": "Reports signature issues for built-in functions.\n\nThe inspection will report a wrong number of arguments, invalid keywords, wrong data types, and other issues.\n\nExample (MySQL):\n\n    CREATE TABLE foo (a INT, b INT, c INT)\n\n    SELECT IFNULL() FROM foo; -- error\n    SELECT IFNULL(a) FROM foo; -- error\n    SELECT IFNULL(a, b) FROM foo; -- OK\n    SELECT IFNULL(a, b, c) FROM foo; -- error\n\nIn MySQL, the `IFNULL()` function accepts strictly two arguments. So, only the `SELECT IFNULL(a, b) FROM foo;`\nquery is correct.\n\nInspection ID: SqlSignatureInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlSignature",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 48,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlRedundantOrderingDirectionInspection",
                "shortDescription": {
                  "text": "Redundant ordering direction"
                },
                "fullDescription": {
                  "text": "Reports redundant ordering directions like ASC and DESC in ORDER BY clauses. Example (MySQL): 'CREATE TABLE foo(a INT, b INT, c INT);\nSELECT * FROM foo ORDER BY a ASC, b DESC, c ASC;' The ORDER BY keyword sorts the records in the ascending order by default. So, the 'ASC' keyword for 'a' and 'c' columns is redundant. Inspection ID: SqlRedundantOrderingDirectionInspection",
                  "markdown": "Reports redundant ordering directions like ASC and DESC in ORDER BY clauses.\n\nExample (MySQL):\n\n    CREATE TABLE foo(a INT, b INT, c INT);\n    SELECT * FROM foo ORDER BY a ASC, b DESC, c ASC;\n\nThe ORDER BY keyword sorts the records in the ascending order by default. So, the `ASC` keyword for `a` and\n`c` columns is redundant.\n\nInspection ID: SqlRedundantOrderingDirectionInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlRedundantOrderingDirection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 48,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OraOverloadInspection",
                "shortDescription": {
                  "text": "Overloading errors"
                },
                "fullDescription": {
                  "text": "No description available",
                  "markdown": "No description available"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlOverload",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Oracle",
                      "index": 124,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlAmbiguousColumnInspection",
                "shortDescription": {
                  "text": "Ambiguous reference"
                },
                "fullDescription": {
                  "text": "Reports columns that have identical names but belong to different tables. Example (MySQL): 'CREATE TABLE foo(id INT PRIMARY KEY);\nCREATE TABLE bar(id INT PRIMARY KEY);\n\nSELECT foo.id, bar.id FROM foo, bar WHERE id > 0;' The 'id' column appears in 'foo' and 'bar' tables. You need to qualify the column name to make the query correct. 'SELECT foo.id, bar.id FROM foo, bar WHERE foo.id > 0;' Inspection ID: SqlAmbiguousColumnInspection",
                  "markdown": "Reports columns that have identical names but belong to different tables.\n\nExample (MySQL):\n\n    CREATE TABLE foo(id INT PRIMARY KEY);\n    CREATE TABLE bar(id INT PRIMARY KEY);\n\n    SELECT foo.id, bar.id FROM foo, bar WHERE id > 0;\n\nThe `id` column appears in `foo` and `bar` tables. You need to qualify the column name to\nmake the query correct.\n\n    SELECT foo.id, bar.id FROM foo, bar WHERE foo.id > 0;\n\nInspection ID: SqlAmbiguousColumnInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlAmbiguousColumn",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 48,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MysqlSpaceAfterFunctionNameInspection",
                "shortDescription": {
                  "text": "Whitespace between the function name and the open parenthesis"
                },
                "fullDescription": {
                  "text": "No description available",
                  "markdown": "No description available"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "MysqlSpaceAfterFunctionName",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "MySQL",
                      "index": 22,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlAutoIncrementDuplicateInspection",
                "shortDescription": {
                  "text": "Auto-increment duplicate"
                },
                "fullDescription": {
                  "text": "Reports tables that contain two columns with an automatic increment. In MySQL, Microsoft SQL Server, and Db2 dialects, a table can have only one field with a auto-increment option, and this field must be a key. Example (MySQL): 'CREATE TABLE my_table\n(\n    id INT AUTO_INCREMENT,\n    c2 INT AUTO_INCREMENT,\n);' The AUTO_INCREMENT constraint for 'c2' will be highlighted as 'c1' already has this constraint. To fix the warning, you can make 'id' a primary key and delete AUTO_INCREMENT for 'c2'. 'CREATE TABLE my_table\n(\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    c2 INT,\n);' Inspection ID: SqlAutoIncrementDuplicateInspection",
                  "markdown": "Reports tables that contain two columns with an automatic increment. In MySQL, Microsoft SQL Server, and Db2 dialects, a table can have only one field with a auto-increment option, and this field must be a key.\n\nExample (MySQL):\n\n    CREATE TABLE my_table\n    (\n        id INT AUTO_INCREMENT,\n        c2 INT AUTO_INCREMENT,\n    );\n\nThe AUTO_INCREMENT constraint for `c2` will be highlighted as `c1` already has this constraint. To fix the warning,\nyou can make `id` a primary key and delete AUTO_INCREMENT for `c2`.\n\n    CREATE TABLE my_table\n    (\n        id INT AUTO_INCREMENT PRIMARY KEY,\n        c2 INT,\n    );\n\nInspection ID: SqlAutoIncrementDuplicateInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlAutoIncrementDuplicate",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 48,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlStringLengthExceededInspection",
                "shortDescription": {
                  "text": "Implicit string truncation"
                },
                "fullDescription": {
                  "text": "Reports variables that exceed the defined length in characters. Example (Microsoft SQL Server): 'CREATE PROCEDURE test() AS\nBEGIN\nDECLARE myVarOk VARCHAR(5) = 'abcde';\nDECLARE myVarExceeded VARCHAR(5) = 'abcde12345';\n\nSET myVarOk = 'xyz';\nSET myVarExceeded = '123456789';\nEND;' The 'myVarExceeded' variable is defined as 'VARCHAR(5)' but both assigned values (''abcde12345'' and ''123456789'') exceed this limitation. You can truncate assigned values or increase the defined length. To increase the length, use the Increase type length quick-fix. After the quick-fix is applied: 'CREATE PROCEDURE test() AS\nBEGIN\nDECLARE myVarOk VARCHAR(5) = 'abcde';\nDECLARE myVarExceeded VARCHAR(10) = 'abcde12345';\n\nSET myVarOk = 'xyz';\nSET myVarExceeded = '123456789';\nEND;' Inspection ID: SqlStringLengthExceededInspection",
                  "markdown": "Reports variables that exceed the defined length in characters.\n\nExample (Microsoft SQL Server):\n\n    CREATE PROCEDURE test() AS\n    BEGIN\n    DECLARE myVarOk VARCHAR(5) = 'abcde';\n    DECLARE myVarExceeded VARCHAR(5) = 'abcde12345';\n\n    SET myVarOk = 'xyz';\n    SET myVarExceeded = '123456789';\n    END;\n\nThe `myVarExceeded` variable is defined as `VARCHAR(5)` but both assigned values (`'abcde12345'` and\n`'123456789'`) exceed this limitation. You can truncate assigned values or increase the defined length.\nTo increase the length, use the **Increase type length** quick-fix.\n\nAfter the quick-fix is applied:\n\n    CREATE PROCEDURE test() AS\n    BEGIN\n    DECLARE myVarOk VARCHAR(5) = 'abcde';\n    DECLARE myVarExceeded VARCHAR(10) = 'abcde12345';\n\n    SET myVarOk = 'xyz';\n    SET myVarExceeded = '123456789';\n    END;\n\nInspection ID: SqlStringLengthExceededInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlStringLengthExceeded",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 48,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlInsertValuesInspection",
                "shortDescription": {
                  "text": "VALUES clause cardinality"
                },
                "fullDescription": {
                  "text": "Reports situations when a number of parameters in VALUES does not match a number of columns in a target table. Example (MySQL): 'CREATE TABLE foo(a INT, b INT, c INT);\n\nINSERT INTO foo VALUES (1,2,3,4)' The 'foo' table has three columns but in the INSERT INTO statement we pass four. Inspection ID: SqlInsertValuesInspection",
                  "markdown": "Reports situations when a number of parameters in VALUES does not match a number of columns in a target table.\n\nExample (MySQL):\n\n    CREATE TABLE foo(a INT, b INT, c INT);\n\n    INSERT INTO foo VALUES (1,2,3,4)\n\nThe `foo` table has three columns but in the INSERT INTO statement we pass four.\n\nInspection ID: SqlInsertValuesInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlInsertValues",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 48,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlRedundantElseNullInspection",
                "shortDescription": {
                  "text": "Redundant ELSE NULL clause"
                },
                "fullDescription": {
                  "text": "Reports redundant ELSE NULL clauses. Example (MySQL): 'SELECT CASE WHEN 2 > 1 THEN 'OK' ELSE NULL END AS alias FROM foo;' The 'ELSE NULL' part will never be executed and may be omitted. Inspection ID: SqlRedundantElseNullInspection",
                  "markdown": "Reports redundant ELSE NULL clauses.\n\nExample (MySQL):\n\n    SELECT CASE WHEN 2 > 1 THEN 'OK' ELSE NULL END AS alias FROM foo;\n\nThe `ELSE NULL` part will never be executed and may be omitted.\n\nInspection ID: SqlRedundantElseNullInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlRedundantElseNull",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 48,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MysqlParsingInspection",
                "shortDescription": {
                  "text": "Unsupported syntax in pre-8.0 versions"
                },
                "fullDescription": {
                  "text": "No description available",
                  "markdown": "No description available"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MysqlParsing",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "MySQL",
                      "index": 22,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlCallNotationInspection",
                "shortDescription": {
                  "text": "Using of named and positional arguments"
                },
                "fullDescription": {
                  "text": "Reports calls in which positional arguments go after the named ones. Works in PostgreSQL, Oracle, and Db2. Example (In PostgreSQL): 'CREATE FUNCTION foo(a int, b int, c int) RETURNS int\n    LANGUAGE plpgsql AS\n$$\nBEGIN\n    RETURN a + b + c;\nEND\n$$;\nSELECT foo(a => 1, b => 2, c => 3);\n  -- `3` goes after the named argument\nSELECT foo(1, b => 2, 3);\n  -- `1` and `3` go after the named argument\nSELECT foo(b => 2, 1, 3);' Inspection ID: SqlCallNotationInspection",
                  "markdown": "Reports calls in which positional arguments go after the named ones. Works in PostgreSQL, Oracle, and Db2.\n\nExample (In PostgreSQL):\n\n    CREATE FUNCTION foo(a int, b int, c int) RETURNS int\n        LANGUAGE plpgsql AS\n    $$\n    BEGIN\n        RETURN a + b + c;\n    END\n    $$;\n    SELECT foo(a => 1, b => 2, c => 3);\n      -- `3` goes after the named argument\n    SELECT foo(1, b => 2, 3);\n      -- `1` and `3` go after the named argument\n    SELECT foo(b => 2, 1, 3);\n\nInspection ID: SqlCallNotationInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "SqlCallNotation",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 48,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlShadowingAliasInspection",
                "shortDescription": {
                  "text": "Column is shadowed by alias"
                },
                "fullDescription": {
                  "text": "Reports SELECT aliases with names that match column names in the FROM clause. Example (MySQL): 'CREATE TABLE foo (a INT, b INT, c INT);\nSELECT a b, c FROM foo;' The 'a' column uses the 'b' alias but the 'b' name is also used by the column from the 'foo' table. Inspection ID: SqlShadowingAliasInspection",
                  "markdown": "Reports SELECT aliases with names that match column names in the FROM clause.\n\nExample (MySQL):\n\n    CREATE TABLE foo (a INT, b INT, c INT);\n    SELECT a b, c FROM foo;\n\nThe `a` column uses the `b` alias but the `b` name is also used by the column from the `foo`\ntable.\n\nInspection ID: SqlShadowingAliasInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlShadowingAlias",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 48,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlUnreachableCodeInspection",
                "shortDescription": {
                  "text": "Unreachable code"
                },
                "fullDescription": {
                  "text": "Reports unreachable statements inside SQL routines. Example (Microsoft SQL Server): 'CREATE FUNCTION foo() RETURNS INT AS\nBEGIN\n    THROW;\n    RETURN 1;\nEND;' In Microsoft SQL Server, the 'THROW' statement raises an exception and transfers execution to the CATCH block of the TRY...CATCH construct. Therefore, the 'RETURN 1;' part will never be executed. Inspection ID: SqlUnreachableCodeInspection",
                  "markdown": "Reports unreachable statements inside SQL routines.\n\nExample (Microsoft SQL Server):\n\n    CREATE FUNCTION foo() RETURNS INT AS\n    BEGIN\n        THROW;\n        RETURN 1;\n    END;\n\nIn Microsoft SQL Server, the `THROW` statement raises an exception and transfers execution to the CATCH block of the TRY...CATCH\nconstruct. Therefore, the `RETURN 1;` part will never be executed.\n\nInspection ID: SqlUnreachableCodeInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlUnreachable",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 48,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlSingleSessionModeInspection",
                "shortDescription": {
                  "text": "Create a temporary table without a single session mode"
                },
                "fullDescription": {
                  "text": "Reports temporary tables creation not in the single-session mode. Example (PostgreSQL): 'CREATE TEMPORARY TABLE foo(a INT, b INT);' Inspection ID: SqlSingleSessionModeInspection",
                  "markdown": "Reports temporary tables creation not in the single-session mode.\n\nExample (PostgreSQL):\n\n    CREATE TEMPORARY TABLE foo(a INT, b INT);\n\nInspection ID: SqlSingleSessionModeInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlSingleSessionMode",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 48,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlResolveInspection",
                "shortDescription": {
                  "text": "Unresolved reference"
                },
                "fullDescription": {
                  "text": "Reports unresolved SQL references. Example (MySQL): 'CREATE TABLE users(id INT, name VARCHAR(40));\nCREATE TABLE admins(id INT, col1 INT);\n\nSELECT users.id, admins.id FROM admins WHERE admins.id > 1;' The 'users.id' column is unresolved because the 'users' table is missing in the FROM clause. Inspection ID: SqlResolveInspection",
                  "markdown": "Reports unresolved SQL references.\n\nExample (MySQL):\n\n    CREATE TABLE users(id INT, name VARCHAR(40));\n    CREATE TABLE admins(id INT, col1 INT);\n\n    SELECT users.id, admins.id FROM admins WHERE admins.id > 1;\n\nThe `users.id` column is unresolved because the `users` table is missing in the FROM clause.\n\nInspection ID: SqlResolveInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "SqlResolve",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 48,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlCurrentSchemaInspection",
                "shortDescription": {
                  "text": "Current console schema introspected"
                },
                "fullDescription": {
                  "text": "Reports schemas and databases in the current session that are not introspected. For example, this warning might occur when you try to create a table in the schema that is not introspected. Introspection is a method of inspecting a data source. When you perform introspection, structural information in the data source is inspected to detect tables, columns, functions, and other elements with their attributes. Inspection ID: SqlCurrentSchemaInspection",
                  "markdown": "Reports schemas and databases in the current session that are not introspected.\n\nFor example, this warning might occur when you try to create a table in the schema that is not introspected.\n\nIntrospection is a method of inspecting a data source. When you perform introspection, structural information in the data source is\ninspected to detect tables, columns, functions, and other elements with their attributes.\n\nInspection ID: SqlCurrentSchemaInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlCurrentSchemaInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 48,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlRedundantLimitInspection",
                "shortDescription": {
                  "text": "Redundant row limiting in queries"
                },
                "fullDescription": {
                  "text": "Reports redundant row limiting clauses like FETCH and LIMIT in queries. Example (PostgreSQL): 'CREATE TABLE foo(a INT);\n\nSELECT * FROM foo WHERE EXISTS(SELECT * FROM foo LIMIT 2);\nSELECT * FROM foo WHERE EXISTS(SELECT * FROM foo FETCH FIRST 2 ROWS ONLY);' To fix the warning, you can add OFFSET to limiting clauses. If OFFSET is missing, then LIMIT is redundant because the usage of LIMIT does not influence the operation result of EXISTS. In case with OFFSET, we skip first 'N' rows and this will influence the output. 'SELECT * FROM foo WHERE EXISTS(SELECT * FROM foo OFFSET 1 ROW LIMIT 2);\nSELECT * FROM foo WHERE EXISTS(SELECT * FROM foo OFFSET 1 ROW FETCH FIRST 2 ROWS ONLY);' Inspection ID: SqlRedundantLimitInspection",
                  "markdown": "Reports redundant row limiting clauses like FETCH and LIMIT in queries.\n\nExample (PostgreSQL):\n\n    CREATE TABLE foo(a INT);\n\n    SELECT * FROM foo WHERE EXISTS(SELECT * FROM foo LIMIT 2);\n    SELECT * FROM foo WHERE EXISTS(SELECT * FROM foo FETCH FIRST 2 ROWS ONLY);\n\nTo fix the warning, you can add OFFSET to limiting clauses. If OFFSET is missing, then LIMIT is redundant because\nthe usage of LIMIT does not influence the operation result of EXISTS. In case with OFFSET, we skip first `N` rows and this will\ninfluence the output.\n\n    SELECT * FROM foo WHERE EXISTS(SELECT * FROM foo OFFSET 1 ROW LIMIT 2);\n    SELECT * FROM foo WHERE EXISTS(SELECT * FROM foo OFFSET 1 ROW FETCH FIRST 2 ROWS ONLY);\n\nInspection ID: SqlRedundantLimitInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlRedundantLimit",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Performance"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 48,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlInsertNullIntoNotNullInspection",
                "shortDescription": {
                  "text": "Insert NULL into NOT NULL column"
                },
                "fullDescription": {
                  "text": "Reports cases when you insert NULL values into columns that accept only NOT NULL values. Example (Microsoft SQL Server): 'CREATE TABLE br2 (\nid INT NOT NULL,\ncol1 NVARCHAR (20) NOT NULL,\ncol2 NVARCHAR (20) NOT NULL,\n);\n--\nINSERT INTO br2 (id, col1, col2)\nVALUES (1, NULL, NULL);' You cannot insert NULL values in 'col1' and 'col2' because they are defined as NOT NULL. If you run the script as is, you will receive an error. To fix this code, replace NULL in the VALUES part with some values (for example, '42' and ''bird''). INSERT INTO br2 (id, col1, col2)\nVALUES (1, 42, 'bird'); Inspection ID: SqlInsertNullIntoNotNullInspection",
                  "markdown": "Reports cases when you insert NULL values into columns that accept only NOT NULL values.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE br2 (\n    id INT NOT NULL,\n    col1 NVARCHAR (20) NOT NULL,\n    col2 NVARCHAR (20) NOT NULL,\n    );\n    --\n    INSERT INTO br2 (id, col1, col2)\n    VALUES (1, NULL, NULL);\n\nYou cannot insert NULL values in `col1` and `col2` because they are defined as NOT NULL. If you run the script as\nis,\nyou will receive an error. To fix this code, replace NULL in the VALUES part with some values (for example, `42` and\n`'bird'`).\n\n```\nINSERT INTO br2 (id, col1, col2)\nVALUES (1, 42, 'bird');\n```\n\nInspection ID: SqlInsertNullIntoNotNullInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlInsertNullIntoNotNull",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 48,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlDerivedTableAliasInspection",
                "shortDescription": {
                  "text": "Each derived table should have alias"
                },
                "fullDescription": {
                  "text": "Reports derived tables without aliases. Example (MySQL): 'CREATE TABLE table1 (id INT, name VARCHAR(20), cats FLOAT);\nCREATE TABLE table2 (id INT, age INTEGER);\n\nSELECT id AS ID, name, cats, age\nFROM (SELECT table1.id, name, cats, age\nFROM table1\nJOIN table2 ON table1.id = table2.id);' According to Derived Tables at dev.mysql.com, an alias is mandatory. You can add the alias by using the Introduce alias quick-fix. After the quick-fix is applied: 'SELECT id AS ID, name, cats, age\nFROM (SELECT table1.id, name, cats, age\nFROM table1\nJOIN table2 ON table1.id = table2.id);' Inspection ID: SqlDerivedTableAliasInspection",
                  "markdown": "Reports derived tables without aliases.\n\nExample (MySQL):\n\n    CREATE TABLE table1 (id INT, name VARCHAR(20), cats FLOAT);\n    CREATE TABLE table2 (id INT, age INTEGER);\n\n    SELECT id AS ID, name, cats, age\n    FROM (SELECT table1.id, name, cats, age\n    FROM table1\n    JOIN table2 ON table1.id = table2.id);\n\nAccording to [Derived Tables at dev.mysql.com](https://dev.mysql.com/doc/refman/8.0/en/derived-tables.html), an alias is\nmandatory. You can add the alias by using the **Introduce alias** quick-fix.\n\nAfter the quick-fix is applied:\n\n    SELECT id AS ID, name, cats, age\n    FROM (SELECT table1.id, name, cats, age\n    FROM table1\n    JOIN table2 ON table1.id = table2.id);\n\nInspection ID: SqlDerivedTableAliasInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlDerivedTableAlias",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 48,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlTriggerTransitionInspection",
                "shortDescription": {
                  "text": "Suspicious code in triggers"
                },
                "fullDescription": {
                  "text": "Reports incorrect usages of transition table variables in triggers. Example (HSQLDB): 'CREATE TABLE foo(a INT);\n\nCREATE TRIGGER trg\n AFTER DELETE ON foo\nBEGIN\n   SELECT * FROM NEW;\nEND;\n\nCREATE TRIGGER trig AFTER INSERT ON foo\n   REFERENCING OLD ROW AS newrow\n   FOR EACH ROW WHEN (a > 1)\n   INSERT INTO foo VALUES (1)' In HSQLDB, DELETE triggers may be used only with the OLD state while INSERT triggers may have only the NEW state. So, in the previous example, NEW in 'SELECT * FROM NEW;' will be highlighted as well as OLD in 'REFERENCING OLD ROW AS newrow'. Inspection ID: SqlTriggerTransitionInspection",
                  "markdown": "Reports incorrect usages of transition table variables in triggers.\n\nExample (HSQLDB):\n\n    CREATE TABLE foo(a INT);\n\n    CREATE TRIGGER trg\n     AFTER DELETE ON foo\n    BEGIN\n       SELECT * FROM NEW;\n    END;\n\n    CREATE TRIGGER trig AFTER INSERT ON foo\n       REFERENCING OLD ROW AS newrow\n       FOR EACH ROW WHEN (a > 1)\n       INSERT INTO foo VALUES (1)\n\nIn HSQLDB, DELETE triggers may be used only with the OLD state while INSERT triggers may have only the NEW state. So, in the previous\nexample, NEW in `SELECT * FROM NEW;` will be highlighted as well as OLD in `REFERENCING OLD ROW AS newrow`.\n\nInspection ID: SqlTriggerTransitionInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlTriggerTransition",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 48,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlNamedArgumentsInspection",
                "shortDescription": {
                  "text": "Named arguments should be used"
                },
                "fullDescription": {
                  "text": "Reports arguments that are used without names in routine calls. By default, this inspection is disabled. For more information about the difference between named and unnamed parameters, see Binding Parameters by Name (Named Parameters) at docs.microsoft.com . Example (Microsoft SQL Server): 'CREATE FUNCTION foo(n INT, m INT) RETURNS INT AS\nBEGIN\n    RETURN n + m;\nEND;\n\nCREATE PROCEDURE test AS\nBEGIN\n    foo n = 1, m = 2;\n\n--- The following call misses parameter names and will be highlighted\n    foo 1, 2;\nEND;' Parameters '1, 2' in the 'foo 1, 2;' call are highlighted because they miss names. Inspection ID: SqlNamedArgumentsInspection",
                  "markdown": "Reports arguments that are used without names in routine calls. By default, this inspection is disabled.\n\nFor more information about the difference between named and unnamed parameters, see [Binding Parameters by Name (Named Parameters) at docs.microsoft.com](https://docs.microsoft.com/en-us/sql/odbc/reference/develop-app/binding-parameters-by-name-named-parameters).\n\nExample (Microsoft SQL Server):\n\n    CREATE FUNCTION foo(n INT, m INT) RETURNS INT AS\n    BEGIN\n        RETURN n + m;\n    END;\n\n    CREATE PROCEDURE test AS\n    BEGIN\n        foo n = 1, m = 2;\n\n    --- The following call misses parameter names and will be highlighted\n        foo 1, 2;\n    END;\n\nParameters `1, 2` in the `foo 1, 2;` call are highlighted because they miss names.\n\nInspection ID: SqlNamedArgumentsInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlNamedArguments",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 48,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlCaseVsCoalesceInspection",
                "shortDescription": {
                  "text": "Using CASE instead of COALESCE function and vice versa"
                },
                "fullDescription": {
                  "text": "Reports situations when CASE and COALESCE calls are interchangeable. This inspection has the following intention actions: Replace with 'COALESCE' call and the opposite one Replace with CASE expression. Example (MySQL): 'SELECT\n  -- this CASE may be replaced by COALESCE\n\tCASE\n\t\tWHEN C1 IS NOT NULL THEN C1\n\t\tELSE 0\n\t\tEND\nFROM dual;' In the example, the CASE statement can be replaced with 'SELECT COALESCE(C1, 0)' that produces the same output. If you prefer using CASE expressions, select the Prefer CASE expressions over COALESCE function option on the inspection page. Inspection ID: SqlCaseVsCoalesceInspection",
                  "markdown": "Reports situations when CASE and COALESCE calls are interchangeable. This inspection has the following intention actions: **Replace\nwith 'COALESCE' call** and the opposite one **Replace with CASE expression** .\n\nExample (MySQL):\n\n    SELECT\n      -- this CASE may be replaced by COALESCE\n    \tCASE\n    \t\tWHEN C1 IS NOT NULL THEN C1\n    \t\tELSE 0\n    \t\tEND\n    FROM dual;\n\nIn the example, the CASE statement can be replaced with `SELECT COALESCE(C1, 0)` that produces the same output.\n\nIf you prefer using CASE expressions, select the **Prefer CASE expressions over COALESCE function** option on\nthe inspection page.\n\nInspection ID: SqlCaseVsCoalesceInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlCaseVsCoalesce",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 48,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlTransactionStatementInTriggerInspection",
                "shortDescription": {
                  "text": "Use of transaction management statements in triggers"
                },
                "fullDescription": {
                  "text": "Reports usages of transaction management statements like COMMIT or ROLLBACK in trigger bodies. With COMMIT or ROLLBACK statements in a trigger body, the trigger will not compile. The fail happens because triggers start during transactions. When the trigger starts the current transaction is still not complete. As COMMIT terminates a transaction, both statements (COMMIT and ROLLBACK) would lead to an exception. Changes that are executed in a trigger should be committed (or rolled back) by the owning transaction that started the trigger. Example (Oracle): 'CREATE TABLE employee_audit\n(\n    id          INT  NOT NULL,\n    update_date DATE NOT NULL,\n    old_name    VARCHAR2(100),\n    new_name    VARCHAR2(100)\n);\n\nCREATE TABLE employees\n(\n    id   INT           NOT NULL,\n    name VARCHAR2(100) NOT NULL\n);\n\nCREATE OR REPLACE TRIGGER trig_commit\n    AFTER UPDATE OF name\n    ON employees\n    FOR EACH ROW\nBEGIN\n    INSERT INTO employee_audit VALUES (:old.id, SYSDATE, :old.name, :new.name);\n    COMMIT;\nEND;\n\nCREATE OR REPLACE TRIGGER trig_rollback\n    AFTER UPDATE OF name\n    ON employees\n    FOR EACH ROW\nBEGIN\n    INSERT INTO employee_audit VALUES (:old.id, SYSDATE, :old.name, :new.name);\n    ROLLBACK;\nEND;' Inspection ID: SqlTransactionStatementInTriggerInspection",
                  "markdown": "Reports usages of transaction management statements like COMMIT or ROLLBACK in trigger bodies.\n\nWith COMMIT or ROLLBACK statements in a trigger body, the trigger will not compile.\nThe fail happens because triggers start during transactions. When the trigger starts the current transaction is still not complete. As\nCOMMIT\nterminates a transaction, both statements (COMMIT and ROLLBACK) would lead to an exception.\nChanges that are executed in a trigger should be committed (or rolled back) by the owning transaction that started the trigger.\n\nExample (Oracle):\n\n    CREATE TABLE employee_audit\n    (\n        id          INT  NOT NULL,\n        update_date DATE NOT NULL,\n        old_name    VARCHAR2(100),\n        new_name    VARCHAR2(100)\n    );\n\n    CREATE TABLE employees\n    (\n        id   INT           NOT NULL,\n        name VARCHAR2(100) NOT NULL\n    );\n\n    CREATE OR REPLACE TRIGGER trig_commit\n        AFTER UPDATE OF name\n        ON employees\n        FOR EACH ROW\n    BEGIN\n        INSERT INTO employee_audit VALUES (:old.id, SYSDATE, :old.name, :new.name);\n        COMMIT;\n    END;\n\n    CREATE OR REPLACE TRIGGER trig_rollback\n        AFTER UPDATE OF name\n        ON employees\n        FOR EACH ROW\n    BEGIN\n        INSERT INTO employee_audit VALUES (:old.id, SYSDATE, :old.name, :new.name);\n        ROLLBACK;\n    END;\n\nInspection ID: SqlTransactionStatementInTriggerInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlTransactionStatementInTrigger",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 48,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlRedundantCodeInCoalesceInspection",
                "shortDescription": {
                  "text": "Redundant code in COALESCE call"
                },
                "fullDescription": {
                  "text": "Reports all the arguments except for the first expression that does not evaluate to NULL in COALESCE functions. Example (MySQL): 'SELECT COALESCE(NULL, NULL, NULL, 42, NULL, 'string') as a;' The first NOT NULL argument is '42', all other arguments will be grayed out. Inspection ID: SqlRedundantCodeInCoalesceInspection",
                  "markdown": "Reports all the arguments except for the first expression that does not evaluate to NULL in COALESCE functions.\n\nExample (MySQL):\n\n    SELECT COALESCE(NULL, NULL, NULL, 42, NULL, 'string') as a;\n\nThe first NOT NULL argument is `42`, all other arguments will be grayed out.\n\nInspection ID: SqlRedundantCodeInCoalesceInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlRedundantCodeInCoalesce",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 48,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlAggregatesInspection",
                "shortDescription": {
                  "text": "Aggregate-related problems"
                },
                "fullDescription": {
                  "text": "Reports invalid usages of SQL aggregate functions. The following situations are considered: Columns that are used in HAVING and ORDER BY clauses but are missed in GROUP BY clauses. 'CREATE TABLE foo(id INT PRIMARY KEY, a INT, b INT);\nSELECT a, MAX(b) FROM foo GROUP BY a HAVING b > 0;\nSELECT * FROM foo GROUP BY a ORDER BY b;' This rule does not apply when grouping is made by the primary key. 'SELECT * FROM foo GROUP BY id ORDER BY b;' Aggregate functions in a wrong context. Usually, you can use aggregate functions in the following contexts: a list of expressions in SELECT; in HAVING and ORDER BY sections; and other dialect-specific cases. The following queries will display an error. 'SELECT a FROM foo WHERE MAX(b) > 0;\nSELECT a FROM foo GROUP BY MAX(a);' Nested calls of aggregate functions. 'SELECT MAX(SUM(a)) FROM foo GROUP BY a;' This rule does not apply to analytic functions. The following query is valid and correct. 'SELECT MAX(SUM(a) OVER ()) FROM foo;' Usages of HAVING without aggregate functions. In this case, consider rewriting your code using the WHERE section. 'SELECT a, MAX(b) FROM foo GROUP BY a HAVING a > 0;' Inspection ID: SqlAggregatesInspection",
                  "markdown": "Reports invalid usages of SQL aggregate functions.\n\nThe following situations are considered:\n\n* Columns that are used in HAVING and ORDER BY clauses but are missed in GROUP BY clauses.\n\n      CREATE TABLE foo(id INT PRIMARY KEY, a INT, b INT);\n      SELECT a, MAX(b) FROM foo GROUP BY a HAVING b > 0;\n      SELECT * FROM foo GROUP BY a ORDER BY b;\n\n  This rule does not apply when grouping is made by the primary key.\n\n      SELECT * FROM foo GROUP BY id ORDER BY b;\n\n* Aggregate functions in a wrong context. Usually, you can use aggregate functions in the following contexts: a list of expressions in\n  SELECT; in HAVING and ORDER BY sections; and other dialect-specific cases. The following queries will display an error.\n\n      SELECT a FROM foo WHERE MAX(b) > 0;\n      SELECT a FROM foo GROUP BY MAX(a);\n\n* Nested calls of aggregate functions.\n\n      SELECT MAX(SUM(a)) FROM foo GROUP BY a;\n\n  This rule does not apply to analytic functions. The following query is valid and correct.\n\n      SELECT MAX(SUM(a) OVER ()) FROM foo;\n\n* Usages of HAVING without aggregate functions. In this case, consider rewriting your code using the WHERE section.\n\n      SELECT a, MAX(b) FROM foo GROUP BY a HAVING a > 0;\n\nInspection ID: SqlAggregatesInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlAggregates",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Security"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 48,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlMissingColumnAliasesInspection",
                "shortDescription": {
                  "text": "Missing column aliases"
                },
                "fullDescription": {
                  "text": "Reports queries without explicit aliases in output expressions (for example, in the SELECT statement). Example (PostgreSQL): 'CREATE TABLE foo(a INT, b INT);\n\nSELECT 1, a + 1 AS A2, MAX(b) AS M\nFROM foo;' Inspection ID: SqlMissingColumnAliasesInspection",
                  "markdown": "Reports queries without explicit aliases in output expressions (for example, in the SELECT statement).\n\nExample (PostgreSQL):\n\n    CREATE TABLE foo(a INT, b INT);\n\n    SELECT 1, a + 1 AS A2, MAX(b) AS M\n    FROM foo;\n\nInspection ID: SqlMissingColumnAliasesInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlMissingColumnAliases",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 48,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlAddNotNullColumnInspection",
                "shortDescription": {
                  "text": "Adding not null column without default value"
                },
                "fullDescription": {
                  "text": "Reports attempts to create NOT NULL columns without DEFAULT values. Example (Microsoft SQL Server): 'CREATE TABLE foo (a INT, b  INT)\n\nALTER TABLE foo ADD c INT NOT NULL;' By default, a column holds NULL values. In the example, we use the NOT NULL constraint that enforces a column not to accept NULL values. If we prohibit to use NULL values, we must set the DEFAULT value that SQL can use when we create a new record. 'ALTER TABLE foo ADD c INT NOT NULL DEFAULT 42;' You can quickly add the DEFAULT value by using the Add DEFAULT value quick-fix. Inspection ID: SqlAddNotNullColumnInspection",
                  "markdown": "Reports attempts to create NOT NULL columns without DEFAULT values.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE foo (a INT, b  INT)\n\n    ALTER TABLE foo ADD c INT NOT NULL;\n\nBy default, a column holds NULL values. In the example, we use the NOT NULL constraint that enforces a column not to accept NULL values.\nIf we prohibit to use NULL values, we must set the DEFAULT value that SQL can use when we create a new record.\n\n    ALTER TABLE foo ADD c INT NOT NULL DEFAULT 42;\n\nYou can quickly add the DEFAULT value by using the **Add DEFAULT value** quick-fix.\n\nInspection ID: SqlAddNotNullColumnInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlAddNotNullColumn",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 48,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OraMissingBodyInspection",
                "shortDescription": {
                  "text": "Missing body for package/object type specification"
                },
                "fullDescription": {
                  "text": "No description available",
                  "markdown": "No description available"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlMissingBody",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Oracle",
                      "index": 124,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MongoJSExtResolveInspection",
                "shortDescription": {
                  "text": "Resolution problems"
                },
                "fullDescription": {
                  "text": "Reports unresolved references in MongoDB and JavaScript code. Inspection ID: MongoJSExtResolveInspection",
                  "markdown": "Reports unresolved references in MongoDB and JavaScript code.\n\nInspection ID: MongoJSExtResolveInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MongoJSResolve",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "MongoJS",
                      "index": 131,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlJoinCountInspection",
                "shortDescription": {
                  "text": "Excessive JOIN count"
                },
                "fullDescription": {
                  "text": "Reports queries with excessive number of JOINS. Using too many joins is generally not recommended for performance reasons. 'SELECT * FROM a inner join b using(id) inner join c using (id) inner join d using (id) inner join e using (id)' Inspection ID: SqlJoinCountInspection",
                  "markdown": "Reports queries with excessive number of JOINS.\n\nUsing too many joins is generally\nnot recommended for performance reasons.\n\n    SELECT * FROM a inner join b using(id) inner join c using (id) inner join d using (id) inner join e using (id)\n\nInspection ID: SqlJoinCountInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlJoinCount",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Performance"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 48,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlIllegalCursorStateInspection",
                "shortDescription": {
                  "text": "Illegal cursor state"
                },
                "fullDescription": {
                  "text": "Reports illegal cursor states inside SQL routines. A routine has CLOSE or FETCH statements but a cursor might be closed. A routine has the OPEN statement but a cursor might be opened. Example (Microsoft SQL Server): 'CREATE TABLE t(col INT);\n\nCREATE PROCEDURE foo() AS\nBEGIN\nDECLARE my_cursor CURSOR FOR SELECT * FROM t;\nDECLARE a INT;\nFETCH my_cursor INTO a;\nCLOSE my_cursor;\nEND;' According to CLOSE (Transact-SQL) at docs.microsoft.com, CLOSE must be issued on an open cursor, and CLOSE is not allowed on cursors that have only been declared or are already closed. So, we need to open the cursor to fix the warning. 'CREATE PROCEDURE foo() AS\nBEGIN\nDECLARE my_cursor CURSOR FOR SELECT * FROM t;\nDECLARE a INT;\nOPEN my_cursor;\nFETCH my_cursor INTO a;\nCLOSE my_cursor;\nEND;' Inspection ID: SqlIllegalCursorStateInspection",
                  "markdown": "Reports illegal cursor states inside SQL routines.\n\n* A routine has CLOSE or FETCH statements but a cursor might be closed.\n* A routine has the OPEN statement but a cursor might be opened.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE t(col INT);\n\n    CREATE PROCEDURE foo() AS\n    BEGIN\n    DECLARE my_cursor CURSOR FOR SELECT * FROM t;\n    DECLARE a INT;\n    FETCH my_cursor INTO a;\n    CLOSE my_cursor;\n    END;\n\nAccording to [CLOSE (Transact-SQL) at\ndocs.microsoft.com](https://docs.microsoft.com/en-us/sql/t-sql/language-elements/close-transact-sql), CLOSE must be issued on an open cursor, and CLOSE is not allowed on cursors that have only been declared or are\nalready closed. So, we need to open the cursor to fix the warning.\n\n    CREATE PROCEDURE foo() AS\n    BEGIN\n    DECLARE my_cursor CURSOR FOR SELECT * FROM t;\n    DECLARE a INT;\n    OPEN my_cursor;\n    FETCH my_cursor INTO a;\n    CLOSE my_cursor;\n    END;\n\nInspection ID: SqlIllegalCursorStateInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlIllegalCursorState",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 48,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlCheckUsingColumnsInspection",
                "shortDescription": {
                  "text": "Check using clause columns"
                },
                "fullDescription": {
                  "text": "Reports columns in the USING clause that does not exist in both tables. Example (MySQL): 'CREATE TABLE t1 (i INT, j INT);\nCREATE TABLE t2 (k INT, l INT);\nSELECT * FROM t1 JOIN t2 USING (j);' In USING clauses, a column name must be present in both tables, and the SELECT query will automatically join those tables by using the given column name. As we do not have the 'j' column in 't2', we can rewrite the query using ON. The ON clause can join tables where the column names do not match in both tables. 'SELECT * FROM t1 JOIN t2 ON t1.j = t2.l;' Inspection ID: SqlCheckUsingColumnsInspection",
                  "markdown": "Reports columns in the USING clause that does not exist in both tables.\n\nExample (MySQL):\n\n    CREATE TABLE t1 (i INT, j INT);\n    CREATE TABLE t2 (k INT, l INT);\n    SELECT * FROM t1 JOIN t2 USING (j);\n\nIn USING clauses, a column name must be present in both tables, and the SELECT query will automatically join\nthose tables by using the given column name. As we do not have the `j` column in `t2`, we can\nrewrite the query using ON. The ON clause can join tables where the column names do not match in both tables.\n\n    SELECT * FROM t1 JOIN t2 ON t1.j = t2.l;\n\nInspection ID: SqlCheckUsingColumnsInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlCheckUsingColumns",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 48,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlDuplicateColumnInspection",
                "shortDescription": {
                  "text": "Duplicating column name in SELECT"
                },
                "fullDescription": {
                  "text": "Reports duplicated names of column aliases in SELECT lists. Example (Sybase ASE): 'CREATE TABLE t1 (a TEXT, b INT, c INT);\n\nSELECT a AS x, b AS x FROM t1;' The 'x' alias name is used for 'a' and 'b' columns. These assignments are highlighted as errors because you cannot use identical alias names for columns in Sybase ASE. Inspection ID: SqlDuplicateColumnInspection",
                  "markdown": "Reports duplicated names of column aliases in SELECT lists.\n\nExample (Sybase ASE):\n\n    CREATE TABLE t1 (a TEXT, b INT, c INT);\n\n    SELECT a AS x, b AS x FROM t1;\n\nThe `x` alias name is used for `a` and `b` columns. These assignments are highlighted as errors because\nyou cannot use identical alias names for columns in Sybase ASE.\n\nInspection ID: SqlDuplicateColumnInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlDuplicateColumn",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 48,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlInsertIntoGeneratedColumnInspection",
                "shortDescription": {
                  "text": "Insertion into generated columns"
                },
                "fullDescription": {
                  "text": "Reports INSERT statements that assign values to generated columns. Generated columns can be read, but their values can not be directly written. Example (PostgreSQL): 'CREATE TABLE foo\n(\n   col1 INT,\n   col2 INT GENERATED ALWAYS AS (col1 + 1) STORED\n);\nINSERT INTO foo(col1, col2) VALUES (1, 2);'\n You cannot insert '2' into the 'col2' column because this column is generated. For this script to work, you can change '2' to DEFAULT. 'INSERT INTO foo(col1, col2) VALUES (1, DEFAULT);' Inspection ID: SqlInsertIntoGeneratedColumnInspection",
                  "markdown": "Reports INSERT statements that assign values to generated columns. Generated columns can be read, but their values can not be directly written.\n\nExample (PostgreSQL):\n\n    CREATE TABLE foo\n    (\n       col1 INT,\n       col2 INT GENERATED ALWAYS AS (col1 + 1) STORED\n    );\n    INSERT INTO foo(col1, col2) VALUES (1, 2);\n\nYou cannot insert `2` into the `col2` column because this column is generated.\nFor this script to work, you can change `2` to DEFAULT.\n`INSERT INTO foo(col1, col2) VALUES (1, DEFAULT);`\n\nInspection ID: SqlInsertIntoGeneratedColumnInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlInsertIntoGeneratedColumn",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 48,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlIdentifierInspection",
                "shortDescription": {
                  "text": "Identifier should be quoted"
                },
                "fullDescription": {
                  "text": "Reports situations when you use SQL reserved keywords as identifier names in your query. Example (Microsoft SQL Server): 'CREATE TABLE select (identity INT IDENTITY NOT NULL, order INT NOT NULL);' We use 'select', 'identity', and 'order' as table and column names. But they are also reserved keywords in Microsoft SQL Server. Therefore, in order to use them as object names in the query, you must quote these identifiers. To quote them, you can use the Quote identifier quick-fix. After the quick-fix is applied: 'CREATE TABLE [select] ([identity] INT IDENTITY NOT NULL, [order] INT NOT NULL);' Inspection ID: SqlIdentifierInspection",
                  "markdown": "Reports situations when you use SQL reserved keywords as identifier names in your query.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE select (identity INT IDENTITY NOT NULL, order INT NOT NULL);\n\nWe use `select`, `identity`, and `order` as table and column names.\nBut they are also reserved keywords in Microsoft SQL Server.\nTherefore, in order to use them as object names in the query, you must quote these identifiers. To quote them, you can use the\n**Quote identifier** quick-fix.\n\nAfter the quick-fix is applied:\n\n    CREATE TABLE [select] ([identity] INT IDENTITY NOT NULL, [order] INT NOT NULL);\n\nInspection ID: SqlIdentifierInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlIdentifier",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 48,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MsOrderByInspection",
                "shortDescription": {
                  "text": "ORDER BY in queries"
                },
                "fullDescription": {
                  "text": "No description available",
                  "markdown": "No description available"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "MsOrderBy",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Performance"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL server",
                      "index": 148,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlDeprecateTypeInspection",
                "shortDescription": {
                  "text": "Deprecated type"
                },
                "fullDescription": {
                  "text": "Reports usages of types that are deprecated and might disappear in future versions of DBMS. Reported types: LONG in Oracle (see Deprecated and Desupported Features at docs.oracle.com). TEXT, NTEXT, and IMAGE in Microsoft SQL Server (see Deprecated Database Engine Features in SQL Server 2016 at docs.microsoft.com). Example (Oracle): 'CREATE TABLE ot.foo(\na NUMBER GENERATED BY DEFAULT AS IDENTITY,\nb LONG NOT NULL\n);' Inspection ID: SqlDeprecateTypeInspection",
                  "markdown": "Reports usages of types that are deprecated and might disappear in future versions of DBMS.\n\nReported types:\n\n* LONG in Oracle (see [Deprecated\n  and Desupported Features at docs.oracle.com](https://docs.oracle.com/cd/A91202_01/901_doc/server.901/a90120/ch4_dep.htm#6690)).\n* TEXT, NTEXT, and IMAGE in Microsoft SQL Server (see [Deprecated Database Engine Features in SQL Server 2016 at docs.microsoft.com](https://docs.microsoft.com/en-us/sql/database-engine/deprecated-database-engine-features-in-sql-server-2016?view=sql-server-ver15)).\n\nExample (Oracle):\n\n    CREATE TABLE ot.foo(\n    a NUMBER GENERATED BY DEFAULT AS IDENTITY,\n    b LONG NOT NULL\n    );\n\nInspection ID: SqlDeprecateTypeInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlDeprecateType",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 48,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlGotoInspection",
                "shortDescription": {
                  "text": "Usages of GOTO statements"
                },
                "fullDescription": {
                  "text": "Reports usages of backward GOTO statements and GOTO statements used to exit a loop. The extensive use of GOTO statements is generally not recommended. For details, see GOTO statement in SQL procedures at ibm.com. Instead of jumping back to a previous statement using GOTO, consider using a loop. Instead of exiting the WHILE loop with GOTO, consider using other control-of-flow statements (for example, RETURN or BREAK). Example (Oracle): 'CREATE PROCEDURE test(n INT) AS\nDECLARE\n    x INT;\nBEGIN\n    x := 0;\n    GOTO a;\n    <<a>> x := 1;\n    IF (n = 0) THEN\n        GOTO a;\n    END IF;\n    WHILE TRUE\n        LOOP\n            GOTO b;\n        END LOOP;\n    <<b>> x := 3;\nEND;' Inspection ID: SqlGotoInspection",
                  "markdown": "Reports usages of backward GOTO statements and GOTO statements used to exit a loop.\n\nThe extensive use of GOTO statements is generally\nnot recommended. For details, see [GOTO statement in\nSQL\nprocedures at ibm.com](https://www.ibm.com/docs/no/db2/11.5?topic=procedures-goto-statement-in-sql).\n\nInstead of jumping back to a previous statement using GOTO, consider using a loop.\n\nInstead of exiting the WHILE loop with GOTO, consider using other control-of-flow statements (for example, RETURN or BREAK).\n\nExample (Oracle):\n\n    CREATE PROCEDURE test(n INT) AS\n    DECLARE\n        x INT;\n    BEGIN\n        x := 0;\n        GOTO a;\n        <<a>> x := 1;\n        IF (n = 0) THEN\n            GOTO a;\n        END IF;\n        WHILE TRUE\n            LOOP\n                GOTO b;\n            END LOOP;\n        <<b>> x := 3;\n    END;\n\nInspection ID: SqlGotoInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlGoto",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 48,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.javaee.jpa",
            "version": "253.22441.33",
            "rules": [
              {
                "id": "JpaObjectClassSignatureInspection",
                "shortDescription": {
                  "text": "Persistent object class signature checks"
                },
                "fullDescription": {
                  "text": "Reports incorrectly defined persistent object classes in the following cases: Class is not top-level Class is final Class is annotated several times Class is defined as both a persistent entity and an entity listener Example: '@Entity\n  @EntityListeners(value = JavaEntity.class) // Error: both @Entity and @EntityListener annotations are pointing to the same class\n  public final class JavaEntity { // Error: persistent entity should not be final\n    ...\n  }' Inspection ID: JpaObjectClassSignatureInspection",
                  "markdown": "Reports incorrectly defined persistent object classes in the following cases:\n\n* Class is not top-level\n* Class is final\n* Class is annotated several times\n* Class is defined as both a persistent entity and an entity listener\n\n**Example:**\n\n\n      @Entity\n      @EntityListeners(value = JavaEntity.class) // Error: both @Entity and @EntityListener annotations are pointing to the same class\n      public final class JavaEntity { // Error: persistent entity should not be final\n        ...\n      }\n\nInspection ID: JpaObjectClassSignatureInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "JpaObjectClassSignatureInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JPA",
                      "index": 26,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JpaQlInspection",
                "shortDescription": {
                  "text": "Query language checks"
                },
                "fullDescription": {
                  "text": "Reports the following errors inside Persistence QL queries: Mismatching expression types Incorrect parameters Empty or constant conditions Unresolved symbols Example queries: 'SELECT OBJECT(e) FROM JavaEntity e WHERE TRUE // Warning: constant condition\n\nSELECT OBJECT(e) FROM JavaEntity e WHERE e.id BETWEEN 0 AND '2' // Error: expected a numeric value but got a string\n\nSELECT e from JavaEntity e where e.id=?1 and e.name=?3 // Error: there are only 2 actual query parameters' Inspection ID: JpaQlInspection",
                  "markdown": "Reports the following errors inside Persistence QL queries:\n\n* Mismatching expression types\n* Incorrect parameters\n* Empty or constant conditions\n* Unresolved symbols\n\n**Example queries:**\n\n\n    SELECT OBJECT(e) FROM JavaEntity e WHERE TRUE // Warning: constant condition\n\n    SELECT OBJECT(e) FROM JavaEntity e WHERE e.id BETWEEN 0 AND '2' // Error: expected a numeric value but got a string\n\n    SELECT e from JavaEntity e where e.id=?1 and e.name=?3 // Error: there are only 2 actual query parameters\n\nInspection ID: JpaQlInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "JpaQlInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JPA",
                      "index": 26,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JpaQueryApiInspection",
                "shortDescription": {
                  "text": "Unresolved queries and query parameters"
                },
                "fullDescription": {
                  "text": "Reports unresolved symbols in named and native queries and related API methods: Unknown named query Unknown query parameter Example: '@Entity\n  @NamedQuery(name = \"SelectByConditionQuery\", query = \"...\")\n  public class JavaEntity { ... }\n\n  class Main {\n    public static void executeQuery() {\n      Persistence.createEntityManagerFactory(\"\")\n        .createEntityManager()\n        .createNamedQuery(\"SelectAllQuery\") // Error: unknown query name\n        ...\n    }\n  }' Inspection ID: JpaQueryApiInspection",
                  "markdown": "Reports unresolved symbols in named and native queries and related API methods:\n\n* Unknown named query\n* Unknown query parameter\n\n**Example:**\n\n\n      @Entity\n      @NamedQuery(name = \"SelectByConditionQuery\", query = \"...\")\n      public class JavaEntity { ... }\n\n      class Main {\n        public static void executeQuery() {\n          Persistence.createEntityManagerFactory(\"\")\n            .createEntityManager()\n            .createNamedQuery(\"SelectAllQuery\") // Error: unknown query name\n            ...\n        }\n      }\n\nInspection ID: JpaQueryApiInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "JpaQueryApiInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JPA",
                      "index": 26,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JpaDataSourceORMDomInspection",
                "shortDescription": {
                  "text": "Unresolved database references in XML"
                },
                "fullDescription": {
                  "text": "Reports Persistence ORM XML descriptors that cannot be resolved within the configured datasource and suggests refreshing the datasource or assigning a different one. Example database table: 'CREATE TABLE DATA_TABLE (\n    ID INTEGER,\n    DATA VARCHAR(100)\n  );' Example JSP file: '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  <entity-mappings xmlns=\"http://java.sun.com/xml/ns/persistence/orm\" version=\"1.0\">\n    <entity name=\"JavaEntity\" class=\"JavaEntity\">\n        <table name=\"UNKNOWN_TABLE\"/> // Error: unresolved table\n        <attributes>\n          <id name=\"id\">\n            <column name=\"ID\" nullable=\"false\"/>\n          </id>\n          <basic name=\"UNKNOWN_COLUMN\"> // Error: unresolved column\n            <column name=\"UNKNOWN_COLUMN\" length=\"12\"/>\n          </basic>\n        </attributes>\n    </entity>\n  </entity-mappings>' NOTE: Datasource can be configured via `Assign datasource` action Inspection ID: JpaDataSourceORMDomInspection",
                  "markdown": "Reports Persistence ORM XML descriptors that cannot be resolved within the configured datasource and suggests refreshing the datasource or assigning a different one.\n\n**Example database table:**\n\n\n      CREATE TABLE DATA_TABLE (\n        ID INTEGER,\n        DATA VARCHAR(100)\n      );\n\n**Example JSP file:**\n\n\n      <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n      <entity-mappings xmlns=\"http://java.sun.com/xml/ns/persistence/orm\" version=\"1.0\">\n        <entity name=\"JavaEntity\" class=\"JavaEntity\">\n            <table name=\"UNKNOWN_TABLE\"/> // Error: unresolved table\n            <attributes>\n              <id name=\"id\">\n                <column name=\"ID\" nullable=\"false\"/>\n              </id>\n              <basic name=\"UNKNOWN_COLUMN\"> // Error: unresolved column\n                <column name=\"UNKNOWN_COLUMN\" length=\"12\"/>\n              </basic>\n            </attributes>\n        </entity>\n      </entity-mappings>\n\n\n**NOTE:** Datasource can be configured via \\`Assign datasource\\` action\n\nInspection ID: JpaDataSourceORMDomInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "JpaDataSourceORMDomInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JPA",
                      "index": 26,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JpaDomInspection",
                "shortDescription": {
                  "text": "persistence.xml problems"
                },
                "fullDescription": {
                  "text": "Reports the following problems inside XML configuration files: References to non-instantiable classes References to classes that do not extend required class References to classes with inappropriate scope Tag and attribute values that do not match required pattern (for example, Java Identifiers) Tags that do not include required children tags or attributes Tags that define objects with duplicate names Example: '<persistence>\n    <persistence-unit name=\"example-persistence-unit\">\n        <provider>org.example.SomeRandomClass</provider> // Error: provider class should implement PersistenceProvider interface\n    </persistence-unit>\n</persistence>' Inspection ID: JpaDomInspection",
                  "markdown": "Reports the following problems inside XML configuration files:\n\n* References to non-instantiable classes\n* References to classes that do not extend required class\n* References to classes with inappropriate scope\n* Tag and attribute values that do not match required pattern (for example, Java Identifiers)\n* Tags that do not include required children tags or attributes\n* Tags that define objects with duplicate names\n\n**Example:**\n\n\n    <persistence>\n        <persistence-unit name=\"example-persistence-unit\">\n            <provider>org.example.SomeRandomClass</provider> // Error: provider class should implement PersistenceProvider interface\n        </persistence-unit>\n    </persistence>\n\nInspection ID: JpaDomInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "JpaDomInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JPA",
                      "index": 26,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JpaDataSourceORMInspection",
                "shortDescription": {
                  "text": "Unresolved database references in annotations"
                },
                "fullDescription": {
                  "text": "Reports references inside the following Persistence ORM annotations if they cannot be resolved within the configured datasource: Table Column [Any]To[Any] JoinColumn / JoinTable NamedQuery / NativeQuery Embeddable Suggests refreshing the datasource or assigning a different one. Example database table: 'CREATE TABLE DATA_TABLE (\n    ID INTEGER,\n    DATA VARCHAR(100)\n);' Example JPA entity class: '@Entity\n  @Table(name = \"UNKNOWN_TABLE\") // unresolved reference\n  public class JavaEntity {\n    @Column(name = \"ID\") // cannot resolve columns in a table that's not defined\n    Integer id;\n  }' NOTE: Datasource can be configured via `Assign datasource` action or the corresponding gutter icon for entity class Inspection ID: JpaDataSourceORMInspection",
                  "markdown": "Reports references inside the following Persistence ORM annotations if they cannot be resolved within the configured datasource:  \n\n* Table\n* Column\n* \\[Any\\]To\\[Any\\]\n* JoinColumn / JoinTable\n* NamedQuery / NativeQuery\n* Embeddable\n\nSuggests refreshing the datasource or assigning a different one.  \n\n**Example database table:**\n\n\n      CREATE TABLE DATA_TABLE (\n        ID INTEGER,\n        DATA VARCHAR(100)\n    );\n\n**Example JPA entity class:**\n\n\n      @Entity\n      @Table(name = \"UNKNOWN_TABLE\") // unresolved reference\n      public class JavaEntity {\n        @Column(name = \"ID\") // cannot resolve columns in a table that's not defined\n        Integer id;\n      }\n\n\n**NOTE:** Datasource can be configured via \\`Assign datasource\\` action or the corresponding gutter icon for entity class\n\nInspection ID: JpaDataSourceORMInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "JpaDataSourceORMInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JPA",
                      "index": 26,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JpaAttributeTypeInspection",
                "shortDescription": {
                  "text": "Persistent attribute type checks"
                },
                "fullDescription": {
                  "text": "Reports property type mismatch for JPA attributes. Example: '@Entity\n  public class JavaEntity {\n\n    @OneToOne\n    Map<Integer, AnotherEntity> incorrectRelationship; // Error: 'One To One' attribute type should be an entity, not a map\n\n    @ManyToMany\n    Map<Integer, AnotherEntity> correctRelationship;\n  }' Inspection ID: JpaAttributeTypeInspection",
                  "markdown": "Reports property type mismatch for JPA attributes.\n\n**Example:**\n\n\n      @Entity\n      public class JavaEntity {\n\n        @OneToOne\n        Map<Integer, AnotherEntity> incorrectRelationship; // Error: 'One To One' attribute type should be an entity, not a map\n\n        @ManyToMany\n        Map<Integer, AnotherEntity> correctRelationship;\n      }\n\nInspection ID: JpaAttributeTypeInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "JpaAttributeTypeInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JPA",
                      "index": 26,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JpaMissingIdInspection",
                "shortDescription": {
                  "text": "Persistent entity misses primary key"
                },
                "fullDescription": {
                  "text": "Reports missing identification property persistence objects. Example: '@Entity\n  public class JavaEntity { // Error: entity class should have an @Id annotated property\n\n  }' Inspection ID: JpaMissingIdInspection",
                  "markdown": "Reports missing identification property persistence objects.  \n\n**Example:**\n\n\n      @Entity\n      public class JavaEntity { // Error: entity class should have an @Id annotated property\n\n      }\n\nInspection ID: JpaMissingIdInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "JpaMissingIdInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JPA",
                      "index": 26,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JpaORMDomInspection",
                "shortDescription": {
                  "text": "Orm.xml problems"
                },
                "fullDescription": {
                  "text": "Reports unresolved references to any database objects inside `orm.xml` configuration files: Tables Columns Schemas Catalogs Sequences Example database table: 'CREATE TABLE DATA_TABLE (\n  ID INTEGER,\n  DATA VARCHAR(100)\n);' Example orm.xml file: '<entity-mappings xmlns=\"http://java.sun.com/xml/ns/persistence/orm\" version=\"1.0\">\n    <package>example</package>\n    <entity name=\"JavaEntity\" class=\"JavaEntity\">\n        <table name=\"DATA_TABLE\"/>\n        <attributes>\n          <id name=\"id\">\n            <column name=\"UNKNOWN_ID\" nullable=\"false\" length=\"20\"/> // Error: unresolved column name\n          </id>\n          <basic name=\"data\">\n            <column name=\"DATA\" length=\"12\"/> // Good\n          </basic>\n        </attributes>\n    </entity>\n</entity-mappings>' Inspection ID: JpaORMDomInspection",
                  "markdown": "Reports unresolved references to any database objects inside \\`orm.xml\\` configuration files:\n\n* Tables\n* Columns\n* Schemas\n* Catalogs\n* Sequences\n\n**Example database table:**\n\n\n    CREATE TABLE DATA_TABLE (\n      ID INTEGER,\n      DATA VARCHAR(100)\n    );\n\n**Example orm.xml file:**\n\n\n    <entity-mappings xmlns=\"http://java.sun.com/xml/ns/persistence/orm\" version=\"1.0\">\n        <package>example</package>\n        <entity name=\"JavaEntity\" class=\"JavaEntity\">\n            <table name=\"DATA_TABLE\"/>\n            <attributes>\n              <id name=\"id\">\n                <column name=\"UNKNOWN_ID\" nullable=\"false\" length=\"20\"/> // Error: unresolved column name\n              </id>\n              <basic name=\"data\">\n                <column name=\"DATA\" length=\"12\"/> // Good\n              </basic>\n            </attributes>\n        </entity>\n    </entity-mappings>\n\nInspection ID: JpaORMDomInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "JpaORMDomInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JPA",
                      "index": 26,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JpaEntityListenerInspection",
                "shortDescription": {
                  "text": "Entity listener problems"
                },
                "fullDescription": {
                  "text": "Reports the following JPA specification errors: Entity listener classes without public no-argument constructors Entity listener methods with incorrect signatures Example: '@Entity\n  @EntityListeners(value = JavaEntityListener.class)\n  class JavaEntity { ... }\n\n  class JavaEntityListener {\n\n    @PostLoad\n    void postLoad(String parameter) { ... } // Error: method 'postLoad' should take parameter of type 'Object' here\n  }' Inspection ID: JpaEntityListenerInspection",
                  "markdown": "Reports the following JPA specification errors:  \n\n* Entity listener classes without public no-argument constructors\n* Entity listener methods with incorrect signatures\n\n**Example:**\n\n\n      @Entity\n      @EntityListeners(value = JavaEntityListener.class)\n      class JavaEntity { ... }\n\n      class JavaEntityListener {\n\n        @PostLoad\n        void postLoad(String parameter) { ... } // Error: method 'postLoad' should take parameter of type 'Object' here\n      }\n\nInspection ID: JpaEntityListenerInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "JpaEntityListenerInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JPA",
                      "index": 26,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JpaAttributeMemberSignatureInspection",
                "shortDescription": {
                  "text": "Persistent attribute signature checks"
                },
                "fullDescription": {
                  "text": "Reports the following JPA specification errors: Several attributes are configured for a method or field Illegal attribute is used in Embeddable object (JPA 1.0) Persistent attribute metadata is specified not on a field or property getter No setter or getter with property-based access Example: '@Entity\n  @Table(name = \"TABLE\")\n  public class JavaEntity {\n\n    private Integer id; // Error: both getter and setter should be present\n\n    public Integer getId() { ... }\n\n\n\n    private String data;\n\n    public String getData() { ... }\n\n    @Basic // Error: persistence annotation should be placed on field or getter method\n    public void setData(String data) { ... }\n  }' Inspection ID: JpaAttributeMemberSignatureInspection",
                  "markdown": "Reports the following JPA specification errors:\n\n* Several attributes are configured for a method or field\n* Illegal attribute is used in Embeddable object (JPA 1.0)\n* Persistent attribute metadata is specified not on a field or property getter\n* No setter or getter with property-based access\n\n**Example:**\n\n\n      @Entity\n      @Table(name = \"TABLE\")\n      public class JavaEntity {\n\n        private Integer id; // Error: both getter and setter should be present\n\n        public Integer getId() { ... }\n\n\n\n        private String data;\n\n        public String getData() { ... }\n\n        @Basic // Error: persistence annotation should be placed on field or getter method\n        public void setData(String data) { ... }\n      }\n\nInspection ID: JpaAttributeMemberSignatureInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "JpaAttributeMemberSignatureInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JPA",
                      "index": 26,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JpaEntityListenerWarningsInspection",
                "shortDescription": {
                  "text": "Entity listener warnings"
                },
                "fullDescription": {
                  "text": "Reports entity listener classes without any entity listener methods. Example: '@Entity\n  @EntityListeners(value = JavaEntityListener.class)\n  public class JavaEntity { ... }\n\n  class JavaEntityListener { // Error: no entity listener-specific methods found\n\n  }' Inspection ID: JpaEntityListenerWarningsInspection",
                  "markdown": "Reports entity listener classes without any entity listener methods.\n\n**Example:**\n\n\n      @Entity\n      @EntityListeners(value = JavaEntityListener.class)\n      public class JavaEntity { ... }\n\n      class JavaEntityListener { // Error: no entity listener-specific methods found\n\n      }\n\nInspection ID: JpaEntityListenerWarningsInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JpaEntityListenerWarningsInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JPA",
                      "index": 26,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JpaEntityGraphsInspection",
                "shortDescription": {
                  "text": "Unresolved entity graph names"
                },
                "fullDescription": {
                  "text": "Reports the following unresolved attributes inside EntityGraph-related annotations: Value in '@NamedAttributeNode' Named subgraph in '@NamedAttributeNode' Name in '@NamedEntityGraph' Example: '@Entity\n  @NamedEntityGraph(name = \"entity-graph\", ...)\n  public class JavaEntity {\n    public void foo() {\n      Persistence.createEntityManagerFactory(\"\")\n        .createEntityManager()\n        .getEntityGraph(\"unknown-entity-graph\"); // unresolved reference\n    }\n  }' Inspection ID: JpaEntityGraphsInspection",
                  "markdown": "Reports the following unresolved attributes inside EntityGraph-related annotations:  \n\n* Value in `@NamedAttributeNode`\n* Named subgraph in `@NamedAttributeNode`\n* Name in `@NamedEntityGraph`\n\n**Example:**\n\n\n      @Entity\n      @NamedEntityGraph(name = \"entity-graph\", ...)\n      public class JavaEntity {\n        public void foo() {\n          Persistence.createEntityManagerFactory(\"\")\n            .createEntityManager()\n            .getEntityGraph(\"unknown-entity-graph\"); // unresolved reference\n        }\n      }\n\nInspection ID: JpaEntityGraphsInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "JpaEntityGraphsInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JPA",
                      "index": 26,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JpaConfigDomFacetInspection",
                "shortDescription": {
                  "text": "Persistence.xml is not added to facet"
                },
                "fullDescription": {
                  "text": "Reports missing persistence.xml configuration files and suggests adding the file to the persistence facet. Inspection ID: JpaConfigDomFacetInspection",
                  "markdown": "Reports missing persistence.xml configuration files and suggests adding the file to the persistence facet.\n\nInspection ID: JpaConfigDomFacetInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JpaConfigDomFacetInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JPA",
                      "index": 26,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JpaModelReferenceInspection",
                "shortDescription": {
                  "text": "Unresolved references in queries"
                },
                "fullDescription": {
                  "text": "Reports unresolved symbols in the following JPA annotations and API methods: 'AttributeOverride' 'AssociationOverride' 'MapsId' 'MapKey' 'Criteria API methods' Example: '@Entity\n  @AssociationOverrides({\n    @AssociationOverride(name = \"missingAttribute\", joinColumns = { ... }), // Error: unresolved attribute\n    @AssociationOverride(name = \"existingAttribute\", joinColumns = { ... })\n  })\n  public class JavaEntity {\n    @OneToOne\n    AnotherEntity existingAttribute;\n  }' Inspection ID: JpaModelReferenceInspection",
                  "markdown": "Reports unresolved symbols in the following JPA annotations and API methods:\n\n* `AttributeOverride`\n* `AssociationOverride`\n* `MapsId`\n* `MapKey`\n* `Criteria API methods`\n\n**Example:**\n\n\n      @Entity\n      @AssociationOverrides({\n        @AssociationOverride(name = \"missingAttribute\", joinColumns = { ... }), // Error: unresolved attribute\n        @AssociationOverride(name = \"existingAttribute\", joinColumns = { ... })\n      })\n      public class JavaEntity {\n        @OneToOne\n        AnotherEntity existingAttribute;\n      }\n\nInspection ID: JpaModelReferenceInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "JpaModelReferenceInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JPA",
                      "index": 26,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.jetbrains.plugins.sass",
            "version": "253.22441.33",
            "rules": [
              {
                "id": "SassScssResolvedByNameOnly",
                "shortDescription": {
                  "text": "Missing import"
                },
                "fullDescription": {
                  "text": "Reports a reference to a variable, mixin, or function that is declared in another file but this file isn't explicitly imported in the current file. Example: '* {\n  margin: $var-in-other-file;\n}' Inspection ID: SassScssResolvedByNameOnly",
                  "markdown": "Reports a reference to a variable, mixin, or function that is declared in another file but this file isn't explicitly [imported](https://sass-lang.com/documentation/at-rules/import) in the current file.\n\n**Example:**\n\n\n    * {\n      margin: $var-in-other-file;\n    }\n\nInspection ID: SassScssResolvedByNameOnly"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "SassScssResolvedByNameOnly",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Sass_SCSS",
                      "index": 28,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SassScssUnresolvedVariable",
                "shortDescription": {
                  "text": "Unresolved variable"
                },
                "fullDescription": {
                  "text": "Reports an unresolved Sass/SCSS variable reference. Example: '* {\n  margin: $unknown-var;\n}' Inspection ID: SassScssUnresolvedVariable",
                  "markdown": "Reports an unresolved [Sass/SCSS variable](https://sass-lang.com/documentation/variables) reference.\n\n**Example:**\n\n\n    * {\n      margin: $unknown-var;\n    }\n\nInspection ID: SassScssUnresolvedVariable"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SassScssUnresolvedVariable",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Sass_SCSS",
                      "index": 28,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SassScssUnresolvedMixin",
                "shortDescription": {
                  "text": "Unresolved mixin"
                },
                "fullDescription": {
                  "text": "Reports an unresolved Sass/SCSS mixin reference. Example: '* {\n  @include unknown-mixin;\n}' Inspection ID: SassScssUnresolvedMixin",
                  "markdown": "Reports an unresolved [Sass/SCSS mixin](https://sass-lang.com/documentation/at-rules/mixin) reference.\n\n**Example:**\n\n\n    * {\n      @include unknown-mixin;\n    }\n\nInspection ID: SassScssUnresolvedMixin"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SassScssUnresolvedMixin",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Sass_SCSS",
                      "index": 28,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SassScssUnresolvedPlaceholderSelector",
                "shortDescription": {
                  "text": "Unresolved placeholder selector"
                },
                "fullDescription": {
                  "text": "Reports an unresolved Sass/SCSS placeholder selector reference. Example: '* {\n  @extend %unknown-placeholder-selector;\n}' Inspection ID: SassScssUnresolvedPlaceholderSelector",
                  "markdown": "Reports an unresolved [Sass/SCSS placeholder selector](https://sass-lang.com/documentation/variables) reference.\n\n**Example:**\n\n\n    * {\n      @extend %unknown-placeholder-selector;\n    }\n\nInspection ID: SassScssUnresolvedPlaceholderSelector"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SassScssUnresolvedPlaceholderSelector",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Sass_SCSS",
                      "index": 28,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij",
            "version": "253.22441.33",
            "rules": [
              {
                "id": "HtmlUnknownBooleanAttribute",
                "shortDescription": {
                  "text": "Incorrect boolean attribute"
                },
                "fullDescription": {
                  "text": "Reports an HTML non-boolean attribute without a value. Suggests configuring attributes that should not be reported. Inspection ID: HtmlUnknownBooleanAttribute",
                  "markdown": "Reports an HTML non-boolean attribute without a value. Suggests configuring attributes that should not be reported.\n\nInspection ID: HtmlUnknownBooleanAttribute"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HtmlUnknownBooleanAttribute",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 29,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DuplicatedCode",
                "shortDescription": {
                  "text": "Duplicated code fragment"
                },
                "fullDescription": {
                  "text": "Reports duplicated blocks of code from the selected scope: the same file, same module, dependent modules or the entire project. The inspection features quick-fixes that help you to set the size of detected duplicates, navigate to repetitive code fragments, and compare them in a tool window.When possible, the inspection provides a quick-fix to extract a method from the duplicated code. The inspection options allow you to select the scope of the reported duplicated fragments and set the initial size for the duplicated language constructs. You can also configure the constructs that you want to anonymize in File | Settings | Editor | Duplicates.",
                  "markdown": "Reports duplicated blocks of code from the selected scope: the same file, same module, dependent modules or the entire project.\n\nThe inspection features quick-fixes that help you to set the size of detected duplicates, navigate to repetitive code fragments, and compare them in a tool window.When possible, the inspection provides a quick-fix to extract a method from the duplicated code.\n\nThe inspection options allow you to select the scope of the reported duplicated fragments and set the initial size for the duplicated language constructs.\n\nYou can also configure the constructs that you want to anonymize in [File \\| Settings \\| Editor \\| Duplicates](settings://duplicates.index)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "DuplicatedCode",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 40,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantSuppression",
                "shortDescription": {
                  "text": "Redundant suppression"
                },
                "fullDescription": {
                  "text": "Reports usages of the following elements that can be safely removed because the inspection they affect is no longer applicable in this context: '@SuppressWarning' annotation, or '// noinspection' line comment, or '/** noinspection */' JavaDoc comment Example: 'public class C {\n // symbol is already private,\n // but annotation is still around\n  @SuppressWarnings({\"WeakerAccess\"})\n  private boolean CONST = true;\n  void f() {\n    CONST = false;\n  }\n}' Inspection ID: RedundantSuppression",
                  "markdown": "Reports usages of the following elements that can be safely removed because the inspection they affect is no longer applicable in this context:\n\n* `@SuppressWarning` annotation, or\n* `// noinspection` line comment, or\n* `/** noinspection */` JavaDoc comment\n\nExample:\n\n\n    public class C {\n     // symbol is already private,\n     // but annotation is still around\n      @SuppressWarnings({\"WeakerAccess\"})\n      private boolean CONST = true;\n      void f() {\n        CONST = false;\n      }\n    }\n\nInspection ID: RedundantSuppression"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RedundantSuppression",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 40,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CustomRegExpInspection",
                "shortDescription": {
                  "text": "Custom RegExp inspection"
                },
                "fullDescription": {
                  "text": "Custom Regex Inspection Inspection ID: CustomRegExpInspection",
                  "markdown": "Custom Regex Inspection\n\nInspection ID: CustomRegExpInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CustomRegExpInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 74,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IncorrectFormatting",
                "shortDescription": {
                  "text": "Incorrect formatting"
                },
                "fullDescription": {
                  "text": "Reports formatting issues that appear if your code doesn't follow your project's code style settings. This inspection is not compatible with languages that require third-party formatters for code formatting, for example, Go or C with CLangFormat enabled. Inspection ID: IncorrectFormatting",
                  "markdown": "Reports formatting issues that appear if your code doesn't\nfollow your project's code style settings.\n\n\nThis inspection is not compatible with languages that require\nthird-party formatters for code formatting, for example, Go or\nC with CLangFormat enabled.\n\nInspection ID: IncorrectFormatting"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "IncorrectFormatting",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 40,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpUnexpectedAnchor",
                "shortDescription": {
                  "text": "Begin or end anchor in unexpected position"
                },
                "fullDescription": {
                  "text": "Reports '^' or '\\A' anchors not at the beginning of the pattern and '$', '\\Z' or '\\z' anchors not at the end of the pattern. In the wrong position these RegExp anchors prevent the pattern from matching anything. In case of the '^' and '$' anchors, most likely the literal character was meant and the escape forgotten. Example: '(Price $10)' New in 2018.1 Inspection ID: RegExpUnexpectedAnchor",
                  "markdown": "Reports `^` or `\\A` anchors not at the beginning of the pattern and `$`, `\\Z` or `\\z` anchors not at the end of the pattern. In the wrong position these RegExp anchors prevent the pattern from matching anything. In case of the `^` and `$` anchors, most likely the literal character was meant and the escape forgotten.\n\n**Example:**\n\n\n      (Price $10)\n\n\nNew in 2018.1\n\nInspection ID: RegExpUnexpectedAnchor"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RegExpUnexpectedAnchor",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 74,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckXmlFileWithXercesValidator",
                "shortDescription": {
                  "text": "Failed external validation"
                },
                "fullDescription": {
                  "text": "Reports a discrepancy in an XML file with the specified DTD or schema detected by the Xerces validator. Inspection ID: CheckXmlFileWithXercesValidator",
                  "markdown": "Reports a discrepancy in an XML file with the specified DTD or schema detected by the Xerces validator.\n\nInspection ID: CheckXmlFileWithXercesValidator"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CheckXmlFileWithXercesValidator",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 88,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpEscapedMetaCharacter",
                "shortDescription": {
                  "text": "Escaped meta character"
                },
                "fullDescription": {
                  "text": "Reports escaped meta characters. Some RegExp coding styles specify that meta characters should be placed inside a character class, to make the regular expression easier to understand. This inspection does not warn about the meta character '[', ']' and '^', because those would need additional escaping inside a character class. Example: '\\d+\\.\\d+' After the quick-fix is applied: '\\d+[.]\\d+' New in 2017.1 Inspection ID: RegExpEscapedMetaCharacter",
                  "markdown": "Reports escaped meta characters. Some RegExp coding styles specify that meta characters should be placed inside a character class, to make the regular expression easier to understand. This inspection does not warn about the meta character `[`, `]` and `^`, because those would need additional escaping inside a character class.\n\n**Example:**\n\n\n      \\d+\\.\\d+\n\nAfter the quick-fix is applied:\n\n\n      \\d+[.]\\d+\n\nNew in 2017.1\n\nInspection ID: RegExpEscapedMetaCharacter"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "RegExpEscapedMetaCharacter",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 74,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlUnusedNamespaceDeclaration",
                "shortDescription": {
                  "text": "Unused schema declaration"
                },
                "fullDescription": {
                  "text": "Reports an unused namespace declaration or location hint in XML. Inspection ID: XmlUnusedNamespaceDeclaration",
                  "markdown": "Reports an unused namespace declaration or location hint in XML.\n\nInspection ID: XmlUnusedNamespaceDeclaration"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "XmlUnusedNamespaceDeclaration",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 88,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpSimplifiable",
                "shortDescription": {
                  "text": "Regular expression can be simplified"
                },
                "fullDescription": {
                  "text": "Reports regular expressions that can be simplified. Example: '[a] xx* [ah-hz]' After the quick-fix is applied: 'a x+ [ahz]' New in 2022.1 Inspection ID: RegExpSimplifiable",
                  "markdown": "Reports regular expressions that can be simplified.\n\n**Example:**\n\n\n      [a] xx* [ah-hz]\n\nAfter the quick-fix is applied:\n\n\n      a x+ [ahz]\n\nNew in 2022.1\n\nInspection ID: RegExpSimplifiable"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "RegExpSimplifiable",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 74,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpEmptyAlternationBranch",
                "shortDescription": {
                  "text": "Empty branch in alternation"
                },
                "fullDescription": {
                  "text": "Reports empty branches in a RegExp alternation. An empty branch will only match the empty string, and in most cases that is not what is desired. This inspection will not report a single empty branch at the start or the end of an alternation. Example: '(alpha||bravo)' After the quick-fix is applied: '(alpha|bravo)' New in 2017.2 Inspection ID: RegExpEmptyAlternationBranch",
                  "markdown": "Reports empty branches in a RegExp alternation. An empty branch will only match the empty string, and in most cases that is not what is desired. This inspection will not report a single empty branch at the start or the end of an alternation.\n\n**Example:**\n\n\n      (alpha||bravo)\n\nAfter the quick-fix is applied:\n\n\n      (alpha|bravo)\n\nNew in 2017.2\n\nInspection ID: RegExpEmptyAlternationBranch"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RegExpEmptyAlternationBranch",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 74,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpUnnecessaryNonCapturingGroup",
                "shortDescription": {
                  "text": "Unnecessary non-capturing group"
                },
                "fullDescription": {
                  "text": "Reports unnecessary non-capturing groups, which have no influence on the match result. Example: 'Everybody be cool, (?:this) is a robbery!' After the quick-fix is applied: 'Everybody be cool, this is a robbery!' New in 2021.1 Inspection ID: RegExpUnnecessaryNonCapturingGroup",
                  "markdown": "Reports unnecessary non-capturing groups, which have no influence on the match result.\n\n**Example:**\n\n\n      Everybody be cool, (?:this) is a robbery!\n\nAfter the quick-fix is applied:\n\n\n      Everybody be cool, this is a robbery!\n\nNew in 2021.1\n\nInspection ID: RegExpUnnecessaryNonCapturingGroup"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RegExpUnnecessaryNonCapturingGroup",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 74,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TodoComment",
                "shortDescription": {
                  "text": "TODO comment"
                },
                "fullDescription": {
                  "text": "Reports TODO comments in your code. You can configure the format for TODO comments in Settings | Editor | TODO. Enable the Only warn on TODO comments without any details option to only warn on empty TODO comments, that don't provide any description on the task that should be done. Disable to report all TODO comments. Inspection ID: TodoComment",
                  "markdown": "Reports **TODO** comments in your code.\n\nYou can configure the format for **TODO** comments in [Settings \\| Editor \\| TODO](settings://preferences.toDoOptions).\n\nEnable the **Only warn on TODO comments without any details** option to only warn on empty TODO comments, that\ndon't provide any description on the task that should be done. Disable to report all TODO comments.\n\nInspection ID: TodoComment"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "TodoComment",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 40,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlDefaultAttributeValue",
                "shortDescription": {
                  "text": "Redundant attribute with default value"
                },
                "fullDescription": {
                  "text": "Reports a redundant assignment of the default value to an XML attribute. Inspection ID: XmlDefaultAttributeValue",
                  "markdown": "Reports a redundant assignment of the default value to an XML attribute.\n\nInspection ID: XmlDefaultAttributeValue"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "XmlDefaultAttributeValue",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 88,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EmptyDirectory",
                "shortDescription": {
                  "text": "Empty directory"
                },
                "fullDescription": {
                  "text": "Reports empty directories. Available only from Code | Inspect Code or Code | Analyze Code | Run Inspection by Name and isn't reported in the editor. Use the Only report empty directories located under a source folder option to have only directories under source roots reported. Inspection ID: EmptyDirectory",
                  "markdown": "Reports empty directories.\n\nAvailable only from **Code \\| Inspect Code** or\n**Code \\| Analyze Code \\| Run Inspection by Name** and isn't reported in the editor.\n\nUse the **Only report empty directories located under a source folder** option to have only directories under source\nroots reported.\n\n\nInspection ID: EmptyDirectory"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EmptyDirectory",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 40,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckDtdRefs",
                "shortDescription": {
                  "text": "Unresolved DTD reference"
                },
                "fullDescription": {
                  "text": "Reports inconsistency in a DTD-specific reference, for example, in a reference to an XML entity or to a DTD element declaration. Works in DTD an XML files. Inspection ID: CheckDtdRefs",
                  "markdown": "Reports inconsistency in a DTD-specific reference, for example, in a reference to an XML entity or to a DTD element declaration. Works in DTD an XML files.\n\nInspection ID: CheckDtdRefs"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CheckDtdRefs",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 88,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NonAsciiCharacters",
                "shortDescription": {
                  "text": "Non-ASCII characters"
                },
                "fullDescription": {
                  "text": "Reports code elements that use non-ASCII symbols in an unusual context. Example: Non-ASCII characters used in identifiers, strings, or comments. Identifiers written in different languages, such as 'myСollection' with the letter 'C' written in Cyrillic. Comments or strings containing Unicode symbols, such as long dashes and arrows. Inspection ID: NonAsciiCharacters",
                  "markdown": "Reports code elements that use non-ASCII symbols in an unusual context.\n\nExample:\n\n* Non-ASCII characters used in identifiers, strings, or comments.\n* Identifiers written in different languages, such as `my`**С**`ollection` with the letter **C** written in Cyrillic.\n* Comments or strings containing Unicode symbols, such as long dashes and arrows.\n\nInspection ID: NonAsciiCharacters"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NonAsciiCharacters",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Internationalization",
                      "index": 125,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IgnoreFileDuplicateEntry",
                "shortDescription": {
                  "text": "Ignore file duplicates"
                },
                "fullDescription": {
                  "text": "Reports duplicate entries (patterns) in the ignore file (e.g. .gitignore, .hgignore). Duplicate entries in these files are redundant and can be removed. Example: '# Output directories\n    /out/\n    /target/\n    /out/' Inspection ID: IgnoreFileDuplicateEntry",
                  "markdown": "Reports duplicate entries (patterns) in the ignore file (e.g. .gitignore, .hgignore). Duplicate entries in these files are redundant and can be removed.\n\nExample:\n\n\n        # Output directories\n        /out/\n        /target/\n        /out/\n\nInspection ID: IgnoreFileDuplicateEntry"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "IgnoreFileDuplicateEntry",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Version control",
                      "index": 130,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SSBasedInspection",
                "shortDescription": {
                  "text": "Structural search inspection"
                },
                "fullDescription": {
                  "text": "Allows configuring Structural Search/Structural Replace templates that you can apply to the file you are editing. All matches will be highlighted and marked with the template name that you have configured. If you configure the Structural Replace pattern as well, the corresponding replace option will be available as a quick-fix. Inspection ID: SSBasedInspection",
                  "markdown": "Allows configuring **Structural Search/Structural Replace** templates that you can apply to the file you are editing.\n\nAll matches will be highlighted and marked with the template name that you have configured.\nIf you configure the **Structural Replace** pattern as well, the corresponding replace option will be available as a quick-fix.\n\nInspection ID: SSBasedInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SSBasedInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Structural search",
                      "index": 133,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InjectedReferences",
                "shortDescription": {
                  "text": "Injected references"
                },
                "fullDescription": {
                  "text": "Reports unresolved references injected by Language Injections. Example: '@Language(\"file-reference\")\n    String fileName = \"/home/user/nonexistent.file\"; // highlighted if file doesn't exist' Inspection ID: InjectedReferences",
                  "markdown": "Reports unresolved references injected by [Language Injections](https://www.jetbrains.com/help/idea/using-language-injections.html).\n\nExample:\n\n\n        @Language(\"file-reference\")\n        String fileName = \"/home/user/nonexistent.file\"; // highlighted if file doesn't exist\n\nInspection ID: InjectedReferences"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "InjectedReferences",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 40,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpSuspiciousBackref",
                "shortDescription": {
                  "text": "Suspicious back reference"
                },
                "fullDescription": {
                  "text": "Reports back references that will not be resolvable at runtime. This means that the back reference can never match anything. A back reference will not be resolvable when the group is defined after the back reference, or if the group is defined in a different branch of an alternation. Example of a group defined after its back reference: '\\1(abc)' Example of a group and a back reference in different branches: 'a(b)c|(xy)\\1z' New in 2022.1 Inspection ID: RegExpSuspiciousBackref",
                  "markdown": "Reports back references that will not be resolvable at runtime. This means that the back reference can never match anything. A back reference will not be resolvable when the group is defined after the back reference, or if the group is defined in a different branch of an alternation.\n\n**Example of a group defined after its back reference:**\n\n\n      \\1(abc)\n\n**Example of a group and a back reference in different branches:**\n\n\n      a(b)c|(xy)\\1z\n\nNew in 2022.1\n\nInspection ID: RegExpSuspiciousBackref"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RegExpSuspiciousBackref",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 74,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpSingleCharAlternation",
                "shortDescription": {
                  "text": "Single character alternation"
                },
                "fullDescription": {
                  "text": "Reports single char alternation in a RegExp. It is simpler to use a character class instead. This may also provide better matching performance. Example: 'a|b|c|d' After the quick-fix is applied: '[abcd]' New in 2017.1 Inspection ID: RegExpSingleCharAlternation",
                  "markdown": "Reports single char alternation in a RegExp. It is simpler to use a character class instead. This may also provide better matching performance.\n\n**Example:**\n\n\n      a|b|c|d\n\nAfter the quick-fix is applied:\n\n\n      [abcd]\n\n\nNew in 2017.1\n\nInspection ID: RegExpSingleCharAlternation"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RegExpSingleCharAlternation",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 74,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckTagEmptyBody",
                "shortDescription": {
                  "text": "Empty element content"
                },
                "fullDescription": {
                  "text": "Reports XML elements without contents. Example: '<user>\n    <name></name>\n  </user>' After the quick-fix is applied: '<user>\n    <name/>\n  </user>' Inspection ID: CheckTagEmptyBody",
                  "markdown": "Reports XML elements without contents.\n\n**Example:**\n\n\n      <user>\n        <name></name>\n      </user>\n\nAfter the quick-fix is applied:\n\n\n      <user>\n        <name/>\n      </user>\n\nInspection ID: CheckTagEmptyBody"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CheckTagEmptyBody",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 88,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnresolvedReference",
                "shortDescription": {
                  "text": "Unresolved reference"
                },
                "fullDescription": {
                  "text": "Reports an unresolved reference to a named pattern ('define') in RELAX-NG files that use XML syntax. Suggests creating the referenced 'define' element. Inspection ID: UnresolvedReference",
                  "markdown": "Reports an unresolved reference to a named pattern (`define`) in RELAX-NG files that use XML syntax. Suggests creating the referenced `define` element.\n\nInspection ID: UnresolvedReference"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "UnresolvedReference",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RELAX NG",
                      "index": 143,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlMissingClosingTag",
                "shortDescription": {
                  "text": "Missing closing tag"
                },
                "fullDescription": {
                  "text": "Reports an HTML element without a closing tag. Some coding styles require that HTML elements have closing tags even where this is optional. Example: '<html>\n    <body>\n      <p>Behold!\n    </body>\n  </html>' After the quick-fix is applied: '<html>\n    <body>\n      <p>Behold!</p>\n    </body>\n  </html>' Inspection ID: HtmlMissingClosingTag",
                  "markdown": "Reports an HTML element without a closing tag. Some coding styles require that HTML elements have closing tags even where this is optional.\n\n**Example:**\n\n\n      <html>\n        <body>\n          <p>Behold!\n        </body>\n      </html>\n\nAfter the quick-fix is applied:\n\n\n      <html>\n        <body>\n          <p>Behold!</p>\n        </body>\n      </html>\n\nInspection ID: HtmlMissingClosingTag"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "HtmlMissingClosingTag",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 29,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlInvalidId",
                "shortDescription": {
                  "text": "Unresolved 'id' reference"
                },
                "fullDescription": {
                  "text": "Reports the use of the 'id' that is not defined anywhere in XML and HTML. Inspection ID: XmlInvalidId",
                  "markdown": "Reports the use of the `id` that is not defined anywhere in XML and HTML.\n\nInspection ID: XmlInvalidId"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "XmlInvalidId",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 88,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReassignedToPlainText",
                "shortDescription": {
                  "text": "Reassigned to plain text"
                },
                "fullDescription": {
                  "text": "Reports files that were explicitly re-assigned to Plain Text File Type. This association is unnecessary because the platform auto-detects text files by content automatically. You can dismiss this warning by removing the file type association in Settings | Editor | File Types | Text. Inspection ID: ReassignedToPlainText",
                  "markdown": "Reports files that were explicitly re-assigned to Plain Text File Type. This association is unnecessary because the platform auto-detects text files by content automatically.\n\nYou can dismiss this warning by removing the file type association\nin **Settings \\| Editor \\| File Types \\| Text**.\n\nInspection ID: ReassignedToPlainText"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ReassignedToPlainText",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 40,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlDeprecatedElement",
                "shortDescription": {
                  "text": "Deprecated symbol"
                },
                "fullDescription": {
                  "text": "Reports a deprecated XML element or attribute. Symbols can be marked by XML comment or documentation tag with text 'deprecated'. Inspection ID: XmlDeprecatedElement",
                  "markdown": "Reports a deprecated XML element or attribute.\n\nSymbols can be marked by XML comment or documentation tag with text 'deprecated'.\n\nInspection ID: XmlDeprecatedElement"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "XmlDeprecatedElement",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 88,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpAnonymousGroup",
                "shortDescription": {
                  "text": "Anonymous capturing group or numeric back reference"
                },
                "fullDescription": {
                  "text": "Reports anonymous capturing groups and numeric back references in a RegExp. These are only reported when the RegExp dialect supports named group and named group references. Named groups and named back references improve code readability and are recommended to use instead. When a capture is not needed, matching can be more performant and use less memory by using a non-capturing group, i.e. '(?:xxx)' instead of '(xxx)'. Example: '(\\d\\d\\d\\d)\\1' A better regex pattern could look like this: '(?<quad>\\d\\d\\d\\d)\\k<quad>' New in 2017.2 Inspection ID: RegExpAnonymousGroup",
                  "markdown": "Reports anonymous capturing groups and numeric back references in a RegExp. These are only reported when the RegExp dialect supports named group and named group references. Named groups and named back references improve code readability and are recommended to use instead. When a capture is not needed, matching can be more performant and use less memory by using a non-capturing group, i.e. `(?:xxx)` instead of `(xxx)`.\n\n**Example:**\n\n\n      (\\d\\d\\d\\d)\\1\n\nA better regex pattern could look like this:\n\n\n      (?<quad>\\d\\d\\d\\d)\\k<quad>\n\nNew in 2017.2\n\nInspection ID: RegExpAnonymousGroup"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RegExpAnonymousGroup",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 74,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlUnresolvedReference",
                "shortDescription": {
                  "text": "Unresolved references"
                },
                "fullDescription": {
                  "text": "Reports an unresolved references in XML. Inspection ID: XmlUnresolvedReference",
                  "markdown": "Reports an unresolved references in XML.\n\nInspection ID: XmlUnresolvedReference"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "XmlUnresolvedReference",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 88,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpRepeatedSpace",
                "shortDescription": {
                  "text": "Consecutive spaces"
                },
                "fullDescription": {
                  "text": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier. Example: '(     )' After the quick-fix is applied: '( {5})' New in 2017.1 Inspection ID: RegExpRepeatedSpace",
                  "markdown": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1\n\nInspection ID: RegExpRepeatedSpace"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RegExpRepeatedSpace",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 74,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckEmptyScriptTag",
                "shortDescription": {
                  "text": "Empty tag"
                },
                "fullDescription": {
                  "text": "Reports empty tags that do not work in some browsers. Example: '<html>\n    <script/>\n  </html>' After the quick-fix is applied: '<html>\n    <script></script>\n  </html>' Inspection ID: CheckEmptyScriptTag",
                  "markdown": "Reports empty tags that do not work in some browsers.\n\n**Example:**\n\n\n      <html>\n        <script/>\n      </html>\n\nAfter the quick-fix is applied:\n\n\n      <html>\n        <script></script>\n      </html>\n\nInspection ID: CheckEmptyScriptTag"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CheckEmptyScriptTag",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 29,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InconsistentLineSeparators",
                "shortDescription": {
                  "text": "Inconsistent line separators"
                },
                "fullDescription": {
                  "text": "Reports files with line separators different from the ones that are specified in the project's settings. For example, the inspection will be triggered if you set the line separator to '\\n' in Settings | Editor | Code Style | Line separator, while the file you are editing uses '\\r\\n' as a line separator. The inspection also warns you about mixed line separators within a file. Inspection ID: InconsistentLineSeparators",
                  "markdown": "Reports files with line separators different from the ones that are specified in the project's settings.\n\nFor example, the inspection will be triggered if you set the line separator to `\\n` in\n[Settings \\| Editor \\| Code Style \\| Line separator](settings://preferences.sourceCode?Line%20separator),\nwhile the file you are editing uses `\\r\\n` as a line separator.\n\nThe inspection also warns you about mixed line separators within a file.\n\nInspection ID: InconsistentLineSeparators"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "InconsistentLineSeparators",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 40,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ProblematicWhitespace",
                "shortDescription": {
                  "text": "Problematic whitespace"
                },
                "fullDescription": {
                  "text": "Reports the following problems: Tabs used for indentation when the code style is configured to use only spaces. Spaces used for indentation when the code style is configured to use only tabs. Spaces used for indentation and tabs used for alignment when the code style is configured to use smart tabs. Inspection ID: ProblematicWhitespace",
                  "markdown": "Reports the following problems:\n\n* Tabs used for indentation when the code style is configured to use only spaces.\n* Spaces used for indentation when the code style is configured to use only tabs.\n* Spaces used for indentation and tabs used for alignment when the code style is configured to use smart tabs.\n\n\nInspection ID: ProblematicWhitespace"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ProblematicWhitespace",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 40,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlUnknownTarget",
                "shortDescription": {
                  "text": "Unresolved file in a link"
                },
                "fullDescription": {
                  "text": "Reports an unresolved file in a link. Inspection ID: HtmlUnknownTarget",
                  "markdown": "Reports an unresolved file in a link.\n\nInspection ID: HtmlUnknownTarget"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HtmlUnknownTarget",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 29,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LongLine",
                "shortDescription": {
                  "text": "Line is longer than allowed by code style"
                },
                "fullDescription": {
                  "text": "Reports lines that are longer than the Hard wrap at parameter specified in Settings | Editor | Code Style | General. Inspection ID: LongLine",
                  "markdown": "Reports lines that are longer than the **Hard wrap at** parameter specified in [Settings \\| Editor \\| Code Style \\| General](settings://preferences.sourceCode?Hard%20wrap%20at).\n\nInspection ID: LongLine"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "LongLine",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 40,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlWrongRootElement",
                "shortDescription": {
                  "text": "Wrong root element"
                },
                "fullDescription": {
                  "text": "Reports a root tag name different from the name specified in the '<doctype>' tag. Inspection ID: XmlWrongRootElement",
                  "markdown": "Reports a root tag name different from the name specified in the `<doctype>` tag.\n\nInspection ID: XmlWrongRootElement"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "XmlWrongRootElement",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 88,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlUnknownAttribute",
                "shortDescription": {
                  "text": "Unknown attribute"
                },
                "fullDescription": {
                  "text": "Reports an unknown HTML attribute. Suggests configuring attributes that should not be reported. Inspection ID: HtmlUnknownAttribute",
                  "markdown": "Reports an unknown HTML attribute. Suggests configuring attributes that should not be reported.\n\nInspection ID: HtmlUnknownAttribute"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HtmlUnknownAttribute",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 29,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpRedundantEscape",
                "shortDescription": {
                  "text": "Redundant character escape"
                },
                "fullDescription": {
                  "text": "Reports redundant character escape sequences that can be replaced with unescaped characters preserving the meaning. Many escape sequences that are necessary outside of a character class are redundant inside square brackets '[]' of a character class. Although unescaped opening curly braces '{' outside of character classes are allowed in some dialects (JavaScript, Python, and so on), it can cause confusion and make the pattern less portable, because there are dialects that require escaping curly braces as characters. For this reason the inspection does not report escaped opening curly braces. Example: '\\-\\;[\\.]' After the quick-fix is applied: '-;[.]' The Ignore escaped closing brackets '}' and ']' option specifies whether to report '\\}' and '\\]' outside of a character class when they are allowed to be unescaped by the RegExp dialect. Similarly, the Ignore escaped forward-slashes '/' option specifies whether to report '\\/' when they are allowed to be unescaped by the RegExp dialect. New in 2017.3 Inspection ID: RegExpRedundantEscape",
                  "markdown": "Reports redundant character escape sequences that can be replaced with unescaped characters preserving the meaning. Many escape sequences that are necessary outside of a character class are redundant inside square brackets `[]` of a character class.\n\n\nAlthough unescaped opening curly braces `{` outside of character classes are allowed in some dialects (JavaScript, Python, and so on),\nit can cause confusion and make the pattern less portable, because there are dialects that require escaping curly braces as characters.\nFor this reason the inspection does not report escaped opening curly braces.\n\n**Example:**\n\n\n      \\-\\;[\\.]\n\nAfter the quick-fix is applied:\n\n\n      -;[.]\n\n\nThe **Ignore escaped closing brackets '}' and '\\]'** option specifies whether to report `\\}` and `\\]` outside of a character class\nwhen they are allowed to be unescaped by the RegExp dialect.\n\n\nSimilarly, the **Ignore escaped forward-slashes '/'** option specifies whether to report `\\/` when\nthey are allowed to be unescaped by the RegExp dialect.\n\nNew in 2017.3\n\nInspection ID: RegExpRedundantEscape"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RegExpRedundantEscape",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 74,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlExtraClosingTag",
                "shortDescription": {
                  "text": "Redundant closing tag"
                },
                "fullDescription": {
                  "text": "Reports redundant closing tags on empty elements, for example, 'img' or 'br'. Example: '<html>\n    <body>\n      <br></br>\n    </body>\n  </html>' After the quick-fix is applied: '<html>\n    <body>\n      <br>\n    </body>\n  </html>' Inspection ID: HtmlExtraClosingTag",
                  "markdown": "Reports redundant closing tags on empty elements, for example, `img` or `br`.\n\n**Example:**\n\n\n      <html>\n        <body>\n          <br></br>\n        </body>\n      </html>\n\nAfter the quick-fix is applied:\n\n\n      <html>\n        <body>\n          <br>\n        </body>\n      </html>\n\nInspection ID: HtmlExtraClosingTag"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HtmlExtraClosingTag",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 29,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlUnknownTag",
                "shortDescription": {
                  "text": "Unknown tag"
                },
                "fullDescription": {
                  "text": "Reports an unknown HTML tag. Suggests configuring tags that should not be reported. Inspection ID: HtmlUnknownTag",
                  "markdown": "Reports an unknown HTML tag. Suggests configuring tags that should not be reported.\n\nInspection ID: HtmlUnknownTag"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HtmlUnknownTag",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 29,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlHighlighting",
                "shortDescription": {
                  "text": "XML highlighting"
                },
                "fullDescription": {
                  "text": "Reports XML validation problems in the results of a batch code inspection. Inspection ID: XmlHighlighting",
                  "markdown": "Reports XML validation problems in the results of a batch code inspection.\n\nInspection ID: XmlHighlighting"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "XmlHighlighting",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 88,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlDuplicatedId",
                "shortDescription": {
                  "text": "Duplicate 'id' attribute"
                },
                "fullDescription": {
                  "text": "Reports a duplicate values of the 'id' attribute in XML and HTML. Inspection ID: XmlDuplicatedId",
                  "markdown": "Reports a duplicate values of the `id` attribute in XML and HTML.\n\nInspection ID: XmlDuplicatedId"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "XmlDuplicatedId",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 88,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpDuplicateCharacterInClass",
                "shortDescription": {
                  "text": "Duplicate character in character class"
                },
                "fullDescription": {
                  "text": "Reports duplicate characters inside a RegExp character class. Duplicate characters are unnecessary and can be removed without changing the semantics of the regex. Example: '[aabc]' After the quick-fix is applied: '[abc]' Inspection ID: RegExpDuplicateCharacterInClass",
                  "markdown": "Reports duplicate characters inside a RegExp character class. Duplicate characters are unnecessary and can be removed without changing the semantics of the regex.\n\n**Example:**\n\n\n      [aabc]\n\nAfter the quick-fix is applied:\n\n\n      [abc]\n\nInspection ID: RegExpDuplicateCharacterInClass"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RegExpDuplicateCharacterInClass",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 74,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlUnboundNsPrefix",
                "shortDescription": {
                  "text": "Unbound namespace prefix"
                },
                "fullDescription": {
                  "text": "Reports an unbound namespace prefix in XML. Inspection ID: XmlUnboundNsPrefix",
                  "markdown": "Reports an unbound namespace prefix in XML.\n\nInspection ID: XmlUnboundNsPrefix"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "XmlUnboundNsPrefix",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 88,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RequiredAttributes",
                "shortDescription": {
                  "text": "Missing required attribute"
                },
                "fullDescription": {
                  "text": "Reports a missing mandatory attribute in an XML/HTML tag. Suggests configuring attributes that should not be reported. Inspection ID: RequiredAttributes",
                  "markdown": "Reports a missing mandatory attribute in an XML/HTML tag. Suggests configuring attributes that should not be reported.\n\nInspection ID: RequiredAttributes"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RequiredAttributes",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 29,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpRedundantClassElement",
                "shortDescription": {
                  "text": "Redundant '\\d', '[:digit:]', or '\\D' class elements"
                },
                "fullDescription": {
                  "text": "Reports redundant '\\d' or '[:digit:]' that are used in one class with '\\w' or '[:word:]' ('\\D' with '\\W') and can be removed. Example: '[\\w\\d]' After the quick-fix is applied: '[\\w]' New in 2022.2 Inspection ID: RegExpRedundantClassElement",
                  "markdown": "Reports redundant `\\d` or `[:digit:]` that are used in one class with `\\w` or `[:word:]` (`\\D` with `\\W`) and can be removed.\n\n**Example:**\n\n\n      [\\w\\d]\n\nAfter the quick-fix is applied:\n\n\n      [\\w]\n\nNew in 2022.2\n\nInspection ID: RegExpRedundantClassElement"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "RegExpRedundantClassElement",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 74,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlPathReference",
                "shortDescription": {
                  "text": "Unresolved file reference"
                },
                "fullDescription": {
                  "text": "Reports an unresolved file reference in XML. Inspection ID: XmlPathReference",
                  "markdown": "Reports an unresolved file reference in XML.\n\nInspection ID: XmlPathReference"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "XmlPathReference",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 88,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlWrongAttributeValue",
                "shortDescription": {
                  "text": "Wrong attribute value"
                },
                "fullDescription": {
                  "text": "Reports an incorrect HTML attribute value. Inspection ID: HtmlWrongAttributeValue",
                  "markdown": "Reports an incorrect HTML attribute value.\n\nInspection ID: HtmlWrongAttributeValue"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HtmlWrongAttributeValue",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 29,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LossyEncoding",
                "shortDescription": {
                  "text": "Lossy encoding"
                },
                "fullDescription": {
                  "text": "Reports characters that cannot be displayed because of the current document encoding. Examples: If you type international characters in a document with the US-ASCII charset, some characters will be lost on save. If you load a UTF-8-encoded file using the ISO-8859-1 one-byte charset, some characters will be displayed incorrectly. You can fix this by changing the file encoding either by specifying the encoding directly in the file, e.g. by editing 'encoding=' attribute in the XML prolog of XML file, or by changing the corresponding options in Settings | Editor | File Encodings. Inspection ID: LossyEncoding",
                  "markdown": "Reports characters that cannot be displayed because of the current document encoding.\n\nExamples:\n\n* If you type international characters in a document with the **US-ASCII** charset, some characters will be lost on save.\n* If you load a **UTF-8** -encoded file using the **ISO-8859-1** one-byte charset, some characters will be displayed incorrectly.\n\nYou can fix this by changing the file encoding\neither by specifying the encoding directly in the file, e.g. by editing `encoding=` attribute in the XML prolog of XML file,\nor by changing the corresponding options in **Settings \\| Editor \\| File Encodings**.\n\nInspection ID: LossyEncoding"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "LossyEncoding",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Internationalization",
                      "index": 125,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckValidXmlInScriptTagBody",
                "shortDescription": {
                  "text": "Malformed content of 'script' tag"
                },
                "fullDescription": {
                  "text": "Reports contents of 'script' tags that are invalid XML. Example: '<script type=\"text/javascript\">\n    console.log('<');\n  </script>' After the quick-fix is applied: '<script type=\"text/javascript\">\n    console.log('&lt;');\n  </script>' Inspection ID: CheckValidXmlInScriptTagBody",
                  "markdown": "Reports contents of `script` tags that are invalid XML.  \n\n**Example:**\n\n\n      <script type=\"text/javascript\">\n        console.log('<');\n      </script>\n\nAfter the quick-fix is applied:\n\n\n      <script type=\"text/javascript\">\n        console.log('&lt;');\n      </script>\n\nInspection ID: CheckValidXmlInScriptTagBody"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CheckValidXmlInScriptTagBody",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 29,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlUnknownAnchorTarget",
                "shortDescription": {
                  "text": "Unresolved fragment in a link"
                },
                "fullDescription": {
                  "text": "Reports an unresolved last part of an URL after the '#' sign. Inspection ID: HtmlUnknownAnchorTarget",
                  "markdown": "Reports an unresolved last part of an URL after the `#` sign.\n\nInspection ID: HtmlUnknownAnchorTarget"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HtmlUnknownAnchorTarget",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 29,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Annotator",
                "shortDescription": {
                  "text": "Annotator"
                },
                "fullDescription": {
                  "text": "Reports issues essential to this file (e.g., syntax errors) in the result of a batch code inspection run. These issues are usually always highlighted in the editor and can't be configured, unlike inspections. These options control the scope of checks performed by this inspection: Option \"Report syntax errors\": report parser-related issues. Option \"Report issues from language-specific annotators\": report issues found by annotators configured for the relevant language. See Custom Language Support: Annotators for details. Option \"Report other highlighting problems\": report issues specific to the language of the current file (e.g., type mismatches or unreported exceptions). See Custom Language Support: Highlighting for details. Inspection ID: Annotator",
                  "markdown": "Reports issues essential to this file (e.g., syntax errors) in the result of a batch code inspection run. These issues are usually always highlighted in the editor and can't be configured, unlike inspections. These options control the scope of checks performed by this inspection:\n\n* Option \"**Report syntax errors**\": report parser-related issues.\n* Option \"**Report issues from language-specific annotators** \": report issues found by annotators configured for the relevant language. See [Custom Language Support: Annotators](https://plugins.jetbrains.com/docs/intellij/annotator.html) for details.\n* Option \"**Report other highlighting problems** \": report issues specific to the language of the current file (e.g., type mismatches or unreported exceptions). See [Custom Language Support: Highlighting](https://plugins.jetbrains.com/docs/intellij/syntax-highlighting-and-error-highlighting.html#semantic-highlighting) for details.\n\nInspection ID: Annotator"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "Annotator",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 40,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpRedundantNestedCharacterClass",
                "shortDescription": {
                  "text": "Redundant nested character class"
                },
                "fullDescription": {
                  "text": "Reports unnecessary nested character classes. Example: '[a-c[x-z]]' After the quick-fix is applied: '[a-cx-z]' New in 2020.2 Inspection ID: RegExpRedundantNestedCharacterClass",
                  "markdown": "Reports unnecessary nested character classes.\n\n**Example:**\n\n\n      [a-c[x-z]]\n\nAfter the quick-fix is applied:\n\n\n      [a-cx-z]\n\nNew in 2020.2\n\nInspection ID: RegExpRedundantNestedCharacterClass"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RegExpRedundantNestedCharacterClass",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 74,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpOctalEscape",
                "shortDescription": {
                  "text": "Octal escape"
                },
                "fullDescription": {
                  "text": "Reports octal escapes, which are easily confused with back references. Use hexadecimal escapes to avoid confusion. Example: '\\07' After the quick-fix is applied: '\\x07' New in 2017.1 Inspection ID: RegExpOctalEscape",
                  "markdown": "Reports octal escapes, which are easily confused with back references. Use hexadecimal escapes to avoid confusion.\n\n**Example:**\n\n\n      \\07\n\nAfter the quick-fix is applied:\n\n\n      \\x07\n\nNew in 2017.1\n\nInspection ID: RegExpOctalEscape"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "RegExpOctalEscape",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 74,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedDefine",
                "shortDescription": {
                  "text": "Unused define"
                },
                "fullDescription": {
                  "text": "Reports an unused named pattern ('define') in a RELAX-NG file (XML or Compact Syntax). 'define' elements that are used through an include in another file are ignored. Inspection ID: UnusedDefine",
                  "markdown": "Reports an unused named pattern (`define`) in a RELAX-NG file (XML or Compact Syntax). `define` elements that are used through an include in another file are ignored.\n\nInspection ID: UnusedDefine"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnusedDefine",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RELAX NG",
                      "index": 143,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpDuplicateAlternationBranch",
                "shortDescription": {
                  "text": "Duplicate branch in alternation"
                },
                "fullDescription": {
                  "text": "Reports duplicate branches in a RegExp alternation. Duplicate branches slow down matching and obscure the intent of the expression. Example: '(alpha|bravo|charlie|alpha)' After the quick-fix is applied: '(alpha|bravo|charlie)' New in 2017.1 Inspection ID: RegExpDuplicateAlternationBranch",
                  "markdown": "Reports duplicate branches in a RegExp alternation. Duplicate branches slow down matching and obscure the intent of the expression.\n\n**Example:**\n\n\n      (alpha|bravo|charlie|alpha)\n\nAfter the quick-fix is applied:\n\n\n      (alpha|bravo|charlie)\n\nNew in 2017.1\n\nInspection ID: RegExpDuplicateAlternationBranch"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RegExpDuplicateAlternationBranch",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 74,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "JavaScript",
            "version": "253.22441.33",
            "rules": [
              {
                "id": "JSUnusedAssignment",
                "shortDescription": {
                  "text": "Unused assignment"
                },
                "fullDescription": {
                  "text": "Reports a variable whose value is never used after assignment. Suggests removing the unused variable to shorten the code and to avoid redundant allocations. The following cases are reported: A variable is never read after assignment. The value of a variable is always overwritten with another assignment before the variable is read next time. The initializer of a variable is redundant (for one of the above-mentioned reasons). Inspection ID: JSUnusedAssignment",
                  "markdown": "Reports a variable whose value is never used after assignment.  \nSuggests removing the unused variable to shorten the code and to avoid redundant allocations.\n\nThe following cases are reported:\n\n* A variable is never read after assignment.\n* The value of a variable is always overwritten with another assignment before the variable is read next time.\n* The initializer of a variable is redundant (for one of the above-mentioned reasons).\n\nInspection ID: JSUnusedAssignment"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSUnusedAssignment",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Performance"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Unused symbols",
                      "index": 30,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ShiftOutOfRangeJS",
                "shortDescription": {
                  "text": "Shift operation by possibly wrong constant"
                },
                "fullDescription": {
                  "text": "Reports a shift operation where the second operand is a constant outside the reasonable range, for example, an integer shift operation outside the range '0..31', shifting by negative or overly large values. Inspection ID: ShiftOutOfRangeJS",
                  "markdown": "Reports a shift operation where the second operand is a constant outside the reasonable range, for example, an integer shift operation outside the range `0..31`, shifting by negative or overly large values.\n\nInspection ID: ShiftOutOfRangeJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ShiftOutOfRangeJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Performance"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Bitwise operation issues",
                      "index": 34,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSClosureCompilerSyntax",
                "shortDescription": {
                  "text": "Incorrect usage of JSDoc tags"
                },
                "fullDescription": {
                  "text": "Reports warnings implied by Google Closure Compiler annotations including correct use of '@abstract', '@interface', and '@implements' tags. Inspection ID: JSClosureCompilerSyntax",
                  "markdown": "Reports warnings implied by *Google Closure Compiler* annotations including correct use of `@abstract`, `@interface`, and `@implements` tags.\n\nInspection ID: JSClosureCompilerSyntax"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSClosureCompilerSyntax",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 35,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BadExpressionStatementJS",
                "shortDescription": {
                  "text": "Expression statement which is not assignment or call"
                },
                "fullDescription": {
                  "text": "Reports an expression statement that is neither an assignment nor a call. Such statements usually indicate an error. Inspection ID: BadExpressionStatementJS",
                  "markdown": "Reports an expression statement that is neither an assignment nor a call. Such statements usually indicate an error.\n\nInspection ID: BadExpressionStatementJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "BadExpressionStatementJS",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Validity issues",
                      "index": 45,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConfusingFloatingPointLiteralJS",
                "shortDescription": {
                  "text": "Confusing floating point literal"
                },
                "fullDescription": {
                  "text": "Reports any floating point number that does not have a decimal point, or any numbers before the decimal point, or and numbers after the decimal point. Such literals may be confusing, and violate several coding standards. Inspection ID: ConfusingFloatingPointLiteralJS",
                  "markdown": "Reports any floating point number that does not have a decimal point, or any numbers before the decimal point, or and numbers after the decimal point. Such literals may be confusing, and violate several coding standards.\n\nInspection ID: ConfusingFloatingPointLiteralJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ConfusingFloatingPointLiteralJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 47,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ContinueOrBreakFromFinallyBlockJS",
                "shortDescription": {
                  "text": "'continue' or 'break' inside 'finally' block"
                },
                "fullDescription": {
                  "text": "Reports a 'break' or 'continue' statement inside a 'finally' block. Such statements are very confusing, may hide exceptions, and complicate debugging. Inspection ID: ContinueOrBreakFromFinallyBlockJS",
                  "markdown": "Reports a `break` or `continue` statement inside a `finally` block. Such statements are very confusing, may hide exceptions, and complicate debugging.\n\nInspection ID: ContinueOrBreakFromFinallyBlockJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ContinueOrBreakFromFinallyBlockJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Try statement issues",
                      "index": 50,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSMethodCanBeStatic",
                "shortDescription": {
                  "text": "Method can be made 'static'"
                },
                "fullDescription": {
                  "text": "Reports a class method that can be safely made 'static'. A method can be 'static' if it does not reference any of its class' non-static methods and non-static fields and is not overridden in a subclass. Use the first checkbox below to inspect only 'private' methods. Inspection ID: JSMethodCanBeStatic",
                  "markdown": "Reports a class method that can be safely made `static`. A method can be `static` if it does not reference any of its class' non-static methods and non-static fields and is not overridden in a subclass.\n\n\nUse the first checkbox below to inspect only `private` methods.\n\nInspection ID: JSMethodCanBeStatic"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSMethodCanBeStatic",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Performance"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 35,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ContinueStatementJS",
                "shortDescription": {
                  "text": "'continue' statement"
                },
                "fullDescription": {
                  "text": "Reports a 'continue' statement. Inspection ID: ContinueStatementJS",
                  "markdown": "Reports a `continue` statement.\n\nInspection ID: ContinueStatementJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ContinueStatementJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 55,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUndeclaredVariable",
                "shortDescription": {
                  "text": "Implicitly declared global JavaScript variable"
                },
                "fullDescription": {
                  "text": "Reports an implicit declaration of a global variable. Example: 'var aaa = 1; // good\n  bbb = 2; // bad, if bbb is not declared with 'var' somewhere' Inspection ID: JSUndeclaredVariable",
                  "markdown": "Reports an implicit declaration of a global variable.\n\nExample:\n\n\n      var aaa = 1; // good\n      bbb = 2; // bad, if bbb is not declared with 'var' somewhere\n\nInspection ID: JSUndeclaredVariable"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSUndeclaredVariable",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 35,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SillyAssignmentJS",
                "shortDescription": {
                  "text": "Variable is assigned to itself"
                },
                "fullDescription": {
                  "text": "Reports an assignment in the form 'x = x'. Inspection ID: SillyAssignmentJS",
                  "markdown": "Reports an assignment in the form `x = x`.\n\nInspection ID: SillyAssignmentJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SillyAssignmentJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Assignment issues",
                      "index": 71,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptCheckImport",
                "shortDescription": {
                  "text": "Unresolved imported name"
                },
                "fullDescription": {
                  "text": "Reports an unresolved name or binding in an 'import' declaration in TypeScript code. Inspection ID: TypeScriptCheckImport",
                  "markdown": "Reports an unresolved name or binding in an `import` declaration in TypeScript code.\n\nInspection ID: TypeScriptCheckImport"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "TypeScriptCheckImport",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 78,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSXSyntaxUsed",
                "shortDescription": {
                  "text": "JSX syntax used"
                },
                "fullDescription": {
                  "text": "Reports a usage of a JSX tag in JavaScript code. Inspection ID: JSXSyntaxUsed",
                  "markdown": "Reports a usage of a JSX tag in JavaScript code.\n\nInspection ID: JSXSyntaxUsed"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "JSXSyntaxUsed",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 35,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSJoinVariableDeclarationAndAssignment",
                "shortDescription": {
                  "text": "Variable declaration can be merged with the first assignment to the variable"
                },
                "fullDescription": {
                  "text": "Reports a variable that is declared without an initializer and is used much further in the code or in a single nested scope. Suggests moving the variable closer to its usages and joining it with the initializer expression. Inspection ID: JSJoinVariableDeclarationAndAssignment",
                  "markdown": "Reports a variable that is declared without an initializer and is used much further in the code or in a single nested scope. Suggests moving the variable closer to its usages and joining it with the initializer expression.\n\nInspection ID: JSJoinVariableDeclarationAndAssignment"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSJoinVariableDeclarationAndAssignment",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 35,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6ConvertModuleExportToExport",
                "shortDescription": {
                  "text": "'module.exports' is used instead of 'export'"
                },
                "fullDescription": {
                  "text": "Reports a 'module.export' statement. Suggests replacing it with an 'export' or 'export default' statement. Please note that the quick-fix for converting 'module.export' into 'export' is not available for 'module.export' inside functions or statements because 'export' statements can only be at the top level of a module. Inspection ID: ES6ConvertModuleExportToExport",
                  "markdown": "Reports a `module.export` statement. Suggests replacing it with an `export` or `export default` statement.   \n\nPlease note that the quick-fix for converting `module.export` into `export` is not available for `module.export` inside functions or statements because `export` statements can only be at the top level of a module.\n\nInspection ID: ES6ConvertModuleExportToExport"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ES6ConvertModuleExportToExport",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/ES2015 migration aids",
                      "index": 82,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DocumentWriteJS",
                "shortDescription": {
                  "text": "Call to 'document.write()'"
                },
                "fullDescription": {
                  "text": "Reports a method call to 'document.write()' or 'document.writeln()'. Most usages of such calls are performed better with explicit DOM calls, such as 'getElementByID()' and 'createElement()'. Additionally, the 'write()' and 'writeln()' calls will not work with XML DOMs, including DOMs for XHTML if viewed as XML. This can result in difficulty to point out bugs. Inspection ID: DocumentWriteJS",
                  "markdown": "Reports a method call to `document.write()` or `document.writeln()`. Most usages of such calls are performed better with explicit DOM calls, such as `getElementByID()` and `createElement()`. Additionally, the `write()` and `writeln()` calls will not work with XML DOMs, including DOMs for XHTML if viewed as XML. This can result in difficulty to point out bugs.\n\nInspection ID: DocumentWriteJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "DocumentWriteJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Performance"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/DOM issues",
                      "index": 84,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InfiniteRecursionJS",
                "shortDescription": {
                  "text": "Infinite recursion"
                },
                "fullDescription": {
                  "text": "Reports a function which must either recurse infinitely or throw an exception. Such functions may not return normally. Inspection ID: InfiniteRecursionJS",
                  "markdown": "Reports a function which must either recurse infinitely or throw an exception. Such functions may not return normally.\n\nInspection ID: InfiniteRecursionJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "InfiniteRecursionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 86,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IncompatibleMaskJS",
                "shortDescription": {
                  "text": "Incompatible bitwise mask operation"
                },
                "fullDescription": {
                  "text": "Reports a bitwise mask expression which for sure evaluates to 'true' or 'false'. Expressions are of the form '(var & constant1) == constant2' or '(var | constant1) == constant2', where 'constant1' and 'constant2' are incompatible bitmask constants. Example: '// Incompatible mask: as the last byte in mask is zero,\n// something like 0x1200 would be possible, but not 0x1234\nif ((mask & 0xFF00) == 0x1234) {...}' Inspection ID: IncompatibleMaskJS",
                  "markdown": "Reports a bitwise mask expression which for sure evaluates to `true` or `false`. Expressions are of the form `(var & constant1) == constant2` or `(var | constant1) == constant2`, where `constant1` and `constant2` are incompatible bitmask constants.\n\nExample:\n\n\n    // Incompatible mask: as the last byte in mask is zero,\n    // something like 0x1200 would be possible, but not 0x1234\n    if ((mask & 0xFF00) == 0x1234) {...}\n\nInspection ID: IncompatibleMaskJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "IncompatibleBitwiseMaskOperation",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Bitwise operation issues",
                      "index": 34,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSDuplicatedDeclaration",
                "shortDescription": {
                  "text": "Duplicate declaration"
                },
                "fullDescription": {
                  "text": "Reports multiple declarations in a scope. Inspection ID: JSDuplicatedDeclaration",
                  "markdown": "Reports multiple declarations in a scope.\n\nInspection ID: JSDuplicatedDeclaration"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSDuplicatedDeclaration",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 35,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptValidateGenericTypes",
                "shortDescription": {
                  "text": "Incorrect generic type argument"
                },
                "fullDescription": {
                  "text": "Reports an invalid type argument in a function, interface, or class declaration. Inspection ID: TypeScriptValidateGenericTypes",
                  "markdown": "Reports an invalid type argument in a function, interface, or class declaration.\n\nInspection ID: TypeScriptValidateGenericTypes"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "TypeScriptValidateGenericTypes",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 78,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSMismatchedCollectionQueryUpdate",
                "shortDescription": {
                  "text": "Mismatched query and update of collection"
                },
                "fullDescription": {
                  "text": "Reports a collection of fields or variables whose contents are either queried and not updated or updated and not queried. Such mismatched queries and updates are pointless and may indicate either dead code or a typographical error. Query methods are automatically detected, based on whether they return something, or a callback is passed to them. Use the table below to specify which methods are update methods. Inspection ID: JSMismatchedCollectionQueryUpdate",
                  "markdown": "Reports a collection of fields or variables whose contents are either queried and not updated or updated and not queried. Such mismatched queries and updates are pointless and may indicate either dead code or a typographical error.\n\n\nQuery methods are automatically detected, based on whether they return something, or a callback is passed to them.\nUse the table below to specify which methods are update methods.\n\nInspection ID: JSMismatchedCollectionQueryUpdate"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSMismatchedCollectionQueryUpdate",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 35,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6PreferShortImport",
                "shortDescription": {
                  "text": "Import can be shortened"
                },
                "fullDescription": {
                  "text": "Reports an ES6 import whose 'from' part can be shortened. Suggests importing the parent directory. Inspection ID: ES6PreferShortImport",
                  "markdown": "Reports an ES6 import whose `from` part can be shortened. Suggests importing the parent directory.\n\nInspection ID: ES6PreferShortImport"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ES6PreferShortImport",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 35,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PointlessBitwiseExpressionJS",
                "shortDescription": {
                  "text": "Bitwise expression can be simplified"
                },
                "fullDescription": {
                  "text": "Reports an expression that includes 'and' with zero, 'or' by zero, or shifting by zero. Such expressions may result from not fully completed automated refactorings. Inspection ID: PointlessBitwiseExpressionJS",
                  "markdown": "Reports an expression that includes `and` with zero, `or` by zero, or shifting by zero. Such expressions may result from not fully completed automated refactorings.\n\nInspection ID: PointlessBitwiseExpressionJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PointlessBitwiseExpressionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Bitwise operation issues",
                      "index": 34,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSStringConcatenationToES6Template",
                "shortDescription": {
                  "text": "String concatenation is used instead of template literal"
                },
                "fullDescription": {
                  "text": "Reports a string concatenation. Suggests replacing it with a template literal Example '\"result: \" + a + \".\"' After applying the quick-fix the code looks as follows: '`result: ${a}.`' Inspection ID: JSStringConcatenationToES6Template",
                  "markdown": "Reports a string concatenation. Suggests replacing it with a [template literal](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals)\n\nExample\n\n     \"result: \" + a + \".\" \n\nAfter applying the quick-fix the code looks as follows:\n\n     `result: ${a}.` \n\nInspection ID: JSStringConcatenationToES6Template"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSStringConcatenationToES6Template",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/ES2015 migration aids",
                      "index": 82,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceAssignmentWithOperatorAssignmentJS",
                "shortDescription": {
                  "text": "Assignment could be replaced with operator assignment"
                },
                "fullDescription": {
                  "text": "Reports an assignment operation that can be replaced by an operator assignment to make your code shorter and probably clearer. Example: 'x = x + 3;'\n  'x = x / 3;'\n After the quick fix is applied the result looks like:   'x += 3;'\n  'x /= 3;'\n Inspection ID: ReplaceAssignmentWithOperatorAssignmentJS",
                  "markdown": "Reports an assignment operation that can be replaced by an operator assignment to make your code shorter and probably clearer.\n\n\nExample:\n\n      x = x + 3;\n      x = x / 3;\n\nAfter the quick fix is applied the result looks like:\n\n      x += 3;\n      x /= 3;\n\nInspection ID: ReplaceAssignmentWithOperatorAssignmentJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AssignmentReplaceableWithOperatorAssignmentJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Assignment issues",
                      "index": 71,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSFileReferences",
                "shortDescription": {
                  "text": "Unresolved file reference"
                },
                "fullDescription": {
                  "text": "Reports an unresolved file reference in a JavaScript file, including CommonJS and AMD modules references. Inspection ID: JSFileReferences",
                  "markdown": "Reports an unresolved file reference in a JavaScript file, including CommonJS and AMD modules references.\n\nInspection ID: JSFileReferences"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSFileReferences",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 35,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FunctionWithInconsistentReturnsJS",
                "shortDescription": {
                  "text": "Function with inconsistent returns"
                },
                "fullDescription": {
                  "text": "Reports a function that returns a value in some cases while in other cases no value is returned. This usually indicates an error. Example: 'function foo() {\n  if (true)\n    return 3;\n  return;\n}'\n Inspection ID: FunctionWithInconsistentReturnsJS",
                  "markdown": "Reports a function that returns a value in some cases while in other cases no value is returned. This usually indicates an error.\n\nExample:\n\n\n    function foo() {\n      if (true)\n        return 3;\n      return;\n    }\n\nInspection ID: FunctionWithInconsistentReturnsJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "FunctionWithInconsistentReturnsJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Validity issues",
                      "index": 45,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6ClassMemberInitializationOrder",
                "shortDescription": {
                  "text": "Use of possibly unassigned property in a static initializer"
                },
                "fullDescription": {
                  "text": "Reports a class member initializer which references another non-hoisted class member while the latter may be not initialized yet. Initialization of class members happens consequently for fields, so a field cannot reference another field that is declared later. Inspection ID: ES6ClassMemberInitializationOrder",
                  "markdown": "Reports a class member initializer which references another non-hoisted class member while the latter may be not initialized yet.   \n\nInitialization of class members happens consequently for fields, so a field cannot reference another field that is declared later.\n\nInspection ID: ES6ClassMemberInitializationOrder"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ES6ClassMemberInitializationOrder",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 35,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NestedFunctionJS",
                "shortDescription": {
                  "text": "Nested function"
                },
                "fullDescription": {
                  "text": "Reports a function nested inside another function. Although JavaScript allows functions to be nested, such constructs may be confusing. Use the checkbox below to ignore anonymous nested functions. Inspection ID: NestedFunctionJS",
                  "markdown": "Reports a function nested inside another function. Although JavaScript allows functions to be nested, such constructs may be confusing.\n\n\nUse the checkbox below to ignore anonymous nested functions.\n\nInspection ID: NestedFunctionJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NestedFunctionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 47,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6DestructuringVariablesMerge",
                "shortDescription": {
                  "text": "Destructuring properties with the same key"
                },
                "fullDescription": {
                  "text": "Reports multiple destructuring properties with identical keys. Suggests merging the properties. Inspection ID: ES6DestructuringVariablesMerge",
                  "markdown": "Reports multiple destructuring properties with identical keys. Suggests merging the properties.\n\nInspection ID: ES6DestructuringVariablesMerge"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ES6DestructuringVariablesMerge",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 35,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptRedundantGenericType",
                "shortDescription": {
                  "text": "Redundant type arguments"
                },
                "fullDescription": {
                  "text": "Reports a type argument that is equal to the default one and can be removed. Example: 'type Foo<T=number> = T;\nlet z: Foo<number>;' Inspection ID: TypeScriptRedundantGenericType",
                  "markdown": "Reports a type argument that is equal to the default one and can be removed.\n\n\nExample:\n\n\n    type Foo<T=number> = T;\n    let z: Foo<number>;\n\nInspection ID: TypeScriptRedundantGenericType"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "TypeScriptRedundantGenericType",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 78,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptUMDGlobal",
                "shortDescription": {
                  "text": "Referenced UMD global variable"
                },
                "fullDescription": {
                  "text": "Reports a usage of a Universal Module Definition (UMD) global variable if the current file is a module (ECMAScript or CommonJS). Referencing UMD variables without explicit imports can lead to a runtime error if the library isn't included implicitly. Inspection ID: TypeScriptUMDGlobal",
                  "markdown": "Reports a usage of a Universal Module Definition (UMD) global variable if the current file is a module (ECMAScript or CommonJS). Referencing UMD variables without explicit imports can lead to a runtime error if the library isn't included implicitly.\n\nInspection ID: TypeScriptUMDGlobal"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "TypeScriptUMDGlobal",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 78,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryReturnJS",
                "shortDescription": {
                  "text": "Unnecessary 'return' statement"
                },
                "fullDescription": {
                  "text": "Reports an unnecessary 'return' statement, that is, a 'return' statement that returns no value and occurs just before the function would have \"fallen through\" the bottom. These statements may be safely removed. Inspection ID: UnnecessaryReturnJS",
                  "markdown": "Reports an unnecessary `return` statement, that is, a `return` statement that returns no value and occurs just before the function would have \"fallen through\" the bottom. These statements may be safely removed.\n\nInspection ID: UnnecessaryReturnJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnnecessaryReturnStatementJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 101,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSLastCommaInObjectLiteral",
                "shortDescription": {
                  "text": "Unneeded last comma in object literal"
                },
                "fullDescription": {
                  "text": "Reports usages of a trailing comma in object literals. The warning is reported only when the JavaScript language version is set to ECMAScript 5.1. Trailing commas in object literals are allowed by the specification, however, some browsers might throw an error when a trailing comma is used. You can configure formatting options for trailing commas in Code Style | JavaScript or TypeScript | Punctuation. Inspection ID: JSLastCommaInObjectLiteral",
                  "markdown": "Reports usages of a trailing comma in object literals.\n\nThe warning is reported only when the JavaScript language version is set to ECMAScript 5.1.\n\nTrailing commas in object literals are allowed by the specification, however, some browsers might throw an error when a trailing comma is used.\n\nYou can configure formatting options for trailing commas in **Code Style** \\| **JavaScript** or **TypeScript** \\| **Punctuation**.\n\nInspection ID: JSLastCommaInObjectLiteral"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSLastCommaInObjectLiteral",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 35,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StandardJS",
                "shortDescription": {
                  "text": "Standard code style"
                },
                "fullDescription": {
                  "text": "Reports a discrepancy detected by the JavaScript Standard Style linter. The highlighting severity in the editor is based on the severity level the linter reports. Inspection ID: StandardJS",
                  "markdown": "Reports a discrepancy detected by the [JavaScript Standard Style](https://standardjs.com/) linter.   \n\nThe highlighting severity in the editor is based on the severity level the linter reports.\n\nInspection ID: StandardJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "StandardJS",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code quality tools",
                      "index": 105,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NestedAssignmentJS",
                "shortDescription": {
                  "text": "Nested assignment"
                },
                "fullDescription": {
                  "text": "Reports an assignment expression nested inside another expression, for example, 'a = b = 1'. Such expressions may be confusing and violate the general design principle that a given construct should do precisely one thing. Inspection ID: NestedAssignmentJS",
                  "markdown": "Reports an assignment expression nested inside another expression, for example, `a = b = 1`. Such expressions may be confusing and violate the general design principle that a given construct should do precisely one thing.\n\nInspection ID: NestedAssignmentJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NestedAssignmentJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Assignment issues",
                      "index": 71,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DefaultNotLastCaseInSwitchJS",
                "shortDescription": {
                  "text": "'default' not last case in 'switch'"
                },
                "fullDescription": {
                  "text": "Reports a 'switch' statement where the 'default' case comes before another case instead of being the very last case, which may cause confusion. Inspection ID: DefaultNotLastCaseInSwitchJS",
                  "markdown": "Reports a `switch` statement where the `default` case comes before another case instead of being the very last case, which may cause confusion.\n\nInspection ID: DefaultNotLastCaseInSwitchJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "DefaultNotLastCaseInSwitchJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Switch statement issues",
                      "index": 110,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EmptyFinallyBlockJS",
                "shortDescription": {
                  "text": "Empty 'finally' block"
                },
                "fullDescription": {
                  "text": "Reports an empty 'finally' block, which usually indicates an error. Inspection ID: EmptyFinallyBlockJS",
                  "markdown": "Reports an empty `finally` block, which usually indicates an error.\n\nInspection ID: EmptyFinallyBlockJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EmptyFinallyBlockJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Try statement issues",
                      "index": 50,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSCommentMatchesSignature",
                "shortDescription": {
                  "text": "Mismatched JSDoc and function signature"
                },
                "fullDescription": {
                  "text": "Reports mismatch between the names and the number of parameters within a JSDoc comment and the actual parameters of a function. Suggests updating parameters in JSDoc comment. Example: '/**\n * @param height Height in pixels\n */\nfunction sq(height, width) {} // width is not documented' After the quick-fix is applied: '/**\n * @param height Height in pixels\n * @param width\n */\nfunction sq(height, width) {}' Inspection ID: JSCommentMatchesSignature",
                  "markdown": "Reports mismatch between the names and the number of parameters within a JSDoc comment and the actual parameters of a function. Suggests updating parameters in JSDoc comment.\n\n**Example:**\n\n\n    /**\n     * @param height Height in pixels\n     */\n    function sq(height, width) {} // width is not documented\n\nAfter the quick-fix is applied:\n\n\n    /**\n     * @param height Height in pixels\n     * @param width\n     */\n    function sq(height, width) {}\n\nInspection ID: JSCommentMatchesSignature"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSCommentMatchesSignature",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 35,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ForLoopThatDoesntUseLoopVariableJS",
                "shortDescription": {
                  "text": "'for' loop where update or condition does not use loop variable"
                },
                "fullDescription": {
                  "text": "Reports a 'for' loop where the condition or update does not use the 'for' loop variable. Inspection ID: ForLoopThatDoesntUseLoopVariableJS",
                  "markdown": "Reports a `for` loop where the condition or update does not use the `for` loop variable.\n\nInspection ID: ForLoopThatDoesntUseLoopVariableJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ForLoopThatDoesntUseLoopVariableJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 86,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptAbstractClassConstructorCanBeMadeProtected",
                "shortDescription": {
                  "text": "Abstract class constructor can be made protected"
                },
                "fullDescription": {
                  "text": "Reports a public constructor of an abstract class and suggests making it protected (because it is useless to have it public). Inspection ID: TypeScriptAbstractClassConstructorCanBeMadeProtected",
                  "markdown": "Reports a public constructor of an abstract class and suggests making it protected (because it is useless to have it public).\n\nInspection ID: TypeScriptAbstractClassConstructorCanBeMadeProtected"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "TypeScriptAbstractClassConstructorCanBeMadeProtected",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 78,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FunctionWithMultipleReturnPointsJS",
                "shortDescription": {
                  "text": "Function with multiple return points"
                },
                "fullDescription": {
                  "text": "Reports a function with multiple return points. Such functions are hard to understand and maintain. Inspection ID: FunctionWithMultipleReturnPointsJS",
                  "markdown": "Reports a function with multiple return points. Such functions are hard to understand and maintain.\n\nInspection ID: FunctionWithMultipleReturnPointsJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "FunctionWithMultipleReturnPointsJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Function metrics",
                      "index": 115,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ThreeNegationsPerFunctionJS",
                "shortDescription": {
                  "text": "Function with more than three negations"
                },
                "fullDescription": {
                  "text": "Reports a function with three or more negation operations ('!' or '!='). Such functions may be unnecessarily confusing. Inspection ID: ThreeNegationsPerFunctionJS",
                  "markdown": "Reports a function with three or more negation operations (`!` or `!=`). Such functions may be unnecessarily confusing.\n\nInspection ID: ThreeNegationsPerFunctionJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "FunctionWithMoreThanThreeNegationsJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Function metrics",
                      "index": 115,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSRemoveUnnecessaryParentheses",
                "shortDescription": {
                  "text": "Unnecessary parentheses"
                },
                "fullDescription": {
                  "text": "Reports redundant parentheses. In expressions: 'var x = ((1) + 2) + 3' In arrow function argument lists: 'var incrementer = (x) => x + 1' In TypeScript and Flow type declarations: 'type Card = (Suit & Rank) | (Suit & Number)' Inspection ID: JSRemoveUnnecessaryParentheses",
                  "markdown": "Reports redundant parentheses.\n\nIn expressions:\n\n    var x = ((1) + 2) + 3\n\nIn arrow function argument lists:\n\n    var incrementer = (x) => x + 1\n\nIn TypeScript and Flow type declarations:\n\n    type Card = (Suit & Rank) | (Suit & Number)\n\nInspection ID: JSRemoveUnnecessaryParentheses"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSRemoveUnnecessaryParentheses",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 117,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TrivialIfJS",
                "shortDescription": {
                  "text": "Redundant 'if' statement"
                },
                "fullDescription": {
                  "text": "Reports an 'if' statement that can be simplified to a single assignment or a 'return' statement. Example: 'if(foo())\n {\n  return true;\n }\n else\n {\n   return false;\n }' After applying the quick-fix the code looks as follows:  'return foo();'\n Inspection ID: TrivialIfJS",
                  "markdown": "Reports an `if` statement that can be simplified to a single assignment or a `return` statement.\n\nExample:\n\n\n    if(foo())\n     {\n      return true;\n     }\n     else\n     {\n       return false;\n     }\n\nAfter applying the quick-fix the code looks as follows:\n\n     return foo();\n\nInspection ID: TrivialIfJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RedundantIfStatementJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 101,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CommaExpressionJS",
                "shortDescription": {
                  "text": "Comma expression"
                },
                "fullDescription": {
                  "text": "Reports a comma expression. Such expressions are often a sign of overly clever code, and may lead to subtle bugs. Comma expressions in the initializer or in the update section of 'for' loops are ignored. Inspection ID: CommaExpressionJS",
                  "markdown": "Reports a comma expression. Such expressions are often a sign of overly clever code, and may lead to subtle bugs. Comma expressions in the initializer or in the update section of `for` loops are ignored.\n\nInspection ID: CommaExpressionJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CommaExpressionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 55,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6BindWithArrowFunction",
                "shortDescription": {
                  "text": "Suspicious usage of 'bind' with arrow function"
                },
                "fullDescription": {
                  "text": "Reports 'bind' used together with an arrow function. Because arrow functions use lexical 'this', a 'bind' call will have no effect on them. See here for details. Inspection ID: ES6BindWithArrowFunction",
                  "markdown": "Reports `bind` used together with an arrow function.  \nBecause arrow functions use lexical `this`, a `bind` call will have no effect on them.  \nSee [here](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions#Lexical_this) for details.\n\nInspection ID: ES6BindWithArrowFunction"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ES6BindWithArrowFunction",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 86,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSBitwiseOperatorUsage",
                "shortDescription": {
                  "text": "Bitwise operator usage"
                },
                "fullDescription": {
                  "text": "Reports a suspicious usage of a bitwise AND (\"'&'\") or OR (\"'|'\") operator. Usually it is a typo and the result of applying boolean operations AND (\"'&&'\") and OR (\"'||'\") is expected. Inspection ID: JSBitwiseOperatorUsage",
                  "markdown": "Reports a suspicious usage of a bitwise AND (\"`&`\") or OR (\"`|`\") operator. Usually it is a typo and the result of applying boolean operations AND (\"`&&`\") and OR (\"`||`\") is expected.\n\nInspection ID: JSBitwiseOperatorUsage"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSBitwiseOperatorUsage",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Bitwise operation issues",
                      "index": 34,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnterminatedStatementJS",
                "shortDescription": {
                  "text": "Unterminated statement"
                },
                "fullDescription": {
                  "text": "Reports a statement without a semicolon or a newline at the end. Select the 'Terminate statements with semicolons' option in Editor | Code Style | JavaScript or TypeScript - Punctuation to report any statement that doesn't end with a semicolon, even if a newline is used. According to some coding styles, semicolons are preferred to line-breaks for consistency with the other languages. Inspection ID: UnterminatedStatementJS",
                  "markdown": "Reports a statement without a semicolon or a newline at the end.\n\nSelect the 'Terminate statements with semicolons' option in *Editor \\| Code Style \\| JavaScript or TypeScript - Punctuation* to report any statement that doesn't end with a semicolon, even if a newline is used.\nAccording to some coding styles, semicolons are preferred to line-breaks for consistency with the other languages.\n\nInspection ID: UnterminatedStatementJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnterminatedStatementJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 117,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IfStatementWithIdenticalBranchesJS",
                "shortDescription": {
                  "text": "'if' statement with identical branches"
                },
                "fullDescription": {
                  "text": "Reports an 'if' statement with identical 'then' and 'else' branches. Such statements are almost certainly an error. Inspection ID: IfStatementWithIdenticalBranchesJS",
                  "markdown": "Reports an `if` statement with identical `then` and `else` branches. Such statements are almost certainly an error.\n\nInspection ID: IfStatementWithIdenticalBranchesJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "IfStatementWithIdenticalBranchesJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 101,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSConsecutiveCommasInArrayLiteral",
                "shortDescription": {
                  "text": "Consecutive commas in array literal"
                },
                "fullDescription": {
                  "text": "Reports a consecutive comma in an array literal. The skipped element accepts the 'undefined' value, but it could be done unintentionally, for example, when commas are at the end of one line and at the beginning of the next one. Inspection ID: JSConsecutiveCommasInArrayLiteral",
                  "markdown": "Reports a consecutive comma in an array literal. The skipped element accepts the `undefined` value, but it could be done unintentionally, for example, when commas are at the end of one line and at the beginning of the next one.\n\nInspection ID: JSConsecutiveCommasInArrayLiteral"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSConsecutiveCommasInArrayLiteral",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 86,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUnreachableSwitchBranches",
                "shortDescription": {
                  "text": "Unreachable 'case' branch of a 'switch' statement"
                },
                "fullDescription": {
                  "text": "Reports an unreachable 'case' branch of a 'switch' statement. Example: '/**\n * @param {('foo' | 'bar')} p\n */\nfunction foo(p) {\n    switch (p) {\n        case 'foo': break;\n        case 'bar': break;\n        case 'baz': break; // unreachable\n    }\n}' Inspection ID: JSUnreachableSwitchBranches",
                  "markdown": "Reports an unreachable `case` branch of a `switch` statement.\n\nExample:\n\n\n    /**\n     * @param {('foo' | 'bar')} p\n     */\n    function foo(p) {\n        switch (p) {\n            case 'foo': break;\n            case 'bar': break;\n            case 'baz': break; // unreachable\n        }\n    }\n\nInspection ID: JSUnreachableSwitchBranches"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSUnreachableSwitchBranches",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Switch statement issues",
                      "index": 110,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TrivialConditionalJS",
                "shortDescription": {
                  "text": "Redundant conditional expression"
                },
                "fullDescription": {
                  "text": "Reports a conditional expression of the form 'condition ? true : false\ncondition ? false : true' These expressions may be safely converted to 'condition\n!condition' Inspection ID: TrivialConditionalJS",
                  "markdown": "Reports a conditional expression of the form\n\n\n    condition ? true : false\n    condition ? false : true\n\n\nThese expressions may be safely converted to\n\n\n    condition\n    !condition\n\nInspection ID: TrivialConditionalJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RedundantConditionalExpressionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 101,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSValidateTypes",
                "shortDescription": {
                  "text": "Type mismatch"
                },
                "fullDescription": {
                  "text": "Reports incorrect type of: a parameter in a function call a return value an assigned expression TypeScript code is ignored. Inspection ID: JSValidateTypes",
                  "markdown": "Reports incorrect type of:\n\n* a parameter in a function call\n* a return value\n* an assigned expression\n\nTypeScript code is ignored.\n\nInspection ID: JSValidateTypes"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSValidateTypes",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 35,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSTestFailedLine",
                "shortDescription": {
                  "text": "Highlight failure line in test code"
                },
                "fullDescription": {
                  "text": "Reports a failed method call or an assertion in a test. Inspection ID: JSTestFailedLine",
                  "markdown": "Reports a failed method call or an assertion in a test.\n\nInspection ID: JSTestFailedLine"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSTestFailedLine",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Unit testing",
                      "index": 15,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IfStatementWithTooManyBranchesJS",
                "shortDescription": {
                  "text": "'if' statement with too many branches"
                },
                "fullDescription": {
                  "text": "Reports an 'if' statement with too many branches. Such statements may be confusing, and often indicate inadequate levels of design abstraction. Use the field below to specify the maximum number of branches expected. Inspection ID: IfStatementWithTooManyBranchesJS",
                  "markdown": "Reports an `if` statement with too many branches. Such statements may be confusing, and often indicate inadequate levels of design abstraction.\n\n\nUse the field below to specify the maximum number of branches expected.\n\nInspection ID: IfStatementWithTooManyBranchesJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "IfStatementWithTooManyBranchesJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 101,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BreakStatementJS",
                "shortDescription": {
                  "text": "'break' statement"
                },
                "fullDescription": {
                  "text": "Reports a 'break' statements. Ignores 'break' statements that end case blocks. Inspection ID: BreakStatementJS",
                  "markdown": "Reports a `break` statements. Ignores `break` statements that end case blocks.\n\nInspection ID: BreakStatementJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "BreakStatementJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 55,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSPotentiallyInvalidUsageOfClassThis",
                "shortDescription": {
                  "text": "Potentially invalid reference to 'this' of a class from closure"
                },
                "fullDescription": {
                  "text": "Reports an attempt to reference a member of an ECMAScript class via the 'this.' qualifier in a nested function that is not a lambda. 'this' in a nested function that is not a lambda is the function's own 'this' and doesn't relate to the outer class. Inspection ID: JSPotentiallyInvalidUsageOfClassThis",
                  "markdown": "Reports an attempt to reference a member of an ECMAScript class via the `this.` qualifier in a nested function that is not a lambda.  \n`this` in a nested function that is not a lambda is the function's own `this` and doesn't relate to the outer class.\n\nInspection ID: JSPotentiallyInvalidUsageOfClassThis"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSPotentiallyInvalidUsageOfClassThis",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 86,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DebuggerStatementJS",
                "shortDescription": {
                  "text": "'debugger' statement"
                },
                "fullDescription": {
                  "text": "Reports a 'debugger' statement used for interaction with the Javascript debuggers. Such statements should not appear in production code. Inspection ID: DebuggerStatementJS",
                  "markdown": "Reports a `debugger` statement used for interaction with the Javascript debuggers. Such statements should not appear in production code.\n\nInspection ID: DebuggerStatementJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "DebuggerStatementJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Security"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 55,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryContinueJS",
                "shortDescription": {
                  "text": "Unnecessary 'continue' statement"
                },
                "fullDescription": {
                  "text": "Reports an unnecessary 'continue' statement at the end of a loop. Suggests removing such statements. Inspection ID: UnnecessaryContinueJS",
                  "markdown": "Reports an unnecessary `continue` statement at the end of a loop. Suggests removing such statements.\n\nInspection ID: UnnecessaryContinueJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnnecessaryContinueJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 101,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BreakStatementWithLabelJS",
                "shortDescription": {
                  "text": "'break' statement with label"
                },
                "fullDescription": {
                  "text": "Reports a labeled 'break' statement. Inspection ID: BreakStatementWithLabelJS",
                  "markdown": "Reports a labeled `break` statement.\n\nInspection ID: BreakStatementWithLabelJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "BreakStatementWithLabelJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 55,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSDeclarationsAtScopeStart",
                "shortDescription": {
                  "text": "'var' declared not at the beginning of a function"
                },
                "fullDescription": {
                  "text": "Checks that declarations of local variables declared with var are at the top of a function scope. By default, variable declarations are always moved (\"hoisted\") invisibly to the top of their containing scope when the code is executed. Therefore, declaring them at the top of the scope helps represent this behavior in the code. Inspection ID: JSDeclarationsAtScopeStart",
                  "markdown": "Checks that declarations of local variables declared with **var** are at the top of a function scope.   \n\nBy default, variable declarations are always moved (\"hoisted\") invisibly to the top of their containing scope when the code is executed. Therefore, declaring them at the top of the scope helps represent this behavior in the code.\n\nInspection ID: JSDeclarationsAtScopeStart"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSDeclarationsAtScopeStart",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 117,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AssignmentToForLoopParameterJS",
                "shortDescription": {
                  "text": "Assignment to 'for' loop parameter"
                },
                "fullDescription": {
                  "text": "Reports an assignment to a variable declared as a 'for' loop parameter. Although occasionally intended, this construct can be extremely confusing, and is often a result of an error. Inspection ID: AssignmentToForLoopParameterJS",
                  "markdown": "Reports an assignment to a variable declared as a `for` loop parameter. Although occasionally intended, this construct can be extremely confusing, and is often a result of an error.\n\nInspection ID: AssignmentToForLoopParameterJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AssignmentToForLoopParameterJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Assignment issues",
                      "index": 71,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6ConvertIndexedForToForOf",
                "shortDescription": {
                  "text": "Indexed 'for' is used instead of 'for..of'"
                },
                "fullDescription": {
                  "text": "Reports an indexed 'for' loop used on an array. Suggests replacing it with a 'for..of' loop. 'for..of' loops are introduced in ECMAScript 6 and iterate over 'iterable' objects. Inspection ID: ES6ConvertIndexedForToForOf",
                  "markdown": "Reports an indexed [for](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for) loop used on an array. Suggests replacing it with a [for..of](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) loop.   \n`for..of` loops are introduced in ECMAScript 6 and iterate over `iterable` objects.\n\nInspection ID: ES6ConvertIndexedForToForOf"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ES6ConvertIndexedForToForOf",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/ES2015 migration aids",
                      "index": 82,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConditionalExpressionJS",
                "shortDescription": {
                  "text": "Conditional expression"
                },
                "fullDescription": {
                  "text": "Reports a ternary conditional expression. Some coding standards prohibit such expressions in favor of explicit 'if' statements. Inspection ID: ConditionalExpressionJS",
                  "markdown": "Reports a ternary conditional expression. Some coding standards prohibit such expressions in favor of explicit `if` statements.\n\nInspection ID: ConditionalExpressionJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ConditionalExpressionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 55,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6ConvertVarToLetConst",
                "shortDescription": {
                  "text": "'var' is used instead of 'let' or 'const'"
                },
                "fullDescription": {
                  "text": "Reports a 'var' declaration that is used instead of 'let' or 'const'. Both 'let' and 'const' are block-scoped and behave more strictly. Suggests replacing all 'var' declarations with 'let' or 'const' declarations, depending on the semantics of a particular value. The declarations may be moved to the top of the function or placed before the first usage of the variable to avoid Reference errors. Select the 'Conservatively convert var with Fix all action' option to prevent any changes in these complex cases when using the 'Fix all' action. Inspection ID: ES6ConvertVarToLetConst",
                  "markdown": "Reports a `var` declaration that is used instead of `let` or `const`.  \nBoth `let` and `const` are block-scoped and behave more strictly.   \n\nSuggests replacing all `var` declarations with `let` or `const` declarations, depending on the semantics of a particular value. The declarations may be moved to the top of the function or placed before the first usage of the variable to avoid Reference errors.   \nSelect the 'Conservatively convert var with Fix all action' option to prevent any changes in these complex cases when using the 'Fix all' action.\n\nInspection ID: ES6ConvertVarToLetConst"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ES6ConvertVarToLetConst",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/ES2015 migration aids",
                      "index": 82,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PointlessBooleanExpressionJS",
                "shortDescription": {
                  "text": "Pointless statement or boolean expression"
                },
                "fullDescription": {
                  "text": "Reports a pointless or pointlessly complicated boolean expression or statement. Example: 'let a = !(false && x);\n  let b = false || x;' After the quick fix is applied the result looks like: 'let a = true;\n  let b = x;' Inspection ID: PointlessBooleanExpressionJS",
                  "markdown": "Reports a pointless or pointlessly complicated boolean expression or statement.\n\nExample:\n\n\n      let a = !(false && x);\n      let b = false || x;\n\nAfter the quick fix is applied the result looks like:\n\n\n      let a = true;\n      let b = x;\n\nInspection ID: PointlessBooleanExpressionJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PointlessBooleanExpressionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 101,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DynamicallyGeneratedCodeJS",
                "shortDescription": {
                  "text": "Execution of dynamically generated code"
                },
                "fullDescription": {
                  "text": "Reports a call of the 'eval()', 'setTimeout()', or 'setInterval()' function or an allocation of a 'Function' object. These functions are used to execute arbitrary strings of JavaScript text, which often dynamically generated. This can be very confusing, and may be a security risk. Ignores the cases when a callback function is provided to these methods statically, without code generation. Inspection ID: DynamicallyGeneratedCodeJS",
                  "markdown": "Reports a call of the `eval()`, `setTimeout()`, or `setInterval()` function or an allocation of a `Function` object. These functions are used to execute arbitrary strings of JavaScript text, which often dynamically generated. This can be very confusing, and may be a security risk.   \n\nIgnores the cases when a callback function is provided to these methods statically, without code generation.\n\nInspection ID: DynamicallyGeneratedCodeJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "DynamicallyGeneratedCodeJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Security"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 47,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUrlImportUsage",
                "shortDescription": {
                  "text": "URL import is used"
                },
                "fullDescription": {
                  "text": "Checks used URL imports in the JavaScript language. Suggests downloading the module for the specified remote URL. Such association enables the IDE to provide proper code completion and navigation. URLs in import specifiers are supported only for ECMAScript modules in the JavaScript language. Inspection ID: JSUrlImportUsage",
                  "markdown": "Checks used URL imports in the JavaScript language. Suggests downloading the module for the specified remote URL. Such association enables the IDE to provide proper code completion and navigation.   \n\nURLs in import specifiers are supported only for ECMAScript modules in the JavaScript language.\n\nInspection ID: JSUrlImportUsage"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSUrlImportUsage",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Imports and dependencies",
                      "index": 142,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryLabelOnContinueStatementJS",
                "shortDescription": {
                  "text": "Unnecessary label on 'continue' statement"
                },
                "fullDescription": {
                  "text": "Reports a labeled 'continue' statement whose labels may be removed without changing the flow of control. Inspection ID: UnnecessaryLabelOnContinueStatementJS",
                  "markdown": "Reports a labeled `continue` statement whose labels may be removed without changing the flow of control.\n\nInspection ID: UnnecessaryLabelOnContinueStatementJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnnecessaryLabelOnContinueStatementJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 101,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSPotentiallyInvalidTargetOfIndexedPropertyAccess",
                "shortDescription": {
                  "text": "Possibly incorrect target of indexed property access"
                },
                "fullDescription": {
                  "text": "Reports a potentially invalid indexed property access, for example, 'Array[1]'. Inspection ID: JSPotentiallyInvalidTargetOfIndexedPropertyAccess",
                  "markdown": "Reports a potentially invalid indexed property access, for example, `Array[1]`.\n\nInspection ID: JSPotentiallyInvalidTargetOfIndexedPropertyAccess"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSPotentiallyInvalidTargetOfIndexedPropertyAccess",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 86,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedCatchParameterJS",
                "shortDescription": {
                  "text": "Unused 'catch' parameter"
                },
                "fullDescription": {
                  "text": "Reports a 'catch' parameter that is not used in the corresponding block. The 'catch' parameters named 'ignore' or 'ignored' are ignored. Use the checkbox below to disable this inspection for 'catch' blocks with comments. Inspection ID: UnusedCatchParameterJS",
                  "markdown": "Reports a `catch` parameter that is not used in the corresponding block. The `catch` parameters named `ignore` or `ignored` are ignored.\n\n\nUse the checkbox below to disable this inspection for `catch`\nblocks with comments.\n\nInspection ID: UnusedCatchParameterJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnusedCatchParameterJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Try statement issues",
                      "index": 50,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AnonymousFunctionJS",
                "shortDescription": {
                  "text": "Anonymous function"
                },
                "fullDescription": {
                  "text": "Reports an anonymous function. An explicit name of a function expression may be helpful for debugging. Ignores function expressions without names if they have a 'name' property specified in the ECMAScript 6 standard. For example, 'var bar = function() {};' is not reported. Inspection ID: AnonymousFunctionJS",
                  "markdown": "Reports an anonymous function. An explicit name of a function expression may be helpful for debugging. Ignores function expressions without names if they have a `name` property specified in the ECMAScript 6 standard. For example, `var bar = function() {};` is not reported.\n\nInspection ID: AnonymousFunctionJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AnonymousFunctionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 55,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSTypeOfValues",
                "shortDescription": {
                  "text": "'typeof' comparison with non-standard value"
                },
                "fullDescription": {
                  "text": "Reports a comparison of a 'typeof' expression with a literal string which is not one of the standard types: 'undefined', 'object', 'boolean', 'number', 'string', 'function', or 'symbol'. Such comparisons always return 'false'. Inspection ID: JSTypeOfValues",
                  "markdown": "Reports a comparison of a `typeof` expression with a literal string which is not one of the standard types: `undefined`, `object`, `boolean`, `number`, `string`, `function`, or `symbol`. Such comparisons always return `false`.\n\nInspection ID: JSTypeOfValues"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSTypeOfValues",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 86,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EmptyCatchBlockJS",
                "shortDescription": {
                  "text": "Empty 'catch' block"
                },
                "fullDescription": {
                  "text": "Reports an empty 'catch' block. This indicates that errors are simply ignored instead of handling them. Any comment in a 'catch' block mutes the inspection. Inspection ID: EmptyCatchBlockJS",
                  "markdown": "Reports an empty `catch` block. This indicates that errors are simply ignored instead of handling them.   \n\nAny comment in a `catch` block mutes the inspection.\n\nInspection ID: EmptyCatchBlockJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EmptyCatchBlockJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Try statement issues",
                      "index": 50,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ThrowFromFinallyBlockJS",
                "shortDescription": {
                  "text": "'throw' inside 'finally' block"
                },
                "fullDescription": {
                  "text": "Reports s 'throw' statement inside a 'finally' block. Such 'throw' statements may mask exceptions thrown, and complicate debugging. Inspection ID: ThrowFromFinallyBlockJS",
                  "markdown": "Reports s `throw` statement inside a `finally` block. Such `throw` statements may mask exceptions thrown, and complicate debugging.\n\nInspection ID: ThrowFromFinallyBlockJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ThrowInsideFinallyBlockJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Try statement issues",
                      "index": 50,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSPotentiallyInvalidUsageOfThis",
                "shortDescription": {
                  "text": "Potentially invalid reference to 'this' from closure"
                },
                "fullDescription": {
                  "text": "Reports a 'this' in closure that is used for referencing properties of outer context. Example: 'function Outer() {\n  this.outerProp = 1;\n  function inner() {\n    // bad, because 'outerProp' of Outer\n    // won't be updated here\n    // on calling 'new Outer()' as may be expected\n    this.outerProp = 2;\n  }\n  inner();\n}' Inspection ID: JSPotentiallyInvalidUsageOfThis",
                  "markdown": "Reports a `this` in closure that is used for referencing properties of outer context.\n\nExample:\n\n\n    function Outer() {\n      this.outerProp = 1;\n      function inner() {\n        // bad, because 'outerProp' of Outer\n        // won't be updated here\n        // on calling 'new Outer()' as may be expected\n        this.outerProp = 2;\n      }\n      inner();\n    }\n\nInspection ID: JSPotentiallyInvalidUsageOfThis"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSPotentiallyInvalidUsageOfThis",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 86,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUnresolvedLibraryURL",
                "shortDescription": {
                  "text": "Missed locally stored library for HTTP link"
                },
                "fullDescription": {
                  "text": "Reports a URL of an external JavaScript library that is not associated with any locally stored file. Suggests downloading the library. Such association enables the IDE to provide proper code completion and navigation. Inspection ID: JSUnresolvedLibraryURL",
                  "markdown": "Reports a URL of an external JavaScript library that is not associated with any locally stored file. Suggests downloading the library. Such association enables the IDE to provide proper code completion and navigation.\n\nInspection ID: JSUnresolvedLibraryURL"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSUnresolvedLibraryURL",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 35,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XHTMLIncompatabilitiesJS",
                "shortDescription": {
                  "text": "Incompatible XHTML usages"
                },
                "fullDescription": {
                  "text": "Reports common JavaScript DOM patterns which may present problems with XHTML documents. In particular, the patterns detected will behave completely differently depending on whether the document is loaded as XML or HTML. This can result in subtle bugs where script behaviour is dependent on the MIME-type of the document, rather than its content. Patterns detected include document.body, document.images, document.applets, document.links, document.forms, and document.anchors. Inspection ID: XHTMLIncompatabilitiesJS",
                  "markdown": "Reports common JavaScript DOM patterns which may present problems with XHTML documents. In particular, the patterns detected will behave completely differently depending on whether the document is loaded as XML or HTML. This can result in subtle bugs where script behaviour is dependent on the MIME-type of the document, rather than its content. Patterns detected include **document.body** , **document.images** , **document.applets** , **document.links** , **document.forms** , and **document.anchors** .\n\nInspection ID: XHTMLIncompatabilitiesJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "XHTMLIncompatabilitiesJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/DOM issues",
                      "index": 84,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptFieldCanBeMadeReadonly",
                "shortDescription": {
                  "text": "Field can be readonly"
                },
                "fullDescription": {
                  "text": "Reports a private field that can be made readonly (for example, if the field is assigned only in the constructor). Inspection ID: TypeScriptFieldCanBeMadeReadonly",
                  "markdown": "Reports a private field that can be made readonly (for example, if the field is assigned only in the constructor).\n\nInspection ID: TypeScriptFieldCanBeMadeReadonly"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "TypeScriptFieldCanBeMadeReadonly",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 78,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NegatedIfStatementJS",
                "shortDescription": {
                  "text": "Negated 'if' statement"
                },
                "fullDescription": {
                  "text": "Reports if statements which have an else branch and a negated condition. Flipping the order of the if and else branches will usually increase the clarity of such statements. Inspection ID: NegatedIfStatementJS",
                  "markdown": "Reports **if** statements which have an **else** branch and a negated condition. Flipping the order of the **if** and **else** branches will usually increase the clarity of such statements.\n\nInspection ID: NegatedIfStatementJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NegatedIfStatementJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 47,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConditionalExpressionWithIdenticalBranchesJS",
                "shortDescription": {
                  "text": "Conditional expression with identical branches"
                },
                "fullDescription": {
                  "text": "Reports a ternary conditional expression with identical 'then' and 'else' branches. Inspection ID: ConditionalExpressionWithIdenticalBranchesJS",
                  "markdown": "Reports a ternary conditional expression with identical `then` and `else` branches.\n\nInspection ID: ConditionalExpressionWithIdenticalBranchesJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ConditionalExpressionWithIdenticalBranchesJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 101,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSAnnotator",
                "shortDescription": {
                  "text": "ECMAScript specification is not followed"
                },
                "fullDescription": {
                  "text": "Reports basic syntax issues and inconsistencies with language specification, such as invalid usages of keywords, usages of incompatible numeric format, or multiple parameters to getters/setters. Generally, such errors must always be reported and shouldn't be disabled. But in some cases, such as issues due to the dynamic nature of JavaScript, the use of not yet supported language features, or bugs in IDE's checker, it may be handy to disable reporting these very basic errors. Inspection ID: JSAnnotator",
                  "markdown": "Reports basic syntax issues and inconsistencies with language specification, such as invalid usages of keywords, usages of incompatible numeric format, or multiple parameters to getters/setters.   \nGenerally, such errors must always be reported and shouldn't be disabled. But in some cases, such as issues due to the dynamic nature of JavaScript, the use of not yet supported language features, or bugs in IDE's checker, it may be handy to disable reporting these very basic errors.\n\nInspection ID: JSAnnotator"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "JSAnnotator",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 35,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSIncompatibleTypesComparison",
                "shortDescription": {
                  "text": "Comparison of expressions having incompatible types"
                },
                "fullDescription": {
                  "text": "Reports a comparison with operands of incompatible types or an operand with a type without possible common values. Inspection ID: JSIncompatibleTypesComparison",
                  "markdown": "Reports a comparison with operands of incompatible types or an operand with a type without possible common values.\n\nInspection ID: JSIncompatibleTypesComparison"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSIncompatibleTypesComparison",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 86,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6TopLevelAwaitExpression",
                "shortDescription": {
                  "text": "Top-level 'await' expression"
                },
                "fullDescription": {
                  "text": "Reports a usage of a top-level 'await' expression. While the new 'top-level async' proposal is on its way, using 'await' outside async functions is not allowed. Inspection ID: ES6TopLevelAwaitExpression",
                  "markdown": "Reports a usage of a top-level `await` expression. While the new 'top-level async' proposal is on its way, using `await` outside async functions is not allowed.\n\nInspection ID: ES6TopLevelAwaitExpression"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "ES6TopLevelAwaitExpression",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Async code and promises",
                      "index": 149,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6ConvertToForOf",
                "shortDescription": {
                  "text": "'for..in' is used instead of 'for..of'"
                },
                "fullDescription": {
                  "text": "Reports a usage of a 'for..in' loop on an array. Suggests replacing it with a 'for..of' loop. 'for..of' loops, which are introduced in ECMAScript 6, iterate over 'iterable' objects. For arrays, this structure is preferable to 'for..in', because it works only with array values but not with array object's properties. Inspection ID: ES6ConvertToForOf",
                  "markdown": "Reports a usage of a [for..in](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in) loop on an array. Suggests replacing it with a [for..of](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) loop.   \n`for..of` loops, which are introduced in ECMAScript 6, iterate over `iterable` objects. For arrays, this structure is preferable to `for..in`, because it works only with array values but not with array object's properties.\n\nInspection ID: ES6ConvertToForOf"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ES6ConvertToForOf",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/ES2015 migration aids",
                      "index": 82,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ParameterNamingConventionJS",
                "shortDescription": {
                  "text": "Function parameter naming convention"
                },
                "fullDescription": {
                  "text": "Reports a function parameter whose name is too short, too long, or doesn't follow the specified regular expression pattern. Use the fields provided below to specify minimum length, maximum length and regular expression expected for local variables names. Use the standard 'java.util.regex' format regular expressions. Inspection ID: ParameterNamingConventionJS",
                  "markdown": "Reports a function parameter whose name is too short, too long, or doesn't follow the specified regular expression pattern.\n\n\nUse the fields provided below to specify minimum length, maximum length and regular expression\nexpected for local variables names. Use the standard `java.util.regex` format regular expressions.\n\nInspection ID: ParameterNamingConventionJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ParameterNamingConventionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Naming conventions",
                      "index": 150,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ParametersPerFunctionJS",
                "shortDescription": {
                  "text": "Function with too many parameters"
                },
                "fullDescription": {
                  "text": "Reports a function with too many parameters. Such functions often indicate problems with design. Use the field below to specify the maximum acceptable number of parameters for a function. Inspection ID: ParametersPerFunctionJS",
                  "markdown": "Reports a function with too many parameters. Such functions often indicate problems with design.\n\n\nUse the field below to specify the maximum acceptable number of parameters for a function.\n\nInspection ID: ParametersPerFunctionJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "OverlyComplexFunctionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Function metrics",
                      "index": 115,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ThisExpressionReferencesGlobalObjectJS",
                "shortDescription": {
                  "text": "'this' expression which references the global object"
                },
                "fullDescription": {
                  "text": "Reports a 'this' expression outside an object literal or a constructor body. Such 'this' expressions reference the top-level \"global\" JavaScript object, but are mostly useless. Inspection ID: ThisExpressionReferencesGlobalObjectJS",
                  "markdown": "Reports a `this` expression outside an object literal or a constructor body. Such `this` expressions reference the top-level \"global\" JavaScript object, but are mostly useless.\n\nInspection ID: ThisExpressionReferencesGlobalObjectJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ThisExpressionReferencesGlobalObjectJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Validity issues",
                      "index": 45,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSSuspiciousNameCombination",
                "shortDescription": {
                  "text": "Suspicious variable/parameter name combination"
                },
                "fullDescription": {
                  "text": "Reports an assignment or a function call where the name of the target variable or the function parameter does not match the name of the value assigned to it. Example: 'var x = 0;\n  var y = x;' or 'var x = 0, y = 0;\n  var rc = new Rectangle(y, x, 20, 20);' Here the inspection guesses that 'x' and 'y' are mixed up. Specify the names that should not be used together. An error is reported if a parameter name or an assignment target name contains words from one group while the name of the assigned or passed variable contains words from another group. Inspection ID: JSSuspiciousNameCombination",
                  "markdown": "Reports an assignment or a function call where the name of the target variable or the function parameter does not match the name of the value assigned to it.\n\nExample:\n\n\n      var x = 0;\n      var y = x;\n\nor\n\n\n      var x = 0, y = 0;\n      var rc = new Rectangle(y, x, 20, 20);\n\nHere the inspection guesses that `x` and `y` are mixed up.\n\nSpecify the names that should not be used together. An error is reported\nif a parameter name or an assignment target name contains words from one group while the name of the assigned or passed\nvariable contains words from another group.\n\nInspection ID: JSSuspiciousNameCombination"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSSuspiciousNameCombination",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 86,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ChainedFunctionCallJS",
                "shortDescription": {
                  "text": "Chained function call"
                },
                "fullDescription": {
                  "text": "Reports a function call whose target is another function call, for example, 'foo().bar()' Inspection ID: ChainedFunctionCallJS",
                  "markdown": "Reports a function call whose target is another function call, for example, `foo().bar()`\n\nInspection ID: ChainedFunctionCallJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ChainedFunctionCallJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Performance"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 117,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NestedFunctionCallJS",
                "shortDescription": {
                  "text": "Nested function call"
                },
                "fullDescription": {
                  "text": "Reports a function call that is used as an argument in another function call, for example, 'foo(bar())' Inspection ID: NestedFunctionCallJS",
                  "markdown": "Reports a function call that is used as an argument in another function call, for example, `foo(bar())`\n\nInspection ID: NestedFunctionCallJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NestedFunctionCallJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 117,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSEqualityComparisonWithCoercion",
                "shortDescription": {
                  "text": "Equality operator may cause type coercion"
                },
                "fullDescription": {
                  "text": "Reports a usage of an equality operator that may cause unexpected type coercions. Suggests replacing '==' and '!=' with type-safe equality operators '===' and '!=='. Depending on the option selected, one of the following cases will be reported: All usages of '==' and '!=' operators. All usages except comparison with null. Some code styles allow using 'x == null' as a replacement for 'x === null || x === undefined'. Only suspicious expressions, such as: '==' or '!=' comparisons with '0', '''', 'null', 'true', 'false', or 'undefined'. Inspection ID: JSEqualityComparisonWithCoercion",
                  "markdown": "Reports a usage of an equality operator that may cause unexpected type coercions. Suggests replacing `==` and `!=` with type-safe equality operators `===` and `!==`.\n\nDepending on the option selected, one of the following cases will be reported:\n\n* All usages of `==` and `!=` operators.\n* All usages except comparison with null. Some code styles allow using `x == null` as a replacement for `x === null || x === undefined`.\n* Only suspicious expressions, such as: `==` or `!=` comparisons with `0`, `''`, `null`, `true`, `false`, or `undefined`.\n\nInspection ID: JSEqualityComparisonWithCoercion"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EqualityComparisonWithCoercionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Security"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 86,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConstantOnLHSOfComparisonJS",
                "shortDescription": {
                  "text": "Constant on left side of comparison"
                },
                "fullDescription": {
                  "text": "Reports a comparison operation with a constant value in the left-hand side. According to coding conventions, constants should be in the right-hand side of comparisons. Inspection ID: ConstantOnLHSOfComparisonJS",
                  "markdown": "Reports a comparison operation with a constant value in the left-hand side. According to coding conventions, constants should be in the right-hand side of comparisons.\n\nInspection ID: ConstantOnLHSOfComparisonJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ConstantOnLefSideOfComparisonJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 117,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSCheckFunctionSignatures",
                "shortDescription": {
                  "text": "Signature mismatch"
                },
                "fullDescription": {
                  "text": "Reports a JavaScript call expression where the arguments do not match the signature of the referenced function, including the types of arguments and their number. Also, reports if the overloading function doesn't match the overloaded one in terms of parameters and return types. TypeScript code is ignored. Inspection ID: JSCheckFunctionSignatures",
                  "markdown": "Reports a JavaScript call expression where the arguments do not match the signature of the referenced function, including the types of arguments and their number. Also, reports if the overloading function doesn't match the overloaded one in terms of parameters and return types.\n\nTypeScript code is ignored.\n\nInspection ID: JSCheckFunctionSignatures"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSCheckFunctionSignatures",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 35,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptUnresolvedReference",
                "shortDescription": {
                  "text": "Unresolved TypeScript reference"
                },
                "fullDescription": {
                  "text": "Reports an unresolved reference in TypeScript code. Inspection ID: TypeScriptUnresolvedReference",
                  "markdown": "Reports an unresolved reference in TypeScript code.\n\nInspection ID: TypeScriptUnresolvedReference"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "TypeScriptUnresolvedReference",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 78,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSNonStrictModeUsed",
                "shortDescription": {
                  "text": "Non-strict mode used"
                },
                "fullDescription": {
                  "text": "Reports a JavaScript file that is not in the 'strict' mode. Inspection ID: JSNonStrictModeUsed",
                  "markdown": "Reports a JavaScript file that is not in the `strict` mode.\n\nInspection ID: JSNonStrictModeUsed"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSNonStrictModeUsed",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Security"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 35,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6RedundantAwait",
                "shortDescription": {
                  "text": "Redundant 'await' expression"
                },
                "fullDescription": {
                  "text": "Reports a redundant usage of 'await', such as 'await await', or awaiting a non-promise result. When the 'Report for promises' option is selected, suggests removing 'await' before promises when applicable (in 'return' statements, and with 'Promise.resolve/reject'). Removing 'await' in such contexts causes two problems. Surrounding your code with 'try-catch' and forgetting to add 'await' will change code semantics while you may fail to notice that. Having an explicit 'await' may prevent the V8 runtime from providing async stack traces. Inspection ID: ES6RedundantAwait",
                  "markdown": "Reports a redundant usage of `await`, such as `await await`, or awaiting a non-promise result.\n\n\nWhen the 'Report for promises' option is selected, suggests removing `await` before promises when applicable\n(in `return` statements, and with `Promise.resolve/reject`).\n\nRemoving `await` in such contexts causes two problems.\n\n* Surrounding your code with `try-catch` and forgetting to add `await` will change code semantics while you may fail to notice that.\n* Having an explicit `await` may prevent the V8 runtime from providing [async stack traces](http://bit.ly/v8-zero-cost-async-stack-traces).\n\nInspection ID: ES6RedundantAwait"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ES6RedundantAwait",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Performance"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Async code and promises",
                      "index": 149,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AssignmentToFunctionParameterJS",
                "shortDescription": {
                  "text": "Assignment to function parameter"
                },
                "fullDescription": {
                  "text": "Reports an assignment to a function parameter, including increment and decrement operations. Although occasionally intended, this construct can be extremely confusing, and is often a result of an error. Inspection ID: AssignmentToFunctionParameterJS",
                  "markdown": "Reports an assignment to a function parameter, including increment and decrement operations. Although occasionally intended, this construct can be extremely confusing, and is often a result of an error.\n\nInspection ID: AssignmentToFunctionParameterJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AssignmentToFunctionParameterJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Assignment issues",
                      "index": 71,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FallThroughInSwitchStatementJS",
                "shortDescription": {
                  "text": "Fallthrough in 'switch' statement"
                },
                "fullDescription": {
                  "text": "Reports a 'switch' statement where control can proceed from a branch to the next one. Such \"fall-through\" often indicates an error, for example, a missing 'break' or 'return'. Inspection ID: FallThroughInSwitchStatementJS",
                  "markdown": "Reports a `switch` statement where control can proceed from a branch to the next one. Such \"fall-through\" often indicates an error, for example, a missing `break` or `return`.\n\nInspection ID: FallThroughInSwitchStatementJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "FallThroughInSwitchStatementJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Switch statement issues",
                      "index": 110,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CallerJS",
                "shortDescription": {
                  "text": "Use of 'caller' property"
                },
                "fullDescription": {
                  "text": "Reports a usage of the 'caller' property in a JavaScript function. Using this property to access the stack frame of the calling method can be extremely confusing and result in subtle bugs. Inspection ID: CallerJS",
                  "markdown": "Reports a usage of the `caller` property in a JavaScript function. Using this property to access the stack frame of the calling method can be extremely confusing and result in subtle bugs.\n\nInspection ID: CallerJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CallerJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 47,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptExplicitMemberType",
                "shortDescription": {
                  "text": "Explicit types"
                },
                "fullDescription": {
                  "text": "Reports a type annotation that doesn't match the current code style for explicit types. Type declarations are not necessary when the type that is inferred from the context exactly matches the type annotation, for example: 'var pi: number = 3.14' In some cases it is preferable to always have explicit types - this prevents accidental type changes and makes code more explicit. Inspection ID: TypeScriptExplicitMemberType",
                  "markdown": "Reports a type annotation that doesn't match the current code style for explicit types.\n\n\nType declarations are not necessary when the type that is inferred from the context exactly matches the type annotation, for example:\n\n\n        var pi: number = 3.14\n\nIn some cases it is preferable to always have explicit types - this prevents accidental type changes and makes code more explicit.\n\nInspection ID: TypeScriptExplicitMemberType"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "TypeScriptExplicitMemberType",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 78,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSDuplicateCaseLabel",
                "shortDescription": {
                  "text": "Duplicate 'case' label"
                },
                "fullDescription": {
                  "text": "Reports a duplicated 'case' label on a 'switch' statement, which normally indicates an error. Inspection ID: JSDuplicateCaseLabel",
                  "markdown": "Reports a duplicated `case` label on a `switch` statement, which normally indicates an error.\n\nInspection ID: JSDuplicateCaseLabel"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSDuplicateCaseLabel",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Switch statement issues",
                      "index": 110,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSSwitchVariableDeclarationIssue",
                "shortDescription": {
                  "text": "Variable is declared and being used in different 'case' clauses"
                },
                "fullDescription": {
                  "text": "Reports a variable that is declared in one 'case' clause of a 'switch' statement but is used in another 'case' clause of the same statement. For block-scoped variables, this results in throwing a 'ReferenceError'. For 'var' variables, it indicates a potential error. Disable the inspection for 'var' variables if this pattern is used intentionally. Inspection ID: JSSwitchVariableDeclarationIssue",
                  "markdown": "Reports a variable that is declared in one `case` clause of a `switch` statement but is used in another `case` clause of the same statement. For block-scoped variables, this results in throwing a `ReferenceError`. For `var` variables, it indicates a potential error.\n\nDisable the inspection for `var` variables if this pattern is used intentionally.\n\nInspection ID: JSSwitchVariableDeclarationIssue"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSSwitchVariableDeclarationIssue",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Switch statement issues",
                      "index": 110,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReuseOfLocalVariableJS",
                "shortDescription": {
                  "text": "Reuse of local variable"
                },
                "fullDescription": {
                  "text": "Reports reusing a local variable and overwriting its value with a new value that is not related to the original variable usage. Reusing a local variable in this way may be confusing because the intended semantics of the local variable may vary with each usage. It may also cause bugs, if code changes result in values that were expected to be overwritten while they are actually live. It is good practices to keep variable lifetimes as short as possible, and not reuse local variables for the sake of brevity. Inspection ID: ReuseOfLocalVariableJS",
                  "markdown": "Reports reusing a local variable and overwriting its value with a new value that is not related to the original variable usage. Reusing a local variable in this way may be confusing because the intended semantics of the local variable may vary with each usage. It may also cause bugs, if code changes result in values that were expected to be overwritten while they are actually live. It is good practices to keep variable lifetimes as short as possible, and not reuse local variables for the sake of brevity.\n\nInspection ID: ReuseOfLocalVariableJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ReuseOfLocalVariableJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Data flow",
                      "index": 156,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6ConvertLetToConst",
                "shortDescription": {
                  "text": "'let' is used instead of 'const'"
                },
                "fullDescription": {
                  "text": "Reports a 'let' declaration that can be made 'const'. Inspection ID: ES6ConvertLetToConst",
                  "markdown": "Reports a `let` declaration that can be made `const`.  \n\nInspection ID: ES6ConvertLetToConst"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ES6ConvertLetToConst",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/ES2015 migration aids",
                      "index": 82,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSXDomNesting",
                "shortDescription": {
                  "text": "Invalid DOM element nesting"
                },
                "fullDescription": {
                  "text": "Detects HTML elements in JSX files which are not nested properly according to the DOM specification. React reports runtime warnings on incorrectly nested elements. Inspection ID: JSXDomNesting",
                  "markdown": "Detects HTML elements in JSX files which are not nested properly according to the DOM specification. React reports runtime warnings on incorrectly nested elements.\n\nInspection ID: JSXDomNesting"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSXDomNesting",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/React",
                      "index": 157,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryLocalVariableJS",
                "shortDescription": {
                  "text": "Redundant local variable"
                },
                "fullDescription": {
                  "text": "Reports an unnecessary local variable that does not make a function more comprehensible: a local variable that is immediately returned a local variable that is immediately assigned to another variable and is not used anymore a local variable that always has the same value as another local variable or parameter. Use the checkbox below to have this inspection ignore variables that are immediately returned or thrown. Some coding styles suggest using such variables for clarity and ease of debugging. Inspection ID: UnnecessaryLocalVariableJS",
                  "markdown": "Reports an unnecessary local variable that does not make a function more comprehensible:\n\n* a local variable that is immediately returned\n* a local variable that is immediately assigned to another variable and is not used anymore\n* a local variable that always has the same value as another local variable or parameter.\n\n\nUse the checkbox below to have this inspection ignore variables that are immediately\nreturned or thrown. Some coding styles suggest using such variables for clarity and\nease of debugging.\n\nInspection ID: UnnecessaryLocalVariableJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnnecessaryLocalVariableJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Data flow",
                      "index": 156,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSXUnresolvedComponent",
                "shortDescription": {
                  "text": "Unresolved JSX component"
                },
                "fullDescription": {
                  "text": "Reports an unresolved reference to a JSX component. Suggests adding a missing import statement if the referenced component is defined in the project or its dependencies or creating a new component with this name. The template for a new component can be modified in Editor | File and Code Templates. Inspection ID: JSXUnresolvedComponent",
                  "markdown": "Reports an unresolved reference to a JSX component. Suggests adding a missing import statement if the referenced component is defined in the project or its dependencies or creating a new component with this name.\n\nThe template for a new component can be modified in Editor \\| File and Code Templates.\n\nInspection ID: JSXUnresolvedComponent"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSXUnresolvedComponent",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 35,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryLabelOnBreakStatementJS",
                "shortDescription": {
                  "text": "Unnecessary label on 'break' statement"
                },
                "fullDescription": {
                  "text": "Reports a labeled 'break' statement whose labels may be removed without changing the flow of control. Inspection ID: UnnecessaryLabelOnBreakStatementJS",
                  "markdown": "Reports a labeled `break` statement whose labels may be removed without changing the flow of control.\n\nInspection ID: UnnecessaryLabelOnBreakStatementJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnnecessaryLabelOnBreakStatementJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 101,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DivideByZeroJS",
                "shortDescription": {
                  "text": "Division by zero"
                },
                "fullDescription": {
                  "text": "Reports division by zero or a remainder by zero. Inspection ID: DivideByZeroJS",
                  "markdown": "Reports division by zero or a remainder by zero.\n\nInspection ID: DivideByZeroJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "DivideByZeroJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 86,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSReferencingMutableVariableFromClosure",
                "shortDescription": {
                  "text": "Referencing mutable variable from closure"
                },
                "fullDescription": {
                  "text": "Reports access to outer mutable variables from functions. Example: 'for (var i = 1; i <= 3; i++) {\n    setTimeout(function() {\n        console.log(i); // bad\n    }, 0);\n  }' Inspection ID: JSReferencingMutableVariableFromClosure",
                  "markdown": "Reports access to outer mutable variables from functions.\n\nExample:\n\n\n      for (var i = 1; i <= 3; i++) {\n        setTimeout(function() {\n            console.log(i); // bad\n        }, 0);\n      }\n\nInspection ID: JSReferencingMutableVariableFromClosure"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSReferencingMutableVariableFromClosure",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 35,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ChainedEqualityJS",
                "shortDescription": {
                  "text": "Chained equality"
                },
                "fullDescription": {
                  "text": "Reports a chained equality comparison (i.e. 'a==b==c'). Such comparisons are confusing. Inspection ID: ChainedEqualityJS",
                  "markdown": "Reports a chained equality comparison (i.e. `a==b==c`). Such comparisons are confusing.\n\nInspection ID: ChainedEqualityJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ChainedEqualityComparisonsJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 117,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6ConvertRequireIntoImport",
                "shortDescription": {
                  "text": "'require()' is used instead of 'import'"
                },
                "fullDescription": {
                  "text": "Reports a 'require()' statement. Suggests converting it to a 'require()' call with an 'import' statement. Enable 'Convert require() inside inner scopes with Fix all action' to convert all 'require()' calls inside the nested functions and statements when using the 'Fix all' action. Please note that converting 'require()' statements inside inner scopes to 'import' statements may cause changes in the semantics of the code. Import statements are static module dependencies and are hoisted, which means that they are moved to the top of the current module. 'require()' calls load modules dynamically. They can be executed conditionally, and their scope is defined by the expression in which they are used. Clear the 'Convert require() inside inner scopes with Fix all action' checkbox to prevent any changes in these complex cases when using the 'Fix all' action. Inspection ID: ES6ConvertRequireIntoImport",
                  "markdown": "Reports a `require()` statement. Suggests converting it to a `require()` call with an `import` statement.   \n\nEnable 'Convert require() inside inner scopes with Fix all action' to convert all `require()` calls inside the nested functions and statements when using the 'Fix all' action.   \n\nPlease note that converting `require()` statements inside inner scopes to `import` statements may cause changes in the semantics of the code. Import statements are static module dependencies and are hoisted, which means that they are moved to the top of the current module. `require()` calls load modules dynamically. They can be executed conditionally, and their scope is defined by the expression in which they are used.   \nClear the 'Convert require() inside inner scopes with Fix all action' checkbox to prevent any changes in these complex cases when using the 'Fix all' action.\n\nInspection ID: ES6ConvertRequireIntoImport"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ES6ConvertRequireIntoImport",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/ES2015 migration aids",
                      "index": 82,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSRedundantSwitchStatement",
                "shortDescription": {
                  "text": "'switch' statement is redundant and can be replaced"
                },
                "fullDescription": {
                  "text": "Reports a 'switch' statement with an empty body, or with only one 'case' branch, or with a 'default' branch only. Inspection ID: JSRedundantSwitchStatement",
                  "markdown": "Reports a `switch` statement with an empty body, or with only one `case` branch, or with a `default` branch only.\n\nInspection ID: JSRedundantSwitchStatement"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSRedundantSwitchStatement",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Switch statement issues",
                      "index": 110,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUnusedGlobalSymbols",
                "shortDescription": {
                  "text": "Unused global symbol"
                },
                "fullDescription": {
                  "text": "Reports an unused globally accessible public function, variable, class, or property. Inspection ID: JSUnusedGlobalSymbols",
                  "markdown": "Reports an unused globally accessible public function, variable, class, or property.\n\nInspection ID: JSUnusedGlobalSymbols"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSUnusedGlobalSymbols",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Performance"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Unused symbols",
                      "index": 30,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BlockStatementJS",
                "shortDescription": {
                  "text": "Unnecessary block statement"
                },
                "fullDescription": {
                  "text": "Reports a block statement that is not used as the body of 'if', 'for', 'while', 'do', 'with', or 'try' statements, or as the body of a function declaration. Starting from ECMAScript 6, JavaScript blocks introduce new scopes for 'let' and 'const' variables, but still free-standing block statements may be confusing and result in subtle bugs when used with 'var' variables. Inspection ID: BlockStatementJS",
                  "markdown": "Reports a block statement that is not used as the body of `if`, `for`, `while`, `do`, `with`, or `try` statements, or as the body of a function declaration. Starting from ECMAScript 6, JavaScript blocks introduce new scopes for `let` and `const` variables, but still free-standing block statements may be confusing and result in subtle bugs when used with `var` variables.\n\nInspection ID: BlockStatementJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "BlockStatementJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 47,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NestedConditionalExpressionJS",
                "shortDescription": {
                  "text": "Nested conditional expression"
                },
                "fullDescription": {
                  "text": "Reports a ternary conditional expression within another ternary condition. Such nested conditionals may be extremely confusing, and best replaced by more explicit conditional logic. Inspection ID: NestedConditionalExpressionJS",
                  "markdown": "Reports a ternary conditional expression within another ternary condition. Such nested conditionals may be extremely confusing, and best replaced by more explicit conditional logic.\n\nInspection ID: NestedConditionalExpressionJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NestedConditionalExpressionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 47,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TextLabelInSwitchStatementJS",
                "shortDescription": {
                  "text": "Text label in 'switch' statement"
                },
                "fullDescription": {
                  "text": "Reports a labeled statement inside a 'switch' statement, which often results from a typo. Example: 'switch(x)\n    {\n        case 1:\n        case2:   //typo!\n        case 3:\n            break;\n    }' Inspection ID: TextLabelInSwitchStatementJS",
                  "markdown": "Reports a labeled statement inside a `switch` statement, which often results from a typo.\n\nExample:\n\n\n        switch(x)\n        {\n            case 1:\n            case2:   //typo!\n            case 3:\n                break;\n        }\n\nInspection ID: TextLabelInSwitchStatementJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "TextLabelInSwitchStatementJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Switch statement issues",
                      "index": 110,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6PossiblyAsyncFunction",
                "shortDescription": {
                  "text": "'await' in non-async function"
                },
                "fullDescription": {
                  "text": "Reports a usage of 'await' in a function that was possibly intended to be async but is actually missing the 'async' modifier. Although 'await' can be used as an identifier, it is likely that it was intended to be used as an operator, so the containing function should be made 'async'. Inspection ID: ES6PossiblyAsyncFunction",
                  "markdown": "Reports a usage of `await` in a function that was possibly intended to be async but is actually missing the `async` modifier. Although `await` can be used as an identifier, it is likely that it was intended to be used as an operator, so the containing function should be made `async`.\n\nInspection ID: ES6PossiblyAsyncFunction"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ES6PossiblyAsyncFunction",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Async code and promises",
                      "index": 149,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSOctalInteger",
                "shortDescription": {
                  "text": "Octal integer"
                },
                "fullDescription": {
                  "text": "Reports a deprecated octal integer literal prefixed with '0' instead of '0o'. Such literals are not allowed in modern ECMAScript code, and using them in the strict mode is an error. To force this inspection for ES5 and ES3 language levels, select the 'Warn about obsolete octal literals in ES5- code' checkbox below. Inspection ID: JSOctalInteger",
                  "markdown": "Reports a deprecated octal integer literal prefixed with `0` instead of `0o`.  \nSuch literals are not allowed in modern ECMAScript code, and using them in the strict mode is an error.  \nTo force this inspection for ES5 and ES3 language levels, select the 'Warn about obsolete octal literals in ES5- code' checkbox below.\n\nInspection ID: JSOctalInteger"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "JSOctalInteger",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Validity issues",
                      "index": 45,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSMissingSwitchDefault",
                "shortDescription": {
                  "text": "'switch' statement has no 'default' branch"
                },
                "fullDescription": {
                  "text": "Reports a 'switch' statement without a 'default' clause when some possible values are not enumerated. Inspection ID: JSMissingSwitchDefault",
                  "markdown": "Reports a `switch` statement without a `default` clause when some possible values are not enumerated.\n\nInspection ID: JSMissingSwitchDefault"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSMissingSwitchDefault",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Switch statement issues",
                      "index": 110,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSXNamespaceValidation",
                "shortDescription": {
                  "text": "Missing JSX namespace"
                },
                "fullDescription": {
                  "text": "Reports a usage of a JSX construction without importing namespace. Having the namespace in the file scope ensures proper code compilation. Inspection ID: JSXNamespaceValidation",
                  "markdown": "Reports a usage of a JSX construction without importing namespace. Having the namespace in the file scope ensures proper code compilation.\n\nInspection ID: JSXNamespaceValidation"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSXNamespaceValidation",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Imports and dependencies",
                      "index": 142,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EmptyTryBlockJS",
                "shortDescription": {
                  "text": "Empty 'try' block"
                },
                "fullDescription": {
                  "text": "Reports an empty 'try' block, which usually indicates an error. Inspection ID: EmptyTryBlockJS",
                  "markdown": "Reports an empty `try` block, which usually indicates an error.\n\nInspection ID: EmptyTryBlockJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EmptyTryBlockJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Try statement issues",
                      "index": 50,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReservedWordUsedAsNameJS",
                "shortDescription": {
                  "text": "Reserved word used as name"
                },
                "fullDescription": {
                  "text": "Reports a JavaScript reserved word used as a name. The JavaScript specification reserves a number of words which are currently not used as keywords. Using those words as identifiers may result in broken code if later versions of JavaScript start using them as keywords. Inspection ID: ReservedWordUsedAsNameJS",
                  "markdown": "Reports a JavaScript reserved word used as a name. The JavaScript specification reserves a number of words which are currently not used as keywords. Using those words as identifiers may result in broken code if later versions of JavaScript start using them as keywords.\n\nInspection ID: ReservedWordUsedAsNameJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ReservedWordAsName",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Validity issues",
                      "index": 45,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IncrementDecrementResultUsedJS",
                "shortDescription": {
                  "text": "Result of increment or decrement used"
                },
                "fullDescription": {
                  "text": "Reports an increment ('++') or decrement ('--') expression where the result of the assignment is used in a containing expression. Such assignments can result in confusion due to the order of operations, as evaluation of the assignment may affect the outer expression in unexpected ways. Example: 'var a = b++' Inspection ID: IncrementDecrementResultUsedJS",
                  "markdown": "Reports an increment (`++`) or decrement (`--`) expression where the result of the assignment is used in a containing expression. Such assignments can result in confusion due to the order of operations, as evaluation of the assignment may affect the outer expression in unexpected ways. Example: `var a = b++`\n\nInspection ID: IncrementDecrementResultUsedJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "IncrementDecrementResultUsedJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 47,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SuspiciousTypeOfGuard",
                "shortDescription": {
                  "text": "Unsound type guard check"
                },
                "fullDescription": {
                  "text": "Reports a 'typeof' or 'instanceof' unsound type guard check. The 'typeof x' type guard can be unsound in one of the following two cases: 'typeof x' never corresponds to the specified value (for example, 'typeof x === 'number'' when 'x' is of the type 'string | boolean') 'typeof x' always corresponds to the specified value (for example, 'typeof x === 'string'' when 'x' is of the type 'string') The 'x instanceof A' type guard can be unsound in one of the following two cases: The type of 'x' is not related to 'A' The type of 'x' is 'A' or a subtype of 'A' Inspection ID: SuspiciousTypeOfGuard",
                  "markdown": "Reports a `typeof` or `instanceof` unsound type guard check. The `typeof x` type guard can be unsound in one of the following two cases:\n\n* `typeof x` never corresponds to the specified value (for example, `typeof x === 'number'` when `x` is of the type 'string \\| boolean')\n* `typeof x` always corresponds to the specified value (for example, `typeof x === 'string'` when `x` is of the type 'string')\n\nThe `x instanceof A` type guard can be unsound in one of the following two cases:\n\n* The type of `x` is not related to `A`\n* The type of `x` is `A` or a subtype of `A`\n\nInspection ID: SuspiciousTypeOfGuard"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SuspiciousTypeOfGuard",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 101,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LoopStatementThatDoesntLoopJS",
                "shortDescription": {
                  "text": "Loop statement that doesn't loop"
                },
                "fullDescription": {
                  "text": "Reports a 'for', 'while', or 'do' statement whose bodies are guaranteed to execute at most once. Normally, this indicates an error. Inspection ID: LoopStatementThatDoesntLoopJS",
                  "markdown": "Reports a `for`, `while`, or `do` statement whose bodies are guaranteed to execute at most once. Normally, this indicates an error.\n\nInspection ID: LoopStatementThatDoesntLoopJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "LoopStatementThatDoesntLoopJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 101,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSNonASCIINames",
                "shortDescription": {
                  "text": "Identifiers with non-ASCII symbols"
                },
                "fullDescription": {
                  "text": "Reports a non-ASCII symbol in a name. If the 'Allow only ASCII names' option is selected, reports all names that contain non-ASCII symbols. Otherwise reports all names that contain both ASCII and non-ASCII symbols. Inspection ID: JSNonASCIINames",
                  "markdown": "Reports a non-ASCII symbol in a name.  \n\nIf the 'Allow only ASCII names' option is selected, reports all names that contain non-ASCII symbols.  \nOtherwise reports all names that contain both ASCII and non-ASCII symbols.\n\nInspection ID: JSNonASCIINames"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSNonASCIINames",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Naming conventions",
                      "index": 150,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6MissingAwait",
                "shortDescription": {
                  "text": "Missing await for an async function call"
                },
                "fullDescription": {
                  "text": "Reports an 'async' function call without an expected 'await' prefix inside an 'async' function. Such call returns a 'Promise' and control flow is continued immediately. Example: 'async function bar() { /* ... */ }\nasync function foo() {\n    bar(); // bad\n}' After the quick-fix is applied, the 'await' prefix is added: 'async function bar() { /* ... */ }\nasync function foo() {\n    await bar(); // good\n}' When the 'Report for promises in return statements' checkbox is selected, also suggests adding 'await' in return statements. While this is generally not necessary, it gives two main benefits. You won't forget to add 'await' when surrounding your code with 'try-catch'. An explicit 'await' helps V8 runtime to provide async stack traces. Inspection ID: ES6MissingAwait",
                  "markdown": "Reports an `async` function call without an expected `await` prefix inside an `async` function. Such call returns a `Promise` and control flow is continued immediately.\n\nExample:\n\n\n    async function bar() { /* ... */ }\n    async function foo() {\n        bar(); // bad\n    }\n\n\nAfter the quick-fix is applied, the `await` prefix is added:\n\n\n    async function bar() { /* ... */ }\n    async function foo() {\n        await bar(); // good\n    }\n\nWhen the 'Report for promises in return statements' checkbox is selected, also suggests adding `await` in return statements.  \nWhile this is generally not necessary, it gives two main benefits.  \n\n* You won't forget to add `await` when surrounding your code with `try-catch`.\n* An explicit `await` helps V8 runtime to provide [async stack traces](https://bit.ly/v8-zero-cost-async-stack-traces).\n\nInspection ID: ES6MissingAwait"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ES6MissingAwait",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Async code and promises",
                      "index": 149,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TailRecursionJS",
                "shortDescription": {
                  "text": "Tail recursion"
                },
                "fullDescription": {
                  "text": "Reports a tail recursion, that is, when a function calls itself as its last action before returning. A tail recursion can always be replaced by looping, which will be considerably faster. Some JavaScript engines perform this optimization, while others do not. Thus, tail recursive solutions may have considerably different performance characteristics in different environments. Inspection ID: TailRecursionJS",
                  "markdown": "Reports a tail recursion, that is, when a function calls itself as its last action before returning. A tail recursion can always be replaced by looping, which will be considerably faster. Some JavaScript engines perform this optimization, while others do not. Thus, tail recursive solutions may have considerably different performance characteristics in different environments.\n\nInspection ID: TailRecursionJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "TailRecursionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Performance"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 101,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConfusingPlusesOrMinusesJS",
                "shortDescription": {
                  "text": "Confusing sequence of '+' or '-'"
                },
                "fullDescription": {
                  "text": "Reports a suspicious combination of '+' or '-' characters in JavaScript code (for example, 'a+++b'. Such sequences are confusing, and their semantics may change through changes in the whitespace. Inspection ID: ConfusingPlusesOrMinusesJS",
                  "markdown": "Reports a suspicious combination of `+` or `-` characters in JavaScript code (for example, `a+++b`. Such sequences are confusing, and their semantics may change through changes in the whitespace.\n\nInspection ID: ConfusingPlusesOrMinusesJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ConfusingPlusesOrMinusesJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Security"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 47,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptConfig",
                "shortDescription": {
                  "text": "Inconsistent tsconfig.json properties"
                },
                "fullDescription": {
                  "text": "Reports inconsistency of a 'paths', 'checkJs', or 'extends' property in a tsconfig.json file. The 'checkJs' property requires 'allowJs'. The 'extends' property should be a valid file reference. Inspection ID: TypeScriptConfig",
                  "markdown": "Reports inconsistency of a `paths`, `checkJs`, or `extends` property in a tsconfig.json file.   \nThe `checkJs` property requires `allowJs`.   \nThe `extends` property should be a valid file reference.\n\nInspection ID: TypeScriptConfig"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "TypeScriptConfig",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 78,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSIgnoredPromiseFromCall",
                "shortDescription": {
                  "text": "Result of method call returning a promise is ignored"
                },
                "fullDescription": {
                  "text": "Reports a function call that returns a 'Promise' that is not used later. Such calls are usually unintended and indicate an error. Inspection ID: JSIgnoredPromiseFromCall",
                  "markdown": "Reports a function call that returns a `Promise` that is not used later. Such calls are usually unintended and indicate an error.\n\nInspection ID: JSIgnoredPromiseFromCall"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSIgnoredPromiseFromCall",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Async code and promises",
                      "index": 149,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OverlyComplexBooleanExpressionJS",
                "shortDescription": {
                  "text": "Overly complex boolean expression"
                },
                "fullDescription": {
                  "text": "Reports a boolean expression with too many terms. Such expressions may be confusing and bug-prone. Use the field below to specify the maximum number of terms allowed in an arithmetic expression. Inspection ID: OverlyComplexBooleanExpressionJS",
                  "markdown": "Reports a boolean expression with too many terms. Such expressions may be confusing and bug-prone.\n\n\nUse the field below to specify the maximum number of terms allowed in an arithmetic expression.\n\nInspection ID: OverlyComplexBooleanExpressionJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "OverlyComplexBooleanExpressionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 47,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OverlyComplexArithmeticExpressionJS",
                "shortDescription": {
                  "text": "Overly complex arithmetic expression"
                },
                "fullDescription": {
                  "text": "Reports an arithmetic expression with too many terms. Such expressions may be confusing and bug-prone. Use the field below to specify the maximum number of terms allowed in an arithmetic expression. Inspection ID: OverlyComplexArithmeticExpressionJS",
                  "markdown": "Reports an arithmetic expression with too many terms. Such expressions may be confusing and bug-prone.\n\n\nUse the field below to specify the maximum number of terms allowed in an arithmetic expression.\n\nInspection ID: OverlyComplexArithmeticExpressionJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "OverlyComplexArithmeticExpressionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 47,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StringLiteralBreaksHTMLJS",
                "shortDescription": {
                  "text": "String literal which breaks HTML parsing"
                },
                "fullDescription": {
                  "text": "Reports a string literal that contains a '</' sequence. Such strings may result in incorrect parsing of any HTML in which the JavaScript code is embedded. Inspection ID: StringLiteralBreaksHTMLJS",
                  "markdown": "Reports a string literal that contains a `</` sequence. Such strings may result in incorrect parsing of any HTML in which the JavaScript code is embedded.\n\nInspection ID: StringLiteralBreaksHTMLJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "StringLiteralBreaksHTMLJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Security"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Validity issues",
                      "index": 45,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DuplicateConditionJS",
                "shortDescription": {
                  "text": "Duplicate condition in 'if' statement"
                },
                "fullDescription": {
                  "text": "Reports duplicate conditions in different branches of an 'if' statement. Duplicate conditions usually represent programmer oversight. Example: 'if (a) {\n    ...\n  } else if (a) {\n    ...\n  }'\n Inspection ID: DuplicateConditionJS",
                  "markdown": "Reports duplicate conditions in different branches of an `if` statement. Duplicate conditions usually represent programmer oversight.\n\nExample:\n\n\n      if (a) {\n        ...\n      } else if (a) {\n        ...\n      }\n\nInspection ID: DuplicateConditionJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "DuplicateConditionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 101,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSComparisonWithNaN",
                "shortDescription": {
                  "text": "Comparison with NaN"
                },
                "fullDescription": {
                  "text": "Reports a comparison with NaN. Comparisons like 'expr == NaN' or 'expr === NaN' are always evaluated to 'false'. Inspection ID: JSComparisonWithNaN",
                  "markdown": "Reports a comparison with NaN. Comparisons like `expr == NaN` or `expr === NaN` are always evaluated to `false`.\n\nInspection ID: JSComparisonWithNaN"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSComparisonWithNaN",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 86,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryLabelJS",
                "shortDescription": {
                  "text": "Unnecessary label"
                },
                "fullDescription": {
                  "text": "Reports an unused label. Inspection ID: UnnecessaryLabelJS",
                  "markdown": "Reports an unused label.\n\nInspection ID: UnnecessaryLabelJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnnecessaryLabelJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 101,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUnresolvedReference",
                "shortDescription": {
                  "text": "Unresolved reference"
                },
                "fullDescription": {
                  "text": "Reports an unresolved reference in JavaScript code. Inspection ID: JSUnresolvedReference",
                  "markdown": "Reports an unresolved reference in JavaScript code.\n\nInspection ID: JSUnresolvedReference"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSUnresolvedReference",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 35,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PlatformDetectionJS",
                "shortDescription": {
                  "text": "Inaccurate platform detection"
                },
                "fullDescription": {
                  "text": "Reports a common JavaScript pattern for detecting the browser or operating system in which the script is run. In addition to pointing out non-portable constructs, these platform detection patterns are often incomplete and easily fooled. For most cases, detection of individual environment features is preferable to attempting to detect the entire platform. Patterns detected include: 'document.all' 'document.layers' 'navigator.userAgent' 'navigator.oscpu' 'navigator.appName' 'navigator.appCodeName' 'navigator.platform' Inspection ID: PlatformDetectionJS",
                  "markdown": "Reports a common JavaScript pattern for detecting the browser or operating system in which the script is run. In addition to pointing out non-portable constructs, these platform detection patterns are often incomplete and easily fooled. For most cases, detection of individual environment features is preferable to attempting to detect the entire platform.\n\nPatterns detected include:\n\n* `document.all`\n* `document.layers`\n* `navigator.userAgent`\n* `navigator.oscpu`\n* `navigator.appName`\n* `navigator.appCodeName`\n* `navigator.platform`\n\nInspection ID: PlatformDetectionJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PlatformDetectionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/DOM issues",
                      "index": 84,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptDuplicateUnionOrIntersectionType",
                "shortDescription": {
                  "text": "Duplicate union or intersection type component"
                },
                "fullDescription": {
                  "text": "Reports a duplicate type inside a union or intersection. Inspection ID: TypeScriptDuplicateUnionOrIntersectionType",
                  "markdown": "Reports a duplicate type inside a union or intersection.\n\nInspection ID: TypeScriptDuplicateUnionOrIntersectionType"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "TypeScriptDuplicateUnionOrIntersectionType",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 78,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6UnusedImports",
                "shortDescription": {
                  "text": "Unused import"
                },
                "fullDescription": {
                  "text": "Reports a redundant 'import' statement. This is usually the case if the imported symbols are not used in the source file. To avoid side-effects, consider using bare import 'import 'packageName'' instead of the regular one. Inspection ID: ES6UnusedImports",
                  "markdown": "Reports a redundant `import` statement. This is usually the case if the imported symbols are not used in the source file. To avoid side-effects, consider using bare import `import 'packageName'` instead of the regular one.\n\nInspection ID: ES6UnusedImports"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ES6UnusedImports",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Imports and dependencies",
                      "index": 142,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InnerHTMLJS",
                "shortDescription": {
                  "text": "Use of 'innerHTML' property"
                },
                "fullDescription": {
                  "text": "Reports a JavaScript access to DOM nodes as text using the 'innerHTML' property. Most usages of 'innerHTML' are performed better with explicit DOM calls, such as 'getElementByID()' and 'createElement()'. Additionally, 'innerHTML' will not work with XML DOMs, including DOMs for XHTML if viewed as XML. This can lead to difficulties in diagnosing bugs. Inspection ID: InnerHTMLJS",
                  "markdown": "Reports a JavaScript access to DOM nodes as text using the `innerHTML` property. Most usages of `innerHTML` are performed better with explicit DOM calls, such as `getElementByID()` and `createElement()`. Additionally, `innerHTML` will not work with XML DOMs, including DOMs for XHTML if viewed as XML. This can lead to difficulties in diagnosing bugs.\n\nInspection ID: InnerHTMLJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "InnerHTMLJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Performance"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/DOM issues",
                      "index": 84,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VoidExpressionJS",
                "shortDescription": {
                  "text": "'void' expression"
                },
                "fullDescription": {
                  "text": "Reports a 'void' expression. Inspection ID: VoidExpressionJS",
                  "markdown": "Reports a `void` expression.\n\nInspection ID: VoidExpressionJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "VoidExpressionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 55,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSAssignmentUsedAsCondition",
                "shortDescription": {
                  "text": "Assignment used as condition"
                },
                "fullDescription": {
                  "text": "Reports an assignment that is used as the condition of an 'if', 'while', 'for', or 'do' statement. Although occasionally intended, this usage is confusing, and often indicates a typo (for example, '=' instead of '=='). Inspection ID: JSAssignmentUsedAsCondition",
                  "markdown": "Reports an assignment that is used as the condition of an `if`, `while`, `for`, or `do` statement. Although occasionally intended, this usage is confusing, and often indicates a typo (for example, `=` instead of `==`).\n\n\nInspection ID: JSAssignmentUsedAsCondition"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSAssignmentUsedAsCondition",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Assignment issues",
                      "index": 71,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ForLoopReplaceableByWhileJS",
                "shortDescription": {
                  "text": "'for' loop may be replaced by 'while' loop"
                },
                "fullDescription": {
                  "text": "Reports a 'for' loop that contains neither initialization nor an update component. Suggests replacing the loop with a simpler 'while' statement. Example: 'for(; exitCondition(); ) {\n    process();\n  }' After the quick-fix is applied the result looks like: 'while(exitCondition()) {\n    process();\n  }' Use the checkbox below if you wish this inspection to ignore for loops with trivial or non-existent conditions. Inspection ID: ForLoopReplaceableByWhileJS",
                  "markdown": "Reports a `for` loop that contains neither initialization nor an update component. Suggests replacing the loop with a simpler `while` statement.\n\nExample:\n\n\n      for(; exitCondition(); ) {\n        process();\n      }\n\nAfter the quick-fix is applied the result looks like:\n\n\n      while(exitCondition()) {\n        process();\n      }\n\nUse the checkbox below if you wish this inspection to ignore **for** loops with trivial or non-existent conditions.\n\nInspection ID: ForLoopReplaceableByWhileJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ForLoopReplaceableByWhile",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 101,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSVoidFunctionReturnValueUsed",
                "shortDescription": {
                  "text": "Void function return value used"
                },
                "fullDescription": {
                  "text": "Reports a return value of a function that doesn't return anything. Calling of such functions always produces an 'undefined' value and such assignment may indicate an error. Example: 'let a = console.log('foo');' The following usages are ignored: Inside a return statement In some binary operations For overridden non-void functions Inspection ID: JSVoidFunctionReturnValueUsed",
                  "markdown": "Reports a return value of a function that doesn't return anything. Calling of such functions always produces an `undefined` value and such assignment may indicate an error.\n\nExample:\n\n\n    let a = console.log('foo');\n\nThe following usages are ignored:\n\n* Inside a return statement\n* In some binary operations\n* For overridden non-void functions\n\nInspection ID: JSVoidFunctionReturnValueUsed"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSVoidFunctionReturnValueUsed",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 86,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReturnFromFinallyBlockJS",
                "shortDescription": {
                  "text": "'return' inside 'finally' block"
                },
                "fullDescription": {
                  "text": "Reports a 'return' statement inside a 'finally' block. Such 'return' statements may mask exceptions thrown, and complicate debugging. Inspection ID: ReturnFromFinallyBlockJS",
                  "markdown": "Reports a `return` statement inside a `finally` block. Such `return` statements may mask exceptions thrown, and complicate debugging.\n\nInspection ID: ReturnFromFinallyBlockJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ReturnInsideFinallyBlockJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Try statement issues",
                      "index": 50,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConstantConditionalExpressionJS",
                "shortDescription": {
                  "text": "Constant conditional expression"
                },
                "fullDescription": {
                  "text": "Reports a conditional expression in the format 'true? result1: result2' or 'false? result1: result2. Suggests simplifying the expression. Inspection ID: ConstantConditionalExpressionJS'",
                  "markdown": "Reports a conditional expression in the format `true? result1: result2` or `false? result1: result2``.\nSuggests simplifying the expression.\n`\n\nInspection ID: ConstantConditionalExpressionJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ConstantConditionalExpressionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 101,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NonBlockStatementBodyJS",
                "shortDescription": {
                  "text": "Statement body without braces"
                },
                "fullDescription": {
                  "text": "Reports a 'if', 'while', 'for', or 'with' statements whose body is not a block statement. Using code block in statement bodies is usually safer for downstream maintenance. Inspection ID: NonBlockStatementBodyJS",
                  "markdown": "Reports a `if`, `while`, `for`, or `with` statements whose body is not a block statement. Using code block in statement bodies is usually safer for downstream maintenance.\n\nInspection ID: NonBlockStatementBodyJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NonBlockStatementBodyJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 117,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSValidateJSDoc",
                "shortDescription": {
                  "text": "Syntax errors and unresolved references in JSDoc"
                },
                "fullDescription": {
                  "text": "Reports a syntax discrepancy in a documentation comment. Inspection ID: JSValidateJSDoc",
                  "markdown": "Reports a syntax discrepancy in a documentation comment.\n\nInspection ID: JSValidateJSDoc"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSValidateJSDoc",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 35,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FlowJSConfig",
                "shortDescription": {
                  "text": "Missing .flowconfig"
                },
                "fullDescription": {
                  "text": "Reports a JavaScript file with a '@flow' flag that doesn't have an associated '.flowconfig' file in the project. Inspection ID: FlowJSConfig",
                  "markdown": "Reports a JavaScript file with a `@flow` flag that doesn't have an associated `.flowconfig` file in the project.\n\nInspection ID: FlowJSConfig"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "FlowJSConfig",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Flow type checker",
                      "index": 167,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptValidateTypes",
                "shortDescription": {
                  "text": "Type mismatch"
                },
                "fullDescription": {
                  "text": "Reports a parameter, return value, or assigned expression of incorrect type. Inspection ID: TypeScriptValidateTypes",
                  "markdown": "Reports a parameter, return value, or assigned expression of incorrect type.\n\nInspection ID: TypeScriptValidateTypes"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "TypeScriptValidateTypes",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 78,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StatementsPerFunctionJS",
                "shortDescription": {
                  "text": "Overly long function"
                },
                "fullDescription": {
                  "text": "Reports an overly long function. Function length is calculated by counting up the number of non-empty statements in the function. Functions that are too long are error-prone and difficult to test. Use the field below to specify the maximum acceptable number of statements in a function. Inspection ID: StatementsPerFunctionJS",
                  "markdown": "Reports an overly long function. Function length is calculated by counting up the number of non-empty statements in the function. Functions that are too long are error-prone and difficult to test.\n\n\nUse the field below to specify the maximum acceptable number of statements in a function.\n\nInspection ID: StatementsPerFunctionJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "FunctionTooLongJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Function metrics",
                      "index": 115,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ContinueStatementWithLabelJS",
                "shortDescription": {
                  "text": "'continue' statement with label"
                },
                "fullDescription": {
                  "text": "Reports a labeled 'continue' statement. Inspection ID: ContinueStatementWithLabelJS",
                  "markdown": "Reports a labeled `continue` statement.\n\nInspection ID: ContinueStatementWithLabelJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ContinueStatementWithLabelJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 55,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSObjectNullOrUndefined",
                "shortDescription": {
                  "text": "Object is 'null' or 'undefined'"
                },
                "fullDescription": {
                  "text": "Reports an error caused by invoking a method, accessing a property, or calling a function on an object that is 'undefined' or 'null'. Inspection ID: JSObjectNullOrUndefined",
                  "markdown": "Reports an error caused by invoking a method, accessing a property, or calling a function on an object that is `undefined` or `null`.\n\nInspection ID: JSObjectNullOrUndefined"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSObjectNullOrUndefined",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 101,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptMissingConfigOption",
                "shortDescription": {
                  "text": "Missing tsconfig.json option "
                },
                "fullDescription": {
                  "text": "Reports a usage that requires an explicit option in 'tsconfig.json'. For example, to use JSX in '.tsx' files, 'tsconfig.json' must contain '\"jsx\"' property. Inspection ID: TypeScriptMissingConfigOption",
                  "markdown": "Reports a usage that requires an explicit option in `tsconfig.json`. For example, to use JSX in `.tsx` files, `tsconfig.json` must contain `\"jsx\"` property.\n\nInspection ID: TypeScriptMissingConfigOption"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "TypeScriptMissingConfigOption",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 78,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6ShorthandObjectProperty",
                "shortDescription": {
                  "text": "Property can be replaced with shorthand"
                },
                "fullDescription": {
                  "text": "Reports an object property that can be converted to ES6 shorthand style and provides a quick-fix to do it. Example: 'var obj = {foo:foo}' After applying the quick-fix the code looks as follows: 'var obj = {foo}' Inspection ID: ES6ShorthandObjectProperty",
                  "markdown": "Reports an object property that can be converted to ES6 shorthand style and provides a quick-fix to do it.\n\nExample:\n\n\n    var obj = {foo:foo}\n\nAfter applying the quick-fix the code looks as follows:\n\n\n    var obj = {foo}\n\nInspection ID: ES6ShorthandObjectProperty"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ES6ShorthandObjectProperty",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 35,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSPotentiallyInvalidConstructorUsage",
                "shortDescription": {
                  "text": "Potentially invalid constructor usage"
                },
                "fullDescription": {
                  "text": "Reports a usage of a potentially invalid constructor function, for example: a function that is not a constructor after 'new', using a constructor's prototype or calling a constructor without 'new'. A constructor function is assumed to have an upper case name (optional) or have an explicit JSDoc '@constructor' tag. Inspection ID: JSPotentiallyInvalidConstructorUsage",
                  "markdown": "Reports a usage of a potentially invalid constructor function, for example: a function that is not a constructor after `new`, using a constructor's prototype or calling a constructor without `new`. A constructor function is assumed to have an upper case name (optional) or have an explicit JSDoc `@constructor` tag.\n\nInspection ID: JSPotentiallyInvalidConstructorUsage"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSPotentiallyInvalidConstructorUsage",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 86,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PointlessArithmeticExpressionJS",
                "shortDescription": {
                  "text": "Pointless arithmetic expression"
                },
                "fullDescription": {
                  "text": "Reports an arithmetic expression that include adding or subtracting zero, multiplying by zero or one, division by one, and shift by zero. Such expressions may result from not fully completed automated refactoring. Inspection ID: PointlessArithmeticExpressionJS",
                  "markdown": "Reports an arithmetic expression that include adding or subtracting zero, multiplying by zero or one, division by one, and shift by zero. Such expressions may result from not fully completed automated refactoring.\n\nInspection ID: PointlessArithmeticExpressionJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PointlessArithmeticExpressionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Performance"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 47,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NodeCoreCodingAssistance",
                "shortDescription": {
                  "text": "Unresolved Node.js APIs"
                },
                "fullDescription": {
                  "text": "Suggests configuring coding assistance for Node.js, for example, 'require' and/or core modules ('path', 'http', 'fs', etc.). See https://nodejs.org/api/ for the complete list. Inspection ID: NodeCoreCodingAssistance",
                  "markdown": "Suggests configuring coding assistance for Node.js, for example, `require` and/or core modules ('path', 'http', 'fs', etc.).\n\n\nSee <https://nodejs.org/api/> for the complete list.\n\nInspection ID: NodeCoreCodingAssistance"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NodeCoreCodingAssistance",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Node.js",
                      "index": 169,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSPrimitiveTypeWrapperUsage",
                "shortDescription": {
                  "text": "Primitive type object wrapper used"
                },
                "fullDescription": {
                  "text": "Reports an improper usage of a wrapper for primitive types or a property of a primitive type being modified, as in the latter case the assigned value will be lost. Inspection ID: JSPrimitiveTypeWrapperUsage",
                  "markdown": "Reports an improper usage of a wrapper for primitive types or a property of a primitive type being modified, as in the latter case the assigned value will be lost.\n\nInspection ID: JSPrimitiveTypeWrapperUsage"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSPrimitiveTypeWrapperUsage",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 35,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptSmartCast",
                "shortDescription": {
                  "text": "Narrowed type"
                },
                "fullDescription": {
                  "text": "Reports a usage of a variable where the variable type is narrowed by a type guard. Note that severity level doesn't affect this inspection. Inspection ID: TypeScriptSmartCast",
                  "markdown": "Reports a usage of a variable where the variable type is narrowed by a type guard. Note that severity level doesn't affect this inspection.\n\nInspection ID: TypeScriptSmartCast"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "TypeScriptSmartCast",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 78,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSLastCommaInArrayLiteral",
                "shortDescription": {
                  "text": "Unneeded last comma in array literal"
                },
                "fullDescription": {
                  "text": "Reports a usage of a trailing comma in an array literal. The warning is reported only when the JavaScript language version is set to ECMAScript 5.1. Although trailing commas in arrays are allowed by the specification, some browsers may throw an error when a trailing comma is used. You can configure formatting options for trailing commas in Code Style | JavaScript or TypeScript | Punctuation. Inspection ID: JSLastCommaInArrayLiteral",
                  "markdown": "Reports a usage of a trailing comma in an array literal.\n\nThe warning is reported only when the JavaScript language version is set to ECMAScript 5.1.\n\nAlthough trailing commas in arrays are allowed by the specification, some browsers may throw an error when a trailing comma is used.\n\nYou can configure formatting options for trailing commas in **Code Style** \\| **JavaScript** or **TypeScript** \\| **Punctuation**.\n\nInspection ID: JSLastCommaInArrayLiteral"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSLastCommaInArrayLiteral",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 35,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NegatedConditionalExpressionJS",
                "shortDescription": {
                  "text": "Negated conditional expression"
                },
                "fullDescription": {
                  "text": "Reports a conditional expression whose condition is negated. Suggests flipping the order of branches in the conditional expression to increase the clarity of the statement. Example: '!condition ? 2 : 1' Inspection ID: NegatedConditionalExpressionJS",
                  "markdown": "Reports a conditional expression whose condition is negated. Suggests flipping the order of branches in the conditional expression to increase the clarity of the statement. Example: `!condition ? 2 : 1`\n\nInspection ID: NegatedConditionalExpressionJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NegatedConditionalExpressionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 47,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSAccessibilityCheck",
                "shortDescription": {
                  "text": "Inaccessible @private and @protected members referenced"
                },
                "fullDescription": {
                  "text": "Reports a reference to a JavaScript member that is marked with a '@private' or '@protected' tag but does not comply with visibility rules that these tags imply. Inspection ID: JSAccessibilityCheck",
                  "markdown": "Reports a reference to a JavaScript member that is marked with a `@private` or `@protected` tag but does not comply with visibility rules that these tags imply.\n\nInspection ID: JSAccessibilityCheck"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSAccessibilityCheck",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 35,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FunctionWithMultipleLoopsJS",
                "shortDescription": {
                  "text": "Function with multiple loops"
                },
                "fullDescription": {
                  "text": "Reports a function with multiple loop statements. Inspection ID: FunctionWithMultipleLoopsJS",
                  "markdown": "Reports a function with multiple loop statements.\n\nInspection ID: FunctionWithMultipleLoopsJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "FunctionWithMultipleLoopsJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Performance"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Function metrics",
                      "index": 115,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LabeledStatementJS",
                "shortDescription": {
                  "text": "Labeled statement"
                },
                "fullDescription": {
                  "text": "Reports a labeled statement. Inspection ID: LabeledStatementJS",
                  "markdown": "Reports a labeled statement.\n\nInspection ID: LabeledStatementJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "LabeledStatementJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 55,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NpmUsedModulesInstalled",
                "shortDescription": {
                  "text": "Missing module dependency"
                },
                "fullDescription": {
                  "text": "Reports a module from a 'require()' call or an 'import' statement that is not installed or is not listed in package.json dependencies. Suggests installing the module and/or including it into package.json. For 'require()' calls, works only in the files from the scope of Node.js Core JavaScript library. Inspection ID: NpmUsedModulesInstalled",
                  "markdown": "Reports a module from a `require()` call or an `import` statement that is not installed or is not listed in package.json dependencies.\n\nSuggests installing the module and/or including it into package.json.\n\nFor `require()` calls, works only in the files from the scope of *Node.js Core* JavaScript library.\n\nInspection ID: NpmUsedModulesInstalled"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "NpmUsedModulesInstalled",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Imports and dependencies",
                      "index": 142,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "WithStatementJS",
                "shortDescription": {
                  "text": "'with' statement"
                },
                "fullDescription": {
                  "text": "Reports a 'with' statements. Such statements result in potentially confusing implicit bindings, and may behave strangely in setting new variables. Inspection ID: WithStatementJS",
                  "markdown": "Reports a `with` statements. Such statements result in potentially confusing implicit bindings, and may behave strangely in setting new variables.\n\nInspection ID: WithStatementJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "WithStatementJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 55,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSConstantReassignment",
                "shortDescription": {
                  "text": "Attempt to assign to const or readonly variable"
                },
                "fullDescription": {
                  "text": "Reports reassigning a value to a constant or a readonly variable. Inspection ID: JSConstantReassignment",
                  "markdown": "Reports reassigning a value to a constant or a readonly variable.\n\nInspection ID: JSConstantReassignment"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "JSConstantReassignment",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Validity issues",
                      "index": 45,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MagicNumberJS",
                "shortDescription": {
                  "text": "Magic number"
                },
                "fullDescription": {
                  "text": "Reports a \"magic number\" that is a numeric literal used without being named by a constant declaration. Magic numbers can result in code whose intention is unclear, and may result in errors if a magic number is changed in one code location but remains unchanged in another. The numbers 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 100, 1000, 0.0 and 1.0 are ignored. Inspection ID: MagicNumberJS",
                  "markdown": "Reports a \"magic number\" that is a numeric literal used without being named by a constant declaration. Magic numbers can result in code whose intention is unclear, and may result in errors if a magic number is changed in one code location but remains unchanged in another. The numbers 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 100, 1000, 0.0 and 1.0 are ignored.\n\nInspection ID: MagicNumberJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MagicNumberJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 47,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FunctionNamingConventionJS",
                "shortDescription": {
                  "text": "Function naming convention"
                },
                "fullDescription": {
                  "text": "Reports a function whose name is too short, too long, or does not follow the specified regular expression pattern. Use the fields provided below to specify minimum length, maximum length, and a regular expression for function names. Use the standard 'java.util.regex' format for regular expressions. Inspection ID: FunctionNamingConventionJS",
                  "markdown": "Reports a function whose name is too short, too long, or does not follow the specified regular expression pattern.\n\n\nUse the fields provided below to specify minimum length, maximum length, and a regular expression\nfor function names. Use the standard `java.util.regex` format for regular expressions.\n\nInspection ID: FunctionNamingConventionJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "FunctionNamingConventionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Naming conventions",
                      "index": 150,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptLibrary",
                "shortDescription": {
                  "text": "Missing global library"
                },
                "fullDescription": {
                  "text": "Reports a TypeScript library file that is required for a symbol but is not listed under the 'lib' compiler option in 'tsconfig.json'. Inspection ID: TypeScriptLibrary",
                  "markdown": "Reports a TypeScript library file that is required for a symbol but is not listed under the `lib` compiler option in `tsconfig.json`.\n\nInspection ID: TypeScriptLibrary"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "TypeScriptLibrary",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 78,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptMissingAugmentationImport",
                "shortDescription": {
                  "text": "Missing augmentation import"
                },
                "fullDescription": {
                  "text": "Reports a usage from augmentation module without an explicit import. Inspection ID: TypeScriptMissingAugmentationImport",
                  "markdown": "Reports a usage from [augmentation module](https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation) without an explicit import.\n\nInspection ID: TypeScriptMissingAugmentationImport"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "TypeScriptMissingAugmentationImport",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 78,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ObjectAllocationIgnoredJS",
                "shortDescription": {
                  "text": "Result of object allocation ignored"
                },
                "fullDescription": {
                  "text": "Reports object allocation where the result of the allocated object is ignored, for example, 'new Error();' as a statement, without any assignment. Such allocation expressions may indicate an odd object initialization strategy. Inspection ID: ObjectAllocationIgnoredJS",
                  "markdown": "Reports object allocation where the result of the allocated object is ignored, for example, `new Error();` as a statement, without any assignment. Such allocation expressions may indicate an odd object initialization strategy.\n\nInspection ID: ObjectAllocationIgnoredJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ObjectAllocationIgnored",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 86,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSHint",
                "shortDescription": {
                  "text": "JSHint"
                },
                "fullDescription": {
                  "text": "Reports a problem detected by the JSHint linter. Inspection ID: JSHint",
                  "markdown": "Reports a problem detected by the [JSHint](https://jshint.com/) linter.\n\nInspection ID: JSHint"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "JSHint",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code quality tools",
                      "index": 105,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Eslint",
                "shortDescription": {
                  "text": "ESLint"
                },
                "fullDescription": {
                  "text": "Reports a discrepancy detected by the ESLint linter. The highlighting is based on the rule severity specified in the ESLint configuration file for each individual rule. Clear the 'Use rule severity from the configuration file' checkbox to use the severity configured in this inspection for all ESLint rules. Inspection ID: Eslint",
                  "markdown": "Reports a discrepancy detected by the [ESLint](https://eslint.org) linter.   \n\nThe highlighting is based on the rule severity specified in the [ESLint configuration file](https://eslint.org/docs/user-guide/configuring) for each individual rule.   \n\nClear the 'Use rule severity from the configuration file' checkbox to use the severity configured in this inspection for all ESLint rules.\n\nInspection ID: Eslint"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "Eslint",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code quality tools",
                      "index": 105,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSEqualityComparisonWithCoercion.TS",
                "shortDescription": {
                  "text": "Equality operator may cause type coercion"
                },
                "fullDescription": {
                  "text": "Reports a usage of equality operators may cause unexpected type coercions. Suggests replacing '==' or '!=' equality operators with type-safe '===' or '!==' operators. Depending on the option selected, one of the following cases will be reported: All usages of '==' and '!=' operators. All usages except comparison with null. Some code styles allow using 'x == null' as a replacement for 'x === null || x === undefined'. Only suspicious expressions, such as: '==' or '!=' comparisons with '0', '''', 'null', 'true', 'false', or 'undefined'. Inspection ID: JSEqualityComparisonWithCoercion.TS",
                  "markdown": "Reports a usage of equality operators may cause unexpected type coercions. Suggests replacing `==` or `!=` equality operators with type-safe `===` or `!==` operators.\n\nDepending on the option selected, one of the following cases will be reported:\n\n* All usages of `==` and `!=` operators.\n* All usages except comparison with null. Some code styles allow using `x == null` as a replacement for `x === null || x === undefined`.\n* Only suspicious expressions, such as: `==` or `!=` comparisons with `0`, `''`, `null`, `true`, `false`, or `undefined`.\n\nInspection ID: JSEqualityComparisonWithCoercion.TS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EqualityComparisonWithCoercionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Security"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 78,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ExceptionCaughtLocallyJS",
                "shortDescription": {
                  "text": "Exception used for local control-flow"
                },
                "fullDescription": {
                  "text": "Reports a 'throw' statement whose exceptions are always caught by the containing 'try' statement. Using 'throw' statements as a 'goto' to change the local flow of control is confusing. Inspection ID: ExceptionCaughtLocallyJS",
                  "markdown": "Reports a `throw` statement whose exceptions are always caught by the containing `try` statement. Using `throw` statements as a `goto` to change the local flow of control is confusing.\n\nInspection ID: ExceptionCaughtLocallyJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ExceptionCaughtLocallyJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Try statement issues",
                      "index": 50,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CyclomaticComplexityJS",
                "shortDescription": {
                  "text": "Overly complex function"
                },
                "fullDescription": {
                  "text": "Reports a function with too many branching points in a function (too high cyclomatic complexity). Such functions may be confusing and hard to test. Use the field provided below to specify the maximum acceptable cyclomatic complexity for a function. Inspection ID: CyclomaticComplexityJS",
                  "markdown": "Reports a function with too many branching points in a function (too high cyclomatic complexity). Such functions may be confusing and hard to test.\n\n\nUse the field provided below to specify the maximum acceptable cyclomatic complexity for a function.\n\nInspection ID: CyclomaticComplexityJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "OverlyComplexFunctionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Performance"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Function metrics",
                      "index": 115,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PackageJsonMismatchedDependency",
                "shortDescription": {
                  "text": "Mismatched dependencies in package.json"
                },
                "fullDescription": {
                  "text": "Reports a dependency from package.json that is not installed or doesn't match the specified version range. Inspection ID: PackageJsonMismatchedDependency",
                  "markdown": "Reports a dependency from package.json that is not installed or doesn't match the specified [version range](https://docs.npmjs.com/about-semantic-versioning).\n\nInspection ID: PackageJsonMismatchedDependency"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PackageJsonMismatchedDependency",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Imports and dependencies",
                      "index": 142,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InfiniteLoopJS",
                "shortDescription": {
                  "text": "Infinite loop statement"
                },
                "fullDescription": {
                  "text": "Reports a 'for', 'while', or 'do' statement which can only exit by throwing an exception. Such statements often indicate coding errors. Inspection ID: InfiniteLoopJS",
                  "markdown": "Reports a `for`, `while`, or `do` statement which can only exit by throwing an exception. Such statements often indicate coding errors.\n\nInspection ID: InfiniteLoopJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "InfiniteLoopJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 86,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSArrowFunctionBracesCanBeRemoved",
                "shortDescription": {
                  "text": "Redundant braces around arrow function body"
                },
                "fullDescription": {
                  "text": "Reports an arrow function whose body only consists of braces and exactly one statement. Suggests converting to concise syntax without braces. 'let incrementer = (x) => {return x + 1};' After the quick-fix is applied, the code fragment looks as follows: 'let incrementer = (x) => x + 1;' Inspection ID: JSArrowFunctionBracesCanBeRemoved",
                  "markdown": "Reports an arrow function whose body only consists of braces and exactly one statement. Suggests converting to concise syntax without braces.\n\n\n        let incrementer = (x) => {return x + 1};\n\nAfter the quick-fix is applied, the code fragment looks as follows:\n\n\n        let incrementer = (x) => x + 1;\n\nInspection ID: JSArrowFunctionBracesCanBeRemoved"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSArrowFunctionBracesCanBeRemoved",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 117,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSClassNamingConvention",
                "shortDescription": {
                  "text": "Class naming convention"
                },
                "fullDescription": {
                  "text": "Reports a class or a function that is annotated with a JSDoc '@constructor' or '@class' tag whose names are too short, too long, or do not follow the specified regular expression pattern. Use the fields provided below to specify minimum length, maximum length, and a regular expression expected for classes names. Use the standard 'java.util.regex' format for regular expressions. Inspection ID: JSClassNamingConvention",
                  "markdown": "Reports a class or a function that is annotated with a JSDoc `@constructor` or `@class` tag whose names are too short, too long, or do not follow the specified regular expression pattern.\n\n\nUse the fields provided below to specify minimum length, maximum length, and a regular expression\nexpected for classes names. Use the standard `java.util.regex` format for regular expressions.\n\nInspection ID: JSClassNamingConvention"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSClassNamingConvention",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Naming conventions",
                      "index": 150,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptJSXUnresolvedComponent",
                "shortDescription": {
                  "text": "Unresolved JSX component"
                },
                "fullDescription": {
                  "text": "Reports an unresolved reference to a JSX component. Suggests adding an import statement if the referenced component is defined in the project or its dependencies or creating a new component with the specified name. The template for a new component can be modified in Editor | File and Code Templates. Inspection ID: TypeScriptJSXUnresolvedComponent",
                  "markdown": "Reports an unresolved reference to a JSX component. Suggests adding an import statement if the referenced component is defined in the project or its dependencies or creating a new component with the specified name.\n\nThe template for a new component can be modified in Editor \\| File and Code Templates.\n\nInspection ID: TypeScriptJSXUnresolvedComponent"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "TypeScriptJSXUnresolvedComponent",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 78,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUnfilteredForInLoop",
                "shortDescription": {
                  "text": "Unfiltered for..in loop"
                },
                "fullDescription": {
                  "text": "Reports unfiltered 'for-in' loops. The use of this construct results in processing not only own properties of an object but properties from its prototype as well. It may be unexpected in some specific cases, for example, in utility methods that copy or modify all properties or when 'Object''s prototype may be incorrectly modified. For example, the following code will print 42 and myMethod: 'Object.prototype.myMethod = function myMethod() {};\nlet a = { foo: 42 };\nfor (let i in a) {\n  console.log(a[i]);\n}' Suggests replacing the whole loop with a 'Object.keys()' method or adding a 'hasOwnProperty()' check. After applying the quick-fix the code looks as follows: 'for (let i in a) {\n  if (a.hasOwnProperty(i)) {\n    console.log(a[i]);\n  }\n}' Inspection ID: JSUnfilteredForInLoop",
                  "markdown": "Reports unfiltered `for-in` loops.   \n\nThe use of this construct results in processing not only own properties of an object but properties from its prototype as well. It may be unexpected in some specific cases, for example, in utility methods that copy or modify all properties or when `Object`'s prototype may be incorrectly modified. For example, the following code will print **42** and **myMethod** :   \n\n\n    Object.prototype.myMethod = function myMethod() {};\n    let a = { foo: 42 };\n    for (let i in a) {\n      console.log(a[i]);\n    }\n\nSuggests replacing the whole loop with a `Object.keys()` method or adding a `hasOwnProperty()` check. After applying the quick-fix the code looks as follows:\n\n\n    for (let i in a) {\n      if (a.hasOwnProperty(i)) {\n        console.log(a[i]);\n      }\n    }\n\nInspection ID: JSUnfilteredForInLoop"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSUnfilteredForInLoop",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 35,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSFunctionExpressionToArrowFunction",
                "shortDescription": {
                  "text": "Function expression is used instead of arrow function"
                },
                "fullDescription": {
                  "text": "Reports a function expression. Suggests converting it to an arrow function. Example: 'arr.map(function(el) {return el + 1})' After applying the quick-fix the code looks as follows: 'arr.map(el => el + 1)' Inspection ID: JSFunctionExpressionToArrowFunction",
                  "markdown": "Reports a [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function) expression. Suggests converting it to an [arrow function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions).\n\nExample:\n\n    arr.map(function(el) {return el + 1})\n\nAfter applying the quick-fix the code looks as follows:\n\n    arr.map(el => el + 1)\n\nInspection ID: JSFunctionExpressionToArrowFunction"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSFunctionExpressionToArrowFunction",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/ES2015 migration aids",
                      "index": 82,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUndefinedPropertyAssignment",
                "shortDescription": {
                  "text": "Undefined property assignment"
                },
                "fullDescription": {
                  "text": "Reports an assignment to a property that is not defined in the type of a variable. Example: '/**\n * @type {{ property1: string, property2: number }}\n */\nlet myVariable = create();\n\nmyVariable.newProperty = 3; // bad' Inspection ID: JSUndefinedPropertyAssignment",
                  "markdown": "Reports an assignment to a property that is not defined in the type of a variable.\n\nExample:\n\n\n    /**\n     * @type {{ property1: string, property2: number }}\n     */\n    let myVariable = create();\n\n    myVariable.newProperty = 3; // bad\n\nInspection ID: JSUndefinedPropertyAssignment"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSUndefinedPropertyAssignment",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 117,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSDeprecatedSymbols",
                "shortDescription": {
                  "text": "Deprecated symbol used"
                },
                "fullDescription": {
                  "text": "Reports a usage of a deprecated function variable. Inspection ID: JSDeprecatedSymbols",
                  "markdown": "Reports a usage of a deprecated function variable.\n\nInspection ID: JSDeprecatedSymbols"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSDeprecatedSymbols",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 35,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LocalVariableNamingConventionJS",
                "shortDescription": {
                  "text": "Local variable naming convention"
                },
                "fullDescription": {
                  "text": "Reports a local variable whose name is too short, too long, or doesn't follow the specified regular expression pattern. Use the fields provided below to specify minimum length, maximum length, and a regular expression expected for local variables names. Use the standard 'java.util.regex' format regular expressions. Inspection ID: LocalVariableNamingConventionJS",
                  "markdown": "Reports a local variable whose name is too short, too long, or doesn't follow the specified regular expression pattern.\n\n\nUse the fields provided below to specify minimum length, maximum length, and a regular expression\nexpected for local variables names. Use the standard `java.util.regex` format regular expressions.\n\nInspection ID: LocalVariableNamingConventionJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "LocalVariableNamingConventionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Naming conventions",
                      "index": 150,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UpdateDependencyToLatestVersion",
                "shortDescription": {
                  "text": "Update package.json dependencies to latest versions"
                },
                "fullDescription": {
                  "text": "Suggests to upgrade your package.json dependencies to the latest versions, ignoring specified versions. Inspection ID: UpdateDependencyToLatestVersion",
                  "markdown": "Suggests to upgrade your package.json dependencies to the latest versions, ignoring specified versions.\n\nInspection ID: UpdateDependencyToLatestVersion"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "UpdateDependencyToLatestVersion",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Imports and dependencies",
                      "index": 142,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUnresolvedExtXType",
                "shortDescription": {
                  "text": "Unresolved Ext JS xtype"
                },
                "fullDescription": {
                  "text": "Reports an Ext JS 'xtype' reference that doesn't have a corresponding class. Inspection ID: JSUnresolvedExtXType",
                  "markdown": "Reports an Ext JS `xtype` reference that doesn't have a corresponding class.\n\nInspection ID: JSUnresolvedExtXType"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSUnresolvedExtXType",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 35,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6RedundantNestingInTemplateLiteral",
                "shortDescription": {
                  "text": "Redundant nesting in template literal"
                },
                "fullDescription": {
                  "text": "Reports nested instances of a string or a template literal. Suggests inlining the nested instances into the containing template string. Example: 'let a = `Hello, ${`Brave ${\"New\"}`} ${\"World\"}!`' After applying the quick-fix the code looks as follows: 'let a = `Hello, Brave New World!`' Inspection ID: ES6RedundantNestingInTemplateLiteral",
                  "markdown": "Reports nested instances of a string or a template literal. Suggests inlining the nested instances into the containing template string.\n\nExample:\n\n\n    let a = `Hello, ${`Brave ${\"New\"}`} ${\"World\"}!`\n\nAfter applying the quick-fix the code looks as follows:\n\n\n    let a = `Hello, Brave New World!`\n\nInspection ID: ES6RedundantNestingInTemplateLiteral"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ES6RedundantNestingInTemplateLiteral",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 35,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NestingDepthJS",
                "shortDescription": {
                  "text": "Overly nested function"
                },
                "fullDescription": {
                  "text": "Reports a function whose body contains statements that are too deeply nested within other statements. Such functions may be confusing and indicate that refactoring may be necessary. Use the field provided below to specify the maximum acceptable nesting depth allowed in a function. Inspection ID: NestingDepthJS",
                  "markdown": "Reports a function whose body contains statements that are too deeply nested within other statements. Such functions may be confusing and indicate that refactoring may be necessary.\n\n\nUse the field provided below to specify the maximum acceptable nesting depth allowed in a function.\n\nInspection ID: NestingDepthJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "OverlyNestedFunctionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Function metrics",
                      "index": 115,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptSuspiciousConstructorParameterAssignment",
                "shortDescription": {
                  "text": "Assigned constructor field parameter"
                },
                "fullDescription": {
                  "text": "Reports a common mistake in TypeScript code, when a class field is declared as a constructor parameter, and then this parameter is assigned. In this case, the corresponding field won't be assigned, only the local parameter value is modified. 'class Foo {\n  constructor(private p: number) {\n    p = 1; //must be this.p = 1;\n  }\n}' Inspection ID: TypeScriptSuspiciousConstructorParameterAssignment",
                  "markdown": "Reports a common mistake in TypeScript code, when a class field is declared as a constructor parameter, and then this parameter is assigned.  \nIn this case, the corresponding field *won't* be assigned, only the local parameter value is modified.\n\n\n    class Foo {\n      constructor(private p: number) {\n        p = 1; //must be this.p = 1;\n      }\n    }\n\nInspection ID: TypeScriptSuspiciousConstructorParameterAssignment"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "TypeScriptSuspiciousConstructorParameterAssignment",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 78,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AssignmentResultUsedJS",
                "shortDescription": {
                  "text": "Result of assignment used"
                },
                "fullDescription": {
                  "text": "Reports an assignment expression where the result of the assignment is used in the containing expression. Such assignments often indicate coding errors, for example, '=' instead of '=='. Moreover, they can result in confusion due to the order of operations, as evaluation of the assignment may affect the outer expression in unexpected ways. Expressions in parentheses are ignored. Inspection ID: AssignmentResultUsedJS",
                  "markdown": "Reports an assignment expression where the result of the assignment is used in the containing expression. Such assignments often indicate coding errors, for example, `=` instead of `==`. Moreover, they can result in confusion due to the order of operations, as evaluation of the assignment may affect the outer expression in unexpected ways.\n\nExpressions in parentheses are ignored.\n\nInspection ID: AssignmentResultUsedJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AssignmentResultUsedJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Assignment issues",
                      "index": 71,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConstantOnRHSOfComparisonJS",
                "shortDescription": {
                  "text": "Constant on right side of comparison"
                },
                "fullDescription": {
                  "text": "Reports a comparison operation with a constant in the right-hand side. According to coding conventions, constants should only be in the left-hand side of comparisons. Inspection ID: ConstantOnRHSOfComparisonJS",
                  "markdown": "Reports a comparison operation with a constant in the right-hand side. According to coding conventions, constants should only be in the left-hand side of comparisons.\n\nInspection ID: ConstantOnRHSOfComparisonJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ConstantOnRightSideOfComparisonJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 117,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUnnecessarySemicolon",
                "shortDescription": {
                  "text": "Unnecessary semicolon"
                },
                "fullDescription": {
                  "text": "Reports an unneeded semicolon. Inspection ID: JSUnnecessarySemicolon",
                  "markdown": "Reports an unneeded semicolon.\n\nInspection ID: JSUnnecessarySemicolon"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSUnnecessarySemicolon",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 35,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NestedSwitchStatementJS",
                "shortDescription": {
                  "text": "Nested 'switch' statement"
                },
                "fullDescription": {
                  "text": "Reports a 'switch' statement that is nested in another 'switch' statement. Nested 'switch' statements may be very confusing, particularly if indenting is inconsistent. Inspection ID: NestedSwitchStatementJS",
                  "markdown": "Reports a `switch` statement that is nested in another `switch` statement. Nested `switch` statements may be very confusing, particularly if indenting is inconsistent.\n\nInspection ID: NestedSwitchStatementJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NestedSwitchStatementJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Switch statement issues",
                      "index": 110,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSMissingSwitchBranches",
                "shortDescription": {
                  "text": "'switch' statement has missing branches"
                },
                "fullDescription": {
                  "text": "Reports a 'switch' statement on a variable of the type 'enum' or 'union' when the statement doesn't cover some value options from the type. Inspection ID: JSMissingSwitchBranches",
                  "markdown": "Reports a `switch` statement on a variable of the type `enum` or `union` when the statement doesn't cover some value options from the type.\n\nInspection ID: JSMissingSwitchBranches"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSMissingSwitchBranches",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Switch statement issues",
                      "index": 110,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSJQueryEfficiency",
                "shortDescription": {
                  "text": "JQuery selector can be optimized"
                },
                "fullDescription": {
                  "text": "Reports a duplicated jQuery selector that can be cached or a usage of an attribute or a pseudo-selector (optional). Inspection ID: JSJQueryEfficiency",
                  "markdown": "Reports a duplicated jQuery selector that can be cached or a usage of an attribute or a pseudo-selector (optional).\n\nInspection ID: JSJQueryEfficiency"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSJQueryEfficiency",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Performance"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 35,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnreachableCodeJS",
                "shortDescription": {
                  "text": "Unreachable code"
                },
                "fullDescription": {
                  "text": "Reports code that can never be executed, which almost certainly indicates an error Inspection ID: UnreachableCodeJS",
                  "markdown": "Reports code that can never be executed, which almost certainly indicates an error\n\nInspection ID: UnreachableCodeJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnreachableCodeJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 101,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSSuspiciousEqPlus",
                "shortDescription": {
                  "text": "Suspicious '=+' assignment"
                },
                "fullDescription": {
                  "text": "Reports an assignment in the form 'a =+ b'. Suggests replacing with 'a += b'. Inspection ID: JSSuspiciousEqPlus",
                  "markdown": "Reports an assignment in the form `a =+ b`. Suggests replacing with `a += b`.\n\nInspection ID: JSSuspiciousEqPlus"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSSuspiciousEqPlus",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 86,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EmptyStatementBodyJS",
                "shortDescription": {
                  "text": "Statement with empty body"
                },
                "fullDescription": {
                  "text": "Reports an 'if', 'while', 'for', or 'with' statement with an empty body. Such statements often result from typos, and may cause confusion. Use the checkbox below to specify whether the statements with empty block statements as bodies should be reported. Inspection ID: EmptyStatementBodyJS",
                  "markdown": "Reports an `if`, `while`, `for`, or `with` statement with an empty body. Such statements often result from typos, and may cause confusion.\n\n\nUse the checkbox below to specify whether the statements with empty block statements as bodies\nshould be reported.\n\nInspection ID: EmptyStatementBodyJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "StatementWithEmptyBodyJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 47,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUnusedLocalSymbols",
                "shortDescription": {
                  "text": "Unused local symbol"
                },
                "fullDescription": {
                  "text": "Reports an unused locally accessible parameter, local variable, function, class, or private member declaration. Inspection ID: JSUnusedLocalSymbols",
                  "markdown": "Reports an unused locally accessible parameter, local variable, function, class, or private member declaration.\n\nInspection ID: JSUnusedLocalSymbols"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSUnusedLocalSymbols",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Unused symbols",
                      "index": 30,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.java-i18n",
            "version": "253.22441.33",
            "rules": [
              {
                "id": "UnusedMessageFormatParameter",
                "shortDescription": {
                  "text": "Missing message format parameter"
                },
                "fullDescription": {
                  "text": "Reports properties values that look like 'java.text.MessageFormat' format strings but do not use some the parameters of the '{xx}' kind. Example: '# parameter {0} is not used\nerror.message=Something happened in line {1}' Inspection ID: UnusedMessageFormatParameter",
                  "markdown": "Reports properties values that look like `java.text.MessageFormat` format strings but do not use some the parameters of the `{xx}` kind.\n\nExample:\n\n\n    # parameter {0} is not used\n    error.message=Something happened in line {1}\n      \nInspection ID: UnusedMessageFormatParameter"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnusedMessageFormatParameter",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Properties files",
                      "index": 32,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InconsistentResourceBundle",
                "shortDescription": {
                  "text": "Inconsistent resource bundle"
                },
                "fullDescription": {
                  "text": "Reports problems in the properties files contained in the resource bundle. Report missing translations Use this option to report properties contained in the parent properties file that are missing in inherited ones (unless it's a language dialect). Example: '# messages.properties\n    abc=xxx\n\n    # messages_fr.properties\n    # Empty file' Property 'abc' will be reported as untranslated. Report inconsistent properties Use this option to report properties contained in inherited properties file that are missing in the parent one (or in siblings if there is no parent). Example: '# messages.properties\n    # Empty file\n\n    # messages_fr.properties\n    abc=xxx' Property 'abc' translation is not available here for any language except French, and, thus, will be reported as missing in the (default) properties file 'messages.properties'. Report properties overridden with the same value Use this option to report properties copy-pasted into several properties files verbatim. Example: '# messages.properties\n    abc=xxx\n\n    # messages_fr.properties\n    abc=xxx' Property 'abc' will be reported as unnecessarily inherited in the file 'messages_fr.properties' . Report properties overridden with different placeholders Use this option to check for placeholder consistency in overridden properties. Example: '# messages.properties\n    qwe={0}xxx{1}\n    abc={0}yyy{1}\n\n    # messages_fr.properties\n    qwe={0}xxx{0}xxx{1}\n    abc={0}yyy' Property 'abc' will be reported as a property containing message format placeholders not corresponding to 'messages.properties'. Report properties overridden with different values endings Use this option to check for ending consistency in overridden properties. Example: '# messages.properties\n    abc=xxxzzz\n\n    # messages_fr.properties\n    abc=xxx;' Property 'abc' will be reported as ending with special signs ('!' / '?' / '.' / ':' / ';') whereas the parent value in 'messages.properties' doesn't. Inspection ID: InconsistentResourceBundle",
                  "markdown": "Reports problems in the properties files contained in the resource bundle.\n\n* **Report missing translations**   \n\n  Use this option to report properties contained in the parent properties file that are missing in inherited ones (unless it's a language dialect).   \n\n  Example:\n\n\n          # messages.properties\n          abc=xxx\n\n          # messages_fr.properties\n          # Empty file\n        \n  Property `abc` will be reported as untranslated.   \n\n* **Report inconsistent properties**   \n\n  Use this option to report properties contained in inherited properties file that are missing in the parent one (or in siblings if there is no parent).   \n\n  Example:\n\n\n          # messages.properties\n          # Empty file\n\n          # messages_fr.properties\n          abc=xxx\n        \n  Property `abc` translation is not available here for any language except French, and, thus, will be reported as missing in the (default) properties file `messages.properties`.   \n\n* **Report properties overridden with the same value**   \n\n  Use this option to report properties copy-pasted into several properties files verbatim.   \n\n  Example:\n\n\n          # messages.properties\n          abc=xxx\n\n          # messages_fr.properties\n          abc=xxx\n        \n  Property `abc` will be reported as unnecessarily inherited in the file `messages_fr.properties` .   \n\n* **Report properties overridden with different placeholders**   \n\n  Use this option to check for placeholder consistency in overridden properties.   \n\n  Example:\n\n\n          # messages.properties\n          qwe={0}xxx{1}\n          abc={0}yyy{1}\n\n          # messages_fr.properties\n          qwe={0}xxx{0}xxx{1}\n          abc={0}yyy\n        \n  Property `abc` will be reported as a property containing message format placeholders not corresponding to `messages.properties`.   \n\n* **Report properties overridden with different values endings**   \n\n  Use this option to check for ending consistency in overridden properties.   \n\n  Example:\n\n\n          # messages.properties\n          abc=xxxzzz\n\n          # messages_fr.properties\n          abc=xxx;\n        \n  Property `abc` will be reported as ending with special signs (`!` / `?` / `.` / `:` / `;`) whereas the parent value in `messages.properties` doesn't.\n\nInspection ID: InconsistentResourceBundle"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "InconsistentResourceBundle",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Properties files",
                      "index": 32,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnresolvedPropertyKey",
                "shortDescription": {
                  "text": "Invalid property key"
                },
                "fullDescription": {
                  "text": "Reports invalid arguments that are passed to methods with parameters annotated as '@PropertyKey'. These arguments should be valid property keys in corresponding properties files. Also, the inspection verifies that the 'resourceBundle' argument of the '@PropertyKey' annotation is an existing resource bundle. Use the quick-fix to create a new property or to select an existing one. Example: '@PropertyKey(resourceBundle = \"myBundle\") String value = \"invalid.key\";' Inspection ID: UnresolvedPropertyKey",
                  "markdown": "Reports invalid arguments that are passed to methods with parameters annotated as `@PropertyKey`.\n\nThese arguments should be valid property keys in corresponding properties files.\nAlso, the inspection verifies that the `resourceBundle`\nargument of the `@PropertyKey` annotation is an existing resource bundle.\n\n\nUse the quick-fix to create a new property or to select an existing one.\n\nExample:\n\n\n      @PropertyKey(resourceBundle = \"myBundle\") String value = \"invalid.key\";\n\nInspection ID: UnresolvedPropertyKey"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "UnresolvedPropertyKey",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Properties files",
                      "index": 144,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConvertToBasicLatin",
                "shortDescription": {
                  "text": "Non-Basic Latin character"
                },
                "fullDescription": {
                  "text": "Reports non-Basic Latin characters in literals and comments. The inspection provides a fix to replace such characters with Unicode escapes in literals, and with HTML entities in comments. Example: '// © 2021\n  char c = '©';\n  String s = \"Áî\";'\n After the quick-fix is applied: '// &copy; 2021\n  char c = '\\u00a9';\n  String s = \"\\u00c1\\u00ee\";' By default, this inspection does not highlight in the editor, but only provides a fix. Inspection ID: ConvertToBasicLatin",
                  "markdown": "Reports non-Basic Latin characters in literals and comments. The inspection provides a fix to replace such characters with Unicode escapes in literals, and with HTML entities in comments.\n\n**Example:**\n\n\n      // © 2021\n      char c = '©';\n      String s = \"Áî\";\n\nAfter the quick-fix is applied:\n\n\n      // &copy; 2021\n      char c = '\\u00a9';\n      String s = \"\\u00c1\\u00ee\";\n\nBy default, this inspection does not highlight in the editor, but only provides a fix.\n\nInspection ID: ConvertToBasicLatin"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ConvertToBasicLatin",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Internationalization",
                      "index": 3,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HardCodedStringLiteral",
                "shortDescription": {
                  "text": "Hardcoded strings"
                },
                "fullDescription": {
                  "text": "Reports any instances of hardcoded 'String' literals. Hardcoded 'String' literals are probably errors in an internationalized environment. This inspection won't report empty strings and strings consisting only of whitespaces. A quick-fix is available to transform a string literal into a 'java.util.ResourceBundle.getString()' method call. Inspection ID: HardCodedStringLiteral",
                  "markdown": "Reports any instances of hardcoded `String` literals.\n\nHardcoded `String` literals are probably errors in an\ninternationalized environment. This inspection won't report empty strings and strings consisting only of whitespaces. A quick-fix is available\nto transform a string literal into a `java.util.ResourceBundle.getString()` method call.\n\nInspection ID: HardCodedStringLiteral"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HardCodedStringLiteral",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Internationalization",
                      "index": 3,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnsupportedCharacter",
                "shortDescription": {
                  "text": "Unsupported character"
                },
                "fullDescription": {
                  "text": "Reports characters in property files that are unsupported by the ISO-8859-1 charset when Java 1.8 or earlier is used. The inspection checks if a property file contains characters that cannot be mapped to ISO-8859-1 and suggests converting them to Unicode escape sequences for compatibility. Configure the inspection: Use the Convert to escape sequences quick-fix to ensure compatibility with ISO-8859-1 encoding: Example: 'key=Java + ☕ = 🍀' After the quick-fix is applied: 'key=Java + \\u2615 = \\uD83C\\uDF40' Inspection ID: UnsupportedCharacter",
                  "markdown": "Reports characters in property files that are unsupported by the ISO-8859-1 charset when Java 1.8 or earlier is used. The inspection checks if a property file contains characters that cannot be mapped to ISO-8859-1 and suggests converting them to Unicode escape sequences for compatibility.\n\nConfigure the inspection:\n\n\nUse the **Convert to escape sequences** quick-fix to ensure compatibility with ISO-8859-1 encoding:\n\n**Example:**\n\n\n      key=Java + ☕ = 🍀\n\nAfter the quick-fix is applied:\n\n\n      key=Java + \\u2615 = \\uD83C\\uDF40\n\nInspection ID: UnsupportedCharacter"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnsupportedCharacter",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Properties files",
                      "index": 144,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DialogTitleCapitalization",
                "shortDescription": {
                  "text": "Incorrect string capitalization"
                },
                "fullDescription": {
                  "text": "Reports strings in method parameters and return values annotated with '@Nls' and having the capitalization parameter to conform to capitalization rules existing in most platform UI guidelines. Example: 'void setTitle(@NlsContexts.DialogTitle String title) {}\n  setTitle(\"This is sentence capitalization but should be title\");' After the quick-fix is applied: 'setTitle(\"This Is Sentence Capitalization but Should Be Title\");' Inspection ID: DialogTitleCapitalization",
                  "markdown": "Reports strings in method parameters and return values annotated with `@Nls` and having the capitalization parameter to conform to capitalization rules existing in most platform UI guidelines.\n\n**Example:**\n\n\n      void setTitle(@NlsContexts.DialogTitle String title) {}\n      setTitle(\"This is sentence capitalization but should be title\"); \n\nAfter the quick-fix is applied:\n\n\n      setTitle(\"This Is Sentence Capitalization but Should Be Title\"); \n\nInspection ID: DialogTitleCapitalization"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "DialogTitleCapitalization",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Internationalization",
                      "index": 3,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SuspiciousLocalesLanguages",
                "shortDescription": {
                  "text": "Suspicious resource bundle locale languages"
                },
                "fullDescription": {
                  "text": "Reports locales with language codes that are not supported by Java. Inspection ID: SuspiciousLocalesLanguages",
                  "markdown": "Reports locales with language codes that are not supported by Java.\n\nInspection ID: SuspiciousLocalesLanguages"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SuspiciousLocalesLanguages",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Properties files",
                      "index": 32,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DuplicateStringLiteralInspection",
                "shortDescription": {
                  "text": "Duplicate string literal"
                },
                "fullDescription": {
                  "text": "Reports string literals that are replicated unchanged throughout the project. Two quick-fixes are provided. One to introduce a constant for a duplicated string and use it throughout the project, and one to show the location of all the duplicates of a particular string literal. Example: 'class C1 { String CONST1 = \"duplicate string\"; }\n  class C2 { String CONST2 = \"duplicate string\"; }' Configure the inspection: Use the Min string length field to set the minimal string length required to detect duplicates. Use the Ignore @PropertyKey expressions option to ignore strings passed as arguments to methods annotated with 'org.jetbrains.annotations.PropertyKey'. Inspection ID: DuplicateStringLiteralInspection",
                  "markdown": "Reports string literals that are replicated unchanged throughout the project. Two quick-fixes are provided. One to introduce a constant for a duplicated string and use it throughout the project, and one to show the location of all the duplicates of a particular string literal.\n\nExample:\n\n\n      class C1 { String CONST1 = \"duplicate string\"; }\n      class C2 { String CONST2 = \"duplicate string\"; }\n\nConfigure the inspection:\n\n* Use the **Min string length** field to set the minimal string length required to detect duplicates.\n* Use the **Ignore @PropertyKey expressions** option to ignore strings passed as arguments to methods annotated with `org.jetbrains.annotations.PropertyKey`.\n\nInspection ID: DuplicateStringLiteralInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "DuplicateStringLiteralInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Internationalization",
                      "index": 3,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.intellij.plugins.postcss",
            "version": "253.22441.33",
            "rules": [
              {
                "id": "PostCssUnresolvedModuleValueReference",
                "shortDescription": {
                  "text": "Unresolved CSS module value"
                },
                "fullDescription": {
                  "text": "Reports an unresolved reference to a CSS Module Value ('@value' declaration). Example: '@value foo from unknown;' Inspection ID: PostCssUnresolvedModuleValueReference",
                  "markdown": "Reports an unresolved reference to a [CSS Module Value](https://github.com/css-modules/postcss-modules-values) (`@value` declaration).\n\nExample:\n\n\n    @value foo from unknown;\n\nInspection ID: PostCssUnresolvedModuleValueReference"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "PostCssUnresolvedModuleValueReference",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "PostCSS",
                      "index": 33,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PostCssNesting",
                "shortDescription": {
                  "text": "Invalid nested rule"
                },
                "fullDescription": {
                  "text": "Reports a nested style rule whose syntax doesn't comply with the PostCSS Nested or the PostCSS Nesting specification. Example: '.phone {\n  &_title {}\n}' Inspection ID: PostCssNesting",
                  "markdown": "Reports a nested style rule whose syntax doesn't comply with the [PostCSS Nested](https://github.com/postcss/postcss-nested) or the [PostCSS Nesting](https://github.com/csstools/postcss-nesting) specification.\n\nExample:\n\n\n    .phone {\n      &_title {}\n    }\n\nInspection ID: PostCssNesting"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PostCssNesting",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "PostCSS",
                      "index": 33,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PostCssCustomMedia",
                "shortDescription": {
                  "text": "Invalid custom media"
                },
                "fullDescription": {
                  "text": "Reports a syntax error in a PostCSS Custom Media query. Example: '@custom-media --small-viewport (max-width: 30em);' Inspection ID: PostCssCustomMedia",
                  "markdown": "Reports a syntax error in a [PostCSS Custom Media](https://github.com/postcss/postcss-custom-media) query.\n\nExample:\n\n\n    @custom-media --small-viewport (max-width: 30em);\n\nInspection ID: PostCssCustomMedia"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "PostCssCustomMedia",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "PostCSS",
                      "index": 33,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PostCssCustomSelector",
                "shortDescription": {
                  "text": "Invalid custom selector"
                },
                "fullDescription": {
                  "text": "Reports a syntax error in PostCSS Custom Selector. Example: '@custom-selector :--heading h1, h2, h3;' Inspection ID: PostCssCustomSelector",
                  "markdown": "Reports a syntax error in [PostCSS Custom Selector](https://github.com/postcss/postcss-custom-selectors).\n\nExample:\n\n\n    @custom-selector :--heading h1, h2, h3;\n\nInspection ID: PostCssCustomSelector"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "PostCssCustomSelector",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "PostCSS",
                      "index": 33,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PostCssMediaRange",
                "shortDescription": {
                  "text": "Invalid media query range"
                },
                "fullDescription": {
                  "text": "Checks range context syntax, which may alternatively be used for media features with a 'range' type. Example: '@media screen and (500px <= width <= 1200px) {}' Inspection ID: PostCssMediaRange",
                  "markdown": "Checks [range context](https://github.com/postcss/postcss-media-minmax) syntax, which may alternatively be used for media features with a 'range' type.\n\nExample:\n\n\n    @media screen and (500px <= width <= 1200px) {}\n\nInspection ID: PostCssMediaRange"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "PostCssMediaRange",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "PostCSS",
                      "index": 33,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.jetbrains.plugins.gradle",
            "version": "253.22441.33",
            "rules": [
              {
                "id": "ForeignDelegate",
                "shortDescription": {
                  "text": "Possibly misplaced call to Gradle method"
                },
                "fullDescription": {
                  "text": "Detects possibly misplaced calls to Gradle methods. Gradle buildscripts comprise a lot of nested closures, making the code structure similar to a markup language. Due to the behavior of DSL languages, the methods that you can write in the outer closures are also available in the inner ones. Such methods may have no meaning when written outside their scope. Sometimes it may be hard to detect this situation. This inspection aims to detect such methods. Example: 'repositories {\n  // the delegate of 'repositories' has method 'exclusiveContent', which can be written here\n  maven {\n    // the delegate of 'maven' has method 'content', which can be written here\n    // but 'exclusiveContent' is also available\n    exclusiveContent {} // reports 'exclusiveContent'\n  }\n}' Inspection ID: ForeignDelegate",
                  "markdown": "Detects possibly misplaced calls to Gradle methods.\nGradle buildscripts comprise a lot of nested closures, making the code structure similar to a markup language. Due to the behavior of DSL languages, the methods that you can write in the outer closures are also available in the inner ones. Such methods may have no meaning when written outside their scope.   \nSometimes it may be hard to detect this situation. This inspection aims to detect such methods.\n\n**Example:**\n\n\n    repositories {\n      // the delegate of 'repositories' has method 'exclusiveContent', which can be written here\n      maven {\n        // the delegate of 'maven' has method 'content', which can be written here\n        // but 'exclusiveContent' is also available\n        exclusiveContent {} // reports 'exclusiveContent'\n      }\n    }\n\nInspection ID: ForeignDelegate"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ForeignDelegate",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Gradle/Probable bugs",
                      "index": 39,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IncorrectPluginDslStructure",
                "shortDescription": {
                  "text": "Plugin DSL structure"
                },
                "fullDescription": {
                  "text": "Detects disallowed statements before 'plugins {}' block. Due to the limitations of Gradle Plugin DSL, only a restricted set of Groovy statements is available before ''plugins {}'' block. The only options are ''buildscript {}'', ''pluginManagement {}'' and other ''plugins {}''. See Gradle documentation Example: 'import foo.bar.Baz\nplugins {} // reports 'plugins'\nplugins {\n  foo() // reports 'foo'\n  id 'java'\n}' Inspection ID: IncorrectPluginDslStructure",
                  "markdown": "Detects disallowed statements before 'plugins {}' block.\nDue to the limitations of Gradle Plugin DSL, only a restricted set of Groovy statements is available before '`plugins {}`' block. The only options are '`buildscript {}`', '`pluginManagement {}`' and other '`plugins {}`'.   \n[See Gradle documentation](https://docs.gradle.org/current/userguide/plugins.html#plugins_dsl_limitations)\n\n**Example:**\n\n\n    import foo.bar.Baz\n    plugins {} // reports 'plugins'\n    plugins {\n      foo() // reports 'foo'\n      id 'java'\n    }\n\nInspection ID: IncorrectPluginDslStructure"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "IncorrectPluginDslStructure",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Gradle/Validity issues",
                      "index": 44,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DependencyNotationArgument",
                "shortDescription": {
                  "text": "Unrecognized dependency notation"
                },
                "fullDescription": {
                  "text": "Detects incorrect dependency notations. The following types/formats are supported by Gradle: Instances of 'Dependency'; 'String' or 'CharSequence' values, for example ''org.gradle:gradle-core:1.0''; Maps, for example '[group: 'org.gradle', name: 'gradle-core', version: '1.0']'; FileCollections, for example 'files('some.jar', 'someOther.jar')'; Projects, for example 'project(':some:project:path')'; 'ClassPathNotation', for example 'gradleApi()'; Lists of dependency notations, for example '['org.gradle:gradle-core:1.0']'; (Gradle 7.0+) Version catalog accessors, for example 'libs.groovy.core'. See Gradle documentation Example: 'dependencies {\n  implementation(1) // reports '1'\n}' Inspection ID: DependencyNotationArgument",
                  "markdown": "Detects incorrect dependency notations.\nThe following types/formats are supported by Gradle:\n\n* Instances of `Dependency`;\n* `String` or `CharSequence` values, for example `'org.gradle:gradle-core:1.0'`;\n* Maps, for example `[group: 'org.gradle', name: 'gradle-core', version: '1.0']`;\n* FileCollections, for example `files('some.jar', 'someOther.jar')`;\n* Projects, for example `project(':some:project:path')`;\n* `ClassPathNotation`, for example `gradleApi()`;\n* Lists of dependency notations, for example `['org.gradle:gradle-core:1.0']`;\n* (Gradle 7.0+) [Version catalog accessors](https://docs.gradle.org/current/userguide/platforms.html), for example `libs.groovy.core`.\n\n[See Gradle documentation](https://docs.gradle.org/current/userguide/declaring_dependencies.html#sec:dependency-types)\n\n**Example:**\n\n\n    dependencies {\n      implementation(1) // reports '1'\n    }\n\nInspection ID: DependencyNotationArgument"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "DependencyNotationArgument",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Gradle/Probable bugs",
                      "index": 39,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedVersionCatalogEntry",
                "shortDescription": {
                  "text": "Unused version catalog entry"
                },
                "fullDescription": {
                  "text": "Detects unused keys in TOML descriptors of version catalogs. Example: '// build.gradle\ndependencies {\n  implementation libs.foo.bar\n}' '# libs.versions.toml\n[libraries]\nfoo-bar = \"com.gradle:example:1.0.0\"\nbar-baz = \"com.gradle:example:2.0.0\" # highlights bar-baz' Inspection ID: UnusedVersionCatalogEntry",
                  "markdown": "Detects unused keys in TOML descriptors of version catalogs.\n\n**Example:**\n\n\n    // build.gradle\n    dependencies {\n      implementation libs.foo.bar\n    }\n\n\n    # libs.versions.toml\n    [libraries]\n    foo-bar = \"com.gradle:example:1.0.0\"\n    bar-baz = \"com.gradle:example:2.0.0\" # highlights bar-baz\n\nInspection ID: UnusedVersionCatalogEntry"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnusedVersionCatalogEntry",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Gradle/Style",
                      "index": 135,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DeprecatedConfigurations",
                "shortDescription": {
                  "text": "Deprecated configurations"
                },
                "fullDescription": {
                  "text": "Detects usage of configuration methods that were deprecated. Configuration methods may be deprecated because of two possible reasons: The Gradle API has evolved, so old method choices should be avoided; Some plugin provides a better version of the deprecated configuration method. Most likely there will be an alternative for the deprecated method. Example: 'plugins {\n  id 'java'\n}\n\ndependencies {\n  archive 'org.gradle.api:gradle:1.0' // reports 'archive'\n}' Inspection ID: DeprecatedConfigurations",
                  "markdown": "Detects usage of configuration methods that were deprecated.\nConfiguration methods may be deprecated because of two possible reasons:\n\n* The Gradle API has evolved, so old method choices should be avoided;\n* Some plugin provides a better version of the deprecated configuration method.\n\nMost likely there will be an alternative for the deprecated method.\n\n**Example:**\n\n\n    plugins {\n      id 'java'\n    }\n\n    dependencies {\n      archive 'org.gradle.api:gradle:1.0' // reports 'archive'\n    }\n\nInspection ID: DeprecatedConfigurations"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "DeprecatedConfigurations",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Gradle/Validity issues",
                      "index": 44,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConfigurationAvoidance",
                "shortDescription": {
                  "text": "Configuration avoidance"
                },
                "fullDescription": {
                  "text": "(Gradle 4.9+) Detects usage of API that interacts with tasks eagerly. Eager interaction with tasks implies some inconveniences: The user should manually set up all dependencies between tasks; In the configuration phase, all the tasks accessed via the eager API become configured, even if they are not executed afterwards. It results in performance degradation. Eventually, the eager API will be deprecated in favor of the lazy one. For a migration guide, see the Gradle documentation. Example: 'task foo { // reports 'task', suggests replacing it with 'task.register'\n  // ...\n}' Inspection ID: ConfigurationAvoidance",
                  "markdown": "(Gradle 4.9+) Detects usage of API that interacts with tasks eagerly.\n\nEager interaction with tasks implies some inconveniences:\n\n* The user should manually set up all dependencies between tasks;\n* In the [configuration phase](https://docs.gradle.org/current/userguide/build_lifecycle.html#sec:build_phases), all the tasks accessed via the eager API become configured, even if they are not executed afterwards. It results in performance degradation.\n\nEventually, the eager API will be deprecated in favor of the lazy one.\n\nFor a migration guide, see the\n[Gradle documentation](https://docs.gradle.org/current/userguide/task_configuration_avoidance.html).\n\n**Example:**\n\n    task foo { // reports 'task', suggests replacing it with 'task.register'\n      // ...\n    }\n\nInspection ID: ConfigurationAvoidance"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ConfigurationAvoidance",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Performance"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Gradle/Best practises",
                      "index": 175,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.jetbrains.restClient",
            "version": "253.22441.33",
            "rules": [
              {
                "id": "HttpClientRunRequestNameInspection",
                "shortDescription": {
                  "text": "Possible request name"
                },
                "fullDescription": {
                  "text": "Highlights request name in run block which has no specified import file. Suggests adding import for the file which contains this named request. Inspection ID: HttpClientRunRequestNameInspection",
                  "markdown": "Highlights request name in run block which has no specified import file. Suggests adding import for the file which contains this named request.\n\nInspection ID: HttpClientRunRequestNameInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "HttpClientRunRequestNameInspection",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTTP Client",
                      "index": 42,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HttpClientUnresolvedAuthId",
                "shortDescription": {
                  "text": "Unresolved Auth identifier"
                },
                "fullDescription": {
                  "text": "Highlights references to non-existent Auth configurations. Suggests creating a new one in the current environment. Inspection ID: HttpClientUnresolvedAuthId",
                  "markdown": "Highlights references to non-existent Auth configurations. Suggests creating a new one in the current environment.\n\nInspection ID: HttpClientUnresolvedAuthId"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "HttpClientUnresolvedAuthId",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Security"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTTP Client",
                      "index": 42,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HttpRequestEnvironmentAuthConfigurationValidationInspection",
                "shortDescription": {
                  "text": "Auth configuration validation"
                },
                "fullDescription": {
                  "text": "Reports Auth configuration the following problems in HTTP Client environment files: Missing properties in Auth configuration Auth/Security configuration placed in private environment file Inspection ID: HttpRequestEnvironmentAuthConfigurationValidationInspection",
                  "markdown": "Reports Auth configuration the following problems in HTTP Client environment files:\n\n* Missing properties in Auth configuration\n* Auth/Security configuration placed in private environment file\n\nInspection ID: HttpRequestEnvironmentAuthConfigurationValidationInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HttpRequestEnvironmentAuthConfigurationValidationInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Security"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTTP Client",
                      "index": 42,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HttpUrlsUsage",
                "shortDescription": {
                  "text": "Link with unencrypted protocol"
                },
                "fullDescription": {
                  "text": "Reports the links that use unencrypted protocols (such as HTTP), which can expose your data to man-in-the-middle attacks. These attacks are dangerous in general and may be especially harmful for artifact repositories. Use protocols with encryption, such as HTTPS, instead. See HTTPS: Difference from HTTP (wikipedia.org). Inspection ID: HttpUrlsUsage",
                  "markdown": "Reports the links that use unencrypted protocols (such as HTTP), which can expose your data to man-in-the-middle attacks. These attacks\nare dangerous in general and may be especially harmful for artifact repositories. Use protocols with encryption, such as HTTPS,\ninstead.\n\nSee [HTTPS: Difference from HTTP (wikipedia.org)](https://en.wikipedia.org/wiki/HTTPS#Difference_from_HTTP).\n\nInspection ID: HttpUrlsUsage"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "HttpUrlsUsage",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Security"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Security",
                      "index": 97,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HttpRequestRequestSeparatorJsonBodyInspection",
                "shortDescription": {
                  "text": "Missing request separator in JSON body"
                },
                "fullDescription": {
                  "text": "Reports possible requests in injected JSON body where request separator '###' is missing. The quick fix suggests adding the separator '###' before the request. Inspection ID: HttpRequestRequestSeparatorJsonBodyInspection",
                  "markdown": "Reports possible requests in injected JSON body where request separator `###` is missing. The quick fix suggests adding the separator `###` before the request.\n\nInspection ID: HttpRequestRequestSeparatorJsonBodyInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "HttpRequestRequestSeparatorJsonBodyInspection",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Security"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTTP Client",
                      "index": 42,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HttpRequestContentLengthIsIgnored",
                "shortDescription": {
                  "text": "Redundant 'Content-Length'"
                },
                "fullDescription": {
                  "text": "Reports an explicitly set 'Content-Length' header. The header is redundant because HTTP Client uses the actual request body length. Inspection ID: HttpRequestContentLengthIsIgnored",
                  "markdown": "Reports an explicitly set `Content-Length` header. The header is redundant because HTTP Client uses the actual request body length.\n\nInspection ID: HttpRequestContentLengthIsIgnored"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HttpRequestContentLengthIsIgnored",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Performance"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTTP Client",
                      "index": 42,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HttpRequestRequestSeparatorXmlBodyInspection",
                "shortDescription": {
                  "text": "Missing request separator in HTML/XML body"
                },
                "fullDescription": {
                  "text": "Reports possible requests in injected XML/HTML body where request separator '###' is missing. The quick fix suggests adding the separator '###' before the request. Inspection ID: HttpRequestRequestSeparatorXmlBodyInspection",
                  "markdown": "Reports possible requests in injected XML/HTML body where request separator `###` is missing. The quick fix suggests adding the separator `###` before the request.\n\nInspection ID: HttpRequestRequestSeparatorXmlBodyInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "HttpRequestRequestSeparatorXmlBodyInspection",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Security"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTTP Client",
                      "index": 42,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HttpRequestPlaceholder",
                "shortDescription": {
                  "text": "'$placeholder' in HTTP Request"
                },
                "fullDescription": {
                  "text": "Reports a '$placeholder' inside a request. A '$placeholder' to be replaced by the user is created automatically when a tool cannot recognize a part of a request. For example, a request mapping '/aaaa/*/bbb' will be generated as 'GET localhost/aaaa/{{$placeholder}}/bbb'. Inspection ID: HttpRequestPlaceholder",
                  "markdown": "Reports a `$placeholder` inside a request.\n\nA `$placeholder` to be replaced by the user is created automatically when a tool cannot recognize a part of a request. For example, a request mapping `/aaaa/*/bbb` will be generated as `GET localhost/aaaa/{{$placeholder}}/bbb`.\n\nInspection ID: HttpRequestPlaceholder"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HttpRequestPlaceholder",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTTP Client",
                      "index": 42,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GrpcSchemes",
                "shortDescription": {
                  "text": "GRPC request schema can be substituted or omitted"
                },
                "fullDescription": {
                  "text": "Reports unnecessary `grpc` or standard `http[s]` schemes usage in gRPC requests Example requests: '# `grpc` scheme may be omitted since insecure connection is assumed by default\nGRPC grpc://localhost/TestService/testRpc' '# `http` scheme may be omitted: prefer empty scheme for insecure connection and a dedicated `grpcs` scheme for a secure one\nGRPC http://localhost/TestService/testRpc' '# `https` scheme should be replaced by `grpcs`: prefer a dedicated `grpcs` scheme to indicate that transport layer security should be enabled to execute the request\nGRPC https://localhost/TestService/testRpc' To avoid confusion, it is recommended to use dedicated `grpcs` scheme in a gRPC request, when the request should use secure channel underneath. Otherwise, the scheme might be completely omitted Inspection ID: GrpcSchemes",
                  "markdown": "Reports unnecessary \\`grpc\\` or standard \\`http\\[s\\]\\` schemes usage in gRPC requests\n\n\nExample requests:\n\n\n    # `grpc` scheme may be omitted since insecure connection is assumed by default\n    GRPC grpc://localhost/TestService/testRpc\n\n\n    # `http` scheme may be omitted: prefer empty scheme for insecure connection and a dedicated `grpcs` scheme for a secure one\n    GRPC http://localhost/TestService/testRpc\n\n\n    # `https` scheme should be replaced by `grpcs`: prefer a dedicated `grpcs` scheme to indicate that transport layer security should be enabled to execute the request\n    GRPC https://localhost/TestService/testRpc\n\n\nTo avoid confusion, it is recommended to use dedicated \\`grpcs\\` scheme in a gRPC request, when the request should use secure channel\nunderneath. Otherwise, the scheme might be completely omitted\n\nInspection ID: GrpcSchemes"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "GrpcSchemes",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Security"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Inappropriate gRPC request scheme",
                      "index": 151,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HttpClientDuplicateImportInspection",
                "shortDescription": {
                  "text": "Duplicate import"
                },
                "fullDescription": {
                  "text": "Highlights already defined import. Suggests removing duplicated import definition. Inspection ID: HttpClientDuplicateImportInspection",
                  "markdown": "Highlights already defined import. Suggests removing duplicated import definition.\n\nInspection ID: HttpClientDuplicateImportInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "HttpClientDuplicateImportInspection",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTTP Client",
                      "index": 42,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HttpRequestJsonBodyInspection",
                "shortDescription": {
                  "text": "Variable should be double-quoted"
                },
                "fullDescription": {
                  "text": "Reports variables which should be double-quoted in json body. The quick fix suggests wrap variable with double quotes '\"{{variable}}\"'. Inspection ID: HttpRequestJsonBodyInspection",
                  "markdown": "Reports variables which should be double-quoted in json body. The quick fix suggests wrap variable with double quotes `\"{{variable}}\"`.\n\nInspection ID: HttpRequestJsonBodyInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HttpRequestJsonBodyInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTTP Client",
                      "index": 42,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HttpRequestCustomHttpMethodInspection",
                "shortDescription": {
                  "text": "Unknown HTTP method"
                },
                "fullDescription": {
                  "text": "Reports possible custom HTTP methods. The quick fix suggests adding the custom HTTP method to project settings. Inspection ID: HttpRequestCustomHttpMethodInspection",
                  "markdown": "Reports possible custom HTTP methods. The quick fix suggests adding the custom HTTP method to project settings.\n\nInspection ID: HttpRequestCustomHttpMethodInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HttpRequestCustomHttpMethodInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTTP Client",
                      "index": 42,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HttpRequestWhitespaceInsideRequestTargetPath",
                "shortDescription": {
                  "text": "Whitespace in URL in request"
                },
                "fullDescription": {
                  "text": "Highlights spaces inside URL path segments. HTTP Client will ignore them. For better composing use Split Lines action. Inspection ID: HttpRequestWhitespaceInsideRequestTargetPath",
                  "markdown": "Highlights spaces inside URL path segments. HTTP Client will ignore them. For better composing use Split Lines action.\n\nInspection ID: HttpRequestWhitespaceInsideRequestTargetPath"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "HttpRequestWhitespaceInsideRequestTargetPath",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTTP Client",
                      "index": 42,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HttpClientUnresolvedVariable",
                "shortDescription": {
                  "text": "Unresolved environment variable"
                },
                "fullDescription": {
                  "text": "Reports variables undeclared in the current environment HTTP Client. Executing requests with undeclared variables probably fail. Consider adding a variable to the environment or selecting an environment with this variable. Inspection doesn't report variables in request bodies, because it can be a valid syntax of the body. Some variables may be not reported as unresolved, because they are declared in response or pre-request handler scripts via 'client.global.set' or 'request.variables.set' functions call. Inspection ID: HttpClientUnresolvedVariable",
                  "markdown": "Reports variables undeclared in the current environment HTTP Client.\n\n\nExecuting requests with undeclared variables probably fail.\nConsider adding a variable to the environment or selecting an environment with this variable.\n\nInspection doesn't report variables in request bodies, because it can be a valid syntax of the body.\n\n\nSome variables may be not reported as unresolved, because they are declared in response or pre-request handler scripts via\n`client.global.set` or `request.variables.set` functions call.\n\nInspection ID: HttpClientUnresolvedVariable"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HttpClientUnresolvedVariable",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTTP Client",
                      "index": 42,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HttpRequestAmbiguityEncoding",
                "shortDescription": {
                  "text": "Ambiguity Encoding Inspection"
                },
                "fullDescription": {
                  "text": "Detects '+' in an encoded query string. It is ambiguous whether it should be encoded as space or as a '+' character. Example: 'GET https://example.com/api?name=John+Doe%40example.com' After the quick-fix is applied 'GET https://example.com/api?name=John%20Doe%40example.com' Inspection ID: HttpRequestAmbiguityEncoding",
                  "markdown": "Detects '+' in an encoded query string. It is ambiguous whether it should be encoded as space or as a '+' character.\n\n**Example:**\n\n\n      GET https://example.com/api?name=John+Doe%40example.com\n\nAfter the quick-fix is applied\n\n\n      GET https://example.com/api?name=John%20Doe%40example.com\n\nInspection ID: HttpRequestAmbiguityEncoding"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "HttpRequestAmbiguityEncoding",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTTP Client",
                      "index": 42,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IncorrectHttpHeaderInspection",
                "shortDescription": {
                  "text": "Incorrect HTTP header"
                },
                "fullDescription": {
                  "text": "Reports unknown HTTP headers that do not match any publicly known headers. The quick fix suggests adding the header to the list of custom headers when the Use custom HTTP headers option is enabled. HTTP headers from the list of custom headers will not trigger the inspection. Inspection ID: IncorrectHttpHeaderInspection",
                  "markdown": "Reports unknown HTTP headers that do not match any [publicly\nknown headers](https://www.iana.org/assignments/message-headers/message-headers.xml). The quick fix suggests adding the header to the list of custom headers when the **Use custom HTTP headers** option\nis enabled. HTTP headers from the list of custom headers will not trigger the inspection.\n\nInspection ID: IncorrectHttpHeaderInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "IncorrectHttpHeaderInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Security"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTTP Client",
                      "index": 42,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HttpClientInappropriateProtocolUsageInspection",
                "shortDescription": {
                  "text": "Inappropriate HTTP Protocol usage"
                },
                "fullDescription": {
                  "text": "Reports inappropriate usage of HTTP protocol keyword, e.g. 'HTTP/2', with non-HTTP method requests. Such a usage will be ignored. Inspection ID: HttpClientInappropriateProtocolUsageInspection",
                  "markdown": "Reports inappropriate usage of HTTP protocol keyword, e.g. `HTTP/2`, with non-HTTP method requests. Such a usage will be ignored.\n\nInspection ID: HttpClientInappropriateProtocolUsageInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "HttpClientInappropriateProtocolUsageInspection",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Security"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTTP Client",
                      "index": 42,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HttpRequestRequestSeparatorYamlBodyInspection",
                "shortDescription": {
                  "text": "Missing request separator in YAML body"
                },
                "fullDescription": {
                  "text": "Reports possible requests in injected YAML body where request separator '###' is missing. The quick fix suggests adding the separator '###' before the request. Inspection ID: HttpRequestRequestSeparatorYamlBodyInspection",
                  "markdown": "Reports possible requests in injected YAML body where request separator `###` is missing. The quick fix suggests adding the separator `###` before the request.\n\nInspection ID: HttpRequestRequestSeparatorYamlBodyInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "HttpRequestRequestSeparatorYamlBodyInspection",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTTP Client",
                      "index": 42,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.editorconfig.editorconfigjetbrains",
            "version": "253.22441.33",
            "rules": [
              {
                "id": "EditorConfigNumerousWildcards",
                "shortDescription": {
                  "text": "Too many wildcards"
                },
                "fullDescription": {
                  "text": "Reports sections that contain too many wildcards. Using a lot of wildcards may lead to performance issues. Inspection ID: EditorConfigNumerousWildcards",
                  "markdown": "Reports sections that contain too many wildcards. Using a lot of wildcards may lead to performance issues.\n\nInspection ID: EditorConfigNumerousWildcards"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "EditorConfigNumerousWildcards",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Performance"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 43,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigKeyCorrectness",
                "shortDescription": {
                  "text": "Unknown property"
                },
                "fullDescription": {
                  "text": "Reports properties that are not supported by the IDE. Note: some “ij” domain properties may require specific language plugins. Inspection ID: EditorConfigKeyCorrectness",
                  "markdown": "Reports properties that are not supported by the IDE. Note: some \"ij\" domain properties may require specific language plugins.\n\nInspection ID: EditorConfigKeyCorrectness"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EditorConfigKeyCorrectness",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 43,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigEncoding",
                "shortDescription": {
                  "text": "File encoding doesn't match EditorConfig charset"
                },
                "fullDescription": {
                  "text": "Checks that current file encoding matches the encoding defined in \"charset\" property of .editorconfig file. Inspection ID: EditorConfigEncoding",
                  "markdown": "Checks that current file encoding matches the encoding defined in \"charset\" property of .editorconfig file.\n\nInspection ID: EditorConfigEncoding"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EditorConfigEncoding",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 43,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigEmptyHeader",
                "shortDescription": {
                  "text": "Empty header"
                },
                "fullDescription": {
                  "text": "Reports sections with an empty header. Section header must contain file path globs in the format similar to one supported by 'gitignore'. Inspection ID: EditorConfigEmptyHeader",
                  "markdown": "Reports sections with an empty header. Section header must contain file path globs in the format similar to one supported by `gitignore`.\n\nInspection ID: EditorConfigEmptyHeader"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "EditorConfigEmptyHeader",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 43,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigMissingRequiredDeclaration",
                "shortDescription": {
                  "text": "Required declarations are missing"
                },
                "fullDescription": {
                  "text": "Reports properties that miss the required declarations. Refer to the documentation for more information. Inspection ID: EditorConfigMissingRequiredDeclaration",
                  "markdown": "Reports properties that miss the required declarations. Refer to the documentation for more information.\n\nInspection ID: EditorConfigMissingRequiredDeclaration"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "EditorConfigMissingRequiredDeclaration",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 43,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigSpaceInHeader",
                "shortDescription": {
                  "text": "Space in file pattern"
                },
                "fullDescription": {
                  "text": "Reports space characters in wildcard patterns that affect pattern matching. If these characters are not intentional, they should be removed. Inspection ID: EditorConfigSpaceInHeader",
                  "markdown": "Reports space characters in wildcard patterns that affect pattern matching. If these characters are not intentional, they should be removed.\n\nInspection ID: EditorConfigSpaceInHeader"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "EditorConfigSpaceInHeader",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 43,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigOptionRedundancy",
                "shortDescription": {
                  "text": "Redundant property"
                },
                "fullDescription": {
                  "text": "Reports properties that are redundant when another applicable section already contains the same property and value. For example: '[*]\nindent_size=4\n[*.java]\nindent_size=4' are both applicable to '*.java' files and define the same 'indent_size' value. Inspection ID: EditorConfigOptionRedundancy",
                  "markdown": "Reports properties that are redundant when another applicable section already contains the same property and value.\n\n\nFor example:\n\n\n    [*]\n    indent_size=4\n    [*.java]\n    indent_size=4\n\nare both applicable to `*.java` files and define the same `indent_size` value.\n\nInspection ID: EditorConfigOptionRedundancy"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EditorConfigOptionRedundancy",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 43,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigPartialOverride",
                "shortDescription": {
                  "text": "Overlapping sections"
                },
                "fullDescription": {
                  "text": "Reports subsets of files specified in the current section that overlap with other subsets in other sections. For example: '[{foo,bar}]' and '[{foo,bas}]' both contain “foo”. Inspection ID: EditorConfigPartialOverride",
                  "markdown": "Reports subsets of files specified in the current section that overlap with other subsets in other sections. For example: `[{foo,bar}]` and `[{foo,bas}]` both contain \"foo\".\n\nInspection ID: EditorConfigPartialOverride"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "EditorConfigPartialOverride",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 43,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigListAcceptability",
                "shortDescription": {
                  "text": "Unexpected value list"
                },
                "fullDescription": {
                  "text": "Reports lists of values that are used in properties in which lists are not supported. In this case, only a single value can be specified. Inspection ID: EditorConfigListAcceptability",
                  "markdown": "Reports lists of values that are used in properties in which lists are not supported. In this case, only a single value can be specified.\n\nInspection ID: EditorConfigListAcceptability"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "EditorConfigListAcceptability",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 43,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigPatternEnumerationRedundancy",
                "shortDescription": {
                  "text": "Unnecessary braces"
                },
                "fullDescription": {
                  "text": "Reports pattern lists that are either empty '{}' or contain just one pattern, for example '{foo}' in contrast to a list containing multiple patterns, for example '{foo,bar}'. In this case braces are handled as a part of the name. For example, the pattern '*.{a}' will match the file 'my.{a}' but not 'my.a'. Inspection ID: EditorConfigPatternEnumerationRedundancy",
                  "markdown": "Reports pattern lists that are either empty `{}` or contain just one pattern, for example `{foo}` in contrast to a list containing multiple patterns, for example `{foo,bar}`. In this case braces are handled as a part of the name. For example, the pattern `*.{a}` will match the file `my.{a}` but not `my.a`.\n\nInspection ID: EditorConfigPatternEnumerationRedundancy"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "EditorConfigPatternEnumerationRedundancy",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 43,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigPairAcceptability",
                "shortDescription": {
                  "text": "Unexpected key-value pair"
                },
                "fullDescription": {
                  "text": "Reports key-value pairs that are not allowed in the current context. Inspection ID: EditorConfigPairAcceptability",
                  "markdown": "Reports key-value pairs that are not allowed in the current context.\n\nInspection ID: EditorConfigPairAcceptability"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "EditorConfigPairAcceptability",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 43,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigNoMatchingFiles",
                "shortDescription": {
                  "text": "No matching files"
                },
                "fullDescription": {
                  "text": "Reports sections with wildcard patterns that do not match any files under the directory in which the '.editorconfig' file is located. Inspection ID: EditorConfigNoMatchingFiles",
                  "markdown": "Reports sections with wildcard patterns that do not match any files under the directory in which the `.editorconfig` file is located.\n\nInspection ID: EditorConfigNoMatchingFiles"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EditorConfigNoMatchingFiles",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 43,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigWildcardRedundancy",
                "shortDescription": {
                  "text": "Redundant wildcard"
                },
                "fullDescription": {
                  "text": "Reports wildcards that become redundant when the “**” wildcard is used in the same section. The “**” wildcard defines a broader set of files than any other wildcard. That is why, any other wildcard used in the same section has no affect and can be removed. Inspection ID: EditorConfigWildcardRedundancy",
                  "markdown": "Reports wildcards that become redundant when the \"\\*\\*\" wildcard is used in the same section.\n\n\nThe \"\\*\\*\" wildcard defines a broader set of files than any other wildcard.\nThat is why, any other wildcard used in the same section has no affect and can be removed.\n\nInspection ID: EditorConfigWildcardRedundancy"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EditorConfigWildcardRedundancy",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 43,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigHeaderUniqueness",
                "shortDescription": {
                  "text": "EditorConfig section is not unique"
                },
                "fullDescription": {
                  "text": "Reports sections that define the same file pattern as other sections. Inspection ID: EditorConfigHeaderUniqueness",
                  "markdown": "Reports sections that define the same file pattern as other sections.\n\nInspection ID: EditorConfigHeaderUniqueness"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EditorConfigHeaderUniqueness",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 43,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigValueCorrectness",
                "shortDescription": {
                  "text": "Invalid property value"
                },
                "fullDescription": {
                  "text": "Reports property values that do not meet value restrictions. For example, some properties may be only “true” or “false”, others contain only integer numbers etc. If a value has a limited set of variants, use code completion to see all of them. Inspection ID: EditorConfigValueCorrectness",
                  "markdown": "Reports property values that do not meet value restrictions. For example, some properties may be only \"true\" or \"false\", others contain only integer numbers etc. If a value has a limited set of variants, use code completion to see all of them.\n\nInspection ID: EditorConfigValueCorrectness"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "EditorConfigValueCorrectness",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 43,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigUnusedDeclaration",
                "shortDescription": {
                  "text": "Unused declaration"
                },
                "fullDescription": {
                  "text": "Reports unused declarations. Such declarations can be removed. Inspection ID: EditorConfigUnusedDeclaration",
                  "markdown": "Reports unused declarations. Such declarations can be removed.\n\nInspection ID: EditorConfigUnusedDeclaration"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EditorConfigUnusedDeclaration",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 43,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigRootDeclarationUniqueness",
                "shortDescription": {
                  "text": "Extra top-level declaration"
                },
                "fullDescription": {
                  "text": "Reports multiple top-level declarations. There can be only one optional “root=true” top-level declaration in the EditorConfig file. Using multiple top-level declarations is not allowed. Inspection ID: EditorConfigRootDeclarationUniqueness",
                  "markdown": "Reports multiple top-level declarations. There can be only one optional \"root=true\" top-level declaration in the EditorConfig file. Using multiple top-level declarations is not allowed.\n\nInspection ID: EditorConfigRootDeclarationUniqueness"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "EditorConfigRootDeclarationUniqueness",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 43,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigRootDeclarationCorrectness",
                "shortDescription": {
                  "text": "Unexpected top-level declaration"
                },
                "fullDescription": {
                  "text": "Reports unexpected top-level declarations. Top-level declarations other than “root=true” are not allowed in the EditorConfig file. Inspection ID: EditorConfigRootDeclarationCorrectness",
                  "markdown": "Reports unexpected top-level declarations. Top-level declarations other than \"root=true\" are not allowed in the EditorConfig file.\n\nInspection ID: EditorConfigRootDeclarationCorrectness"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "EditorConfigRootDeclarationCorrectness",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 43,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigPatternRedundancy",
                "shortDescription": {
                  "text": "Duplicate or redundant pattern"
                },
                "fullDescription": {
                  "text": "Reports file patterns that are redundant as there already are other patterns that define the same scope of files or even a broader one. For example, in '[{*.java,*}]' the first '*.java' pattern defines a narrower scope compared to '*'. That is why it is redundant and can be removed. Inspection ID: EditorConfigPatternRedundancy",
                  "markdown": "Reports file patterns that are redundant as there already are other patterns that define the same scope of files or even a broader one. For example, in `[{*.java,*}]` the first `*.java` pattern defines a narrower scope compared to `*`. That is why it is redundant and can be removed.\n\nInspection ID: EditorConfigPatternRedundancy"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EditorConfigPatternRedundancy",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 43,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigDeprecatedDescriptor",
                "shortDescription": {
                  "text": "Deprecated property"
                },
                "fullDescription": {
                  "text": "Reports EditorConfig properties that are no longer supported. Inspection ID: EditorConfigDeprecatedDescriptor",
                  "markdown": "Reports EditorConfig properties that are no longer supported.\n\nInspection ID: EditorConfigDeprecatedDescriptor"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EditorConfigDeprecatedDescriptor",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 43,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigShadowedOption",
                "shortDescription": {
                  "text": "Overridden property"
                },
                "fullDescription": {
                  "text": "Reports properties that are already defined in other sections. For example: '[*.java]\nindent_size=4\n[{*.java,*.js}]\nindent_size=2' The second section includes all '*.java' files too but it also redefines indent_size. As a result the value 2 will be used for files matching '*.java'. Inspection ID: EditorConfigShadowedOption",
                  "markdown": "Reports properties that are already defined in other sections.\n\nFor example:\n\n\n    [*.java]\n    indent_size=4\n    [{*.java,*.js}]\n    indent_size=2\n\nThe second section includes all `*.java` files too but it also redefines indent_size. As a result the value 2 will be used for files matching `*.java`.\n\nInspection ID: EditorConfigShadowedOption"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EditorConfigShadowedOption",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 43,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigValueUniqueness",
                "shortDescription": {
                  "text": "Non-unique list value"
                },
                "fullDescription": {
                  "text": "Reports duplicates in lists of values. Inspection ID: EditorConfigValueUniqueness",
                  "markdown": "Reports duplicates in lists of values.\n\nInspection ID: EditorConfigValueUniqueness"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "EditorConfigValueUniqueness",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 43,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigUnexpectedComma",
                "shortDescription": {
                  "text": "Unexpected comma"
                },
                "fullDescription": {
                  "text": "Reports commas that cannot be used in the current context. Commas are allowed only as separators for values in lists. Inspection ID: EditorConfigUnexpectedComma",
                  "markdown": "Reports commas that cannot be used in the current context. Commas are allowed only as separators for values in lists.\n\nInspection ID: EditorConfigUnexpectedComma"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "EditorConfigUnexpectedComma",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 43,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigCharClassRedundancy",
                "shortDescription": {
                  "text": "Unnecessary character class"
                },
                "fullDescription": {
                  "text": "Reports character classes that consist of a single character. Such classes can be simplified to a character, for example '[a]'→'a'. Inspection ID: EditorConfigCharClassRedundancy",
                  "markdown": "Reports character classes that consist of a single character. Such classes can be simplified to a character, for example `[a]`→`a`.\n\nInspection ID: EditorConfigCharClassRedundancy"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EditorConfigCharClassRedundancy",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 43,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigEmptySection",
                "shortDescription": {
                  "text": "Empty section"
                },
                "fullDescription": {
                  "text": "Reports sections that do not contain any EditorConfig properties. Inspection ID: EditorConfigEmptySection",
                  "markdown": "Reports sections that do not contain any EditorConfig properties.\n\nInspection ID: EditorConfigEmptySection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EditorConfigEmptySection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 43,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigShadowingOption",
                "shortDescription": {
                  "text": "Overriding property"
                },
                "fullDescription": {
                  "text": "Reports properties that override the same properties defined earlier in the file. For example: '[*.java]\nindent_size=4\n[{*.java,*.js}]\nindent_size=2' The second section includes the same files as '[*.java]' but also sets indent_size to value 2. Thus the first declaration 'indent_size=4'will be ignored. Inspection ID: EditorConfigShadowingOption",
                  "markdown": "Reports properties that override the same properties defined earlier in the file.\n\nFor example:\n\n\n    [*.java]\n    indent_size=4\n    [{*.java,*.js}]\n    indent_size=2\n\nThe second section includes the same files as `[*.java]` but also sets indent_size to value 2. Thus the first declaration `indent_size=4`will be ignored.\n\nInspection ID: EditorConfigShadowingOption"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EditorConfigShadowingOption",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 43,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigReferenceCorrectness",
                "shortDescription": {
                  "text": "Invalid reference"
                },
                "fullDescription": {
                  "text": "Reports identifiers that are either unknown or have a wrong type. Inspection ID: EditorConfigReferenceCorrectness",
                  "markdown": "Reports identifiers that are either unknown or have a wrong type.\n\nInspection ID: EditorConfigReferenceCorrectness"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "EditorConfigReferenceCorrectness",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 43,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigVerifyByCore",
                "shortDescription": {
                  "text": "Invalid .editorconfig file"
                },
                "fullDescription": {
                  "text": "Verifies the whole file using the backing EditorConfig core library and reports any failures. Any such failure would prevent EditorConfig properties from being correctly applied. Inspection ID: EditorConfigVerifyByCore",
                  "markdown": "Verifies the whole file using the backing EditorConfig core library and reports any failures. Any such failure would prevent EditorConfig properties from being correctly applied.\n\nInspection ID: EditorConfigVerifyByCore"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "EditorConfigVerifyByCore",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 43,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigCharClassLetterRedundancy",
                "shortDescription": {
                  "text": "Duplicate character class letter"
                },
                "fullDescription": {
                  "text": "Reports wildcard patterns in the EditorConfig section that contain a duplicate character in the character class, for example '[aa]'. Inspection ID: EditorConfigCharClassLetterRedundancy",
                  "markdown": "Reports wildcard patterns in the EditorConfig section that contain a duplicate character in the character class, for example `[aa]`.\n\nInspection ID: EditorConfigCharClassLetterRedundancy"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EditorConfigCharClassLetterRedundancy",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 43,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.spring.data",
            "version": "253.22441.33",
            "rules": [
              {
                "id": "SpringDataMongoDBJsonFieldInspection",
                "shortDescription": {
                  "text": "Spring Data MongoDB JSON unresolved fields"
                },
                "fullDescription": {
                  "text": "Reports unresolved document fields specified inside of 'org.springframework.data.mongodb.repository.Query' annotation. Example: '@Document\nclass User {\n  @Field\n  String name;\n}\n\ninterface UserRepository extends Repository<User, Long> {\n  @Query(\"{ age: { $gt: ?0 } }\") // 'age' is highlighted as unresolved\n  List<User> findUsersOlderThan(Integer age);\n}' Inspection ID: SpringDataMongoDBJsonFieldInspection",
                  "markdown": "Reports unresolved document fields specified inside of `org.springframework.data.mongodb.repository.Query` annotation.\n\n**Example:**\n\n\n    @Document\n    class User {\n      @Field\n      String name;\n    }\n\n    interface UserRepository extends Repository<User, Long> {\n      @Query(\"{ age: { $gt: ?0 } }\") // 'age' is highlighted as unresolved\n      List<User> findUsersOlderThan(Integer age);\n    }\n\nInspection ID: SpringDataMongoDBJsonFieldInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "SpringDataMongoDBJsonFieldInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Data",
                      "index": 49,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringDataJdbcAssociatedDbElementsInspection",
                "shortDescription": {
                  "text": "Spring Data JDBC associated DB elements"
                },
                "fullDescription": {
                  "text": "Reports references inside the following Spring Data JDBC annotations if they cannot be resolved within the configured datasource: @Table(name, schema) @Column(name) @MappedCollection(idColumn, keyColumn) NOTE: Datasource can be configured via `Assign datasource` action or the corresponding gutter icon for entity class Inspection ID: SpringDataJdbcAssociatedDbElementsInspection",
                  "markdown": "Reports references inside the following Spring Data JDBC annotations if they cannot be resolved within the configured datasource:  \n\n* @Table(name, schema)\n* @Column(name)\n* @MappedCollection(idColumn, keyColumn)\n\n\n**NOTE:** Datasource can be configured via \\`Assign datasource\\` action or the corresponding gutter icon for entity class\n\nInspection ID: SpringDataJdbcAssociatedDbElementsInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "SpringDataJdbcAssociatedDbElementsInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring Data",
                      "index": 139,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringDataMethodInconsistencyInspection",
                "shortDescription": {
                  "text": "Spring Data repository method errors"
                },
                "fullDescription": {
                  "text": "Reports Spring Data CRUD repository methods for which the Spring Data Query builder cannot generate the corresponding query. Example: 'interface PersonRepository extends Repository<Person, Long> {\n  List<Person> findByEmailAddressAndLastname(EmailAddress emailAddress, String lastname);\n  List<Person> findByEmailUnknownAndLastname(EmailAddress emailAddress, String lastname); // Cannot resolve property 'Unknown'\n  List<Person> findByAndLastname(EmailAddress emailAddress, String lastname); // Missing property name\n\n  List<Person> findDistinctPeopleByLastnameOrFirstname(String lastname, String firstname);\n  List<Person> findPeopleDistinctByUnknownOrFirstname(String lastname, String firstname); // Cannot resolve property 'Unknown'\n\n  List<Person> findByLastnameOrderByFirstnameAsc(String lastname);\n  List<Person> findByLastnameOrderByUnknownDesc(String lastname);  // Cannot resolve property 'Unknown'\n}' Inspection ID: SpringDataMethodInconsistencyInspection",
                  "markdown": "Reports Spring Data CRUD repository methods for which the\n[Spring Data Query](https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#repositories.query-methods.query-creation)\nbuilder cannot generate the corresponding query.\n\n**Example:**\n\n\n    interface PersonRepository extends Repository<Person, Long> {\n      List<Person> findByEmailAddressAndLastname(EmailAddress emailAddress, String lastname);\n      List<Person> findByEmailUnknownAndLastname(EmailAddress emailAddress, String lastname); // Cannot resolve property 'Unknown'\n      List<Person> findByAndLastname(EmailAddress emailAddress, String lastname); // Missing property name\n\n      List<Person> findDistinctPeopleByLastnameOrFirstname(String lastname, String firstname);\n      List<Person> findPeopleDistinctByUnknownOrFirstname(String lastname, String firstname); // Cannot resolve property 'Unknown'\n\n      List<Person> findByLastnameOrderByFirstnameAsc(String lastname);\n      List<Person> findByLastnameOrderByUnknownDesc(String lastname);  // Cannot resolve property 'Unknown'\n    }\n\nInspection ID: SpringDataMethodInconsistencyInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SpringDataMethodInconsistencyInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Data",
                      "index": 49,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringDataRepositoryMethodParametersInspection",
                "shortDescription": {
                  "text": "Spring Data repository method parameters errors"
                },
                "fullDescription": {
                  "text": "Reports Spring Data CRUD repository method parameters with incorrect types. Example: 'public class Person {\n    private int id;\n    private String lastname;\n    private Address address;\n  }\n\n  public class Address {\n    private int zipCode;\n  }\n\n  public interface CustomerRepository extends CrudRepository<Person, Integer> {\n    List<Person> findByAddress(String lastname);  // 'Address' type expected\n    List<Person> findByAddressZipCode(String str);   // 'int' type expected\n  }' Inspection ID: SpringDataRepositoryMethodParametersInspection",
                  "markdown": "Reports Spring Data CRUD repository method parameters with incorrect types.\n\n**Example:**\n\n\n      public class Person {\n        private int id;\n        private String lastname;\n        private Address address;\n      }\n\n      public class Address {\n        private int zipCode;\n      }\n\n      public interface CustomerRepository extends CrudRepository<Person, Integer> {\n        List<Person> findByAddress(String lastname);  // 'Address' type expected\n        List<Person> findByAddressZipCode(String str);   // 'int' type expected\n      }\n\nInspection ID: SpringDataRepositoryMethodParametersInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SpringDataRepositoryMethodParametersInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Data",
                      "index": 49,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringDataJdbcMappedCollectionKeyColumnInspection",
                "shortDescription": {
                  "text": "Spring Data JDBC mapped collection key column"
                },
                "fullDescription": {
                  "text": "Annotation '@MappedCollection' on persistent attribute with List/Map type requires 'keyColumn' attribute. It has the default value - table name + '_key' suffix, bot most probably that column doesn't exist. It's recommended to specify the value explicitly. Inspection ID: SpringDataJdbcMappedCollectionKeyColumnInspection",
                  "markdown": "Annotation `@MappedCollection` on persistent attribute with List/Map type requires `keyColumn` attribute. It has the default value - table name + '_key' suffix, bot most probably that column doesn't exist. It's recommended to specify the value explicitly.\n\nInspection ID: SpringDataJdbcMappedCollectionKeyColumnInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SpringDataJdbcMappedCollectionKeyColumnInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Data",
                      "index": 49,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringDataModifyingAnnotationMissing",
                "shortDescription": {
                  "text": "Update/Delete queries must be annotated with @Modifying, otherwise an InvalidDataAccessApiUsageException will be thrown."
                },
                "fullDescription": {
                  "text": "Checks that delete/update queries are annotated with the '@Modifying' annotation. Inspection ID: SpringDataModifyingAnnotationMissing",
                  "markdown": "Checks that delete/update queries are annotated with the\n\n    @Modifying\n\nannotation.\n\nInspection ID: SpringDataModifyingAnnotationMissing"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SpringDataModifyingAnnotationMissing",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Data",
                      "index": 49,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringDataRepositoryMethodReturnTypeInspection",
                "shortDescription": {
                  "text": "Spring Data repository method return type errors"
                },
                "fullDescription": {
                  "text": "Reports Spring Data CRUD repository methods with incorrect return types. The following return types are supported: 'void' Primitive types Wrapper types 'T' when the query method is expected to return one result at most. Returns 'null' if there are no results and throws 'IncorrectResultSizeDataAccessException' if there is more than one result. 'java.util.List' or any common 'Iterable' type 'java.util.stream.Stream' 'java.util.Optional' or 'scala.Option' when the query method is expected to return one result at most. Returns 'Optional.empty()' or 'Optional.absent()' if there are no results and throws 'IncorrectResultSizeDataAccessException' if there is more than one result. 'io.micronaut.data.model.Page' 'io.micronaut.data.model.Slice' 'java.util.concurrent.Future', 'java.util.concurrent.CompletableFuture', or 'ListenableFuture' if the method is annotated with '@Async' and Spring asynchronous method execution is enabled 'GeoResults<T>', 'GeoResult<T>', or 'GeoPage<T>' Inspection ID: SpringDataRepositoryMethodReturnTypeInspection",
                  "markdown": "Reports Spring Data CRUD repository methods with incorrect return types.\n\nThe following return types are supported:\n* `void`\n* Primitive types\n* Wrapper types\n* `T` when the query method is expected to return one result at most. Returns `null` if there are no results and throws `IncorrectResultSizeDataAccessException` if there is more than one result.\n* `java.util.List` or any common `Iterable` type\n* `java.util.stream.Stream`\n* `java.util.Optional` or `scala.Option` when the query method is expected to return one result at most. Returns `Optional.empty()` or `Optional.absent()` if there are no results and throws `IncorrectResultSizeDataAccessException` if there is more than one result.\n* `io.micronaut.data.model.Page`\n* `io.micronaut.data.model.Slice`\n* `java.util.concurrent.Future`, `java.util.concurrent.CompletableFuture`, or `ListenableFuture` if the method is annotated with `@Async` and Spring asynchronous method execution is enabled\n* `GeoResults<T>`, `GeoResult<T>`, or `GeoPage<T>`\n\nInspection ID: SpringDataRepositoryMethodReturnTypeInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SpringDataRepositoryMethodReturnTypeInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Data",
                      "index": 49,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringDataPageableParameterMissing",
                "shortDescription": {
                  "text": "Query-returning Page must have a Pageable parameter."
                },
                "fullDescription": {
                  "text": "Verifies that a 'Pageable' parameter is present in queries returning 'Page' . Inspection ID: SpringDataPageableParameterMissing",
                  "markdown": "Verifies that a\n\n    Pageable\n\nparameter is present in queries returning\n\n    Page\n\n.\n\nInspection ID: SpringDataPageableParameterMissing"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SpringDataPageableParameterMissing",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Data",
                      "index": 49,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringDataJdbcEntityInSeveralAggregatesInspection",
                "shortDescription": {
                  "text": "Spring Data JDBC aggregate roots"
                },
                "fullDescription": {
                  "text": "An entity within a Spring Data JDBC aggregate is referencing another entity that already belongs to a different aggregate. In Spring Data JDBC, every reference to another entity must remain strictly within the boundaries of the same aggregate. Cross-aggregate relationships cannot be expressed as direct entity references; they should instead be modeled using the identifier of the target aggregate (for example, storing the foreign key as a simple value type). Spring Data Documentation Inspection ID: SpringDataJdbcEntityInSeveralAggregatesInspection",
                  "markdown": "An entity within a Spring Data JDBC aggregate is referencing another entity that already belongs to a different aggregate. In Spring Data JDBC, every reference to another entity must remain strictly within the boundaries of the same aggregate. Cross-aggregate relationships cannot be expressed as direct entity references; they should instead be modeled using the identifier of the target aggregate (for example, storing the foreign key as a simple value type). [Spring Data Documentation](https://docs.spring.io/spring-data/relational/reference/jdbc/mapping.html#jdbc.entity-persistence.types.referenced-entities)\n\nInspection ID: SpringDataJdbcEntityInSeveralAggregatesInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SpringDataJdbcEntityInSeveralAggregatesInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Data",
                      "index": 49,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.cdi",
            "version": "253.22441.33",
            "rules": [
              {
                "id": "CdiUnknownProducersForDisposerMethodInspection",
                "shortDescription": {
                  "text": "Disposer method parameter without producers"
                },
                "fullDescription": {
                  "text": "Reports disposer methods without the corresponding producer method. Each disposer method must have exactly one disposed parameter of the same type as the corresponding producer method or the producer field return type. When searching the disposer methods for a producer method or producer field, the container considers the type and qualifiers of the disposed parameter. If the disposed parameter resolves to a producer method or producer field declared by the same bean class, the container must call this method when destroying any instance returned by that producer method or producer field. Inspection ID: CdiUnknownProducersForDisposerMethodInspection",
                  "markdown": "Reports disposer methods without the corresponding producer method.\n\nEach disposer method must have exactly one disposed parameter of the same type as the corresponding producer method or\nthe producer field return type. When searching the disposer methods for a producer method or producer field, the container\nconsiders the type and qualifiers of the disposed parameter. If the disposed parameter resolves to a producer method or\nproducer field declared by the same bean class, the container must call this method when destroying any instance returned by\nthat producer method or producer field.\n\nInspection ID: CdiUnknownProducersForDisposerMethodInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CdiUnknownProducersForDisposerMethodInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CDI (Contexts and Dependency Injection)",
                      "index": 52,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CdiTypedAnnotationInspection",
                "shortDescription": {
                  "text": "Incorrect @Typed annotation usage"
                },
                "fullDescription": {
                  "text": "Reports '@Typed' annotation usages that violate the following rules: Only producer methods can have the '@Typed' annotation Bean type must correspond to the types mentioned in the '@Typed' annotation Inspection ID: CdiTypedAnnotationInspection",
                  "markdown": "Reports `@Typed` annotation usages that violate the following rules:\n\n* Only producer methods can have the `@Typed` annotation\n* Bean type must correspond to the types mentioned in the `@Typed` annotation\n\nInspection ID: CdiTypedAnnotationInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CdiTypedAnnotationInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CDI (Contexts and Dependency Injection)",
                      "index": 52,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CdiDomBeans",
                "shortDescription": {
                  "text": "Incorrect bean definitions in beans.xml"
                },
                "fullDescription": {
                  "text": "Reports incorrect bean definitions in 'beans.xml' configuration files. Inspection ID: CdiDomBeans",
                  "markdown": "Reports incorrect bean definitions in `beans.xml` configuration files.\n\nInspection ID: CdiDomBeans"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CdiDomBeans",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CDI (Contexts and Dependency Injection)",
                      "index": 52,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CdiDisposerMethodInspection",
                "shortDescription": {
                  "text": "Incorrect disposer method"
                },
                "fullDescription": {
                  "text": "Reports incorrect disposer methods. Cannot be abstract. Must have exactly only one disposed parameter annotated with '@Disposes'. Inspection ID: CdiDisposerMethodInspection",
                  "markdown": "Reports incorrect disposer methods.\n\n* Cannot be abstract.\n* Must have exactly only one disposed parameter annotated with `@Disposes`.\n\nInspection ID: CdiDisposerMethodInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CdiDisposerMethodInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CDI (Contexts and Dependency Injection)",
                      "index": 52,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CdiManagedBeanInconsistencyInspection",
                "shortDescription": {
                  "text": "Incorrect managed bean definition"
                },
                "fullDescription": {
                  "text": "Reports incorrect bean definition rules. Top-level Java class can be a simple bean if: It is not a parameterized type. It is not a non-static inner class. It is a concrete class, or is annotated with '@Decorator'. It has an appropriate constructor: either the class has a constructor with no parameters, or the class declares a constructor annotated with '@Initializer'. It does not implement any of the following interfaces: 'javax.servlet.Servlet', 'javax.servlet.Filter', 'javax.servlet.ServletContextListener', 'javax.servlet.http.HttpSessionListener', 'javax.servlet.ServletRequestListener', 'javax.ejb.EnterpriseBean'. It does not extend 'javax.faces.component.UIComponent'. Inspection ID: CdiManagedBeanInconsistencyInspection",
                  "markdown": "Reports incorrect bean definition rules.\n\nTop-level Java class can be a simple bean if:\n\n* It is not a parameterized type.\n* It is not a non-static inner class.\n* It is a concrete class, or is annotated with `@Decorator`.\n* It has an appropriate constructor: either the class has a constructor with no parameters, or the class declares a constructor annotated with `@Initializer`.\n* It does not implement any of the following interfaces: `javax.servlet.Servlet`, `javax.servlet.Filter`, `javax.servlet.ServletContextListener`, `javax.servlet.http.HttpSessionListener`, `javax.servlet.ServletRequestListener`, `javax.ejb.EnterpriseBean`.\n* It does not extend `javax.faces.component.UIComponent`.\n\nInspection ID: CdiManagedBeanInconsistencyInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CdiManagedBeanInconsistencyInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CDI (Contexts and Dependency Injection)",
                      "index": 52,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CdiDecoratorInspection",
                "shortDescription": {
                  "text": "Incorrect @Decorator class"
                },
                "fullDescription": {
                  "text": "Reports incorrect '@Decorator' bean definitions. Cannot be final. Must have exactly one delegate attribute (field or parameter) annotated with '@Delegate'. Inspection ID: CdiDecoratorInspection",
                  "markdown": "Reports incorrect `@Decorator` bean definitions.\n\n* Cannot be final.\n* Must have exactly one delegate attribute (field or parameter) annotated with `@Delegate`.\n\nInspection ID: CdiDecoratorInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CdiDecoratorInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CDI (Contexts and Dependency Injection)",
                      "index": 52,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CdiScopeInspection",
                "shortDescription": {
                  "text": "Incorrect bean scope"
                },
                "fullDescription": {
                  "text": "Reports incorrect bean scopes: Singleton bean must be either '@ApplicationScoped' or '@Dependent' Session stateless bean must be '@Dependent' Inspection ID: CdiScopeInspection",
                  "markdown": "Reports incorrect bean scopes:\n\n* Singleton bean must be either `@ApplicationScoped` or `@Dependent`\n* Session stateless bean must be `@Dependent`\n\nInspection ID: CdiScopeInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CdiScopeInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CDI (Contexts and Dependency Injection)",
                      "index": 52,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CdiSpecializesInspection",
                "shortDescription": {
                  "text": "Incorrect @Specializes usage"
                },
                "fullDescription": {
                  "text": "Reports incorrect usages of the '@Specializes' annotation. Specializing bean must extend another bean Specializing method must override a '@Produces' method of its direct superclass '@Named' annotation cannot be used on the specializing and specialized class Two or more classes cannot specialize the same superclass Specializing method cannot be static Inspection ID: CdiSpecializesInspection",
                  "markdown": "Reports incorrect usages of the `@Specializes` annotation.\n\n* Specializing bean must extend another bean\n* Specializing method must override a `@Produces` method of its direct superclass\n* `@Named` annotation cannot be used on the specializing and specialized class\n* Two or more classes cannot specialize the same superclass\n* Specializing method cannot be static\n\nInspection ID: CdiSpecializesInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CdiSpecializesInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CDI (Contexts and Dependency Injection)",
                      "index": 52,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CdiAlternativeInspection",
                "shortDescription": {
                  "text": "Vetoed @Alternative bean"
                },
                "fullDescription": {
                  "text": "Reports vetoed '@Alternative' beans. A bean is considered vetoed when it is annotated with '@Vetoed' or it is declared in a vetoed package. Inspection ID: CdiAlternativeInspection",
                  "markdown": "Reports vetoed `@Alternative` beans.\nA bean is considered vetoed when it is annotated with `@Vetoed` or it is declared in a vetoed package.\n\nInspection ID: CdiAlternativeInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CdiAlternativeInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CDI (Contexts and Dependency Injection)",
                      "index": 52,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CdiObservesInspection",
                "shortDescription": {
                  "text": "Incorrect observer method"
                },
                "fullDescription": {
                  "text": "Reports incorrect observer method definitions. Must contain only one '@Observes' parameter Cannot have parameters annotated with '@Disposes' Cannot be annotated with '@Inject' and '@Produces' Inspection ID: CdiObservesInspection",
                  "markdown": "Reports incorrect observer method definitions.\n\n* Must contain only one `@Observes` parameter\n* Cannot have parameters annotated with `@Disposes`\n* Cannot be annotated with `@Inject` and `@Produces`\n\nInspection ID: CdiObservesInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CdiObservesInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CDI (Contexts and Dependency Injection)",
                      "index": 52,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CdiStereotypeRestrictionsInspection",
                "shortDescription": {
                  "text": "Bean has collision of scope in stereotypes"
                },
                "fullDescription": {
                  "text": "Reports classes with multiple stereotypes in different scopes or if a scope is not specified Inspection ID: CdiStereotypeRestrictionsInspection",
                  "markdown": "Reports classes with multiple stereotypes in different scopes or if a scope is not specified\n\nInspection ID: CdiStereotypeRestrictionsInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CdiStereotypeRestrictionsInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CDI (Contexts and Dependency Injection)",
                      "index": 52,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CdiStereotypeInspection",
                "shortDescription": {
                  "text": "Incorrect @Stereotype annotation class"
                },
                "fullDescription": {
                  "text": "Reports incorrect '@Stereotype' annotation classes: Non-empty '@Named' annotation is not allowed for stereotypes Qualifier annotations are not allowed for stereotypes Inspection ID: CdiStereotypeInspection",
                  "markdown": "Reports incorrect `@Stereotype` annotation classes:\n\n* Non-empty `@Named` annotation is not allowed for stereotypes\n* Qualifier annotations are not allowed for stereotypes\n\nInspection ID: CdiStereotypeInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CdiStereotypeInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CDI (Contexts and Dependency Injection)",
                      "index": 52,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CdiInjectionPointsInspection",
                "shortDescription": {
                  "text": "Injection point with ambiguous dependencies"
                },
                "fullDescription": {
                  "text": "Reports injection points in bean classes that have ambiguous dependencies. Example: 'interface Engine {}\n\n  @Singleton\n  class GasEngine implements Engine {}\n\n  @Singleton\n  class ElectricEngine implements Engine {}\n\n  @Singleton\n  class Car {\n    @Inject Engine engine; // Ambiguous dependency: there are multiple beans that match the injection point\n  }' Inspection ID: CdiInjectionPointsInspection",
                  "markdown": "Reports injection points in bean classes that have ambiguous dependencies.\n\n**Example:**\n\n\n      interface Engine {}\n\n      @Singleton\n      class GasEngine implements Engine {}\n\n      @Singleton\n      class ElectricEngine implements Engine {}\n\n      @Singleton\n      class Car {\n        @Inject Engine engine; // Ambiguous dependency: there are multiple beans that match the injection point\n      }\n\nInspection ID: CdiInjectionPointsInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CdiInjectionPointsInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CDI (Contexts and Dependency Injection)",
                      "index": 52,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CdiNormalScopeInspection",
                "shortDescription": {
                  "text": "Bean with non-default scope declares public fields"
                },
                "fullDescription": {
                  "text": "Reports managed beans with public instance fields that are not in the default '@Dependent' scope. According to the CDI specification, contextual scopes ('@RequestScoped', '@ApplicationScoped', '@SessionScoped', and 'ConversationScoped') are not allowed for managed beans with public instance fields. Example: '@ApplicationScoped // Warning: Bean with non-default scope must not have public fields\n  class Car {\n    public String engine;\n  }' Inspection ID: CdiNormalScopeInspection",
                  "markdown": "Reports managed beans with public instance fields that are not in the default `@Dependent` scope.\nAccording to the CDI specification, contextual scopes\n(`@RequestScoped`, `@ApplicationScoped`, `@SessionScoped`, and `ConversationScoped`)\nare not allowed for managed beans with public instance fields.\n\n**Example:**\n\n\n      @ApplicationScoped // Warning: Bean with non-default scope must not have public fields\n      class Car {\n        public String engine;\n      }\n\nInspection ID: CdiNormalScopeInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CdiNormalScopeInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CDI (Contexts and Dependency Injection)",
                      "index": 52,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CdiInterceptorInspection",
                "shortDescription": {
                  "text": "@Interceptor class without binding types"
                },
                "fullDescription": {
                  "text": "Reports '@Interceptor' classes without binding types. An interceptor must specify at least one interceptor binding. Inspection ID: CdiInterceptorInspection",
                  "markdown": "Reports `@Interceptor` classes without binding types. An interceptor must specify at least one interceptor binding.\n\nInspection ID: CdiInterceptorInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CdiInterceptorInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CDI (Contexts and Dependency Injection)",
                      "index": 52,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CdiInjectInspection",
                "shortDescription": {
                  "text": "Incorrect dependency injection place"
                },
                "fullDescription": {
                  "text": "Reports incorrect injection points: fields, methods, and parameters annotated with '@Inject' that violate the CDI specification. Requirements for fields: Cannot be static or final Cannot be annotated with '@Produces' Requirements for methods with injection: Cannot be static or abstract Cannot have parameters with '@Disposes' and '@Observes' annotations Inspection ID: CdiInjectInspection",
                  "markdown": "Reports incorrect injection points: fields, methods, and parameters annotated with `@Inject` that violate the CDI specification.\n\nRequirements for fields:\n\n* Cannot be static or final\n* Cannot be annotated with `@Produces`\n\nRequirements for methods with injection:\n\n* Cannot be static or abstract\n* Cannot have parameters with `@Disposes` and `@Observes` annotations\n\nInspection ID: CdiInjectInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CdiInjectInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CDI (Contexts and Dependency Injection)",
                      "index": 52,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CdiUnproxyableBeanTypesInspection",
                "shortDescription": {
                  "text": "Incorrect usage of bean type that cannot be proxied"
                },
                "fullDescription": {
                  "text": "Reports incorrect usages of bean types that cannot be proxied. The container can't proxy certain legal bean types: classes which don't have a non-private constructor with no parameters, classes which are declared final, or have final methods, primitive types, and array types. The inspection reports the following violations for such bean types: Managed bean declaring a passivating scope must be 'java.io.Serializable' Bean of non-serializable type cannot be injected into a bean of passivating scope The container must be able to proxy tha injected normal scoped bean Inspection ID: CdiUnproxyableBeanTypesInspection",
                  "markdown": "Reports incorrect usages of bean types that cannot be proxied.\n\nThe container can't proxy certain legal bean types:\nclasses which don't have a non-private constructor with no parameters,\nclasses which are declared final,\nor have final methods, primitive types, and array types.\n\nThe inspection reports the following violations for such bean types:\n\n* Managed bean declaring a passivating scope must be `java.io.Serializable`\n* Bean of non-serializable type cannot be injected into a bean of passivating scope\n* The container must be able to proxy tha injected normal scoped bean\n\nInspection ID: CdiUnproxyableBeanTypesInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CdiUnproxyableBeanTypesInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CDI (Contexts and Dependency Injection)",
                      "index": 52,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.css",
            "version": "253.22441.33",
            "rules": [
              {
                "id": "CssInvalidFunction",
                "shortDescription": {
                  "text": "Invalid function"
                },
                "fullDescription": {
                  "text": "Reports an unknown CSS function or an incorrect function parameter. Inspection ID: CssInvalidFunction",
                  "markdown": "Reports an unknown [CSS function](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Functions) or an incorrect function parameter.\n\nInspection ID: CssInvalidFunction"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CssInvalidFunction",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 54,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssMissingComma",
                "shortDescription": {
                  "text": "Missing comma in selector list"
                },
                "fullDescription": {
                  "text": "Reports a multi-line selector. Most likely this means that several single-line selectors are actually intended but a comma is missing at the end of one or several lines. Example: 'input /* comma has probably been forgotten */\n.button {\n  margin: 1px;\n}' Inspection ID: CssMissingComma",
                  "markdown": "Reports a multi-line selector. Most likely this means that several single-line selectors are actually intended but a comma is missing at the end of one or several lines.\n\n**Example:**\n\n\n    input /* comma has probably been forgotten */\n    .button {\n      margin: 1px;\n    }\n\nInspection ID: CssMissingComma"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CssMissingComma",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Probable bugs",
                      "index": 77,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssConvertColorToRgbInspection",
                "shortDescription": {
                  "text": "Color could be replaced with rgb()"
                },
                "fullDescription": {
                  "text": "Reports an 'hsl()' or 'hwb()' color function or a hexadecimal color notation. Suggests replacing such color value with an equivalent 'rgb()' or 'rgba()' color function. Example: '#0c0fff' After the quick-fix is applied: 'rgb(12, 15, 255)'. Inspection ID: CssConvertColorToRgbInspection",
                  "markdown": "Reports an `hsl()` or `hwb()` color function or a hexadecimal color notation.\n\nSuggests replacing such color value with an equivalent `rgb()` or `rgba()` color function.\n\n**Example:**\n\n    #0c0fff\n\nAfter the quick-fix is applied:\n\n    rgb(12, 15, 255).\n\nInspection ID: CssConvertColorToRgbInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CssConvertColorToRgbInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS",
                      "index": 53,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssUnusedSymbol",
                "shortDescription": {
                  "text": "Unused selector"
                },
                "fullDescription": {
                  "text": "Reports a CSS class or an element IDs that appears in selectors but is not used in HTML. Note that complete inspection results are available only when running it via Code | Inspect Code or Code | Analyze Code | Run Inspection by Name. Due to performance reasons, style sheet files are not inspected on the fly. Inspection ID: CssUnusedSymbol",
                  "markdown": "Reports a CSS class or an element IDs that appears in selectors but is not used in HTML.\n\n\nNote that complete inspection results are available only when running it via **Code \\| Inspect Code** or\n**Code \\| Analyze Code \\| Run Inspection by Name**.\nDue to performance reasons, style sheet files are not inspected on the fly.\n\nInspection ID: CssUnusedSymbol"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CssUnusedSymbol",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS",
                      "index": 53,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssDeprecatedValue",
                "shortDescription": {
                  "text": "Deprecated value"
                },
                "fullDescription": {
                  "text": "Reports a deprecated CSS value. Suggests replacing the deprecated value with its valid equivalent. Inspection ID: CssDeprecatedValue",
                  "markdown": "Reports a deprecated CSS value. Suggests replacing the deprecated value with its valid equivalent.\n\nInspection ID: CssDeprecatedValue"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CssDeprecatedValue",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS",
                      "index": 53,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssNonIntegerLengthInPixels",
                "shortDescription": {
                  "text": "Non-integer length in pixels"
                },
                "fullDescription": {
                  "text": "Reports a non-integer length in pixels. Example: 'width: 3.14px' Inspection ID: CssNonIntegerLengthInPixels",
                  "markdown": "Reports a non-integer length in pixels.\n\n**Example:**\n\n     width: 3.14px\n\nInspection ID: CssNonIntegerLengthInPixels"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "CssNonIntegerLengthInPixels",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Probable bugs",
                      "index": 77,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssOverwrittenProperties",
                "shortDescription": {
                  "text": "Overwritten property"
                },
                "fullDescription": {
                  "text": "Reports a duplicated CSS property within a ruleset. Respects shorthand properties. Example: '.foo {\n  margin-bottom: 1px;\n  margin-bottom: 1px; /* duplicates margin-bottom */\n  margin: 0; /* overrides margin-bottom */\n}' Inspection ID: CssOverwrittenProperties",
                  "markdown": "Reports a duplicated CSS property within a ruleset. Respects shorthand properties.\n\n**Example:**\n\n\n    .foo {\n      margin-bottom: 1px;\n      margin-bottom: 1px; /* duplicates margin-bottom */\n      margin: 0; /* overrides margin-bottom */\n    }\n\nInspection ID: CssOverwrittenProperties"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CssOverwrittenProperties",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS",
                      "index": 53,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidNestedSelector",
                "shortDescription": {
                  "text": "Invalid nested selector"
                },
                "fullDescription": {
                  "text": "Reports a nested selector starting with an identifier or a functional notation. Inspection ID: CssInvalidNestedSelector",
                  "markdown": "Reports a nested selector starting with an identifier or a functional notation.\n\nInspection ID: CssInvalidNestedSelector"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CssInvalidNestedSelector",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 54,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidHtmlTagReference",
                "shortDescription": {
                  "text": "Invalid type selector"
                },
                "fullDescription": {
                  "text": "Reports a CSS type selector that matches an unknown HTML element. Inspection ID: CssInvalidHtmlTagReference",
                  "markdown": "Reports a CSS [type selector](https://developer.mozilla.org/en-US/docs/Web/CSS/Type_selectors) that matches an unknown HTML element.\n\nInspection ID: CssInvalidHtmlTagReference"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CssInvalidHtmlTagReference",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 54,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssMissingSemicolon",
                "shortDescription": {
                  "text": "Missing semicolon"
                },
                "fullDescription": {
                  "text": "Reports a missing semicolon at the end of a declaration. Inspection ID: CssMissingSemicolon",
                  "markdown": "Reports a missing semicolon at the end of a declaration.\n\nInspection ID: CssMissingSemicolon"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CssMissingSemicolon",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Code style issues",
                      "index": 160,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidCustomPropertyAtRuleName",
                "shortDescription": {
                  "text": "Invalid @property name"
                },
                "fullDescription": {
                  "text": "Reports an invalid custom property name. Custom property name should be prefixed with two dashes. Example: '@property invalid-property-name {\n  ...\n}\n\n@property --valid-property-name {\n  ...\n}' Inspection ID: CssInvalidCustomPropertyAtRuleName",
                  "markdown": "Reports an invalid custom property name. Custom property name should be prefixed with two dashes.\n\n**Example:**\n\n\n    @property invalid-property-name {\n      ...\n    }\n\n    @property --valid-property-name {\n      ...\n    }\n\nInspection ID: CssInvalidCustomPropertyAtRuleName"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CssInvalidCustomPropertyAtRuleName",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 54,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssConvertColorToHexInspection",
                "shortDescription": {
                  "text": "Color could be replaced with #-hex"
                },
                "fullDescription": {
                  "text": "Reports an 'rgb()', 'hsl()', or other color function. Suggests replacing a color function with an equivalent hexadecimal notation. Example: 'rgb(12, 15, 255)' After the quick-fix is applied: '#0c0fff'. Inspection ID: CssConvertColorToHexInspection",
                  "markdown": "Reports an `rgb()`, `hsl()`, or other color function.\n\nSuggests replacing a color function with an equivalent hexadecimal notation.\n\n**Example:**\n\n    rgb(12, 15, 255)\n\nAfter the quick-fix is applied:\n\n    #0c0fff.\n\nInspection ID: CssConvertColorToHexInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CssConvertColorToHexInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS",
                      "index": 53,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidAtRule",
                "shortDescription": {
                  "text": "Unknown at-rule"
                },
                "fullDescription": {
                  "text": "Reports an unknown CSS at-rule. Inspection ID: CssInvalidAtRule",
                  "markdown": "Reports an unknown [CSS at-rule](https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule).\n\nInspection ID: CssInvalidAtRule"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CssInvalidAtRule",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 54,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssUnknownTarget",
                "shortDescription": {
                  "text": "Unresolved file reference"
                },
                "fullDescription": {
                  "text": "Reports an unresolved file reference, for example, an incorrect path in an '@import' statement. Inspection ID: CssUnknownTarget",
                  "markdown": "Reports an unresolved file reference, for example, an incorrect path in an `@import` statement.\n\nInspection ID: CssUnknownTarget"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CssUnknownTarget",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 54,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssNegativeValue",
                "shortDescription": {
                  "text": "Negative property value"
                },
                "fullDescription": {
                  "text": "Reports a negative value of a CSS property that is not expected to be less than zero, for example, object width or height. Inspection ID: CssNegativeValue",
                  "markdown": "Reports a negative value of a CSS property that is not expected to be less than zero, for example, object width or height.\n\nInspection ID: CssNegativeValue"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CssNegativeValue",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 54,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssNoGenericFontName",
                "shortDescription": {
                  "text": "Missing generic font family name"
                },
                "fullDescription": {
                  "text": "Verifies that the 'font-family' property contains a generic font family name as a fallback alternative. Generic font family names are: 'serif', 'sans-serif', 'cursive', 'fantasy', and 'monospace'. Inspection ID: CssNoGenericFontName",
                  "markdown": "Verifies that the [font-family](https://developer.mozilla.org/en-US/docs/Web/CSS/font-family) property contains a generic font family name as a fallback alternative.\n\n\nGeneric font family names are: `serif`, `sans-serif`, `cursive`, `fantasy`,\nand `monospace`.\n\nInspection ID: CssNoGenericFontName"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CssNoGenericFontName",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Probable bugs",
                      "index": 77,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidCharsetRule",
                "shortDescription": {
                  "text": "Misplaced or incorrect @charset"
                },
                "fullDescription": {
                  "text": "Reports a misplaced '@charset' at-rule or an incorrect charset value. Inspection ID: CssInvalidCharsetRule",
                  "markdown": "Reports a misplaced `@charset` at-rule or an incorrect charset value.\n\nInspection ID: CssInvalidCharsetRule"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CssInvalidCharsetRule",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 54,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidPseudoSelector",
                "shortDescription": {
                  "text": "Invalid pseudo-selector"
                },
                "fullDescription": {
                  "text": "Reports an incorrect CSS pseudo-class pseudo-element. Inspection ID: CssInvalidPseudoSelector",
                  "markdown": "Reports an incorrect CSS [pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes) [pseudo-element](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements).\n\nInspection ID: CssInvalidPseudoSelector"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CssInvalidPseudoSelector",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 54,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidCustomPropertyAtRuleDeclaration",
                "shortDescription": {
                  "text": "Invalid @property declaration"
                },
                "fullDescription": {
                  "text": "Reports a missing required syntax, inherits, or initial-value property in a declaration of a custom property. Inspection ID: CssInvalidCustomPropertyAtRuleDeclaration",
                  "markdown": "Reports a missing required [syntax](https://developer.mozilla.org/en-US/docs/web/css/@property/syntax), [inherits](https://developer.mozilla.org/en-US/docs/web/css/@property/inherits), or [initial-value](https://developer.mozilla.org/en-US/docs/web/css/@property/initial-value) property in a declaration of a custom property.\n\nInspection ID: CssInvalidCustomPropertyAtRuleDeclaration"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CssInvalidCustomPropertyAtRuleDeclaration",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 54,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssRedundantUnit",
                "shortDescription": {
                  "text": "Redundant measure unit"
                },
                "fullDescription": {
                  "text": "Reports a measure unit of a zero value where units are not required by the specification. Example: 'width: 0px' Inspection ID: CssRedundantUnit",
                  "markdown": "Reports a measure unit of a zero value where units are not required by the specification.\n\n**Example:**\n\n    width: 0px\n\nInspection ID: CssRedundantUnit"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CssRedundantUnit",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Code style issues",
                      "index": 160,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidPropertyValue",
                "shortDescription": {
                  "text": "Invalid property value"
                },
                "fullDescription": {
                  "text": "Reports an incorrect CSS property value. Inspection ID: CssInvalidPropertyValue",
                  "markdown": "Reports an incorrect CSS property value.\n\nInspection ID: CssInvalidPropertyValue"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CssInvalidPropertyValue",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 54,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssBrowserCompatibilityForProperties",
                "shortDescription": {
                  "text": "Property is incompatible with selected browsers"
                },
                "fullDescription": {
                  "text": "Reports a CSS property that is not supported by the specified browsers. Based on the MDN Compatibility Data. Inspection ID: CssBrowserCompatibilityForProperties",
                  "markdown": "Reports a CSS property that is not supported by the specified browsers. Based on the [MDN Compatibility Data](https://github.com/mdn/browser-compat-data).\n\nInspection ID: CssBrowserCompatibilityForProperties"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CssBrowserCompatibilityForProperties",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS",
                      "index": 53,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssReplaceWithShorthandUnsafely",
                "shortDescription": {
                  "text": "Properties may probably be replaced with a shorthand"
                },
                "fullDescription": {
                  "text": "Reports a set of longhand CSS properties and suggests replacing an incomplete set of longhand CSS properties with a shorthand form, which is however not 100% equivalent in this case. For example, 2 properties: 'outline-color' and 'outline-style' may be replaced with a single 'outline'. Such replacement is not 100% equivalent because shorthands reset all omitted sub-values to their initial states. In this example, switching to the 'outline' shorthand means that 'outline-width' is also set to its initial value, which is 'medium'. This inspection doesn't handle full sets of longhand properties (when switching to shorthand is 100% safe). For such cases see the 'Properties may be safely replaced with a shorthand' inspection instead. Inspection ID: CssReplaceWithShorthandUnsafely",
                  "markdown": "Reports a set of longhand CSS properties and suggests replacing an incomplete set of longhand CSS properties with a shorthand form, which is however not 100% equivalent in this case.\n\n\nFor example, 2 properties: `outline-color` and `outline-style` may be replaced with a single `outline`.\nSuch replacement is not 100% equivalent because shorthands reset all omitted sub-values to their initial states.\nIn this example, switching to the `outline` shorthand means that `outline-width` is also set to its initial value,\nwhich is `medium`.\n\n\nThis inspection doesn't handle full sets of longhand properties (when switching to shorthand is 100% safe).\nFor such cases see the 'Properties may be safely replaced with a shorthand' inspection instead.\n\nInspection ID: CssReplaceWithShorthandUnsafely"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "CssReplaceWithShorthandUnsafely",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS",
                      "index": 53,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssUnknownUnit",
                "shortDescription": {
                  "text": "Unknown unit"
                },
                "fullDescription": {
                  "text": "Reports an unknown unit. Inspection ID: CssUnknownUnit",
                  "markdown": "Reports an unknown unit.\n\nInspection ID: CssUnknownUnit"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CssUnknownUnit",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 54,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidMediaFeature",
                "shortDescription": {
                  "text": "Invalid media feature"
                },
                "fullDescription": {
                  "text": "Reports an unknown CSS media feature or an incorrect media feature value. Inspection ID: CssInvalidMediaFeature",
                  "markdown": "Reports an unknown [CSS media feature](https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries) or an incorrect media feature value.\n\nInspection ID: CssInvalidMediaFeature"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CssInvalidMediaFeature",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 54,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidImport",
                "shortDescription": {
                  "text": "Misplaced @import"
                },
                "fullDescription": {
                  "text": "Reports a misplaced '@import' statement. According to the specification, an '@import' rule must be defined at the top of the stylesheet, before any other at-rule (except '@charset' and '@layer') and style declarations, or it will be ignored. Inspection ID: CssInvalidImport",
                  "markdown": "Reports a misplaced `@import` statement.\n\n\nAccording to the [specification](https://developer.mozilla.org/en-US/docs/Web/CSS/@import),\nan `@import` rule must be defined at the top of the stylesheet, before any other at-rule\n(except `@charset` and `@layer`) and style declarations, or it will be ignored.\n\nInspection ID: CssInvalidImport"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CssInvalidImport",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 54,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssUnresolvedCustomProperty",
                "shortDescription": {
                  "text": "Unresolved custom property"
                },
                "fullDescription": {
                  "text": "Reports an unresolved reference to a custom property among the arguments of the 'var()' function. Inspection ID: CssUnresolvedCustomProperty",
                  "markdown": "Reports an unresolved reference to a [custom property](https://developer.mozilla.org/en-US/docs/Web/CSS/--*) among the arguments of the `var()` function.\n\nInspection ID: CssUnresolvedCustomProperty"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CssUnresolvedCustomProperty",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 54,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssUnresolvedClassInComposesRule",
                "shortDescription": {
                  "text": "Unresolved class in 'composes' rule"
                },
                "fullDescription": {
                  "text": "Reports a CSS class reference in the 'composes' rule that cannot be resolved to any valid target. Example: '.className {/* ... */}\n\n  .otherClassName {\n    composes: className;\n  }' Inspection ID: CssUnresolvedClassInComposesRule",
                  "markdown": "Reports a CSS class reference in the ['composes'](https://github.com/css-modules/css-modules#composition) rule that cannot be resolved to any valid target.\n\n**Example:**\n\n\n      .className {/* ... */}\n\n      .otherClassName {\n        composes: className;\n      }\n\nInspection ID: CssUnresolvedClassInComposesRule"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CssUnresolvedClassInComposesRule",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 54,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssReplaceWithShorthandSafely",
                "shortDescription": {
                  "text": "Properties may be safely replaced with a shorthand"
                },
                "fullDescription": {
                  "text": "Reports a set of longhand properties. Suggests replacing a complete set of longhand CSS properties with an equivalent shorthand form. For example, 4 properties: 'padding-top', 'padding-right', 'padding-bottom', and 'padding-left' can be safely replaced with a single 'padding' property. Note that this inspection doesn't show up if the set of longhand properties is incomplete (e.g. only 3 'padding-xxx' properties in a ruleset) because switching to a shorthand may change the result. For such cases consider the 'Properties may probably be replaced with a shorthand' inspection. Inspection ID: CssReplaceWithShorthandSafely",
                  "markdown": "Reports a set of longhand properties. Suggests replacing a complete set of longhand CSS properties with an equivalent shorthand form.\n\n\nFor example, 4 properties: `padding-top`, `padding-right`, `padding-bottom`, and\n`padding-left`\ncan be safely replaced with a single `padding` property.\n\n\nNote that this inspection doesn't show up if the set of longhand properties is incomplete\n(e.g. only 3 `padding-xxx` properties in a ruleset)\nbecause switching to a shorthand may change the result.\nFor such cases consider the 'Properties may probably be replaced with a shorthand'\ninspection.\n\nInspection ID: CssReplaceWithShorthandSafely"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "CssReplaceWithShorthandSafely",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS",
                      "index": 53,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssUnknownProperty",
                "shortDescription": {
                  "text": "Unknown property"
                },
                "fullDescription": {
                  "text": "Reports an unknown CSS property or a property used in a wrong context. Add the unknown property to the 'Custom CSS properties' list to skip validation. Inspection ID: CssUnknownProperty",
                  "markdown": "Reports an unknown CSS property or a property used in a wrong context.\n\nAdd the unknown property to the 'Custom CSS properties' list to skip validation.\n\nInspection ID: CssUnknownProperty"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CssUnknownProperty",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 54,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.hibernate",
            "version": "253.22441.33",
            "rules": [
              {
                "id": "CriteriaApiResolveInspection",
                "shortDescription": {
                  "text": "Hibernate Criteria API unrecognized property"
                },
                "fullDescription": {
                  "text": "Reports unrecognized properties in Hibernate Criteria API usages Inspection ID: CriteriaApiResolveInspection",
                  "markdown": "Reports unrecognized properties in Hibernate Criteria API usages\n\nInspection ID: CriteriaApiResolveInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CriteriaApiResolveInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Hibernate",
                      "index": 61,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HibernateMappingDomInspection",
                "shortDescription": {
                  "text": "Invalid Hibernate XML mappings"
                },
                "fullDescription": {
                  "text": "Reports Hibernate XML configuration mapping errors including: References to non-instantiable classes References to classes that do not extend the required class References to classes with inappropriate scope Empty tag and attribute values Tag and attribute values that do not match the required pattern (for example, Java Identifiers) Tags that do not include the required children tags or attributes Tags that define objects with duplicate names Inspection ID: HibernateMappingDomInspection",
                  "markdown": "Reports Hibernate XML configuration mapping errors including:\n\n* References to non-instantiable classes\n* References to classes that do not extend the required class\n* References to classes with inappropriate scope\n* Empty tag and attribute values\n* Tag and attribute values that do not match the required pattern (for example, Java Identifiers)\n* Tags that do not include the required children tags or attributes\n* Tags that define objects with duplicate names\n\nInspection ID: HibernateMappingDomInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "HibernateMappingDomInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Hibernate",
                      "index": 61,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HibernateMappingDatasourceDomInspection",
                "shortDescription": {
                  "text": "Invalid Hibernate DB-related XML mappings"
                },
                "fullDescription": {
                  "text": "Reports Hibernate XML configuration DB-related mapping errors including: References to unrecognized catalogs/schemas/tables References to unrecognized columns Inspection ID: HibernateMappingDatasourceDomInspection",
                  "markdown": "Reports Hibernate XML configuration DB-related mapping errors including:\n\n* References to unrecognized catalogs/schemas/tables\n* References to unrecognized columns\n\nInspection ID: HibernateMappingDatasourceDomInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "HibernateMappingDatasourceDomInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Hibernate",
                      "index": 61,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HibernateConfigDomInspection",
                "shortDescription": {
                  "text": "Invalid Hibernate XML configuration"
                },
                "fullDescription": {
                  "text": "Reports Hibernate XML configuration errors including: References to non-instantiable classes References to classes that do not extend the required class References to classes with inappropriate scope Empty tag and attribute values Tag and attribute values that do not match the required pattern (for example, Java Identifiers) Tags that do not include the required children tags or attributes Tags that define objects with duplicate names Inspection ID: HibernateConfigDomInspection",
                  "markdown": "Reports Hibernate XML configuration errors including:\n\n* References to non-instantiable classes\n* References to classes that do not extend the required class\n* References to classes with inappropriate scope\n* Empty tag and attribute values\n* Tag and attribute values that do not match the required pattern (for example, Java Identifiers)\n* Tags that do not include the required children tags or attributes\n* Tags that define objects with duplicate names\n\nInspection ID: HibernateConfigDomInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "HibernateConfigDomInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Hibernate",
                      "index": 61,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HibernateFindAnnotationInspection",
                "shortDescription": {
                  "text": "Incorrect use of @Find annotation"
                },
                "fullDescription": {
                  "text": "Reports Hibernate @Find annotation errors The return type of an annotated method must be an entity type E, or one of the following types: java.util.List<E> org.hibernate.query.Query<E> org.hibernate.query.SelectionQuery<E> jakarta.persistence.Query<E> jakarta.persistence.TypedQuery<E> The names and types of the parameters of a finder method must match exactly with the names and types of persistent fields of the entity type returned by the finder method. Inspection ID: HibernateFindAnnotationInspection",
                  "markdown": "Reports Hibernate @Find annotation errors\n\n* The return type of an annotated method must be an entity type **E** , or one of the following types:\n  * java.util.List\\<E\\>\n  * org.hibernate.query.Query\\<E\\>\n  * org.hibernate.query.SelectionQuery\\<E\\>\n  * jakarta.persistence.Query\\<E\\>\n  * jakarta.persistence.TypedQuery\\<E\\>\n* The names and types of the parameters of a finder method must match exactly with the names and types of persistent fields of the entity type returned by the finder method.\n\nInspection ID: HibernateFindAnnotationInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "HibernateFindAnnotationInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Hibernate",
                      "index": 61,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HibernateConfigDomFacetInspection",
                "shortDescription": {
                  "text": "Hibernate configuration XML is not added to facet"
                },
                "fullDescription": {
                  "text": "Reports missing Hibernate XML configuration files. The quick-fix creates a facet if necessary and adds a configuration file to it. Inspection ID: HibernateConfigDomFacetInspection",
                  "markdown": "Reports missing Hibernate XML configuration files.\n\nThe quick-fix creates a facet if necessary and adds a configuration file to it.\n\nInspection ID: HibernateConfigDomFacetInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HibernateConfigDomFacetInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Hibernate",
                      "index": 61,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.spring.integration",
            "version": "253.22441.33",
            "rules": [
              {
                "id": "UnresolvedMessageChannel",
                "shortDescription": {
                  "text": "Incorrect 'channel' attribute in an endpoint method annotation"
                },
                "fullDescription": {
                  "text": "Reports incorrect channel attributes in endpoint method annotations: @Gateway, @ServiceActivator, @Filter, and so on. Example: '@Component\n  public class MyComponent {}\n     @Gateway(requestChannel = \"requestChannel\", replyChannel = \"replyChannel\")\n     public void gateway() {...}\n\n     @Gateway(\n        requestChannel =\"simpleBean\",   // Bean must be one of these types: org.springframework.integration.MessageChannel,org.springframework.messaging.MessageChannel\n        replyChannel = \"unknownChannel\")   // Cannot find channel\n     public void errors() {...}\n\n     @Bean\n     public MyBean simpleBean() {...}\n  }' Inspection ID: UnresolvedMessageChannel",
                  "markdown": "Reports incorrect channel attributes in endpoint method annotations:\n[@Gateway](https://docs.spring.io/spring-integration/api/org/springframework/integration/annotation/Gateway.html),\n[@ServiceActivator,](https://docs.spring.io/spring-integration/api/org/springframework/integration/annotation/ServiceActivator.html)\n[@Filter](https://docs.spring.io/spring-integration/api/org/springframework/integration/annotation/Filter.html), and so on.\n\n**Example:**\n\n\n      @Component\n      public class MyComponent {}\n         @Gateway(requestChannel = \"requestChannel\", replyChannel = \"replyChannel\")\n         public void gateway() {...}\n\n         @Gateway(\n            requestChannel =\"simpleBean\",   // Bean must be one of these types: org.springframework.integration.MessageChannel,org.springframework.messaging.MessageChannel\n            replyChannel = \"unknownChannel\")   // Cannot find channel\n         public void errors() {...}\n\n         @Bean\n         public MyBean simpleBean() {...}\n      }\n\nInspection ID: UnresolvedMessageChannel"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnresolvedMessageChannel",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Integration",
                      "index": 62,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringIntegrationMethodEndpointInconsistency",
                "shortDescription": {
                  "text": "Incorrect Spring Integration endpoint method"
                },
                "fullDescription": {
                  "text": "Reports incorrect Spring Integration endpoint method declarations. Example: 'class MyEndpoints {\n  @InboundChannelAdapter(\"channel\")\n  public void cannotBeVoid() {...} // A method annotated with @InboundChannelAdapter must have a return type\n\n  @InboundChannelAdapter(\"channel\")\n  public String cannotHaveParams(String s) {..} // A method annotated with @InboundChannelAdapter can't have arguments\n\n  @Filter(inputChannel = \"channel\", // Endpoint can have only one poller\n    outputChannel = \"channel2\",\n    poller = {@Poller(fixedDelay = \"100\"), @Poller(fixedRate = \"100\")})\n  public void testMultiplePollers() {\n  }\n\n  @Filter(inputChannel = \"channel\",\n  outputChannel = \"channel2\",\n  poller = @Poller(value = \"poller\", maxMessagesPerPoll = \"100\"))\n  public void testValue() {\n  }\n\n  @Filter(inputChannel = \"channel\",\n    outputChannel = \"channel2\",\n    poller = @Poller(trigger = \"trigger\", cron = \"0 */10 * * * *\")) // 'trigger' attribute is mutually exclusive with other attributes\n  public void testTrigger() {\n  }\n}' Inspection ID: SpringIntegrationMethodEndpointInconsistency",
                  "markdown": "Reports incorrect [Spring Integration](https://spring.io/projects/spring-integration) endpoint method declarations.\n\n**Example:**\n\n\n    class MyEndpoints {\n      @InboundChannelAdapter(\"channel\")\n      public void cannotBeVoid() {...} // A method annotated with @InboundChannelAdapter must have a return type\n\n      @InboundChannelAdapter(\"channel\")\n      public String cannotHaveParams(String s) {..} // A method annotated with @InboundChannelAdapter can't have arguments\n\n      @Filter(inputChannel = \"channel\", // Endpoint can have only one poller\n        outputChannel = \"channel2\",\n        poller = {@Poller(fixedDelay = \"100\"), @Poller(fixedRate = \"100\")})\n      public void testMultiplePollers() {\n      }\n\n      @Filter(inputChannel = \"channel\",\n      outputChannel = \"channel2\",\n      poller = @Poller(value = \"poller\", maxMessagesPerPoll = \"100\"))\n      public void testValue() {\n      }\n\n      @Filter(inputChannel = \"channel\",\n        outputChannel = \"channel2\",\n        poller = @Poller(trigger = \"trigger\", cron = \"0 */10 * * * *\")) // 'trigger' attribute is mutually exclusive with other attributes\n      public void testTrigger() {\n      }\n    }\n\nInspection ID: SpringIntegrationMethodEndpointInconsistency"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SpringIntegrationMethodEndpointInconsistency",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Integration",
                      "index": 62,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringIntegrationDeprecations21",
                "shortDescription": {
                  "text": "Spring Integration 2.1 deprecations"
                },
                "fullDescription": {
                  "text": "Reports XML elements deprecated in the current version of the Spring Integration XML-based application context. For more information, see Migration Guide. Example: '<beans ... >\n   <int:channel id=\"failChannel\"\n                dispatcher=\"failover\"/> <!-- this attribute is deprecated, use dispatcher sub-element instead -->\n   <int:poller default=\"true\">\n     <int:cron-trigger  expression=\"5\"/>  <!-- This element is removed in Spring Integration 2.1, use 'cron' attribute instead -->\n     <int:interval-trigger interval=\"3\"/> <!--  This element is removed in Spring Integration 2.1, use interval trigger attributes instead -->\n  </int:poller>\n  <ftp:inbound-channel-adapter session-factory=\"ftpSessionFactory\"\n                               cache-sessions=\"false\" <!--  This attribute is deprecated, use CachingSessionFactory instead -->\n                               channel=\"channel\"/>\n</beans>' Inspection ID: SpringIntegrationDeprecations21",
                  "markdown": "Reports XML elements deprecated in the current version of the [Spring Integration](https://spring.io/projects/spring-integration) XML-based application context.\n\nFor more information, see [Migration Guide](https://github.com/SpringSource/spring-integration/wiki/Spring-Integration-2.0-to-2.1-Migration-Guide).\n\n**Example:**\n\n\n    <beans ... >\n       <int:channel id=\"failChannel\"\n                    dispatcher=\"failover\"/> <!-- this attribute is deprecated, use dispatcher sub-element instead -->\n       <int:poller default=\"true\">\n         <int:cron-trigger  expression=\"5\"/>  <!-- This element is removed in Spring Integration 2.1, use 'cron' attribute instead -->\n         <int:interval-trigger interval=\"3\"/> <!--  This element is removed in Spring Integration 2.1, use interval trigger attributes instead -->\n      </int:poller>\n      <ftp:inbound-channel-adapter session-factory=\"ftpSessionFactory\"\n                                   cache-sessions=\"false\" <!--  This attribute is deprecated, use CachingSessionFactory instead -->\n                                   channel=\"channel\"/>\n    </beans>\n\nInspection ID: SpringIntegrationDeprecations21"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SpringIntegrationDeprecations21",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Integration",
                      "index": 62,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringIntegrationModel",
                "shortDescription": {
                  "text": "Incorrect Spring Integration XML-based application context"
                },
                "fullDescription": {
                  "text": "Reports issues with the Spring Integration XML-based application context: Unresolved bean references Missing required tags or attributes Incorrect property types Inconsistent 'enum' properties Incorrect types of referenced beans Example: '<beans ... >\n  <int:channel id=\"channel\"> <!-- 'dispatcher' and 'queue' can't be used together  -->\n    <int:dispatcher failover=\"true\"/>\n    <int:priority-queue capacity=\"4\"/>\n  </int:channel>\n  \n  <int:channel id=\"another\" >\n    <int:queue <!--Exactly one of 'message-store' or 'ref' is required  -->\n              capacity=\"4\" message-store=\"myMessageStore\" ref=\"myQueue\"/>\n  </int:channel>\n  \n   <int:gateway id=\"asyncGatewayError\"\n                async-executor=\"dummyBean\"/> <!--Bean must be of 'java.util.concurrent.Executor' type  -->\n\n   <int:delayer default-delay=\"3\"\n              message-store=\"myMessageStore\"\n              scheduler=\"scheduler\"\n              wait-for-tasks-to-complete-on-shutdown=\"false\"/>\n  <!--Bean must be of 'java.util.concurrent.Executor' type  -->\n  <int:delayer\n    default-delay=\"INVALID_VALUE\"  <!--Cannot convert string 'INVALID_VALUE' to target class 'java.lang.Integer' -->\n               message-store=\"dummyBean\" <!-- Bean must be of 'org.springframework.integration.store.MessageStore' type-->\n               scheduler=\"dummyBean\" <!-- Bean must be one of these types: java.util.concurrent.ScheduledExecutorService,org.springframework.scheduling.TaskScheduler-->\n               wait-for-tasks-to-complete-on-shutdown=\"INVALID_VALUE\"/> <!-- Cannot resolve symbol 'INVALID_VALUE' -->\n\n  <bean id=\"dummyBean\" class=\"java.lang.String\"/>\n  <bean id=\"myMessageStore\" class=\"org.springframework.integration.store.SimpleMessageStore\"/>\n  <task:scheduler id=\"scheduler\"/>\n</beans>' Inspection ID: SpringIntegrationModel",
                  "markdown": "Reports issues with the [Spring Integration](https://spring.io/projects/spring-integration) XML-based application context:\n\n* Unresolved bean references\n* Missing required tags or attributes\n* Incorrect property types\n* Inconsistent `enum` properties\n* Incorrect types of referenced beans\n\n**Example:**\n\n\n      <beans ... >\n      <int:channel id=\"channel\"> <!-- 'dispatcher' and 'queue' can't be used together  -->\n        <int:dispatcher failover=\"true\"/>\n        <int:priority-queue capacity=\"4\"/>\n      </int:channel>\n      \n      <int:channel id=\"another\" >\n        <int:queue <!--Exactly one of 'message-store' or 'ref' is required  -->\n                  capacity=\"4\" message-store=\"myMessageStore\" ref=\"myQueue\"/>\n      </int:channel>\n      \n       <int:gateway id=\"asyncGatewayError\"\n                    async-executor=\"dummyBean\"/> <!--Bean must be of 'java.util.concurrent.Executor' type  -->\n\n       <int:delayer default-delay=\"3\"\n                  message-store=\"myMessageStore\"\n                  scheduler=\"scheduler\"\n                  wait-for-tasks-to-complete-on-shutdown=\"false\"/>\n      <!--Bean must be of 'java.util.concurrent.Executor' type  -->\n      <int:delayer\n        default-delay=\"INVALID_VALUE\"  <!--Cannot convert string 'INVALID_VALUE' to target class 'java.lang.Integer' -->\n                   message-store=\"dummyBean\" <!-- Bean must be of 'org.springframework.integration.store.MessageStore' type-->\n                   scheduler=\"dummyBean\" <!-- Bean must be one of these types: java.util.concurrent.ScheduledExecutorService,org.springframework.scheduling.TaskScheduler-->\n                   wait-for-tasks-to-complete-on-shutdown=\"INVALID_VALUE\"/> <!-- Cannot resolve symbol 'INVALID_VALUE' -->\n\n      <bean id=\"dummyBean\" class=\"java.lang.String\"/>\n      <bean id=\"myMessageStore\" class=\"org.springframework.integration.store.SimpleMessageStore\"/>\n      <task:scheduler id=\"scheduler\"/>\n    </beans>\n\nInspection ID: SpringIntegrationModel"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "SpringIntegrationModel",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Integration",
                      "index": 62,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.jpa.jpb.model",
            "version": "253.22441.33",
            "rules": [
              {
                "id": "AssociationFieldHasColumnAnnotation",
                "shortDescription": {
                  "text": "Association field marked with @Colum"
                },
                "fullDescription": {
                  "text": "Detects incorrect use of '@Column' annotation for association attributes with '@OneToOne' and '@ManyToOne' annotations. Inspection ID: AssociationFieldHasColumnAnnotation",
                  "markdown": "Detects incorrect use of\n\n    @Column\n\nannotation for association attributes with\n\n    @OneToOne\n\nand\n\n    @ManyToOne\n\nannotations.\n\nInspection ID: AssociationFieldHasColumnAnnotation"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AssociationFieldHasColumnAnnotation",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JPA",
                      "index": 26,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MoreThanOneIdInspection",
                "shortDescription": {
                  "text": "Entity has more than one id attribute."
                },
                "fullDescription": {
                  "text": "Checks for multiple id attributes in one entity. Inspection ID: MoreThanOneIdInspection",
                  "markdown": "Checks for multiple id attributes in one entity.\n\nInspection ID: MoreThanOneIdInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MoreThanOneIdInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JPA",
                      "index": 26,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConverterNotAnnotatedInspection",
                "shortDescription": {
                  "text": "JPA converter must be annotated with @Converter annotation"
                },
                "fullDescription": {
                  "text": "Checks for the presence of '@Converter' annotation on JPA converter. Inspection ID: ConverterNotAnnotatedInspection",
                  "markdown": "Checks for the presence of\n\n    @Converter\n\nannotation on JPA converter.\n\nInspection ID: ConverterNotAnnotatedInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ConverterNotAnnotatedInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JPA",
                      "index": 26,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AssociationNotMarkedInspection",
                "shortDescription": {
                  "text": "Entity attribute is not marked with association annotation"
                },
                "fullDescription": {
                  "text": "Checks for associations that are not marked with corresponding annotations. Inspection ID: AssociationNotMarkedInspection",
                  "markdown": "Checks for associations that are not marked with corresponding annotations.\n\nInspection ID: AssociationNotMarkedInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AssociationNotMarkedInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JPA",
                      "index": 26,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LombokBuilderInspection",
                "shortDescription": {
                  "text": "Using @Builder for JPA entities without defined no-argument constructor breaks JPA specification."
                },
                "fullDescription": {
                  "text": "Checks that '@lombok.Builder' used in JPA entities. Inspection ID: LombokBuilderInspection",
                  "markdown": "Checks that\n\n    @lombok.Builder\n\nused in JPA entities.\n\nInspection ID: LombokBuilderInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "LombokBuilderInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JPA",
                      "index": 26,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OneToOneWithLazy",
                "shortDescription": {
                  "text": "Specifying FetchType.LAZY for the non-owning side of the @OneToOne association will not affect the loading. The related entity will still be loaded as if the FetchType.EAGER is defined."
                },
                "fullDescription": {
                  "text": "Checks for the non-owning side of the '@OneToOne' associations with the 'FetchType.Lazy' attribute. Specifying 'FetchType.LAZY' for the non-owning side of the '@OneToOne' association will not affect the loading. The related entity will still be loaded as if the 'FetchType.EAGER' is defined. For more info see the documentation. Inspection ID: OneToOneWithLazy",
                  "markdown": "Checks for the non-owning side of the\n\n    @OneToOne\n\nassociations with the\n\n    FetchType.Lazy\n\nattribute. Specifying\n\n    FetchType.LAZY\n\nfor the non-owning side of the\n\n    @OneToOne\n\nassociation will not affect the loading. The related entity will still be loaded as if the\n\n    FetchType.EAGER\n\nis defined. For more info see [the\ndocumentation](https://docs.jboss.org/hibernate/orm/6.1/userguide/html_single/Hibernate_User_Guide.html#associations-one-to-one-bidirectional-lazy).\n\nInspection ID: OneToOneWithLazy"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "OneToOneWithLazy",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JPA",
                      "index": 26,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LombokAllArgsInspection",
                "shortDescription": {
                  "text": "Using @AllArgsConstructor for JPA entities without defined no-argument constructor breaks JPA specification."
                },
                "fullDescription": {
                  "text": "Checks that '@lombok.AllArgsConstructor' used in JPA entities. Inspection ID: LombokAllArgsInspection",
                  "markdown": "Checks that\n\n    @lombok.AllArgsConstructor\n\nused in JPA entities.\n\nInspection ID: LombokAllArgsInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "LombokAllArgsInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JPA",
                      "index": 26,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LombokBuilderAllArgsInspection",
                "shortDescription": {
                  "text": "Lombok @Builder needs a proper constructor for this class"
                },
                "fullDescription": {
                  "text": "Checks that all-args constructor exists for '@lombok.Builder' in JPA entities. Inspection ID: LombokBuilderAllArgsInspection",
                  "markdown": "Checks that all-args constructor exists for\n\n    @lombok.Builder\n\nin JPA entities.\n\nInspection ID: LombokBuilderAllArgsInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "LombokBuilderAllArgsInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JPA",
                      "index": 26,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ManyToManyCascadeRemove",
                "shortDescription": {
                  "text": "For @ManyToMany associations, the REMOVE entity state transition doesn't make sense to be cascaded because it will propagate beyond the link table."
                },
                "fullDescription": {
                  "text": "Checks for '@ManyToMany' associations with the 'CascadeType.REMOVE' attribute. Specifying 'CascadeType.REMOVE' for '@ManyToMany' doesn’t make sense to be cascaded because it will propagate beyond the link table. Since the other side might be referenced by other entities on the parent-side, the automatic removal might end up in a 'ConstraintViolationException' . For example, if '@ManyToMany(cascade = CascadeType.ALL)' was defined, and the first person would be deleted, Hibernate would throw an exception because another person is still associated with the address that’s being deleted. For more info see the article. Inspection ID: ManyToManyCascadeRemove",
                  "markdown": "Checks for\n\n    @ManyToMany\n\nassociations with the\n\n    CascadeType.REMOVE\n\nattribute. Specifying\n\n    CascadeType.REMOVE\n\nfor\n\n    @ManyToMany\n\ndoesn't make sense to be cascaded because it will propagate beyond the link table. Since the other side might be referenced by other entities on the parent-side, the automatic removal might end up in a\n\n    ConstraintViolationException\n\n. For example, if\n\n    @ManyToMany(cascade = CascadeType.ALL)\n\nwas defined, and the first person would be deleted, Hibernate would throw an exception because another person is still associated with the address that's being deleted. For more info see [the article](https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#ManyToManyCascadeRemoveEvent).\n\nInspection ID: ManyToManyCascadeRemove"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ManyToManyCascadeRemove",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JPA",
                      "index": 26,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.properties",
            "version": "253.22441.34",
            "rules": [
              {
                "id": "UseEllipsisInPropertyInspection",
                "shortDescription": {
                  "text": "Three dot characters instead of the ellipsis"
                },
                "fullDescription": {
                  "text": "Reports three \"dot\" characters which are used instead of the ellipsis character for UTF-8 properties files. Inspection ID: UseEllipsisInPropertyInspection",
                  "markdown": "Reports three \"dot\" characters which are used instead of the ellipsis character for UTF-8 properties files.\n\nInspection ID: UseEllipsisInPropertyInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UseEllipsisInPropertyInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Properties files",
                      "index": 32,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AlphaUnsortedPropertiesFile",
                "shortDescription": {
                  "text": "Properties file or resource bundle is alphabetically unsorted"
                },
                "fullDescription": {
                  "text": "Reports alphabetically unsorted resource bundles or .properties files. Inspection ID: AlphaUnsortedPropertiesFile",
                  "markdown": "Reports alphabetically unsorted resource bundles or .properties files.\n\nInspection ID: AlphaUnsortedPropertiesFile"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "AlphaUnsortedPropertiesFile",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Properties files",
                      "index": 32,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TrailingSpacesInProperty",
                "shortDescription": {
                  "text": "Trailing spaces in property"
                },
                "fullDescription": {
                  "text": "Reports properties whose keys or values end with a whitespace. Inspection ID: TrailingSpacesInProperty",
                  "markdown": "Reports properties whose keys or values end with a whitespace.\n\nInspection ID: TrailingSpacesInProperty"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "TrailingSpacesInProperty",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Properties files",
                      "index": 32,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "WrongPropertyKeyValueDelimiter",
                "shortDescription": {
                  "text": "Property key/value delimiter doesn't match code style settings"
                },
                "fullDescription": {
                  "text": "Reports properties in which key or value delimiters do not match code style settings. Inspection ID: WrongPropertyKeyValueDelimiter",
                  "markdown": "Reports properties in which key or value delimiters do not match code style settings.\n\nInspection ID: WrongPropertyKeyValueDelimiter"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "WrongPropertyKeyValueDelimiter",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Properties files",
                      "index": 32,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DuplicatePropertyInspection",
                "shortDescription": {
                  "text": "Duplicate property"
                },
                "fullDescription": {
                  "text": "Reports duplicate property keys with different values, duplicate keys, or duplicate property values. Example: 'property1=value;\nproperty2=value;' The Options list allows selecting the area in which the inspection should search for duplicates. Inspection ID: DuplicatePropertyInspection",
                  "markdown": "Reports duplicate property keys with different values, duplicate keys, or duplicate property values.\n\nExample:\n\n\n    property1=value;\n    property2=value;\n\nThe **Options** list allows selecting the area in which the inspection should search for duplicates.\n\nInspection ID: DuplicatePropertyInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "DuplicatePropertyInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Properties files",
                      "index": 32,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedProperty",
                "shortDescription": {
                  "text": "Unused property"
                },
                "fullDescription": {
                  "text": "Reports properties that are not referenced outside of the .properties file they are contained in. Inspection ID: UnusedProperty",
                  "markdown": "Reports properties that are not referenced outside of the .properties file they are contained in.\n\nInspection ID: UnusedProperty"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnusedProperty",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Properties files",
                      "index": 32,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.javaee",
            "version": "253.22441.34",
            "rules": [
              {
                "id": "JavaeeApplicationDomInspection",
                "shortDescription": {
                  "text": "Java EE application descriptor correctness"
                },
                "fullDescription": {
                  "text": "Reports the following problems inside `application.xml` configuration files: References to non-instantiable classes References to classes that do not extend required class References to classes with inappropriate scope Tag and attribute values that do not match required pattern (for example, Java Identifiers) Tags that do not include required children tags or attributes Tags that define objects with duplicate names Example: '<application>\n    <module id=\"ExampleWebModule\">\n      <web> // Error: 'web-uri' child tag should be defined\n        <context-root>ExampleWebApp</context-root>\n      </web>\n    </module>\n</application>' Inspection ID: JavaeeApplicationDomInspection",
                  "markdown": "Reports the following problems inside \\`application.xml\\` configuration files:\n\n* References to non-instantiable classes\n* References to classes that do not extend required class\n* References to classes with inappropriate scope\n* Tag and attribute values that do not match required pattern (for example, Java Identifiers)\n* Tags that do not include required children tags or attributes\n* Tags that define objects with duplicate names\n\n**Example:**\n\n\n    <application>\n        <module id=\"ExampleWebModule\">\n          <web> // Error: 'web-uri' child tag should be defined\n            <context-root>ExampleWebApp</context-root>\n          </web>\n        </module>\n    </application>\n\nInspection ID: JavaeeApplicationDomInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "JavaeeApplicationDomInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java EE",
                      "index": 68,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SecurityRoles",
                "shortDescription": {
                  "text": "Security role name correctness"
                },
                "fullDescription": {
                  "text": "Reports invalid security role names. Example: '<web-app>\n    <security-role>\n      <role-name>custom#role</role-name> // Error: invalid name\n    </security-role>\n    <security-role>\n      <role-name>customRole</role-name> // Good name\n    </security-role>\n  </web-app>' Inspection ID: SecurityRoles",
                  "markdown": "Reports invalid security role names.\n\n**Example:**\n\n\n      <web-app>\n        <security-role>\n          <role-name>custom#role</role-name> // Error: invalid name\n        </security-role>\n        <security-role>\n          <role-name>customRole</role-name> // Good name\n        </security-role>\n      </web-app>\n\nInspection ID: SecurityRoles"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "SecurityRoles",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Security"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java EE",
                      "index": 68,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "TestNG-J",
            "version": "253.22441.33",
            "rules": [
              {
                "id": "ConvertJavadoc",
                "shortDescription": {
                  "text": "TestNG Javadoc can be converted to annotations"
                },
                "fullDescription": {
                  "text": "Asserts your TestNG tests with Javadoc annotations and converts them to JDK annotations. Example: '/**\n    * @testng.before-test\n  */\n  public void sample() {}' After the quick-fix is applied: '@BeforeTest\n  public void sample() {}' Inspection ID: ConvertJavadoc",
                  "markdown": "Asserts your TestNG tests with Javadoc annotations and converts them to JDK annotations.\n\nExample:\n\n\n      /**\n        * @testng.before-test\n      */\n      public void sample() {}\n\nAfter the quick-fix is applied:\n\n\n      @BeforeTest\n      public void sample() {}\n\n\nInspection ID: ConvertJavadoc"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ConvertJavadoc",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/TestNG",
                      "index": 70,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DataProviderReturnType",
                "shortDescription": {
                  "text": "Invalid data provider return type"
                },
                "fullDescription": {
                  "text": "Reports methods marked with '@DataProvider' annotation that doesn't return 'Object[][]' or 'Iterator<Object>'. If another type is returned, TestNG throws an exception. Example: 'public class TestNgTest {\n  @DataProvider(name = \"Languages\")\n  List<String> getData() {\n    return List.of(\"Java\", \"Kotlin\");\n  }\n\n  @Test(dataProvider = \"Languages\")\n  public void testData(String language) {\n    System.out.println(language);\n  }\n}' Inspection ID: DataProviderReturnType",
                  "markdown": "Reports methods marked with `@DataProvider` annotation that doesn't return `Object[][]` or `Iterator<Object>`. If another type is returned, TestNG throws an exception.\n\nExample:\n\n\n    public class TestNgTest {\n      @DataProvider(name = \"Languages\")\n      List<String> getData() {\n        return List.of(\"Java\", \"Kotlin\");\n      }\n\n      @Test(dataProvider = \"Languages\")\n      public void testData(String language) {\n        System.out.println(language);\n      }\n    }\n\nInspection ID: DataProviderReturnType"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "DataProviderReturnType",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/TestNG",
                      "index": 70,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "dependsOnMethodTestNG",
                "shortDescription": {
                  "text": "Illegal method name passed to 'dependsOnMethods'"
                },
                "fullDescription": {
                  "text": "Reports illegal method names passed to the 'dependsOnMethods' attribute in the '@Test' annotation. A method name is considered illegal if it can't be resolved into a valid, accessible '@Test' annotated method in the current class or any of its parent classes. Example: 'public class SampleTest {\n    @Test(dependsOnMethods = \"testSpellignError\")\n    public void testSample() {}\n    @Test\n    public void testSpellingError(){}\n  }' Inspection ID: dependsOnMethodTestNG",
                  "markdown": "Reports illegal method names passed to the `dependsOnMethods` attribute in the `@Test` annotation.\n\nA method name is considered illegal if it can't be resolved into a valid, accessible `@Test` annotated method in the current class\nor any of its parent classes.\n\nExample:\n\n\n      public class SampleTest {\n        @Test(dependsOnMethods = \"testSpellignError\")\n        public void testSample() {}\n        @Test\n        public void testSpellingError(){}\n      }\n\nInspection ID: dependsOnMethodTestNG"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "dependsOnMethodTestNG",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/TestNG",
                      "index": 70,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MalformedDataProvider",
                "shortDescription": {
                  "text": "Data provider problems"
                },
                "fullDescription": {
                  "text": "Reports references to data provider methods that do not exist or are not accessible. Example: 'public class InstanceDataProviderFromForeignClass {\n  // method data() doesn't exist in class A\n  @Test(dataProvider = \"data\", dataProviderClass = A.class)\n  public void test() {\n  }\n}\nclass A { }' After the quick-fix is applied: '//the needed data() method is created in class A\nclass A {\n  @DataProvider\n  public Object[][] data() {\n    return new Object[][]{};\n  }\n}' Inspection ID: MalformedDataProvider",
                  "markdown": "Reports references to data provider methods that do not exist or are not accessible.\n\nExample:\n\n\n    public class InstanceDataProviderFromForeignClass {\n      // method data() doesn't exist in class A\n      @Test(dataProvider = \"data\", dataProviderClass = A.class)\n      public void test() {\n      }\n    }\n    class A { }\n\nAfter the quick-fix is applied:\n\n\n    //the needed data() method is created in class A\n    class A {\n      @DataProvider\n      public Object[][] data() {\n        return new Object[][]{};\n      }\n    }\n\nInspection ID: MalformedDataProvider"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MalformedDataProvider",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/TestNG",
                      "index": 70,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "groupsTestNG",
                "shortDescription": {
                  "text": "Undefined group name"
                },
                "fullDescription": {
                  "text": "Reports undefined group names passed to the 'dependsOnGroups' or 'groups' attributes in the '@Test' annotation. The quick-fix adds an undefined name to a list of known groups. Use the Defined Groups field to define a comma-separated list of known groups. Inspection ID: groupsTestNG",
                  "markdown": "Reports undefined group names passed to the `dependsOnGroups` or `groups` attributes in the `@Test` annotation.\n\nThe quick-fix adds an undefined name to a list of known groups.\n\nUse the **Defined Groups** field to define a comma-separated list of known groups.\n\nInspection ID: groupsTestNG"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "groupsTestNG",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/TestNG",
                      "index": 70,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JUnitTestNG",
                "shortDescription": {
                  "text": "JUnit Test can be converted to TestNG"
                },
                "fullDescription": {
                  "text": "Reports any JUnit-based test class that can be converted into TestNG based unit test. Example: 'import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class ExampleTest {\n  @Test\n  public void testExample(){\n    assertEquals(2 + 2, 4);\n  }\n}' After the quick-fix is applied: 'import org.testng.Assert;\nimport org.testng.annotations.Test;\n\npublic class ExampleTest {\n  @Test\n  public void testExample(){\n    Assert.assertEquals(4, 2 + 2);\n  }\n}' Inspection ID: JUnitTestNG",
                  "markdown": "Reports any JUnit-based test class that can be converted into TestNG based unit test.\n\nExample:\n\n\n    import org.junit.Test;\n    import static org.junit.Assert.*;\n\n    public class ExampleTest {\n      @Test\n      public void testExample(){\n        assertEquals(2 + 2, 4);\n      }\n    }\n\nAfter the quick-fix is applied:\n\n\n    import org.testng.Assert;\n    import org.testng.annotations.Test;\n\n    public class ExampleTest {\n      @Test\n      public void testExample(){\n        Assert.assertEquals(4, 2 + 2);\n      }\n    }\n\nInspection ID: JUnitTestNG"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JUnitTestNG",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/TestNG",
                      "index": 70,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ExpectedExceptionNeverThrownTestNG",
                "shortDescription": {
                  "text": "Expected exception never thrown in test method body"
                },
                "fullDescription": {
                  "text": "Reports checked exceptions expected by a TestNG test method that are never thrown inside the method body. Example: '@Test(expectedExceptions = Exception.class) // warning: Expected 'Exception' never thrown\n  public void testEngineIsRunning() {\n    assertTrue(engine.isRunning());\n  }'\n Inspection ID: ExpectedExceptionNeverThrownTestNG",
                  "markdown": "Reports checked exceptions expected by a TestNG test method that are never thrown inside the method body.\n\n**Example:**\n\n\n      @Test(expectedExceptions = Exception.class) // warning: Expected 'Exception' never thrown\n      public void testEngineIsRunning() {\n        assertTrue(engine.isRunning());\n      }\n      \nInspection ID: ExpectedExceptionNeverThrownTestNG"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ExpectedExceptionNeverThrownTestNG",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/TestNG",
                      "index": 70,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UndeclaredTests",
                "shortDescription": {
                  "text": "Undeclared test"
                },
                "fullDescription": {
                  "text": "Reports test classes that are not registered in 'testing.xml'. This is often a mistake because such tests won't be executed. Inspection ID: UndeclaredTests",
                  "markdown": "Reports test classes that are not registered in `testing.xml`. This is often a mistake because such tests won't be executed.\n\nInspection ID: UndeclaredTests"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UndeclaredTests",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/TestNG",
                      "index": 70,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConvertOldAnnotations",
                "shortDescription": {
                  "text": "Old TestNG annotation @Configuration is used"
                },
                "fullDescription": {
                  "text": "Reports TestNG 'org.testng.annotations.Configuration' annotations. It's better to configure a test suite with the modern '@BeforeXXX'/'@AfterXXX' annotations. Example: 'public class Test {\n    @Configuration(beforeSuite = true, afterTest = true)\n    public void afterBefore(){\n    }\n  }' After the quick-fix is applied: 'public class Test {\n    @AfterTest()\n    @BeforeSuite()\n    public void afterBefore(){\n    }\n  }' Inspection ID: ConvertOldAnnotations",
                  "markdown": "Reports TestNG `org.testng.annotations.Configuration` annotations.\n\nIt's better to configure a test suite with the modern `@BeforeXXX`/`@AfterXXX` annotations.\n\nExample:\n\n\n      public class Test {\n        @Configuration(beforeSuite = true, afterTest = true)\n        public void afterBefore(){\n        }\n      }\n\nAfter the quick-fix is applied:\n\n\n      public class Test {\n        @AfterTest()\n        @BeforeSuite()\n        public void afterBefore(){\n        }\n      }\n\nInspection ID: ConvertOldAnnotations"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ConvertOldAnnotations",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/TestNG",
                      "index": 70,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DuplicatedDataProviderNames",
                "shortDescription": {
                  "text": "Duplicated data provider names"
                },
                "fullDescription": {
                  "text": "Reports 'TestNG' data providers with equal names if 'org.testng.TestNGException' has occurred. Example: 'public class DuplicatedDataProviders {\n    @DataProvider\n    public Object[][] intTestData() { // duplicate 1\n      return new Integer[][]{\n        new Integer[]{1, 1},\n      };\n    }\n\n    @DataProvider(name = \"intTestData\")\n    public Object[][] someTestData() { // duplicate 2\n      return new Integer[][]{\n        new Integer[]{1, 1},\n      };\n    }\n\n    @Test(dataProvider = \"intTestData\")\n    public void testIsOK(Integer key, Integer value) {\n      assertEquals(key, value);\n    }\n  }' Inspection ID: DuplicatedDataProviderNames",
                  "markdown": "Reports `TestNG` data providers with equal names if `org.testng.TestNGException` has occurred.\n\nExample:\n\n\n      public class DuplicatedDataProviders {\n        @DataProvider\n        public Object[][] intTestData() { // duplicate 1\n          return new Integer[][]{\n            new Integer[]{1, 1},\n          };\n        }\n\n        @DataProvider(name = \"intTestData\")\n        public Object[][] someTestData() { // duplicate 2\n          return new Integer[][]{\n            new Integer[]{1, 1},\n          };\n        }\n\n        @Test(dataProvider = \"intTestData\")\n        public void testIsOK(Integer key, Integer value) {\n          assertEquals(key, value);\n        }\n      }\n\n\nInspection ID: DuplicatedDataProviderNames"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "DuplicatedDataProviderNames",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/TestNG",
                      "index": 70,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.jsp",
            "version": "253.22441.33",
            "rules": [
              {
                "id": "ELDeferredExpressionsInspection",
                "shortDescription": {
                  "text": "EL deferred expressions inspection"
                },
                "fullDescription": {
                  "text": "Reports dynamic expressions where deferred expressions are expected and vice versa. Example: '<jsp:useBean id=\"exampleBean\" scope=\"request\" type=\"java.util.Date\"/>\n\n<h:outputText id=\"${exampleBean.day}\" value=\"#{exampleBean.day}\" /> // Good\n<h:outputText id=\"#{exampleBean.day}\" value=\"${exampleBean.day}\" /> // Error: `id` attribute requires dynamic expression, `value` - deferred' Inspection ID: ELDeferredExpressionsInspection",
                  "markdown": "Reports dynamic expressions where deferred expressions are expected and vice versa.\n\n**Example:**\n\n\n    <jsp:useBean id=\"exampleBean\" scope=\"request\" type=\"java.util.Date\"/>\n\n    <h:outputText id=\"${exampleBean.day}\" value=\"#{exampleBean.day}\" /> // Good\n    <h:outputText id=\"#{exampleBean.day}\" value=\"${exampleBean.day}\" /> // Error: `id` attribute requires dynamic expression, `value` - deferred \n\nInspection ID: ELDeferredExpressionsInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ELDeferredExpressionsInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSP",
                      "index": 72,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnhandledExceptionInJSP",
                "shortDescription": {
                  "text": "Unhandled Exception in JSP"
                },
                "fullDescription": {
                  "text": "Reports exceptions that are thrown by top-level JSP scriptlets. Example: '<%!\n  String getFormattedDate() {\n    ...\n    throw new IllegalArgumentException(...); // Error\n  }\n  %>\n  <html>\n  <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n    <title>Hello, JSP!</title>\n  </head>\n  <body>\n  <i>Today is <%= getFormattedDate() %></i>\n  </body>\n  </html>' NOTE: Such JSP pages will compile, because the servlet container wraps all JSP code in a try {} catch() {} block, but they will produce runtime exceptions when deployed on the server. Inspection ID: UnhandledExceptionInJSP",
                  "markdown": "Reports exceptions that are thrown by top-level JSP scriptlets.  \n\n**Example:**\n\n\n      <%!\n      String getFormattedDate() {\n        ...\n        throw new IllegalArgumentException(...); // Error\n      }\n      %>\n      <html>\n      <head>\n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n        <title>Hello, JSP!</title>\n      </head>\n      <body>\n      <i>Today is <%= getFormattedDate() %></i>\n      </body>\n      </html>\n\n\n**NOTE:** Such JSP pages will compile, because the servlet container wraps\nall JSP code in a **try {} catch() {}** block,\nbut they will produce runtime exceptions when deployed on the server.\n\nInspection ID: UnhandledExceptionInJSP"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnhandledExceptionInJSP",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSP",
                      "index": 72,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TaglibDomModelInspection",
                "shortDescription": {
                  "text": "Tag library descriptor inspection"
                },
                "fullDescription": {
                  "text": "Reports problems in JSP TLD files. TLD files should conform to the JSP tag library schema. Inspection ID: TaglibDomModelInspection",
                  "markdown": "Reports problems in JSP TLD files.\n\nTLD files should conform to the JSP tag library schema.\n\nInspection ID: TaglibDomModelInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "TaglibDomModelInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSP",
                      "index": 72,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JspDirectiveInspection",
                "shortDescription": {
                  "text": "Jsp directive inspection"
                },
                "fullDescription": {
                  "text": "Reports JSP import directives without a URI or tagdir attributes. Example: '<html>\n  <body>\n    <%@ taglib prefix=\"html\"%> // Error: either `uri` or `tagdir` attribute should be specified\n    ...\n  </body>\n</html>' Inspection ID: JspDirectiveInspection",
                  "markdown": "Reports JSP import directives without a URI or tagdir attributes.\n\n**Example:**\n\n\n    <html>\n      <body>\n        <%@ taglib prefix=\"html\"%> // Error: either `uri` or `tagdir` attribute should be specified\n        ...\n      </body>\n    </html>\n\nInspection ID: JspDirectiveInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "JspDirectiveInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSP",
                      "index": 72,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JspTagBodyContent",
                "shortDescription": {
                  "text": "Tag body content type"
                },
                "fullDescription": {
                  "text": "Reports JSP tag body content that does not conform to the TLD body-content specification. If empty body content is specified, the tag should have an empty body. If scriptless body content is specified, the tag's body should not contain JSP scriptlets. The quick-fix removes a tag's body for empty content type, and removes scriptlets if scriptless content type is specified. Example: '<s:empty>body not allowed here</s:empty>\n<s:scriptless>say: <% System.out.println(\"hey\"); %></s:scriptless>' After the quick-fix is applied: '<s:empty/>\n<s:scriptless>say: </s:scriptless>' Inspection ID: JspTagBodyContent",
                  "markdown": "Reports JSP tag body content that does not conform to the TLD body-content specification.\n\nIf empty body content is specified, the tag should have an empty body.\n\nIf scriptless body content is specified, the tag's body should not contain JSP scriptlets.\n\nThe quick-fix removes a tag's body for empty content type, and removes scriptlets if scriptless content type is specified.\n\n**Example:**\n\n\n    <s:empty>body not allowed here</s:empty>\n    <s:scriptless>say: <% System.out.println(\"hey\"); %></s:scriptless>\n\nAfter the quick-fix is applied:\n\n\n    <s:empty/>\n    <s:scriptless>say: </s:scriptless>\n\nInspection ID: JspTagBodyContent"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JspTagBodyContent",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSP",
                      "index": 72,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JspUnescapedEl",
                "shortDescription": {
                  "text": "Unescaped EL Expressions"
                },
                "fullDescription": {
                  "text": "Reports non-safe data in unescaped EL expressions in JSP pages. Such cases may lead to cross-site scripting (XSS) vulnerability. The description below uses the term untainted data to refer to safe and trusted data as the opposite of tainted (non-safe, untrusted). See taint checking for more information. A safe (untainted) object is: a primitive data type (except 'char') a result of a call of a method that is marked as untainted a result of an escaping function call a field, which is marked as untainted The JSP page could have different contexts for provided data, and if data is safe for one context, it is not necessarily mean that it is safe for all. See Cross Site Scripting Prevention Cheat Sheet for some examples. This inspection skips data marked as untainted (safe) in ALL contexts. This inspection supports the following options to mark methods and fields as safe: by using any annotation from the configurable list of untainted annotations by configuring the list of safe methods and fields all static final fields could be marked as untainted by choosing \"Consider static final fields as untainted\" option on \"Untainted Methods and Fields\" tab This inspection does not highlight places where non-safe data reaches the safe tags in JSP pages. For example, the 'out' tag from the JSTL taglib is secure because it escapes the given value by default. The list of safe tags is configurable (omit 'tag' or 'attribute' value to define a whole range). \"Wrap in JSTL <out> tag\" quick fix wraps an EL expression with the JSTL '<out>' tag. Before:   '${foo}'\n After:   '<%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %>\n  <c:out value=\"${foo}\"/>'\n \"Wrap in JSTL escapeXml() function\" wraps non-safe value with 'escapeXml' escaping function. Before:   '<%@ taglib prefix=\"custom\" uri=\"WEB_INF/custom.tld\" %>\n  <custom:tag value=\"${foo}\"/>'\n After:   '<%@ taglib prefix=\"custom\" uri=\"WEB_INF/custom.tld\" %>\n    <%@ taglib prefix=\"fn\" uri=\"http://java.sun.com/jsp/jstl/functions\" %>\n    <custom:tag value=\"${fn:escapeXml(foo)}\"/>'\n More quick fixes exist to add selected tags to safe tags or annotate related methods (or fields) with untainted annotation. It is possible to add custom escape functions (see \"Escape functions\" tab). Now it contains functions from the JSTL that return a safe value (e.g., a well-known 'escapeXml' function). It does not require defining JSTL functions twice with different namespace URIs. If one of the \"http://java.sun.com/jsp/jstl/functions\" or \"http://java.sun.com/jstl/functions\" were used, another one would also be checked. It is also possible to skip an escaping function everywhere by its name. To do so, leave a namespace URI field empty. Inspection ID: JspUnescapedEl",
                  "markdown": "Reports non-safe data in unescaped EL expressions in JSP pages. Such cases may lead to [cross-site scripting (XSS)](https://en.wikipedia.org/wiki/Cross-site_scripting) vulnerability.\n\n\nThe description below uses the term **untainted** data to refer to safe and trusted data as the opposite of **tainted** (non-safe,\nuntrusted). See [taint checking](https://en.wikipedia.org/wiki/Taint_checking) for more information.\n\n\nA safe (untainted) object is:\n\n* a primitive data type (except `char`)\n* a result of a call of a method that is marked as untainted\n* a result of an escaping function call\n* a field, which is marked as untainted\n\n\nThe JSP page could have different contexts for provided data, and if data is safe for one context, it is not\nnecessarily mean that it is safe for all.\nSee [Cross Site\nScripting Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html#output-encoding) for some examples. This inspection skips data marked as untainted (safe) in **ALL** contexts.\n\n\nThis inspection supports the following options to mark methods and fields as safe:\n\n* by using any annotation from the configurable list of untainted annotations\n* by configuring the list of safe methods and fields\n* all static final fields could be marked as untainted by choosing \"Consider static final fields as untainted\" option on \"Untainted Methods and Fields\" tab\n\n\nThis inspection does not highlight places where non-safe data reaches the safe tags in JSP pages.\nFor example, the `out` tag from the JSTL taglib is secure because it escapes the given value by default.\nThe list of safe tags is configurable (omit `tag` or `attribute` value to define a whole range).\n\n\"Wrap in JSTL \\<out\\> tag\" quick fix wraps an EL expression with the JSTL `<out>` tag.\n\nBefore:\n\n      \n        ${foo}\n      \nAfter:\n\n      \n      <%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %>\n      <c:out value=\"${foo}\"/>\n      \n\"Wrap in JSTL escapeXml() function\" wraps non-safe value with `escapeXml` escaping function.\n\nBefore:\n\n      \n      <%@ taglib prefix=\"custom\" uri=\"WEB_INF/custom.tld\" %>\n      <custom:tag value=\"${foo}\"/>\n      \nAfter:\n\n      \n        <%@ taglib prefix=\"custom\" uri=\"WEB_INF/custom.tld\" %>\n        <%@ taglib prefix=\"fn\" uri=\"http://java.sun.com/jsp/jstl/functions\" %>\n        <custom:tag value=\"${fn:escapeXml(foo)}\"/>\n      \nMore quick fixes exist to add selected tags to safe tags or annotate related methods (or fields) with untainted annotation.\n\n\nIt is possible to add custom escape functions (see \"Escape functions\" tab).\nNow it contains functions from the JSTL that return a safe value (e.g., a well-known `escapeXml` function).\nIt does not require defining JSTL functions twice with different namespace URIs.\nIf one of the \"http://java.sun.com/jsp/jstl/functions\" or \"http://java.sun.com/jstl/functions\" were used,\nanother one would also be checked. It is also possible to skip an escaping function everywhere by its name.\nTo do so, leave a namespace URI field empty.\n\nInspection ID: JspUnescapedEl"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JspUnescapedEl",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Security"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSP",
                      "index": 72,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReferencesToClassesFromDefaultPackagesInJSPFile",
                "shortDescription": {
                  "text": "References to classes from the default package in JSP files"
                },
                "fullDescription": {
                  "text": "Reports any references to classes from the default package in JSP files. Example: '<%!\n  Integer countSomeUsefulStuff() {\n    ...\n    new ClassFromDefaultPackage(...); // Error\n    new com.example.GoodClass(...); // Good\n  }\n  %>\n  <html>\n    <head>\n      <title>Hello, JSP!</title>\n    </head>\n  </html>' NOTE: Such references will not be resolved during compilation of the JSP because a compiled class for the JSP will be usually placed in non-default package (for example, \"org.apache.jsp\" in case of Tomcat, \"com.ibm._jsp\" in case of WebSphere), but importing from the default package is not allowed in Java. Inspection ID: ReferencesToClassesFromDefaultPackagesInJSPFile",
                  "markdown": "Reports any references to classes from the default package in JSP files.\n\n**Example:**\n\n\n      <%!\n      Integer countSomeUsefulStuff() {\n        ...\n        new ClassFromDefaultPackage(...); // Error\n        new com.example.GoodClass(...); // Good\n      }\n      %>\n      <html>\n        <head>\n          <title>Hello, JSP!</title>\n        </head>\n      </html>\n\n\n**NOTE:** Such references will not be resolved during compilation of the JSP\nbecause a compiled class for the JSP will be usually placed in non-default package\n(for example, \"org.apache.jsp\" in case of Tomcat, \"com.ibm._jsp\" in case of WebSphere),\nbut importing from the default package is not allowed in Java.\n\nInspection ID: ReferencesToClassesFromDefaultPackagesInJSPFile"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "ReferencesToClassesFromDefaultPackagesInJSPFile",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSP",
                      "index": 72,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JspPropertiesInspection",
                "shortDescription": {
                  "text": "Jsp properties inspection"
                },
                "fullDescription": {
                  "text": "Reports unresolved properties from '*.properties' files. Example JSP file: '<%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %>\n<%@ taglib uri=\"/tags/fmt\" prefix=\"fmt\" %>\n\n<fmt:message bundle=\"bundle.properties\" key=\"unknown.property\"/> // Error: no such property inside referenced file' Inspection ID: JspPropertiesInspection",
                  "markdown": "Reports unresolved properties from `*.properties` files.\n\n**Example JSP file:**\n\n\n    <%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %>\n    <%@ taglib uri=\"/tags/fmt\" prefix=\"fmt\" %>\n\n    <fmt:message bundle=\"bundle.properties\" key=\"unknown.property\"/> // Error: no such property inside referenced file\n\nInspection ID: JspPropertiesInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "JspPropertiesInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSP",
                      "index": 72,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ELMethodSignatureInspection",
                "shortDescription": {
                  "text": "EL method signature inspection"
                },
                "fullDescription": {
                  "text": "Reports method calls in EL that don't match 'method-signature' constraints in TLD files. Example Java class: 'public class ExampleAction {\n  public void goodAction() { ... }\n  public void badAction(String str) { ... }\n}' Example JSP file: '<jsp:useBean id=\"example\" scope=\"request\" type=\"org.example.ExampleAction\"/>\n<f:view>\n  <h:commandButton action=\"#{example.goodAction}\"/> // Good: method accepts zero arguments and returns `void`\n  <h:commandButton action=\"#{example.badAction}\"/> // Error: method `void badAction(String)` returns `java.lang.String` type instead of `void`\n</f:view>' Inspection ID: ELMethodSignatureInspection",
                  "markdown": "Reports method calls in EL that don't match `method-signature` constraints in TLD files.\n\n**Example Java class:**\n\n\n    public class ExampleAction {\n      public void goodAction() { ... }\n      public void badAction(String str) { ... }\n    }\n\n**Example JSP file:**\n\n\n    <jsp:useBean id=\"example\" scope=\"request\" type=\"org.example.ExampleAction\"/>\n    <f:view>\n      <h:commandButton action=\"#{example.goodAction}\"/> // Good: method accepts zero arguments and returns `void`\n      <h:commandButton action=\"#{example.badAction}\"/> // Error: method `void badAction(String)` returns `java.lang.String` type instead of `void`\n    </f:view>\n\nInspection ID: ELMethodSignatureInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ELMethodSignatureInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSP",
                      "index": 72,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SelfIncludingJspFiles",
                "shortDescription": {
                  "text": "Self-including JSP files"
                },
                "fullDescription": {
                  "text": "Reports any include directives in a JSP file which refer to the containing JSP file. Example JSP file named main.jsp: '<jsp:include page=\"./main.jsp\" /> // Error: attempt to include the containing file\n  ...' NOTE: Such self-including leads to infinite recursion and so the JSP file cannot be compiled. Inspection ID: SelfIncludingJspFiles",
                  "markdown": "Reports any include directives in a JSP file which refer to the containing JSP file.  \n\n**Example JSP file named main.jsp:**\n\n\n      <jsp:include page=\"./main.jsp\" /> // Error: attempt to include the containing file\n      ...\n\n\n**NOTE:** Such self-including leads to infinite recursion and so the JSP file cannot be compiled.\n\nInspection ID: SelfIncludingJspFiles"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "SelfIncludingJspFiles",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSP",
                      "index": 72,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FunctionELReferenceInspection",
                "shortDescription": {
                  "text": "EL method function parameters count"
                },
                "fullDescription": {
                  "text": "Reports different number of formal and actual parameters in EL function call. Inspection ID: FunctionELReferenceInspection",
                  "markdown": "Reports different number of formal and actual parameters in EL function call.\n\nInspection ID: FunctionELReferenceInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "FunctionELReferenceInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSP",
                      "index": 72,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JspAbsolutePathInspection",
                "shortDescription": {
                  "text": "Absolute paths"
                },
                "fullDescription": {
                  "text": "Reports absolute paths in JSP files. Absolute paths are prohibited in JSP, because they won't be resolved if your application context is not empty. The quick-fix adds a dynamic prefix to your path. Example: '<%@page contentType=\"text/html; ISO-8859-1\" %>\n\n  <a href=\"/hey.jsp\">hey</a>' After the quick-fix is applied: '<%@page contentType=\"text/html; ISO-8859-1\" %>\n\n  <a href=\"${pageContext.request.contextPath}/hey.jsp\">hey</a>' Inspection ID: JspAbsolutePathInspection",
                  "markdown": "Reports absolute paths in JSP files.\n\nAbsolute paths are prohibited in JSP, because they won't be resolved if your application context is not empty.\n\nThe quick-fix adds a dynamic prefix to your path.\n\n**Example:**\n\n\n      <%@page contentType=\"text/html; ISO-8859-1\" %>\n\n      <a href=\"/hey.jsp\">hey</a>\n\nAfter the quick-fix is applied:\n\n\n      <%@page contentType=\"text/html; ISO-8859-1\" %>\n\n      <a href=\"${pageContext.request.contextPath}/hey.jsp\">hey</a>\n\nInspection ID: JspAbsolutePathInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JspAbsolutePathInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSP",
                      "index": 72,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ELSpecValidationInJSP",
                "shortDescription": {
                  "text": "JSP EL specification validation"
                },
                "fullDescription": {
                  "text": "Reports possible problems caused by non-standard EL extensions: JSF EL expressions outside attributes, non-standard EL expressions, and so on. Example: '<f:view>\n  <h:form>\n    <f:loadBundle var=\"example\"/>\n    <h:commandButton action=\"${example.size()}\"/> // Warning: method call is nonstandard extension\n  </h:form>\n</f:view>' Inspection ID: ELSpecValidationInJSP",
                  "markdown": "Reports possible problems caused by non-standard EL extensions: JSF EL expressions outside attributes, non-standard EL expressions, and so on.\n\n**Example:**\n\n\n    <f:view>\n      <h:form>\n        <f:loadBundle var=\"example\"/>\n        <h:commandButton action=\"${example.size()}\"/> // Warning: method call is nonstandard extension\n      </h:form>\n    </f:view>\n\nInspection ID: ELSpecValidationInJSP"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ELSpecValidationInJSP",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSP",
                      "index": 72,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "JUnit",
            "version": "253.22441.33",
            "rules": [
              {
                "id": "ExpectedExceptionNeverThrown",
                "shortDescription": {
                  "text": "Expected exception never thrown in test method body"
                },
                "fullDescription": {
                  "text": "Reports checked exceptions expected by a JUnit 4 test-method that are never thrown inside the method body. Such test methods will never succeed. Example: '@Test(expected = CloneNotSupportedException.class)\n  public void testIt() { }' Inspection ID: ExpectedExceptionNeverThrown",
                  "markdown": "Reports checked exceptions expected by a JUnit 4 test-method that are never thrown inside the method body. Such test methods will never succeed.\n\n**Example:**\n\n\n      @Test(expected = CloneNotSupportedException.class)\n      public void testIt() { }\n\nInspection ID: ExpectedExceptionNeverThrown"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ExpectedExceptionNeverThrown",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JUnit",
                      "index": 76,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JUnitMixedFramework",
                "shortDescription": {
                  "text": "JUnit API usage from multiple versions in a single TestCase"
                },
                "fullDescription": {
                  "text": "Reports JUnit annotated methods when used in a test case from a different JUnit version. To determine the framework version for a test case the inspection checks the framework version of the super class when available. When a super class is not available it will use the most used framework in the test case. Example (JUnit 4 annotation in JUnit 3 test case): 'public class MyTest extends TestCase {\n      @Test\n      public void foo() { }\n\n      @Test\n      @Ignore\n      public void testBar() { }\n  }' After the quick-fix is applied: 'public class MyTest extends TestCase {\n      public void testFoo() {}\n\n      public void _testBar() {}\n  }' Example (JUnit 5 annotation in JUnit 4 test case): 'public class MyTest {\n      @BeforeAll // JUnit 5 lifecycle method\n      public void initialize() { }\n\n      @org.junit.Test  // JUnit 4 test annotation\n      public void test() {}\n\n      @org.junit.Test  // JUnit 4 test annotation\n      public void testWouldBeExecuted() {}\n  }' After the quick-fix is applied: 'public class MyTest {\n      @BeforeClass // JUnit 4 lifecycle method\n      public void initialize() { }\n\n      @org.junit.Test  // JUnit 4 test annotation\n      public void test() {}\n\n      @org.junit.Test  // JUnit 4 test annotation\n      public void testWouldBeExecuted() {}\n  }' Inspection ID: JUnitMixedFramework",
                  "markdown": "Reports JUnit annotated methods when used in a test case from a different JUnit version. To determine the framework version for a test case the inspection checks the framework version of the super class when available. When a super class is not available it will use the most used framework in the test case.\n\nExample (JUnit 4 annotation in JUnit 3 test case):\n\n\n      public class MyTest extends TestCase {\n          @Test\n          public void foo() { }\n\n          @Test\n          @Ignore\n          public void testBar() { }\n      }\n\nAfter the quick-fix is applied:\n\n\n      public class MyTest extends TestCase {\n          public void testFoo() {}\n\n          public void _testBar() {}\n      }\n\nExample (JUnit 5 annotation in JUnit 4 test case):\n\n\n      public class MyTest {\n          @BeforeAll // JUnit 5 lifecycle method\n          public void initialize() { }\n\n          @org.junit.Test  // JUnit 4 test annotation\n          public void test() {}\n\n          @org.junit.Test  // JUnit 4 test annotation\n          public void testWouldBeExecuted() {}\n      }\n\nAfter the quick-fix is applied:\n\n\n      public class MyTest {\n          @BeforeClass // JUnit 4 lifecycle method\n          public void initialize() { }\n\n          @org.junit.Test  // JUnit 4 test annotation\n          public void test() {}\n\n          @org.junit.Test  // JUnit 4 test annotation\n          public void testWouldBeExecuted() {}\n      }\n\nInspection ID: JUnitMixedFramework"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JUnitMixedFramework",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JUnit",
                      "index": 76,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AssertEqualsMayBeAssertSame",
                "shortDescription": {
                  "text": "'assertEquals()' may be 'assertSame()'"
                },
                "fullDescription": {
                  "text": "Reports JUnit 'assertEquals()' calls that can be replaced with an equivalent 'assertSame()' call. This is possible when the arguments are instances of a 'final' class that does not override the 'Object.equals()' method and makes it explicit that the object identity is compared. Suggests replacing 'assertEquals()' with 'assertSame()'. Example: '@Test\n  public void testObjectType() {\n    Object o = getObject();\n    Assert.assertEquals(String.class, o.getClass());\n  }' After the quick fix is applied: '@Test\n  public void testSort() {\n    Object o = getObject();\n    Assert.assertSame(String.class, o.getClass());\n  }' Inspection ID: AssertEqualsMayBeAssertSame",
                  "markdown": "Reports JUnit `assertEquals()` calls that can be replaced with an equivalent `assertSame()` call. This is possible when the arguments are instances of a `final` class that does not override the `Object.equals()` method and makes it explicit that the object identity is compared.\n\nSuggests replacing `assertEquals()` with `assertSame()`.\n\n**Example:**\n\n\n      @Test\n      public void testObjectType() {\n        Object o = getObject();\n        Assert.assertEquals(String.class, o.getClass());\n      }\n\nAfter the quick fix is applied:\n\n\n      @Test\n      public void testSort() {\n        Object o = getObject();\n        Assert.assertSame(String.class, o.getClass());\n      }\n\nInspection ID: AssertEqualsMayBeAssertSame"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AssertEqualsMayBeAssertSame",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JUnit",
                      "index": 76,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SuperTearDownInFinally",
                "shortDescription": {
                  "text": "JUnit 3 'super.tearDown()' is not called from 'finally' block"
                },
                "fullDescription": {
                  "text": "Reports calls of the JUnit 3's 'super.tearDown()' method that are not performed inside a 'finally' block. If an exception is thrown before 'super.tearDown()' is called it could lead to inconsistencies and leaks. Example: 'public class AnotherTest extends CompanyTestCase {\n    private Path path;\n\n    @Override\n    protected void setUp() throws Exception {\n      super.setUp();\n      path = Files.createTempFile(\"File\", \".tmp\");\n    }\n\n    @Override\n    protected void tearDown() throws Exception {\n      Files.delete(path);\n      super.tearDown();\n    }\n  }' Improved code: 'public class AnotherTest extends CompanyTestCase {\n    private Path path;\n\n    @Override\n    protected void setUp() throws Exception {\n      super.setUp();\n      path = Files.createTempFile(\"File\", \".tmp\");\n    }\n\n    @Override\n    protected void tearDown() throws Exception {\n      try {\n        Files.delete(path);\n      } finally {\n        super.tearDown();\n      }\n    }\n  }' Inspection ID: SuperTearDownInFinally",
                  "markdown": "Reports calls of the JUnit 3's `super.tearDown()` method that are not performed inside a `finally` block. If an exception is thrown before `super.tearDown()` is called it could lead to inconsistencies and leaks.\n\n**Example:**\n\n\n      public class AnotherTest extends CompanyTestCase {\n        private Path path;\n\n        @Override\n        protected void setUp() throws Exception {\n          super.setUp();\n          path = Files.createTempFile(\"File\", \".tmp\");\n        }\n\n        @Override\n        protected void tearDown() throws Exception {\n          Files.delete(path);\n          super.tearDown();\n        }\n      }\n\nImproved code:\n\n\n      public class AnotherTest extends CompanyTestCase {\n        private Path path;\n\n        @Override\n        protected void setUp() throws Exception {\n          super.setUp();\n          path = Files.createTempFile(\"File\", \".tmp\");\n        }\n\n        @Override\n        protected void tearDown() throws Exception {\n          try {\n            Files.delete(path);\n          } finally {\n            super.tearDown();\n          }\n        }\n      }\n\nInspection ID: SuperTearDownInFinally"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SuperTearDownInFinally",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JUnit",
                      "index": 76,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AssertEqualsCalledOnArray",
                "shortDescription": {
                  "text": "'assertEquals()' called on array"
                },
                "fullDescription": {
                  "text": "Reports JUnit 'assertEquals()' calls with arguments of an array type. Such methods compare the arrays' identities instead of the arrays' contents. Array contents should be checked with the 'assertArrayEquals()' method. Example: '@Test\n  public void testSort() {\n    int[] actual = {248, 496, 0, 56};\n    Arrays.sort(actual);\n    Assert.assertEquals(new int[] {0, 56, 248, 496}, actual);\n  }' After the quick-fix is applied: '@Test\n  public void testSort() {\n    int[] actual = {248, 496, 0, 56};\n    Arrays.sort(actual);\n    Assert.assertArrayEquals(new int[] {0, 56, 248, 496}, actual);\n  }' Inspection ID: AssertEqualsCalledOnArray",
                  "markdown": "Reports JUnit `assertEquals()` calls with arguments of an array type. Such methods compare the arrays' identities instead of the arrays' contents. Array contents should be checked with the `assertArrayEquals()` method.\n\n**Example:**\n\n\n      @Test\n      public void testSort() {\n        int[] actual = {248, 496, 0, 56};\n        Arrays.sort(actual);\n        Assert.assertEquals(new int[] {0, 56, 248, 496}, actual);\n      }\n\nAfter the quick-fix is applied:\n\n\n      @Test\n      public void testSort() {\n        int[] actual = {248, 496, 0, 56};\n        Arrays.sort(actual);\n        Assert.assertArrayEquals(new int[] {0, 56, 248, 496}, actual);\n      }\n\n\nInspection ID: AssertEqualsCalledOnArray"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AssertEqualsCalledOnArray",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JUnit",
                      "index": 76,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JUnit5Converter",
                "shortDescription": {
                  "text": "JUnit 4 test can be JUnit 5"
                },
                "fullDescription": {
                  "text": "Reports JUnit 4 tests that can be automatically migrated to JUnit 5. While default runners are automatically convertible, custom runners, method- and field- rules are not and require manual changes. Example: 'import org.junit.Assert;\n  import org.junit.Test;\n\n  public class RelevantTest {\n    @Test\n    public void testIt() {\n      Assert.assertEquals(\"expected\", \"actual\");\n    }\n  }' After the quick-fix is applied: 'import org.junit.jupiter.api.Assertions;\n  import org.junit.jupiter.api.Test;\n\n  public class RelevantTest {\n    @Test\n    public void testIt() {\n      Assertions.assertEquals(\"expected\", \"actual\");\n    }\n  }' This inspection requires that the JUnit 5 library is available in the classpath, and JDK 1.8 or later is configured for the project. Inspection ID: JUnit5Converter",
                  "markdown": "Reports JUnit 4 tests that can be automatically migrated to JUnit 5. While default runners are automatically convertible, custom runners, method- and field- rules are not and require manual changes.\n\n**Example:**\n\n\n      import org.junit.Assert;\n      import org.junit.Test;\n\n      public class RelevantTest {\n        @Test\n        public void testIt() {\n          Assert.assertEquals(\"expected\", \"actual\");\n        }\n      }\n\nAfter the quick-fix is applied:\n\n\n      import org.junit.jupiter.api.Assertions;\n      import org.junit.jupiter.api.Test;\n\n      public class RelevantTest {\n        @Test\n        public void testIt() {\n          Assertions.assertEquals(\"expected\", \"actual\");\n        }\n      }\n\nThis inspection requires that the JUnit 5 library is available in the classpath, and JDK 1.8 or later is configured for the project.\n\nInspection ID: JUnit5Converter"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JUnit5Converter",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JUnit",
                      "index": 76,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IgnoredJUnitTest",
                "shortDescription": {
                  "text": "JUnit test annotated with '@Ignore'/'@Disabled'"
                },
                "fullDescription": {
                  "text": "Reports usages of JUnit 4's '@Ignore' or JUnit 5's '@Disabled' annotations. It is considered a code smell to have tests annotated with these annotations for a long time, especially when no reason is specified. Example: '@Ignore\n  public class UrgentTest {\n\n    @Test\n    public void testIt() {\n      Assert.assertEquals(\"expected\", \"actual\");\n    }\n  }' Configure the inspection: Use the Only report annotations without reason option to only report the cases when no reason is specified as the annotation's 'value' attribute. Inspection ID: IgnoredJUnitTest",
                  "markdown": "Reports usages of JUnit 4's `@Ignore` or JUnit 5's `@Disabled` annotations. It is considered a code smell to have tests annotated with these annotations for a long time, especially when no reason is specified.\n\n**Example:**\n\n\n      @Ignore\n      public class UrgentTest {\n\n        @Test\n        public void testIt() {\n          Assert.assertEquals(\"expected\", \"actual\");\n        }\n      }\n\n\nConfigure the inspection:\n\n* Use the **Only report annotations without reason** option to only report the cases when no reason is specified as the annotation's `value` attribute.\n\nInspection ID: IgnoredJUnitTest"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "IgnoredJUnitTest",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JUnit",
                      "index": 76,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MultipleExceptionsDeclaredOnTestMethod",
                "shortDescription": {
                  "text": "Multiple exceptions declared on test method"
                },
                "fullDescription": {
                  "text": "Reports JUnit test method 'throws' clauses with more than one exception. Such clauses are unnecessarily verbose. Test methods will not be called from other project code, so there is no need to handle these exceptions separately. For example: '@Test\n  public void testReflection() throws NoSuchMethodException,\n      InvocationTargetException, IllegalAccessException {\n    String result = (String) String.class.getMethod(\"trim\")\n        .invoke(\" hello \");\n    assertEquals(\"hello\", result);\n  }' A quick fix is provided to replace the exception declarations with a single exception: '@Test\n  public void testReflection() throws Exception {\n    String result = (String) String.class.getMethod(\"trim\")\n        .invoke(\" hello \");\n    assertEquals(\"hello\", result);\n  }' Inspection ID: MultipleExceptionsDeclaredOnTestMethod",
                  "markdown": "Reports JUnit test method `throws` clauses with more than one exception. Such clauses are unnecessarily verbose. Test methods will not be called from other project code, so there is no need to handle these exceptions separately.\n\nFor example:\n\n\n      @Test\n      public void testReflection() throws NoSuchMethodException,\n          InvocationTargetException, IllegalAccessException {\n        String result = (String) String.class.getMethod(\"trim\")\n            .invoke(\" hello \");\n        assertEquals(\"hello\", result);\n      }\n\nA quick fix is provided to replace the exception declarations with a single exception:\n\n\n      @Test\n      public void testReflection() throws Exception {\n        String result = (String) String.class.getMethod(\"trim\")\n            .invoke(\" hello \");\n        assertEquals(\"hello\", result);\n      }\n\nInspection ID: MultipleExceptionsDeclaredOnTestMethod"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MultipleExceptionsDeclaredOnTestMethod",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JUnit",
                      "index": 76,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseOfObsoleteAssert",
                "shortDescription": {
                  "text": "Usage of obsolete 'junit.framework.Assert' method"
                },
                "fullDescription": {
                  "text": "Reports any calls to methods from the 'junit.framework.Assert' class. This class is obsolete and the calls can be replaced by calls to methods from the 'org.junit.Assert' class. For example: 'import org.junit.*;\n  public class NecessaryTest {\n    @Test\n    public void testIt() {\n      junit.framework.Assert.assertEquals(\"expected\", \"actual\");\n    }\n  }' After the quick fix is applied, the result looks like the following: 'import org.junit;\n  public class NecessaryTest {\n\n    public void testIt() {\n      Assert.assertEquals(\"expected\", \"actual\");\n    }\n  }' Inspection ID: UseOfObsoleteAssert",
                  "markdown": "Reports any calls to methods from the `junit.framework.Assert` class. This class is obsolete and the calls can be replaced by calls to methods from the `org.junit.Assert` class.\n\nFor example:\n\n\n      import org.junit.*;\n      public class NecessaryTest {\n        @Test\n        public void testIt() {\n          junit.framework.Assert.assertEquals(\"expected\", \"actual\");\n        }\n      }\n\nAfter the quick fix is applied, the result looks like the following:\n\n\n      import org.junit;\n      public class NecessaryTest {\n\n        public void testIt() {\n          Assert.assertEquals(\"expected\", \"actual\");\n        }\n      }\n\n\nInspection ID: UseOfObsoleteAssert"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UseOfObsoleteAssert",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JUnit",
                      "index": 76,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JUnit3StyleTestMethodInJUnit4Class",
                "shortDescription": {
                  "text": "Old style JUnit test method in JUnit 4 class"
                },
                "fullDescription": {
                  "text": "Reports JUnit 3 style test methods that are located inside a class that does not extend the JUnit 3 'TestCase' class and contains JUnit 4 or JUnit 5 '@Test' annotated methods. Such test methods cannot be run. Inspection ID: JUnit3StyleTestMethodInJUnit4Class",
                  "markdown": "Reports JUnit 3 style test methods that are located inside a class that does not extend the JUnit 3 `TestCase` class and contains JUnit 4 or JUnit 5 `@Test` annotated methods. Such test methods cannot be run.\n\nInspection ID: JUnit3StyleTestMethodInJUnit4Class"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JUnit3StyleTestMethodInJUnit4Class",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JUnit",
                      "index": 76,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JUnitMalformedDeclaration",
                "shortDescription": {
                  "text": "JUnit malformed declaration"
                },
                "fullDescription": {
                  "text": "Reports JUnit test member declarations that are malformed and are likely not recognized by the JUnit test framework. The following problems are reported by this inspection: Test classes that can't be constructed Fields annotated by '@RegisterExtension' that have the wrong type or are not declared as static when it is required Static or private inner classes annotated with '@Nested' Parameterized tests that are defined without a source Parameterized tests with a '@MethodSource' that has an unknown, non-static or no-arg target Mismatched types between parameterized test method parameter and the specified '@ValueSource' or '@EnumSource' values Tests that are annotated by more than one of '@Test', '@ParameterizedTest' or '@RepeatedTest' 'setup()' or 'tearDown()' methods that are not public, whose return type is not void or take arguments 'suite()' methods that are private, take arguments or are not static Methods annotated by '@BeforeClass', '@AfterClass', '@BeforeAll' or '@AfterAll' that are not public, not static, whose return type is not void or do not have a valid parameter list Methods annotated by '@Before', '@After', '@BeforeEach' or '@AfterEach' that are not public, whose return type is not void or take arguments Injected 'RepetitionInfo' in '@BeforeAll' or '@AfterAll' methods Injected 'RepetitionInfo' in '@BeforeEach' or '@AfterEach' methods that are used by '@Test' annotated tests Fields and methods annotated by '@DataPoint' or '@DataPoints' that are not public or not static Fields and methods annotated by '@Rule' that are not public or not a subtype of 'TestRule' or 'MethodRule' Fields and methods annotated by '@ClassRule' that are not public, not static or not a subtype of 'TestRule' Methods inside a subclass of 'TestCase' with a 'test' prefix that are not public, whose return type is not void, take arguments or are static Methods annotated by '@Test' that are not public, whose return type is not void, take arguments or are static Note that in Kotlin, suspending functions do have arguments and a non-void return type. Therefore, they also will not be executed by the JUnit test runner. This inspection will also report about this problem. Malformed '@Before' method example: '@Before private int foo(int arg) { }' After the quick-fix is applied: '@Before public void foo() { }' Missing method source example (Kotlin): 'class Example {\n    @MethodSource(\"parameters\")\n    @ParameterizedTest\n    fun foo(param: String) { ... }\n  }' After the quick-fix is applied: 'class Example {\n    @MethodSource(\"parameters\")\n    @ParameterizedTest\n    fun foo(param: String) { ... }\n\n    companion object {\n      @JvmStatic\n      fun parameters(): Stream<Arguments> {\n        TODO(\"Not yet implemented\")\n      }\n    }\n  }' Use the inspection options to specify annotations. Any parameter annotated with one of these annotations will not be reported. Inspection ID: JUnitMalformedDeclaration",
                  "markdown": "Reports JUnit test member declarations that are malformed and are likely not recognized by the JUnit test framework. The following problems are reported by this inspection:\n\n* Test classes that can't be constructed\n* Fields annotated by `@RegisterExtension` that have the wrong type or are not declared as static when it is required\n* Static or private inner classes annotated with `@Nested`\n* Parameterized tests that are defined without a source\n* Parameterized tests with a `@MethodSource` that has an unknown, non-static or no-arg target\n* Mismatched types between parameterized test method parameter and the specified `@ValueSource` or `@EnumSource` values\n* Tests that are annotated by more than one of `@Test`, `@ParameterizedTest` or `@RepeatedTest`\n* `setup()` or `tearDown()` methods that are not public, whose return type is not void or take arguments\n* `suite()` methods that are private, take arguments or are not static\n* Methods annotated by `@BeforeClass`, `@AfterClass`, `@BeforeAll` or `@AfterAll` that are not public, not static, whose return type is not void or do not have a valid parameter list\n* Methods annotated by `@Before`, `@After`, `@BeforeEach` or `@AfterEach` that are not public, whose return type is not void or take arguments\n* Injected `RepetitionInfo` in `@BeforeAll` or `@AfterAll` methods\n* Injected `RepetitionInfo` in `@BeforeEach` or `@AfterEach` methods that are used by `@Test` annotated tests\n* Fields and methods annotated by `@DataPoint` or `@DataPoints` that are not public or not static\n* Fields and methods annotated by `@Rule` that are not public or not a subtype of `TestRule` or `MethodRule`\n* Fields and methods annotated by `@ClassRule` that are not public, not static or not a subtype of `TestRule`\n* Methods inside a subclass of `TestCase` with a `test` prefix that are not public, whose return type is not void, take arguments or are static\n* Methods annotated by `@Test` that are not public, whose return type is not void, take arguments or are static\n\nNote that in Kotlin, suspending functions do have arguments and a non-void return type. Therefore, they also will not be executed by the JUnit test runner. This inspection will also report about this problem.\n\n**Malformed `@Before` method example:**\n\n\n      @Before private int foo(int arg) { }\n\nAfter the quick-fix is applied:\n\n\n      @Before public void foo() { }\n\n**Missing method source example (Kotlin):**\n\n\n      class Example {\n        @MethodSource(\"parameters\")\n        @ParameterizedTest\n        fun foo(param: String) { ... }\n      }\n\nAfter the quick-fix is applied:\n\n\n      class Example {\n        @MethodSource(\"parameters\")\n        @ParameterizedTest\n        fun foo(param: String) { ... }\n\n        companion object {\n          @JvmStatic\n          fun parameters(): Stream<Arguments> {\n            TODO(\"Not yet implemented\")\n          }\n        }\n      }\n\nUse the inspection options to specify annotations. Any parameter annotated with one of these annotations will not be reported.\n\nInspection ID: JUnitMalformedDeclaration"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "JUnitMalformedDeclaration",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JUnit",
                      "index": 76,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JUnit5AssertionsConverter",
                "shortDescription": {
                  "text": "JUnit 5 obsolete assertions"
                },
                "fullDescription": {
                  "text": "Reports any calls to methods from the 'junit.framework.Assert', 'org.junit.Assert', or 'org.junit.Assume' classes inside JUnit 5 tests. Although the tests work properly, migration to 'org.junit.jupiter.api.Assertions'/'org.junit.jupiter.api.Assumptions' will help you avoid dependencies on old JUnit version. Example: 'import org.junit.Assert;\n  import org.junit.jupiter.api.Test;\n\n  public class MyTest {\n    @Test\n    public void simpleTest() {\n      Assert.assertEquals(4, 2 + 2);\n    }\n  }' After the quick-fix is applied: 'import org.junit.jupiter.api.Assertions;\n  import org.junit.jupiter.api.Test;\n\n  public class MyTest {\n    @Test\n    public void simpleTest() {\n      Assertions.assertEquals(4, 2 + 2);\n    }\n  }' Inspection ID: JUnit5AssertionsConverter",
                  "markdown": "Reports any calls to methods from the `junit.framework.Assert`, `org.junit.Assert`, or `org.junit.Assume`\nclasses inside JUnit 5 tests.\n\nAlthough the tests work properly, migration to `org.junit.jupiter.api.Assertions`/`org.junit.jupiter.api.Assumptions`\nwill help you avoid dependencies on old JUnit version.\n\n**Example:**\n\n\n      import org.junit.Assert;\n      import org.junit.jupiter.api.Test;\n\n      public class MyTest {\n        @Test\n        public void simpleTest() {\n          Assert.assertEquals(4, 2 + 2);\n        }\n      }\n\nAfter the quick-fix is applied:\n\n\n      import org.junit.jupiter.api.Assertions;\n      import org.junit.jupiter.api.Test;\n\n      public class MyTest {\n        @Test\n        public void simpleTest() {\n          Assertions.assertEquals(4, 2 + 2);\n        }\n      }\n\nInspection ID: JUnit5AssertionsConverter"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JUnit5AssertionsConverter",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JUnit",
                      "index": 76,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ParameterizedParametersStaticCollection",
                "shortDescription": {
                  "text": "Parameterized test class without data provider method"
                },
                "fullDescription": {
                  "text": "Reports JUnit 4 parameterized test classes that are annotated with '@RunWith(Parameterized.class)' but either do not include a data provider method annotated with '@Parameterized.Parameters' or this method has an incorrect signature. Such test classes cannot be run. The data provider method should be 'public' and 'static' and have a return type of 'Iterable' or 'Object[]'. Suggests creating an empty parameter provider method or changing the signature of the incorrect data provider method. Example: '@RunWith(Parameterized.class)\n  public class ImportantTest {\n    private int input;\n    private int expected;\n\n    ImportantTest(int input, int expected) {\n      this.input = input;\n      this.expected = expected;\n    }\n\n    // ... test cases\n  }' After the quick-fix is applied: '@RunWith(Parameterized.class)\n  public class ImportantTest {\n    private int input;\n    private int expected;\n\n    ImportantTest(int input, int expected) {\n      this.input = input;\n      this.expected = expected;\n    }\n\n    @Parameters\n    public static Iterable<Object[]> parameters() {\n      return null;\n    }\n\n    // ... test cases\n  }' Inspection ID: ParameterizedParametersStaticCollection",
                  "markdown": "Reports JUnit 4 [parameterized test](https://github.com/junit-team/junit4/wiki/parameterized-tests) classes that are annotated with `@RunWith(Parameterized.class)` but either do not include a data provider method annotated with `@Parameterized.Parameters` or this method has an incorrect signature. Such test classes cannot be run. The data provider method should be `public` and `static` and have a return type of `Iterable` or `Object[]`.\n\nSuggests creating an empty parameter provider method or changing the signature of the incorrect data provider method.\n\n**Example:**\n\n\n\n      @RunWith(Parameterized.class)\n      public class ImportantTest {\n        private int input;\n        private int expected;\n\n        ImportantTest(int input, int expected) {\n          this.input = input;\n          this.expected = expected;\n        }\n\n        // ... test cases\n      }\n\nAfter the quick-fix is applied:\n\n\n      @RunWith(Parameterized.class)\n      public class ImportantTest {\n        private int input;\n        private int expected;\n\n        ImportantTest(int input, int expected) {\n          this.input = input;\n          this.expected = expected;\n        }\n\n        @Parameters\n        public static Iterable<Object[]> parameters() {\n          return null;\n        }\n\n        // ... test cases\n      }\n\nInspection ID: ParameterizedParametersStaticCollection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ParameterizedParametersStaticCollection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JUnit",
                      "index": 76,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Junit4RunWithInspection",
                "shortDescription": {
                  "text": "'@RunWith' annotation already exists in a parent class"
                },
                "fullDescription": {
                  "text": "Reports when parent and child classes in a JUnit test hierarchy are annotated with '@RunWith'. It can lead to unexpected testing behavior. Example: '@RunWith(Suite.class)\n  @SuiteClasses(MySuiteClass.class)\n  public abstract Parent {\n  }\n\n  @RunWith(Parameterized.class)\n  public MyTest {\n  }' New in 2024.1 Inspection ID: Junit4RunWithInspection",
                  "markdown": "Reports when parent and child classes in a JUnit test hierarchy are annotated with `@RunWith`. It can lead to unexpected testing behavior.\n\n**Example:**\n\n\n      @RunWith(Suite.class)\n      @SuiteClasses(MySuiteClass.class)\n      public abstract Parent {\n      }\n\n      @RunWith(Parameterized.class)\n      public MyTest {\n      }\n\n\nNew in 2024.1\n\nInspection ID: Junit4RunWithInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "Junit4RunWithInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JUnit",
                      "index": 76,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Junit4Converter",
                "shortDescription": {
                  "text": "JUnit 3 test can be JUnit 4"
                },
                "fullDescription": {
                  "text": "Reports JUnit 3 test classes that can be converted to JUnit 4 test classes. Example: 'public class MainTestCase extends junit.framework.TestCase {\n    public void test() {\n      Assert.assertTrue(true);\n    }\n  }' After the quick-fix is applied: 'public class MainTestCase {\n    @org.junit.Test\n    public void test() {\n      Assert.assertTrue(true);\n    }\n  }' This inspection only reports if the language level of the project or module is 5 or higher, and JUnit 4 is available on the classpath. Inspection ID: Junit4Converter",
                  "markdown": "Reports JUnit 3 test classes that can be converted to JUnit 4 test classes.\n\n**Example:**\n\n\n      public class MainTestCase extends junit.framework.TestCase {\n        public void test() {\n          Assert.assertTrue(true);\n        }\n      }\n\nAfter the quick-fix is applied:\n\n\n      public class MainTestCase {\n        @org.junit.Test\n        public void test() {\n          Assert.assertTrue(true);\n        }\n      }\n\nThis inspection only reports if the language level of the project or module is 5 or higher, and JUnit 4 is available on the classpath.\n\nInspection ID: Junit4Converter"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "Junit4Converter",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JUnit",
                      "index": 76,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MigrateAssertToMatcherAssert",
                "shortDescription": {
                  "text": "JUnit assertion can be 'assertThat()' call"
                },
                "fullDescription": {
                  "text": "Reports calls to 'Assert.assertEquals()', 'Assert.assertTrue()', etc. methods which can be migrated to Hamcrest declarative style 'Assert.assertThat()' calls. For example: 'public class SubstantialTest {\n    @Test\n    public void testContents(Collection<String> c, String s) {\n      Assert.assertTrue(c.contains(s));\n      Assert.assertEquals(c, s);\n      Assert.assertNotNull(c);\n      Assert.assertNull(c);\n      Assert.assertFalse(c.contains(s));\n    }\n  }' A quick-fix is provided to perform the migration: 'public class SubstantialTest {\n    @Test\n    public void testContents(Collection<String> c, String s) {\n      assertThat(c, hasItem(o));\n      assertThat(o, is(c));\n      assertThat(c, notNullValue());\n      assertThat(c, nullValue());\n      assertThat(c, not(hasItem(o)));\n    }\n  }' This inspection requires that the Hamcrest library is available on the classpath. Use the Statically import matcher's methods option to specify if you want the quick-fix to statically import the Hamcrest matcher methods. Inspection ID: MigrateAssertToMatcherAssert",
                  "markdown": "Reports calls to `Assert.assertEquals()`, `Assert.assertTrue()`, etc. methods which can be migrated to Hamcrest declarative style `Assert.assertThat()` calls.\n\nFor example:\n\n\n      public class SubstantialTest {\n        @Test\n        public void testContents(Collection<String> c, String s) {\n          Assert.assertTrue(c.contains(s));\n          Assert.assertEquals(c, s);\n          Assert.assertNotNull(c);\n          Assert.assertNull(c);\n          Assert.assertFalse(c.contains(s));\n        }\n      }\n\nA quick-fix is provided to perform the migration:\n\n\n      public class SubstantialTest {\n        @Test\n        public void testContents(Collection<String> c, String s) {\n          assertThat(c, hasItem(o));\n          assertThat(o, is(c));\n          assertThat(c, notNullValue());\n          assertThat(c, nullValue());\n          assertThat(c, not(hasItem(o)));\n        }\n      }\n\nThis inspection requires that the Hamcrest library is available on the classpath.\n\nUse the **Statically import matcher's methods** option to specify if you want the quick-fix to statically import the Hamcrest matcher methods.\n\nInspection ID: MigrateAssertToMatcherAssert"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MigrateAssertToMatcherAssert",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JUnit",
                      "index": 76,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "Lombook Plugin",
            "version": "253.22441.33",
            "rules": [
              {
                "id": "RedundantModifiersUtilityClassLombok",
                "shortDescription": {
                  "text": "@UtilityClass modifiers"
                },
                "fullDescription": {
                  "text": "Reports unneeded modifiers for classes annotated with '@UtilityClass'. Inspection ID: RedundantModifiersUtilityClassLombok",
                  "markdown": "Reports unneeded modifiers for classes annotated with `@UtilityClass`.\n\nInspection ID: RedundantModifiersUtilityClassLombok"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RedundantModifiersUtilityClassLombok",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Lombok/Redundant modifiers",
                      "index": 80,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringQualifierCopyableLombok",
                "shortDescription": {
                  "text": "@Qualifier not copyable by Lombok"
                },
                "fullDescription": {
                  "text": "Reports Spring '@Qualifier' annotations on class fields that are ignored by the corresponding Lombok '@RequiredArgsConstructor' and '@AllArgsConstructor' annotations. The generated constructors will not receive the '@Qualifier' annotation without a 'lombok.copyableAnnotations' definition inside the 'lombok.config' file. Inspection ID: SpringQualifierCopyableLombok",
                  "markdown": "Reports Spring `@Qualifier` annotations on class fields that are ignored by the corresponding Lombok `@RequiredArgsConstructor` and `@AllArgsConstructor` annotations. The generated constructors will not receive the `@Qualifier` annotation without a `lombok.copyableAnnotations` definition inside the `lombok.config` file.\n\nInspection ID: SpringQualifierCopyableLombok"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SpringQualifierCopyableLombok",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Lombok",
                      "index": 79,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantModifiersValLombok",
                "shortDescription": {
                  "text": "Unnecessary final before 'val'"
                },
                "fullDescription": {
                  "text": "Reports unneeded 'final' modifiers before 'val'. Inspection ID: RedundantModifiersValLombok",
                  "markdown": "Reports unneeded `final` modifiers before `val`.\n\nInspection ID: RedundantModifiersValLombok"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RedundantModifiersValLombok",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Lombok/Redundant modifiers",
                      "index": 80,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LombokFlagUsage",
                "shortDescription": {
                  "text": "Lombok flag usages"
                },
                "fullDescription": {
                  "text": "IntelliJ Lombok flagUsage Inspection This inspection supports every 'flagUsage' configuration specified in the 'lombok.config' file. It issue warnings or errors inside IntelliJ when a Lombok feature is used that is configured to be flagged. This proactive feedback helps maintain code standards and ensures that only approved Lombok features are utilized. Supported flagUsage Configurations Configuration Key Description lombok.anyConstructor.flagUsage Emit a warning or error if any of the XxxArgsConstructor annotations are used. lombok.allArgsConstructor.flagUsage Emit a warning or error if '@AllArgsConstructor' is used. lombok.noArgsConstructor.flagUsage Emit a warning or error if '@NoArgsConstructor' is used. lombok.requiredArgsConstructor.flagUsage Emit a warning or error if '@RequiredArgsConstructor' is used. lombok.data.flagUsage Emit a warning or error if '@Data' is used. lombok.value.flagUsage Emit a warning or error if '@Value' is used. lombok.getter.flagUsage Emit a warning or error if '@Getter' is used. lombok.getter.lazy.flagUsage Emit a warning or error if '@Getter(lazy=true)' is used. lombok.setter.flagUsage Emit a warning or error if '@Setter' is used. lombok.equalsAndHashCode.flagUsage Emit a warning or error if '@EqualsAndHashCode' is used. lombok.toString.flagUsage Emit a warning or error if '@ToString' is used. lombok.builder.flagUsage Emit a warning or error if '@Builder' is used. lombok.cleanup.flagUsage Emit a warning or error if '@Cleanup' is used. lombok.delegate.flagUsage Emit a warning or error if '@Delegate' is used. lombok.nonNull.flagUsage Emit a warning or error if '@NonNull' is used. lombok.sneakyThrows.flagUsage Emit a warning or error if '@SneakyThrows' is used. lombok.synchronized.flagUsage Emit a warning or error if '@Synchronized' is used. lombok.val.flagUsage Emit a warning or error if the language keyword 'val' is used. lombok.var.flagUsage Emit a warning or error if the language keyword 'var' is used. lombok.with.flagUsage Emit a warning or error if '@With' is used. lombok.log.flagUsage Emit a warning or error if any log annotation is used. lombok.log.apacheCommons.flagUsage Emit a warning or error if '@CommonsLog' is used. lombok.log.javaUtilLogging.flagUsage Emit a warning or error if '@Log' is used. lombok.log.log4j.flagUsage Emit a warning or error if '@Log4j' is used. lombok.log.log4j2.flagUsage Emit a warning or error if '@Log4j2' is used. lombok.log.slf4j.flagUsage Emit a warning or error if '@Slf4j' is used. lombok.log.xslf4j.flagUsage Emit a warning or error if '@XSlf4j' is used. lombok.log.jbosslog.flagUsage Emit a warning or error if '@JBossLog' is used. lombok.log.flogger.flagUsage Emit a warning or error if '@Flogger' is used. lombok.log.custom.flagUsage Emit a warning or error if '@CustomLog' is used. lombok.experimental.flagUsage Emit a warning or error if an experimental feature is used. lombok.accessors.flagUsage Emit a warning or error if '@Accessors' is used. lombok.extensionMethod.flagUsage Emit a warning or error if '@ExtensionMethod' is used. lombok.fieldDefaults.flagUsage Emit a warning or error if '@FieldDefaults' is used. lombok.helper.flagUsage Emit a warning or error if '@Helper' is used. lombok.locked.flagUsage Emit a warning or error if '@Locked' is used. lombok.onX.flagUsage Emit a warning or error if the 'onX' flag is used. lombok.utilityClass.flagUsage Emit a warning or error if '@UtilityClass' is used. lombok.fieldNameConstants.flagUsage Emit a warning or error if '@FieldNameConstants' is used. lombok.superBuilder.flagUsage Emit a warning or error if '@SuperBuilder' is used. lombok.withBy.flagUsage Emit a warning or error if '@WithBy' is used. lombok.jacksonized.flagUsage Emit a warning or error if '@Jacksonized' is used. lombok.standardException.flagUsage Emit a warning or error if '@StandardException' is used. Inspection ID: LombokFlagUsage",
                  "markdown": "IntelliJ Lombok flagUsage Inspection\n====================================\n\n\nThis inspection supports every `flagUsage` configuration specified in the `lombok.config` file. It issue warnings or errors inside IntelliJ when a Lombok feature is used that is configured to be flagged. This proactive feedback helps maintain code standards and ensures that only approved Lombok features are utilized.\n\nSupported flagUsage Configurations\n----------------------------------\n\n|            Configuration Key             |                                  Description                                   |\n|------------------------------------------|--------------------------------------------------------------------------------|\n| lombok.anyConstructor.flagUsage          | Emit a warning or error if any of the XxxArgsConstructor annotations are used. |\n| lombok.allArgsConstructor.flagUsage      | Emit a warning or error if `@AllArgsConstructor` is used.                      |\n| lombok.noArgsConstructor.flagUsage       | Emit a warning or error if `@NoArgsConstructor` is used.                       |\n| lombok.requiredArgsConstructor.flagUsage | Emit a warning or error if `@RequiredArgsConstructor` is used.                 |\n| lombok.data.flagUsage                    | Emit a warning or error if `@Data` is used.                                    |\n| lombok.value.flagUsage                   | Emit a warning or error if `@Value` is used.                                   |\n| lombok.getter.flagUsage                  | Emit a warning or error if `@Getter` is used.                                  |\n| lombok.getter.lazy.flagUsage             | Emit a warning or error if `@Getter(lazy=true)` is used.                       |\n| lombok.setter.flagUsage                  | Emit a warning or error if `@Setter` is used.                                  |\n| lombok.equalsAndHashCode.flagUsage       | Emit a warning or error if `@EqualsAndHashCode` is used.                       |\n| lombok.toString.flagUsage                | Emit a warning or error if `@ToString` is used.                                |\n| lombok.builder.flagUsage                 | Emit a warning or error if `@Builder` is used.                                 |\n| lombok.cleanup.flagUsage                 | Emit a warning or error if `@Cleanup` is used.                                 |\n| lombok.delegate.flagUsage                | Emit a warning or error if `@Delegate` is used.                                |\n| lombok.nonNull.flagUsage                 | Emit a warning or error if `@NonNull` is used.                                 |\n| lombok.sneakyThrows.flagUsage            | Emit a warning or error if `@SneakyThrows` is used.                            |\n| lombok.synchronized.flagUsage            | Emit a warning or error if `@Synchronized` is used.                            |\n| lombok.val.flagUsage                     | Emit a warning or error if the language keyword `val` is used.                 |\n| lombok.var.flagUsage                     | Emit a warning or error if the language keyword `var` is used.                 |\n| lombok.with.flagUsage                    | Emit a warning or error if `@With` is used.                                    |\n| lombok.log.flagUsage                     | Emit a warning or error if any log annotation is used.                         |\n| lombok.log.apacheCommons.flagUsage       | Emit a warning or error if `@CommonsLog` is used.                              |\n| lombok.log.javaUtilLogging.flagUsage     | Emit a warning or error if `@Log` is used.                                     |\n| lombok.log.log4j.flagUsage               | Emit a warning or error if `@Log4j` is used.                                   |\n| lombok.log.log4j2.flagUsage              | Emit a warning or error if `@Log4j2` is used.                                  |\n| lombok.log.slf4j.flagUsage               | Emit a warning or error if `@Slf4j` is used.                                   |\n| lombok.log.xslf4j.flagUsage              | Emit a warning or error if `@XSlf4j` is used.                                  |\n| lombok.log.jbosslog.flagUsage            | Emit a warning or error if `@JBossLog` is used.                                |\n| lombok.log.flogger.flagUsage             | Emit a warning or error if `@Flogger` is used.                                 |\n| lombok.log.custom.flagUsage              | Emit a warning or error if `@CustomLog` is used.                               |\n| lombok.experimental.flagUsage            | Emit a warning or error if an experimental feature is used.                    |\n| lombok.accessors.flagUsage               | Emit a warning or error if `@Accessors` is used.                               |\n| lombok.extensionMethod.flagUsage         | Emit a warning or error if `@ExtensionMethod` is used.                         |\n| lombok.fieldDefaults.flagUsage           | Emit a warning or error if `@FieldDefaults` is used.                           |\n| lombok.helper.flagUsage                  | Emit a warning or error if `@Helper` is used.                                  |\n| lombok.locked.flagUsage                  | Emit a warning or error if `@Locked` is used.                                  |\n| lombok.onX.flagUsage                     | Emit a warning or error if the `onX` flag is used.                             |\n| lombok.utilityClass.flagUsage            | Emit a warning or error if `@UtilityClass` is used.                            |\n| lombok.fieldNameConstants.flagUsage      | Emit a warning or error if `@FieldNameConstants` is used.                      |\n| lombok.superBuilder.flagUsage            | Emit a warning or error if `@SuperBuilder` is used.                            |\n| lombok.withBy.flagUsage                  | Emit a warning or error if `@WithBy` is used.                                  |\n| lombok.jacksonized.flagUsage             | Emit a warning or error if `@Jacksonized` is used.                             |\n| lombok.standardException.flagUsage       | Emit a warning or error if `@StandardException` is used.                       |\n\nInspection ID: LombokFlagUsage"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "LombokFlagUsage",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Lombok",
                      "index": 79,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LombokGetterMayBeUsed",
                "shortDescription": {
                  "text": "Lombok @Getter may be used"
                },
                "fullDescription": {
                  "text": "Reports standard getter method that can be replaced by the lombok '@Getter' annotation. Example: 'import java.util.Date;\n\n  public class MyClass {\n    /**\n     * The process date.\n     */\n    private Date processDate;\n\n    /**\n     * Returns the date.\n     *\n     * @return The date\n     */\n    public Date getProcessDate() {\n      return processDate;\n    }\n  }' After the quick-fix/cleanup is applied: 'import lombok.Getter;\n  import java.util.Date;\n\n  @Getter\n  public class MyClass {\n    /**\n     * The process date.\n     * -- GETTER --\n     * Returns the date.\n     *\n     * @return The date\n     */\n    private Date processDate;\n  }' It only reports when the lombok library is configured. To unlombok, see the lombok site. Inspection ID: LombokGetterMayBeUsed New in 2023.2",
                  "markdown": "Reports standard getter method that can be replaced by the lombok `@Getter` annotation.\n\nExample:\n\n\n      import java.util.Date;\n\n      public class MyClass {\n        /**\n         * The process date.\n         */\n        private Date processDate;\n\n        /**\n         * Returns the date.\n         *\n         * @return The date\n         */\n        public Date getProcessDate() {\n          return processDate;\n        }\n      }\n\nAfter the quick-fix/cleanup is applied:\n\n\n      import lombok.Getter;\n      import java.util.Date;\n\n      @Getter\n      public class MyClass {\n        /**\n         * The process date.\n         * -- GETTER --\n         * Returns the date.\n         *\n         * @return The date\n         */\n        private Date processDate;\n      }\n\nIt only reports when the lombok library is configured. To unlombok, see the lombok site.\n\nInspection ID: LombokGetterMayBeUsed\n\nNew in 2023.2"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "LombokGetterMayBeUsed",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Verbose or redundant code constructs",
                      "index": 37,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantSlf4jDefinition",
                "shortDescription": {
                  "text": "@Slf4j"
                },
                "fullDescription": {
                  "text": "Reports explicitly defined Slf4j Loggers. The '@Slf4j' annotation can be used instead. Inspection ID: RedundantSlf4jDefinition",
                  "markdown": "Reports explicitly defined *Slf4j* Loggers. The `@Slf4j` annotation can be used instead.\n\nInspection ID: RedundantSlf4jDefinition"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RedundantSlf4jDefinition",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Lombok/Redundant definitions",
                      "index": 158,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantModifiersValueLombok",
                "shortDescription": {
                  "text": "@Value modifiers"
                },
                "fullDescription": {
                  "text": "Reports unneeded modifiers for classes annotated with '@Value'. Inspection ID: RedundantModifiersValueLombok",
                  "markdown": "Reports unneeded modifiers for classes annotated with `@Value`.\n\nInspection ID: RedundantModifiersValueLombok"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RedundantModifiersValueLombok",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Lombok/Redundant modifiers",
                      "index": 80,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StaticMethodImportLombok",
                "shortDescription": {
                  "text": "Using static import for Lombok-generated methods"
                },
                "fullDescription": {
                  "text": "Reports usages of static imports for Lombok's generated methods. This will fail on compilation with javac. The reason is that static methods are resolved before the lombok annotation processor kicks in. At this time javac uses the original code before the one that should have been generated by the annotation processor, then javac of course report the missing symbols (generated methods). See for more details Inspection ID: StaticMethodImportLombok",
                  "markdown": "Reports usages of static imports for Lombok's generated methods.  \n\n\nThis will fail on compilation with javac. The reason is that static methods are resolved before the lombok annotation processor kicks in.\nAt this time javac uses the original code before the one that should have been generated by the annotation processor, then javac of course\nreport the missing symbols (generated methods).\nSee for more [details](https://github.com/projectlombok/lombok/issues/2044)\n\nInspection ID: StaticMethodImportLombok"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "StaticMethodImportLombok",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Lombok",
                      "index": 79,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LombokSetterMayBeUsed",
                "shortDescription": {
                  "text": "Lombok @Setter may be used"
                },
                "fullDescription": {
                  "text": "Reports standard setter method that can be replaced by the lombok '@Setter' annotation. Example: 'import java.util.Date;\n\n  public class MyClass {\n    /**\n     * The process date.\n     */\n    private Date processDate;\n\n    /**\n     * Sets the date.\n     *\n     * @param The date\n     */\n    public void setProcessDate(Date param) {\n      processDate = param;\n    }\n  }' After the quick-fix/cleanup is applied: 'import lombok.Setter;\n  import java.util.Date;\n\n  @Setter\n  public class MyClass {\n    /**\n     * The process date.\n     * -- SETTER --\n     * Sets the date.\n     *\n     * @param The date\n     */\n    private Date processDate;\n  }' It only reports when the lombok library is configured. To unlombok, see the lombok site. Inspection ID: LombokSetterMayBeUsed New in 2023.2",
                  "markdown": "Reports standard setter method that can be replaced by the lombok `@Setter` annotation.\n\nExample:\n\n\n      import java.util.Date;\n\n      public class MyClass {\n        /**\n         * The process date.\n         */\n        private Date processDate;\n\n        /**\n         * Sets the date.\n         *\n         * @param The date\n         */\n        public void setProcessDate(Date param) {\n          processDate = param;\n        }\n      }\n\nAfter the quick-fix/cleanup is applied:\n\n\n      import lombok.Setter;\n      import java.util.Date;\n\n      @Setter\n      public class MyClass {\n        /**\n         * The process date.\n         * -- SETTER --\n         * Sets the date.\n         *\n         * @param The date\n         */\n        private Date processDate;\n      }\n\nIt only reports when the lombok library is configured. To unlombok, see the lombok site.\n\nInspection ID: LombokSetterMayBeUsed\n\nNew in 2023.2"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "LombokSetterMayBeUsed",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Verbose or redundant code constructs",
                      "index": 37,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Lombok",
                "shortDescription": {
                  "text": "Lombok annotations"
                },
                "fullDescription": {
                  "text": "Offers general inspections for Lombok annotations. Warnings and errors reported by this inspection aim to match 1:1 the warnings and errors reported by the Lombok annotation processor at compile-time, such as: Redundantly applied annotation (reported as a warning) Example: '@ToString\n      class Person {\n        final String name;\n        final int age;\n\n        @Override\n        public String toString() {\n            return \"Person{name='\" + name + \"', age=\" + age + '}';\n        }\n      }' Quick-fix suggests removing the redundant annotation. Incorrectly applied annotation (reported as an error) Example: '@Value\n      record Person(String name, int age) {}' Quick-fix suggests removing the invalid annotation. Inspection ID: Lombok",
                  "markdown": "Offers general inspections for Lombok annotations.\n\n\nWarnings and errors reported by this inspection aim to match 1:1 the warnings and errors reported\nby the Lombok annotation processor at compile-time, such as:\n\n* Redundantly applied annotation (reported as a warning) **Example:**\n\n\n            @ToString\n            class Person {\n              final String name;\n              final int age;\n\n              @Override\n              public String toString() {\n                  return \"Person{name='\" + name + \"', age=\" + age + '}';\n              }\n            }\n          \n  Quick-fix suggests removing the redundant annotation.\n* Incorrectly applied annotation (reported as an error) **Example:**\n\n\n            @Value\n            record Person(String name, int age) {}\n          \n  Quick-fix suggests removing the invalid annotation.\n\nInspection ID: Lombok"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "Lombok",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Lombok",
                      "index": 79,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DeprecatedLombok",
                "shortDescription": {
                  "text": "Deprecated Lombok annotations"
                },
                "fullDescription": {
                  "text": "Reports deprecated Lombok annotations and suggests quick-fixes to replace them with the ones promoted to the main package. Inspection ID: DeprecatedLombok",
                  "markdown": "Reports deprecated Lombok annotations and suggests quick-fixes to replace them with the ones promoted to the main package.\n\nInspection ID: DeprecatedLombok"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "DeprecatedLombok",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Lombok",
                      "index": 79,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.javaee.web",
            "version": "253.22441.33",
            "rules": [
              {
                "id": "MimeType",
                "shortDescription": {
                  "text": "MIME type"
                },
                "fullDescription": {
                  "text": "Lets you control MIME type name validity. Inspection ID: MimeType",
                  "markdown": "Lets you control MIME type name validity.\n\nInspection ID: MimeType"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "MimeType",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java EE",
                      "index": 68,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "WebWarnings",
                "shortDescription": {
                  "text": "Web.xml warnings"
                },
                "fullDescription": {
                  "text": "Reports duplicated welcome-files listed in the descriptor for deploying a Web Module to a server. Example: '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  <!DOCTYPE web-app PUBLIC \"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN\" \"http://java.sun.com/dtd/web-app_2_3.dtd\">\n  <web-app>\n    <welcome-file-list>\n      <welcome-file>\n        Welcome1.jsp\n      </welcome-file>\n      <welcome-file>\n        /Welcome1.jsp // Error: duplicated welcome-file\n      </welcome-file>\n      <welcome-file>\n        Welcome3.jsp\n      </welcome-file>\n    </welcome-file-list>\n  </web-app>' Inspection ID: WebWarnings",
                  "markdown": "Reports duplicated welcome-files listed in the descriptor for deploying a Web Module to a server.\n\n**Example:**\n\n\n      <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n      <!DOCTYPE web-app PUBLIC \"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN\" \"http://java.sun.com/dtd/web-app_2_3.dtd\">\n      <web-app>\n        <welcome-file-list>\n          <welcome-file>\n            Welcome1.jsp\n          </welcome-file>\n          <welcome-file>\n            /Welcome1.jsp // Error: duplicated welcome-file\n          </welcome-file>\n          <welcome-file>\n            Welcome3.jsp\n          </welcome-file>\n        </welcome-file-list>\n      </web-app>\n\nInspection ID: WebWarnings"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "WebWarnings",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java EE",
                      "index": 68,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ServletWithoutMappingInspection",
                "shortDescription": {
                  "text": "Servlet mapping"
                },
                "fullDescription": {
                  "text": "Reports servlets without associated mappings. Example: '<web-app>\n    <servlet>\n      <servlet-name>foo</servlet-name> // Error: servlet should have a mapping\n      <servlet-class>javax.servlet.Servlet</servlet-class>\n    </servlet>\n  \n    <filter>\n      <filter-name>bar</filter-name> // Error: filter should have a mapping\n      <filter-class>java.lang.String</filter-class>\n    </filter>\n  </web-app>' Inspection ID: ServletWithoutMappingInspection",
                  "markdown": "Reports servlets without associated mappings.\n\n**Example:**\n\n\n      <web-app>\n        <servlet>\n          <servlet-name>foo</servlet-name> // Error: servlet should have a mapping\n          <servlet-class>javax.servlet.Servlet</servlet-class>\n        </servlet>\n      \n        <filter>\n          <filter-name>bar</filter-name> // Error: filter should have a mapping\n          <filter-class>java.lang.String</filter-class>\n        </filter>\n      </web-app>\n\nInspection ID: ServletWithoutMappingInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "ServletWithoutMappingInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java EE",
                      "index": 68,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "WebProperties",
                "shortDescription": {
                  "text": "Web.xml errors"
                },
                "fullDescription": {
                  "text": "Reports the following problems in descriptors that are used to deploy your Web Module to a server: References to non-instantiable classes References to classes that do not extend required class References to classes with inappropriate scope Empty tag and attribute values Tag and attribute values that do not match required pattern (for example, Java Identifiers) Tags that do not include required children tags or attributes Tags that define objects with duplicate names Example: '<web-app>\n  <filter-mapping>\n    <filter-name>CustomFilter</filter-name> // Error: either servlet-name or url-pattern child tag should be defined\n  </filter-mapping>\n  <servlet-mapping>\n    <servlet-name>CustomServletName</servlet-name>\n    <url-pattern>/ baseUrl</url-pattern> // Error: URI-pattern must not contain white spaces\n  </servlet-mapping>\n</web-app>' Inspection ID: WebProperties",
                  "markdown": "Reports the following problems in descriptors that are used to deploy your Web Module to a server:\n\n* References to non-instantiable classes\n* References to classes that do not extend required class\n* References to classes with inappropriate scope\n* Empty tag and attribute values\n* Tag and attribute values that do not match required pattern (for example, Java Identifiers)\n* Tags that do not include required children tags or attributes\n* Tags that define objects with duplicate names\n\n**Example:**\n\n\n    <web-app>\n      <filter-mapping>\n        <filter-name>CustomFilter</filter-name> // Error: either servlet-name or url-pattern child tag should be defined\n      </filter-mapping>\n      <servlet-mapping>\n        <servlet-name>CustomServletName</servlet-name>\n        <url-pattern>/ baseUrl</url-pattern> // Error: URI-pattern must not contain white spaces\n      </servlet-mapping>\n    </web-app>\n\nInspection ID: WebProperties"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "WebProperties",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java EE",
                      "index": 68,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.micronaut",
            "version": "253.22441.33",
            "rules": [
              {
                "id": "MnUnresolvedPathVariable",
                "shortDescription": {
                  "text": "Unresolved @PathVariable reference"
                },
                "fullDescription": {
                  "text": "Reports '@PathVariable' parameters that are declared in a method signature and missing in the URL path or vise versa. The quick-fix adds the missing parameter. Example: '@Get(\"/path/{myVariable}/\")\n  public String handler(@PathVariable String name_is_not_equal_to_myVariable) {\n    return \"...\";\n  }' After the quick-fix is applied the result looks like: '@Get(\"/path/{myVariable}/\")\n  public String handler(@PathVariable String myVariable) {\n    return \"...\";\n  }' Inspection ID: MnUnresolvedPathVariable",
                  "markdown": "Reports `@PathVariable` parameters that are declared in a method signature and missing in the URL path or vise versa.\nThe quick-fix adds the missing parameter.\n\n**Example:**\n\n\n      @Get(\"/path/{myVariable}/\")\n      public String handler(@PathVariable String name_is_not_equal_to_myVariable) {\n        return \"...\";\n      }\n\nAfter the quick-fix is applied the result looks like:\n\n\n      @Get(\"/path/{myVariable}/\")\n      public String handler(@PathVariable String myVariable) {\n        return \"...\";\n      }\n\nInspection ID: MnUnresolvedPathVariable"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MnUnresolvedPathVariable",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Micronaut",
                      "index": 81,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MicronautDataRepositoryMethodReturnType",
                "shortDescription": {
                  "text": "Incorrect repository method return type"
                },
                "fullDescription": {
                  "text": "Reports incorrect Micronaut Data repository method return types. The following return types are supported: void Primitive types Simple types 'java.util.List' or any common 'Iterable' type 'java.util.stream.Stream' 'java.util.Optional' 'io.micronaut.data.model.Page' 'io.micronaut.data.model.Slice' 'java.util.concurrent.Future' or 'java.util.concurrent.CompletableFuture' A Reactive Streams compatible type, such as 'Publisher', 'Single', 'Maybe', 'Flux', 'Mono', and so on Inspection ID: MicronautDataRepositoryMethodReturnType",
                  "markdown": "Reports incorrect Micronaut Data [repository method\nreturn types.](https://micronaut-projects.github.io/micronaut-data/latest/guide/#querying)\n\nThe following return types are supported:\n* void\n* Primitive types\n* Simple types\n* `java.util.List` or any common `Iterable` type\n* `java.util.stream.Stream`\n* `java.util.Optional`\n* `io.micronaut.data.model.Page`\n* `io.micronaut.data.model.Slice`\n* `java.util.concurrent.Future` or `java.util.concurrent.CompletableFuture`\n* A Reactive Streams compatible type, such as `Publisher`, `Single`, `Maybe`, `Flux`, `Mono`, and so on\n\nInspection ID: MicronautDataRepositoryMethodReturnType"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MicronautDataRepositoryMethodReturnType",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Micronaut/Micronaut Data",
                      "index": 99,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MnYamlConfig",
                "shortDescription": {
                  "text": "Micronaut application.yaml"
                },
                "fullDescription": {
                  "text": "Reports deprecated configuration keys and invalid values in Micronaut application '.yaml' configuration files. Inspection ID: MnYamlConfig",
                  "markdown": "Reports deprecated configuration keys and invalid values in Micronaut application `.yaml` configuration files.\n\nInspection ID: MnYamlConfig"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MnYamlConfig",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Micronaut",
                      "index": 81,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MnCacheAnnotationParameters",
                "shortDescription": {
                  "text": "Unresolved cache annotation parameter reference"
                },
                "fullDescription": {
                  "text": "Reports Micronaut Cache annotations where the value of the 'parameters' attribute contains names of undefined method parameters. The following annotations are supported: 'io.micronaut.cache.annotation.Cacheable' 'io.micronaut.cache.annotation.CachePut' 'io.micronaut.cache.annotation.CacheInvalidate' Example: '@CachePut(parameters = \"myParameter\") // Error: Cannot resolve symbol 'myParameter'\n  public String cachedMethod(String name_is_not_equal_to_myParameter) {\n    return \"...\";\n  }' Inspection ID: MnCacheAnnotationParameters",
                  "markdown": "Reports Micronaut Cache annotations where the value of the `parameters` attribute contains names of undefined method\nparameters.\n\nThe following annotations are supported:\n\n* `io.micronaut.cache.annotation.Cacheable`\n* `io.micronaut.cache.annotation.CachePut`\n* `io.micronaut.cache.annotation.CacheInvalidate`\n\n**Example:**\n\n\n      @CachePut(parameters = \"myParameter\") // Error: Cannot resolve symbol 'myParameter'\n      public String cachedMethod(String name_is_not_equal_to_myParameter) {\n        return \"...\";\n      }\n\nInspection ID: MnCacheAnnotationParameters"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "MnCacheAnnotationParameters",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Micronaut",
                      "index": 81,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MicronautDataRepositoryMethodParameters",
                "shortDescription": {
                  "text": "Incorrect repository method parameter"
                },
                "fullDescription": {
                  "text": "Reports incorrect Micronaut Data repository method parameter types. Example: 'public class Person {\n    private int id;\n    private String lastname;\n    private Address address;\n  }\n\n  public class Address {\n    private int zipCode;\n  }\n\n  public interface CustomerRepository extends CrudRepository<Person, Integer> {\n    List<Person> findByAddress(String lastname);  // 'Address' type expected\n    List<Person> findByAddressZipCode(String str);   // 'int' type expected\n  }' Inspection ID: MicronautDataRepositoryMethodParameters",
                  "markdown": "Reports incorrect Micronaut Data repository method parameter types.\n\n**Example:**\n\n\n      public class Person {\n        private int id;\n        private String lastname;\n        private Address address;\n      }\n\n      public class Address {\n        private int zipCode;\n      }\n\n      public interface CustomerRepository extends CrudRepository<Person, Integer> {\n        List<Person> findByAddress(String lastname);  // 'Address' type expected\n        List<Person> findByAddressZipCode(String str);   // 'int' type expected\n      }\n\nInspection ID: MicronautDataRepositoryMethodParameters"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MicronautDataRepositoryMethodParameters",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Micronaut/Micronaut Data",
                      "index": 99,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MnPropertiesConfig",
                "shortDescription": {
                  "text": "Micronaut application.properties"
                },
                "fullDescription": {
                  "text": "Reports deprecated configuration keys and invalid values in Micronaut application '.properties' configuration files. Inspection ID: MnPropertiesConfig",
                  "markdown": "Reports deprecated configuration keys and invalid values in Micronaut application `.properties` configuration files.\n\nInspection ID: MnPropertiesConfig"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MnPropertiesConfig",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Micronaut",
                      "index": 81,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MnInjectionPoints",
                "shortDescription": {
                  "text": "Unresolved cache annotation parameter reference"
                },
                "fullDescription": {
                  "text": "Reports injection points in bean classes that have missing or ambiguous dependencies. Example: 'interface Engine {}\n\n  @Singleton\n  class GasEngine implements Engine {}\n\n  @Singleton\n  class ElectricEngine implements Engine {}\n\n  @Singleton\n  class Car {\n\n    @Inject\n    Engine engine; // Ambiguous dependency: there are multiple beans that match the injection point\n  }' Inspection ID: MnInjectionPoints",
                  "markdown": "Reports injection points in bean classes that have missing or ambiguous dependencies.\n\n**Example:**\n\n\n      interface Engine {}\n\n      @Singleton\n      class GasEngine implements Engine {}\n\n      @Singleton\n      class ElectricEngine implements Engine {}\n\n      @Singleton\n      class Car {\n\n        @Inject\n        Engine engine; // Ambiguous dependency: there are multiple beans that match the injection point\n      }\n\nInspection ID: MnInjectionPoints"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MnInjectionPoints",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Micronaut",
                      "index": 81,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MicronautDataMethodInconsistency",
                "shortDescription": {
                  "text": "Incorrect repository method declaration"
                },
                "fullDescription": {
                  "text": "Reports Micronaut Data repository methods that do not match the query pattern criteria. Inspection ID: MicronautDataMethodInconsistency",
                  "markdown": "Reports Micronaut Data repository methods that do not match the [query pattern criteria](https://micronaut-projects.github.io/micronaut-data/latest/guide/#criteria).\n\nInspection ID: MicronautDataMethodInconsistency"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "MicronautDataMethodInconsistency",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Micronaut/Micronaut Data",
                      "index": 99,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MnELInspection",
                "shortDescription": {
                  "text": "Incorrect Micronaut Expression Language (MicronautEl) syntax"
                },
                "fullDescription": {
                  "text": "Reports syntax errors in the Micronaut Expression Language (MicronautEL) code, such as unresolved references. Example: 'import io.micronaut.context.annotation.Value;\nimport io.micronaut.http.annotation.Controller;\n\n@Controller(\"/owners\")\nclass OwnerController {\n    @Value(\"#{T(java.lang.Math).unknown()}\") // Cannot resolve method 'unknown'\n    double injectedValue;\n}' Inspection ID: MnELInspection",
                  "markdown": "Reports syntax errors in the Micronaut Expression Language (MicronautEL) code, such as unresolved references.\n\n**Example:**\n\n\n    import io.micronaut.context.annotation.Value;\n    import io.micronaut.http.annotation.Controller;\n\n    @Controller(\"/owners\")\n    class OwnerController {\n        @Value(\"#{T(java.lang.Math).unknown()}\") // Cannot resolve method 'unknown'\n        double injectedValue;\n    }\n\nInspection ID: MnELInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MnELInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Micronaut/Micronaut",
                      "index": 176,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "AngularJS",
            "version": "253.22441.33",
            "rules": [
              {
                "id": "AngularUndefinedTag",
                "shortDescription": {
                  "text": "Undefined tag"
                },
                "fullDescription": {
                  "text": "Reports a tag defined by a component or directive out of the current scope. Inspection ID: AngularUndefinedTag",
                  "markdown": "Reports a tag defined by a component or directive out of the current scope.\n\nInspection ID: AngularUndefinedTag"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularUndefinedTag",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 85,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularInvalidImportedOrDeclaredSymbol",
                "shortDescription": {
                  "text": "Invalid imported or declared symbol"
                },
                "fullDescription": {
                  "text": "Reports any symbol that is declared, imported or exported by an Angular module or standalone component that is not a module, component, directive, or pipe or can’t be used in the context of the property. Inspection ID: AngularInvalidImportedOrDeclaredSymbol",
                  "markdown": "Reports any symbol that is declared, imported or exported by an Angular module or standalone component that is not a module, component, directive, or pipe or can't be used in the context of the property.\n\nInspection ID: AngularInvalidImportedOrDeclaredSymbol"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularInvalidImportedOrDeclaredSymbol",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 85,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularIllegalForLoopTrackAccess",
                "shortDescription": {
                  "text": "Illegal @for loop access"
                },
                "fullDescription": {
                  "text": "Reports illegal access to the template variable within '@for' loop 'track' expression. Inspection ID: AngularIllegalForLoopTrackAccess",
                  "markdown": "Reports illegal access to the template variable within `@for` loop `track` expression.\n\nInspection ID: AngularIllegalForLoopTrackAccess"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularIllegalForLoopTrackAccess",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 85,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularAmbiguousComponentTag",
                "shortDescription": {
                  "text": "Ambiguous component tag"
                },
                "fullDescription": {
                  "text": "Reports a component that is matched on an embedded template element '<ng-template>' or multiple components matched on any other element. Inspection ID: AngularAmbiguousComponentTag",
                  "markdown": "Reports a component that is matched on an embedded template element `<ng-template>` or multiple components matched on any other element.\n\nInspection ID: AngularAmbiguousComponentTag"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularAmbiguousComponentTag",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 85,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularUndefinedModuleExport",
                "shortDescription": {
                  "text": "Undefined export from Angular module"
                },
                "fullDescription": {
                  "text": "Reports an export of an undeclared or unimported component, directive, or pipes from an Angular module. Inspection ID: AngularUndefinedModuleExport",
                  "markdown": "Reports an export of an undeclared or unimported component, directive, or pipes from an Angular module.\n\nInspection ID: AngularUndefinedModuleExport"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularUndefinedModuleExport",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 85,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularInvalidI18nAttribute",
                "shortDescription": {
                  "text": "Invalid i18n attribute"
                },
                "fullDescription": {
                  "text": "Reports a problem with a 'i18n-*' attribute. Inspection ID: AngularInvalidI18nAttribute",
                  "markdown": "Reports a problem with a `i18n-*` attribute.\n\nInspection ID: AngularInvalidI18nAttribute"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AngularInvalidI18nAttribute",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 85,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularIncorrectLetUsage",
                "shortDescription": {
                  "text": "Incorrect usage of @let declaration"
                },
                "fullDescription": {
                  "text": "Reports problems with @let declaration usages. Inspection ID: AngularIncorrectLetUsage",
                  "markdown": "Reports problems with @let declaration usages.\n\nInspection ID: AngularIncorrectLetUsage"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularIncorrectLetUsage",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 85,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularInvalidAnimationTriggerAssignment",
                "shortDescription": {
                  "text": "Invalid animation trigger assignment"
                },
                "fullDescription": {
                  "text": "Reports an invalid assignment of an animation trigger. To attach an animation to an element, use '[@triggerName]=\"expression\"' or an attribute without a value '@triggerName'. Inspection ID: AngularInvalidAnimationTriggerAssignment",
                  "markdown": "Reports an invalid assignment of an animation trigger. To attach an animation to an element, use `[@triggerName]=\"expression\"` or an attribute without a value `@triggerName`.\n\nInspection ID: AngularInvalidAnimationTriggerAssignment"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularInvalidAnimationTriggerAssignment",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 85,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularRecursiveModuleImportExport",
                "shortDescription": {
                  "text": "Recursive import or export of an Angular module or a standalone component"
                },
                "fullDescription": {
                  "text": "Reports a cyclic dependency between Angular modules or standalone components. Inspection ID: AngularRecursiveModuleImportExport",
                  "markdown": "Reports a cyclic dependency between Angular modules or standalone components.\n\nInspection ID: AngularRecursiveModuleImportExport"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularRecursiveModuleImportExport",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 85,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularNgOptimizedImage",
                "shortDescription": {
                  "text": "Issues with ngSrc usage in img tags"
                },
                "fullDescription": {
                  "text": "Reports issues related to usage of 'ngSrc' (NgOptimizedDirective) on 'img' tags. Following issues are reported: 'img' tags, which use 'src' instead of 'ngSrc' lack of 'width' and 'height', or 'fill' attributes when 'ngSrc' is used 'width' or 'height', and 'fill' attributes being present on the same element when 'ngSrc' is used Inspection ID: AngularNgOptimizedImage",
                  "markdown": "Reports issues related to usage of `ngSrc` ([NgOptimizedDirective](https://angular.io/guide/image-directive)) on `img` tags.\n\n\nFollowing issues are reported:\n\n* `img` tags, which use `src` instead of `ngSrc`\n* lack of `width` and `height`, or `fill` attributes when `ngSrc` is used\n* `width` or `height`, and `fill` attributes being present on the same element when `ngSrc` is used\n\nInspection ID: AngularNgOptimizedImage"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "AngularNgOptimizedImage",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Performance"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 85,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularInvalidTemplateReferenceVariable",
                "shortDescription": {
                  "text": "Unbound or ambiguous template reference variable"
                },
                "fullDescription": {
                  "text": "Reports a template reference variable that is not assigned to a directive when using 'exportAs' or is assigned to multiple directives. Inspection ID: AngularInvalidTemplateReferenceVariable",
                  "markdown": "Reports a template reference variable that is not assigned to a directive when using `exportAs` or is assigned to multiple directives.\n\nInspection ID: AngularInvalidTemplateReferenceVariable"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularInvalidTemplateReferenceVariable",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 85,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularMultipleStructuralDirectives",
                "shortDescription": {
                  "text": "Multiple structural directives on one element"
                },
                "fullDescription": {
                  "text": "Reports multiple structural directives ('*ngIf', '*ngFor', etc.) on one element. Inspection ID: AngularMultipleStructuralDirectives",
                  "markdown": "Reports multiple structural directives (`*ngIf`, `*ngFor`, etc.) on one element.\n\nInspection ID: AngularMultipleStructuralDirectives"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularMultipleStructuralDirectives",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 85,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularUnresolvedPipe",
                "shortDescription": {
                  "text": "Unresolved pipe"
                },
                "fullDescription": {
                  "text": "Reports an unresolved pipe. Inspection ID: AngularUnresolvedPipe",
                  "markdown": "Reports an unresolved pipe.\n\nInspection ID: AngularUnresolvedPipe"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularUnresolvedPipe",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 85,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularUnusedComponentImport",
                "shortDescription": {
                  "text": "Unused import in an Angular component declaration"
                },
                "fullDescription": {
                  "text": "Reports unused imports in Angular components. Inspection ID: AngularUnusedComponentImport",
                  "markdown": "Reports unused imports in Angular components.\n\nInspection ID: AngularUnusedComponentImport"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularUnusedComponentImport",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 85,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularUncalledSignalLengthPropertyAccess",
                "shortDescription": {
                  "text": "Accessing length property of an uncalled signal"
                },
                "fullDescription": {
                  "text": "Reports access to the length property of an uncalled Angular signal, which is always 0, since signal calls do not accept any arguments. Such access is most likely a mistake and the signal should be first called instead. Inspection ID: AngularUncalledSignalLengthPropertyAccess",
                  "markdown": "Reports access to the length property of an uncalled Angular signal, which is always 0, since signal calls do not accept any arguments. Such access is most likely a mistake and the signal should be first called instead.\n\nInspection ID: AngularUncalledSignalLengthPropertyAccess"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AngularUncalledSignalLengthPropertyAccess",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 85,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularUnsupportedSyntax",
                "shortDescription": {
                  "text": "Unsupported Angular expression syntax"
                },
                "fullDescription": {
                  "text": "Reports problems with Angular expression syntax, which is not supported in an older version of Angular. Inspection ID: AngularUnsupportedSyntax",
                  "markdown": "Reports problems with Angular expression syntax, which is not supported in an older version of Angular.\n\nInspection ID: AngularUnsupportedSyntax"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularUnsupportedSyntax",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 85,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularIncorrectBlockUsage",
                "shortDescription": {
                  "text": "Incorrect usage of Angular block"
                },
                "fullDescription": {
                  "text": "Reports problems with Angular blocks. Inspection ID: AngularIncorrectBlockUsage",
                  "markdown": "Reports problems with Angular blocks.\n\nInspection ID: AngularIncorrectBlockUsage"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularIncorrectBlockUsage",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 85,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularCliAddDependency",
                "shortDescription": {
                  "text": "Angular CLI add dependency"
                },
                "fullDescription": {
                  "text": "Suggests using the 'ng add' command to install the dependency. 'ng add' will use the package manager to download it and invoke a schematic which can update your project with configuration changes, add additional dependencies (e.g. polyfills), or scaffold package-specific initialization code. Inspection ID: AngularCliAddDependency",
                  "markdown": "Suggests using the `ng add` command to install the dependency.\n\n`ng add` will use the package manager to download it and invoke a schematic\nwhich can update your project with configuration changes, add additional dependencies (e.g. polyfills),\nor scaffold package-specific initialization code.\n\nInspection ID: AngularCliAddDependency"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AngularCliAddDependency",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 85,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularInaccessibleSymbol",
                "shortDescription": {
                  "text": "Inaccessible component member or directive input"
                },
                "fullDescription": {
                  "text": "Reports access to invisible (private or protected) component member or directive input from an Angular template. Inspection ID: AngularInaccessibleSymbol",
                  "markdown": "Reports access to invisible (private or protected) component member or directive input from an Angular template.\n\nInspection ID: AngularInaccessibleSymbol"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularInaccessibleSymbol",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Security"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 85,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularIncorrectTemplateDefinition",
                "shortDescription": {
                  "text": "Incorrect component template definition"
                },
                "fullDescription": {
                  "text": "Reports a component that doesn’t have an associated template or uses both 'template' and 'templateUrl' properties. Inspection ID: AngularIncorrectTemplateDefinition",
                  "markdown": "Reports a component that doesn't have an associated template or uses both `template` and `templateUrl` properties.\n\nInspection ID: AngularIncorrectTemplateDefinition"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularIncorrectTemplateDefinition",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 85,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularNonStandaloneComponentImports",
                "shortDescription": {
                  "text": "Invalid usage of imports in non-standalone components"
                },
                "fullDescription": {
                  "text": "Reports usages of imports property in non-standalone component decorators. Imports can be used only in standalone components. Inspection ID: AngularNonStandaloneComponentImports",
                  "markdown": "Reports usages of imports property in non-standalone component decorators. Imports can be used only in standalone components.\n\nInspection ID: AngularNonStandaloneComponentImports"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularNonStandaloneComponentImports",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 85,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularInvalidSelector",
                "shortDescription": {
                  "text": "Missing or invalid selector"
                },
                "fullDescription": {
                  "text": "Reports an invalid 'selector' property of a component or directive. Inspection ID: AngularInvalidSelector",
                  "markdown": "Reports an invalid `selector` property of a component or directive.\n\nInspection ID: AngularInvalidSelector"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularInvalidSelector",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 85,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularNonEmptyNgContent",
                "shortDescription": {
                  "text": "Content inside <ng-content> tag"
                },
                "fullDescription": {
                  "text": "Reports a text or tag occurrence inside a '<ng-content>' tag used for content projection. Inspection ID: AngularNonEmptyNgContent",
                  "markdown": "Reports a text or tag occurrence inside a `<ng-content>` tag used for content projection.\n\nInspection ID: AngularNonEmptyNgContent"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularNonEmptyNgContent",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 85,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularMissingRequiredDirectiveInputBinding",
                "shortDescription": {
                  "text": "Missing required directive input"
                },
                "fullDescription": {
                  "text": "Reports a missing binding for a required directive input. Inspection ID: AngularMissingRequiredDirectiveInputBinding",
                  "markdown": "Reports a missing binding for a required directive input.\n\nInspection ID: AngularMissingRequiredDirectiveInputBinding"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularMissingRequiredDirectiveInputBinding",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 85,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularInsecureBindingToEvent",
                "shortDescription": {
                  "text": "Insecure binding to event"
                },
                "fullDescription": {
                  "text": "Reports a binding to an event property or attribute, for example, '[onclick]' or '[attr.onclick]' instead of '(click)'. Inspection ID: AngularInsecureBindingToEvent",
                  "markdown": "Reports a binding to an event property or attribute, for example, `[onclick]` or `[attr.onclick]` instead of `(click)`.\n\nInspection ID: AngularInsecureBindingToEvent"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AngularInsecureBindingToEvent",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 85,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularDeferBlockOnTrigger",
                "shortDescription": {
                  "text": "Problems with @defer `on` triggers"
                },
                "fullDescription": {
                  "text": "Reports issues with triggers in `on` parameters in `@defer` block. Inspection ID: AngularDeferBlockOnTrigger",
                  "markdown": "Reports issues with triggers in \\`on\\` parameters in \\`@defer\\` block.\n\nInspection ID: AngularDeferBlockOnTrigger"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularDeferBlockOnTrigger",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 85,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularMissingEventHandler",
                "shortDescription": {
                  "text": "Missing event handler"
                },
                "fullDescription": {
                  "text": "Reports a missing event handler statement for an event binding. Inspection ID: AngularMissingEventHandler",
                  "markdown": "Reports a missing event handler statement for an event binding.\n\nInspection ID: AngularMissingEventHandler"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularMissingEventHandler",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 85,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularUndefinedBinding",
                "shortDescription": {
                  "text": "Undefined binding"
                },
                "fullDescription": {
                  "text": "Reports an undefined property, event, or structural directive bindings on elements. Inspection ID: AngularUndefinedBinding",
                  "markdown": "Reports an undefined property, event, or structural directive bindings on elements.\n\nInspection ID: AngularUndefinedBinding"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularUndefinedBinding",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 85,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularForBlockNonIterableVar",
                "shortDescription": {
                  "text": "Non-iterable type in @for block"
                },
                "fullDescription": {
                  "text": "Reports that the type of variable to iterate over does not have '[Symbol.iterator]()' method, which returns an iterator. Inspection ID: AngularForBlockNonIterableVar",
                  "markdown": "Reports that the type of variable to iterate over does not have `[Symbol.iterator]()` method, which returns an iterator.\n\nInspection ID: AngularForBlockNonIterableVar"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularForBlockNonIterableVar",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 85,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularMissingOrInvalidDeclarationInModule",
                "shortDescription": {
                  "text": "Missing or invalid component, directive or pipe declaration in a module"
                },
                "fullDescription": {
                  "text": "Reports a non-standalone Angular component, directive, or pipe that is not declared in any module or is declared in multiple modules. Inspection ID: AngularMissingOrInvalidDeclarationInModule",
                  "markdown": "Reports a non-standalone Angular component, directive, or pipe that is not declared in any module or is declared in multiple modules.\n\nInspection ID: AngularMissingOrInvalidDeclarationInModule"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularMissingOrInvalidDeclarationInModule",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 85,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularInvalidEntryComponent",
                "shortDescription": {
                  "text": "Invalid entry component"
                },
                "fullDescription": {
                  "text": "Reports an invalid Angular component specified in the module’s 'bootstrap' or 'entryComponents' property. Inspection ID: AngularInvalidEntryComponent",
                  "markdown": "Reports an invalid Angular component specified in the module's `bootstrap` or `entryComponents` property.\n\nInspection ID: AngularInvalidEntryComponent"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularInvalidEntryComponent",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 85,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularBindingTypeMismatch",
                "shortDescription": {
                  "text": "Invalid binding type"
                },
                "fullDescription": {
                  "text": "Reports a mismatch between actual and expected directive binding type. Inspection ID: AngularBindingTypeMismatch",
                  "markdown": "Reports a mismatch between actual and expected directive binding type.\n\nInspection ID: AngularBindingTypeMismatch"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularBindingTypeMismatch",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 85,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.intellij.qodana",
            "version": "253.22441.33",
            "rules": [
              {
                "id": "JsCoverageInspection",
                "shortDescription": {
                  "text": "Check JavaScript and TypeScript source code coverage"
                },
                "fullDescription": {
                  "text": "Reports methods, classes and files whose coverage is below a certain threshold. Inspection ID: JsCoverageInspection",
                  "markdown": "Reports methods, classes and files whose coverage is below a certain threshold.\n\nInspection ID: JsCoverageInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JsCoverageInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Coverage",
                      "index": 87,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JavaAnnotator",
                "shortDescription": {
                  "text": "Java annotator"
                },
                "fullDescription": {
                  "text": "Allows viewing the problems reported by the Java annotator: compilation problems, unresolved by IDEA references, and so on. Inspection ID: JavaAnnotator",
                  "markdown": "Allows viewing the problems reported by the Java annotator: compilation problems, unresolved by IDEA references, and so on.\n\nInspection ID: JavaAnnotator"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "JavaAnnotator",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 40,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "QodanaJavaSanity",
                "shortDescription": {
                  "text": "Java sanity"
                },
                "fullDescription": {
                  "text": "Reports unresolved references in Java code. Inspection ID: QodanaJavaSanity",
                  "markdown": "Reports unresolved references in Java code.\n\nInspection ID: QodanaJavaSanity"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "QodanaJavaSanity",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 40,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CyclomaticComplexityInspection",
                "shortDescription": {
                  "text": "Code metrics"
                },
                "fullDescription": {
                  "text": "Calculates cyclomatic complexity. Inspection ID: CyclomaticComplexityInspection",
                  "markdown": "Calculates cyclomatic complexity.\n\nInspection ID: CyclomaticComplexityInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CyclomaticComplexityInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Qodana",
                      "index": 172,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JvmLinesOfCodeInspection",
                "shortDescription": {
                  "text": "Calculate Kotlin and Java code metrics"
                },
                "fullDescription": {
                  "text": "Counts the number of code lines. Inspection ID: JvmLinesOfCodeInspection",
                  "markdown": "Counts the number of code lines.\n\nInspection ID: JvmLinesOfCodeInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JvmLinesOfCodeInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code metrics",
                      "index": 174,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.intellij.plugins.markdown",
            "version": "253.22441.33",
            "rules": [
              {
                "id": "MarkdownLinkDestinationWithSpaces",
                "shortDescription": {
                  "text": "Links should not contain spaces"
                },
                "fullDescription": {
                  "text": "To ensure consistency between different tools, file links should not contain spaces. Example: '[Some file link](some file.md)' A quick-fix replaces spaces with their url-encoded equivalent: '[Some file link](some%20file.md)' Inspection ID: MarkdownLinkDestinationWithSpaces",
                  "markdown": "To ensure consistency between different tools, file links should not contain spaces.\n\n**Example:**\n\n\n      [Some file link](some file.md)\n\nA quick-fix replaces spaces with their url-encoded equivalent:\n\n\n      [Some file link](some%20file.md)\n\nInspection ID: MarkdownLinkDestinationWithSpaces"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MarkdownLinkDestinationWithSpaces",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Markdown",
                      "index": 92,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MarkdownOutdatedTableOfContents",
                "shortDescription": {
                  "text": "Outdated table of contents section"
                },
                "fullDescription": {
                  "text": "Checks if a particular table of contents section corresponds to the actual structure of the document. Inspection ID: MarkdownOutdatedTableOfContents",
                  "markdown": "Checks if a particular table of contents section corresponds to the actual structure of the document.\n\nInspection ID: MarkdownOutdatedTableOfContents"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MarkdownOutdatedTableOfContents",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Markdown",
                      "index": 92,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MarkdownUnresolvedLinkLabel",
                "shortDescription": {
                  "text": "Unresolved link label"
                },
                "fullDescription": {
                  "text": "Reports unresolved link labels in Markdown files. Inspection ID: MarkdownUnresolvedLinkLabel",
                  "markdown": "Reports unresolved link labels in Markdown files.\n\nInspection ID: MarkdownUnresolvedLinkLabel"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MarkdownUnresolvedLinkLabel",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Markdown",
                      "index": 92,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MarkdownIncorrectTableFormatting",
                "shortDescription": {
                  "text": "Incorrect table formatting"
                },
                "fullDescription": {
                  "text": "Checks if table is correctly formatted. Inspection ID: MarkdownIncorrectTableFormatting",
                  "markdown": "Checks if table is correctly formatted.\n\nInspection ID: MarkdownIncorrectTableFormatting"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "MarkdownIncorrectTableFormatting",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Markdown",
                      "index": 92,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MarkdownNoTableBorders",
                "shortDescription": {
                  "text": "Table doesn't have side borders"
                },
                "fullDescription": {
                  "text": "Checks if table has correct side borders. For compatibility reasons all table rows should have borders (pipe symbols) at the start and at the end. Inspection ID: MarkdownNoTableBorders",
                  "markdown": "Checks if table has correct side borders. For compatibility reasons all table rows should have borders (pipe symbols) at the start and at the end.\n\nInspection ID: MarkdownNoTableBorders"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MarkdownNoTableBorders",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Markdown",
                      "index": 92,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MarkdownIncorrectlyNumberedListItem",
                "shortDescription": {
                  "text": "Incorrectly numbered list item"
                },
                "fullDescription": {
                  "text": "Ordered list items are expected to have straight numeration starting from 1. The motivation behind this is that most of Markdown processors are ignoring the numbering of ordered lists. A processor will generate an '<ol>' element for such list, that will number items continuously from 1. Inspection ID: MarkdownIncorrectlyNumberedListItem",
                  "markdown": "Ordered list items are expected to have straight numeration starting from 1.\n\nThe motivation behind this is that most of Markdown processors are ignoring the numbering of ordered lists. A processor will generate an `<ol>` element for such list, that will number items continuously from 1.\n\nInspection ID: MarkdownIncorrectlyNumberedListItem"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MarkdownIncorrectlyNumberedListItem",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Markdown",
                      "index": 92,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MarkdownUnresolvedFileReference",
                "shortDescription": {
                  "text": "Unresolved file references"
                },
                "fullDescription": {
                  "text": "Reports unresolved file references in Markdown files. Inspection ID: MarkdownUnresolvedFileReference",
                  "markdown": "Reports unresolved file references in Markdown files.\n\nInspection ID: MarkdownUnresolvedFileReference"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MarkdownUnresolvedFileReference",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Markdown",
                      "index": 92,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MarkdownUnresolvedHeaderReference",
                "shortDescription": {
                  "text": "Unresolved header reference"
                },
                "fullDescription": {
                  "text": "Reports unresolved header references in Markdown files. Inspection ID: MarkdownUnresolvedHeaderReference",
                  "markdown": "Reports unresolved header references in Markdown files.\n\nInspection ID: MarkdownUnresolvedHeaderReference"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MarkdownUnresolvedHeaderReference",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Markdown",
                      "index": 92,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.jetbrains.security.package-checker",
            "version": "253.22441.33",
            "rules": [
              {
                "id": "MaliciousLibrariesLocal",
                "shortDescription": {
                  "text": "Malicious dependency"
                },
                "fullDescription": {
                  "text": "Reports malicious NPM and PyPI dependencies declared in your project. Fixing the reported problems helps prevent your software from being compromised by an attacker. Remove a malicious package to solve a problem. Inspection ID: MaliciousLibrariesLocal",
                  "markdown": "Reports malicious NPM and PyPI dependencies declared in your project.\n\nFixing the reported problems helps prevent your software from being compromised by an attacker.\n\nRemove a malicious package to solve a problem.\n\nInspection ID: MaliciousLibrariesLocal"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MaliciousLibrariesLocal",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Security",
                      "index": 97,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VulnerableCodeUsages",
                "shortDescription": {
                  "text": "Vulnerable API usage"
                },
                "fullDescription": {
                  "text": "Reports usages of Vulnerable APIs of imported dependencies. Fixing the reported problems helps prevent your software from being compromised by an attacker. To solve a problem, you can update to a version where the vulnerability is fixed (if available) or switch to a dependency that doesn't have the vulnerability. Inspection ID: VulnerableCodeUsages",
                  "markdown": "Reports usages of Vulnerable APIs of imported dependencies.\n\nFixing the reported problems helps prevent your software from being compromised by an attacker.\n\nTo solve a problem, you can update to a version where the vulnerability is fixed (if available) or switch to a dependency that doesn't have the vulnerability.\n\nInspection ID: VulnerableCodeUsages"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "VulnerableCodeUsages",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Security",
                      "index": 97,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NpmVulnerableApiCode",
                "shortDescription": {
                  "text": "Vulnerable API usage"
                },
                "fullDescription": {
                  "text": "Reports usages of Vulnerable APIs of imported dependencies. Fixing the reported problems helps prevent your software from being compromised by an attacker. To solve a problem, you can update to a version where the vulnerability is fixed (if available) or switch to a dependency that doesn't have the vulnerability. Inspection ID: NpmVulnerableApiCode",
                  "markdown": "Reports usages of Vulnerable APIs of imported dependencies.\n\nFixing the reported problems helps prevent your software from being compromised by an attacker.\n\nTo solve a problem, you can update to a version where the vulnerability is fixed (if available) or switch to a dependency that doesn't have the vulnerability.\n\nInspection ID: NpmVulnerableApiCode"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NpmVulnerableApiCode",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Security",
                      "index": 122,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VulnerableLibrariesLocal",
                "shortDescription": {
                  "text": "Vulnerable declared dependency"
                },
                "fullDescription": {
                  "text": "Reports vulnerabilities in Gradle, Maven, NPM, PyPI and Go dependencies declared in your project. A full list of Gradle and Maven dependencies is shown in the Project tool window under External Libraries. Fixing the reported problems helps prevent your software from being compromised by an attacker. To solve a problem, you can update to a version where the vulnerability is fixed (if available) or switch to a dependency that doesn't have the vulnerability. The quick-fixes available may suggest updating to a safe version or visiting the website to learn more about a particular vulnerability. Inspection ID: VulnerableLibrariesLocal",
                  "markdown": "Reports vulnerabilities in Gradle, Maven, NPM, PyPI and Go dependencies declared in your project.\nA full list of Gradle and Maven dependencies is shown in the Project tool window under External Libraries.\n\nFixing the reported problems helps prevent your software from being compromised by an attacker.\n\nTo solve a problem, you can update to a version where the vulnerability is fixed (if available) or switch to a dependency that doesn't have the vulnerability.\n\nThe quick-fixes available may suggest updating to a safe version or visiting the website to learn more about a particular vulnerability.\n\nInspection ID: VulnerableLibrariesLocal"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "VulnerableLibrariesLocal",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Security",
                      "index": 97,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VulnerableLibrariesGlobal",
                "shortDescription": {
                  "text": "Vulnerable imported dependency"
                },
                "fullDescription": {
                  "text": "Reports vulnerabilities in Gradle and Maven dependencies imported into your project. A full list of Gradle and Maven dependencies is shown in the Project tool window under External Libraries. Fixing the reported problems helps prevent your software from being compromised by an attacker. To solve a problem, you can update to a version where the vulnerability is fixed (if available) or switch to a dependency that doesn't have the vulnerability. The quick-fixes available may suggest updating to a safe version or visiting the website to learn more about a particular vulnerability. Inspection ID: VulnerableLibrariesGlobal",
                  "markdown": "Reports vulnerabilities in Gradle and Maven dependencies imported into your project.\nA full list of Gradle and Maven dependencies is shown in the Project tool window under External Libraries.\n\nFixing the reported problems helps prevent your software from being compromised by an attacker.\n\nTo solve a problem, you can update to a version where the vulnerability is fixed (if available) or switch to a dependency that doesn't have the vulnerability.\n\nThe quick-fixes available may suggest updating to a safe version or visiting the website to learn more about a particular vulnerability.\n\nInspection ID: VulnerableLibrariesGlobal"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "VulnerableLibrariesGlobal",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Security",
                      "index": 97,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.jetbrains.restWebServices",
            "version": "253.22441.33",
            "rules": [
              {
                "id": "WadlDomInspection",
                "shortDescription": {
                  "text": "Incorrect WADL configuration"
                },
                "fullDescription": {
                  "text": "Reports configuration errors in WADL files. Inspection ID: WadlDomInspection",
                  "markdown": "Reports configuration errors in WADL files.\n\nInspection ID: WadlDomInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "WadlDomInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RESTful Web Service (JAX-RS)",
                      "index": 98,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MultipleMethodDesignatorsInspection",
                "shortDescription": {
                  "text": "Resource method with multiple HTTP method annotations"
                },
                "fullDescription": {
                  "text": "Reports resource methods with multiple HTTP method annotations ('@GET', '@POST', '@PUT', and so on). Inspection ID: MultipleMethodDesignatorsInspection",
                  "markdown": "Reports resource methods with multiple HTTP method annotations (`@GET`, `@POST`, `@PUT`, and so on).\n\nInspection ID: MultipleMethodDesignatorsInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "MultipleMethodDesignatorsInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RESTful Web Service (JAX-RS)",
                      "index": 98,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PathAnnotation",
                "shortDescription": {
                  "text": "Incorrect @Path URI template"
                },
                "fullDescription": {
                  "text": "Reports syntax errors and unused URI templates inside '@Path' annotations. Example: '@GET\n  @Path(\"/{unused}\") // Template 'unused' is never used\n  public String get() {\n    return \"\";\n  }' Inspection ID: PathAnnotation",
                  "markdown": "Reports syntax errors and unused URI templates inside `@Path` annotations.\n\n**Example:**\n\n\n      @GET\n      @Path(\"/{unused}\") // Template 'unused' is never used\n      public String get() {\n        return \"\";\n      }\n\nInspection ID: PathAnnotation"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PathAnnotation",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RESTful Web Service (JAX-RS)",
                      "index": 98,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RestResourceMethodInspection",
                "shortDescription": {
                  "text": "@Path class without resource methods"
                },
                "fullDescription": {
                  "text": "Reports classes annotated with '@Path' that have no resource methods. The root resource class must have at least one resource method annotated with '@Path' or with any of '@HttpMethod' annotations ('@GET', '@POST', and so on). Inspection ID: RestResourceMethodInspection",
                  "markdown": "Reports classes annotated with `@Path` that have no resource methods.\nThe root resource class must have at least one resource method annotated with `@Path`\nor with any of `@HttpMethod` annotations (`@GET`, `@POST`, and so on).\n\nInspection ID: RestResourceMethodInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "RestResourceMethodInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RESTful Web Service (JAX-RS)",
                      "index": 98,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RestWrongDefaultValueInspection",
                "shortDescription": {
                  "text": "Incorrect value of @DefaultValue parameter"
                },
                "fullDescription": {
                  "text": "Reports the value of '@DefaultValue' if it cannot be converted to the specified type of parameter. Example: '@GET\n  @Path(\"/{n}\")\n  public String get(@PathParam(\"n\") @DefaultValue(\"III\") int n) { // Error: Cannot convert 'III' to int\n  }' Inspection ID: RestWrongDefaultValueInspection",
                  "markdown": "Reports the value of `@DefaultValue` if it cannot be converted to the specified type of parameter.\n\n**Example:**\n\n\n      @GET\n      @Path(\"/{n}\")\n      public String get(@PathParam(\"n\") @DefaultValue(\"III\") int n) { // Error: Cannot convert 'III' to int\n      }\n\nInspection ID: RestWrongDefaultValueInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "RestWrongDefaultValueInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RESTful Web Service (JAX-RS)",
                      "index": 98,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VoidMethodAnnotatedWithGET",
                "shortDescription": {
                  "text": "@GET annotated method returns a void value"
                },
                "fullDescription": {
                  "text": "Reports methods annotated with '@GET' that do not return anything. Methods annotated with '@GET' must have a non-void return type. Inspection ID: VoidMethodAnnotatedWithGET",
                  "markdown": "Reports methods annotated with `@GET` that do not return anything.\nMethods annotated with `@GET` must have a non-void return type.\n\nInspection ID: VoidMethodAnnotatedWithGET"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "VoidMethodAnnotatedWithGET",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RESTful Web Service (JAX-RS)",
                      "index": 98,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnresolvedRestParam",
                "shortDescription": {
                  "text": "Unresolved @PathParam reference"
                },
                "fullDescription": {
                  "text": "Reports '@PathParam' parameters that are declared in a method signature and missing in the URL path or visa versa. Example: '@Get(\"/path/{myVariable}/\")\n  public String handler(@PathParam(\"name_is_not_equal_to_myVariable\") String myVariable) { // Error\n    return \"...\";\n  }' Inspection ID: UnresolvedRestParam",
                  "markdown": "Reports `@PathParam` parameters that are declared in a method signature and missing in the URL path or visa versa.\n\n**Example:**\n\n\n      @Get(\"/path/{myVariable}/\")\n      public String handler(@PathParam(\"name_is_not_equal_to_myVariable\") String myVariable) { // Error\n        return \"...\";\n      }\n\nInspection ID: UnresolvedRestParam"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "UnresolvedRestParam",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RESTful Web Service (JAX-RS)",
                      "index": 98,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "HtmlTools",
            "version": "253.22441.33",
            "rules": [
              {
                "id": "HtmlDeprecatedTag",
                "shortDescription": {
                  "text": "Obsolete tag"
                },
                "fullDescription": {
                  "text": "Reports an obsolete HTML5 tag. Suggests replacing the obsolete tag with a CSS or another tag. Inspection ID: HtmlDeprecatedTag",
                  "markdown": "Reports an obsolete HTML5 tag. Suggests replacing the obsolete tag with a CSS or another tag.\n\nInspection ID: HtmlDeprecatedTag"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HtmlDeprecatedTag",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 29,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlRequiredSummaryAttribute",
                "shortDescription": {
                  "text": "Missing required 'summary' attribute"
                },
                "fullDescription": {
                  "text": "Reports a missing 'summary' attribute in a 'table' tag. Suggests adding a'summary' attribute. Based on WCAG 2.0: H73. Inspection ID: HtmlRequiredSummaryAttribute",
                  "markdown": "Reports a missing `summary` attribute in a `table` tag. Suggests adding a`summary` attribute. Based on WCAG 2.0: [H73](https://www.w3.org/TR/WCAG20-TECHS/H73.html).\n\nInspection ID: HtmlRequiredSummaryAttribute"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "HtmlRequiredSummaryAttribute",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML/Accessibility",
                      "index": 120,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlNonExistentInternetResource",
                "shortDescription": {
                  "text": "Unresolved web link"
                },
                "fullDescription": {
                  "text": "Reports an unresolved web link. Works by making network requests in the background. Inspection ID: HtmlNonExistentInternetResource",
                  "markdown": "Reports an unresolved web link. Works by making network requests in the background.\n\nInspection ID: HtmlNonExistentInternetResource"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HtmlNonExistentInternetResource",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 29,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlFormInputWithoutLabel",
                "shortDescription": {
                  "text": "Missing associated label"
                },
                "fullDescription": {
                  "text": "Reports a form element ('input', 'textarea', or 'select') without an associated label. Suggests creating a new label. Based on WCAG 2.0: H44. Inspection ID: HtmlFormInputWithoutLabel",
                  "markdown": "Reports a form element (`input`, `textarea`, or `select`) without an associated label. Suggests creating a new label. Based on WCAG 2.0: [H44](https://www.w3.org/TR/WCAG20-TECHS/H44.html).  \n\nInspection ID: HtmlFormInputWithoutLabel"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HtmlFormInputWithoutLabel",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML/Accessibility",
                      "index": 120,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlRequiredTitleAttribute",
                "shortDescription": {
                  "text": "Missing required 'title' attribute"
                },
                "fullDescription": {
                  "text": "Reports a missing title attribute 'frame', 'iframe', 'dl', and 'a' tags. Suggests adding a title attribute. Based on WCAG 2.0: H33, H40, and H64. Inspection ID: HtmlRequiredTitleAttribute",
                  "markdown": "Reports a missing title attribute `frame`, `iframe`, `dl`, and `a` tags. Suggests adding a title attribute. Based on WCAG 2.0: [H33](https://www.w3.org/TR/WCAG20-TECHS/H33.html), [H40](https://www.w3.org/TR/WCAG20-TECHS/H40.html), and [H64](https://www.w3.org/TR/WCAG20-TECHS/H64.html).\n\nInspection ID: HtmlRequiredTitleAttribute"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "HtmlRequiredTitleAttribute",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML/Accessibility",
                      "index": 120,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlRequiredTitleElement",
                "shortDescription": {
                  "text": "Missing required 'title' element"
                },
                "fullDescription": {
                  "text": "Reports a missing 'title' element inside a 'head' section. Suggests adding a 'title' element. The title should describe the document. Based on WCAG 2.0: H25. Inspection ID: HtmlRequiredTitleElement",
                  "markdown": "Reports a missing `title` element inside a `head` section. Suggests adding a `title` element. The title should describe the document. Based on WCAG 2.0: [H25](https://www.w3.org/TR/WCAG20-TECHS/H25.html).\n\nInspection ID: HtmlRequiredTitleElement"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HtmlRequiredTitleElement",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML/Accessibility",
                      "index": 120,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlDeprecatedAttribute",
                "shortDescription": {
                  "text": "Obsolete attribute"
                },
                "fullDescription": {
                  "text": "Reports an obsolete HTML5 attribute. Inspection ID: HtmlDeprecatedAttribute",
                  "markdown": "Reports an obsolete HTML5 attribute.\n\nInspection ID: HtmlDeprecatedAttribute"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HtmlDeprecatedAttribute",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 29,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlRequiredAltAttribute",
                "shortDescription": {
                  "text": "Missing required 'alt' attribute"
                },
                "fullDescription": {
                  "text": "Reports a missing 'alt' attribute in a 'img' or 'applet' tag or in a 'area' element of an image map. Suggests adding a required attribute with a text alternative for the contents of the tag. Based on WCAG 2.0: H24, H35, H36, H37. Inspection ID: HtmlRequiredAltAttribute",
                  "markdown": "Reports a missing `alt` attribute in a `img` or `applet` tag or in a `area` element of an image map. Suggests adding a required attribute with a text alternative for the contents of the tag. Based on WCAG 2.0: [H24](https://www.w3.org/TR/WCAG20-TECHS/H24.html), [H35](https://www.w3.org/TR/WCAG20-TECHS/H35.html), [H36](https://www.w3.org/TR/WCAG20-TECHS/H36.html), [H37](https://www.w3.org/TR/WCAG20-TECHS/H37.html).\n\nInspection ID: HtmlRequiredAltAttribute"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HtmlRequiredAltAttribute",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML/Accessibility",
                      "index": 120,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckImageSize",
                "shortDescription": {
                  "text": "Mismatched image size"
                },
                "fullDescription": {
                  "text": "Reports a 'width' and 'height' attribute value of a 'img' tag that is different from the actual width and height of the referenced image. Inspection ID: CheckImageSize",
                  "markdown": "Reports a `width` and `height` attribute value of a `img` tag that is different from the actual width and height of the referenced image.\n\nInspection ID: CheckImageSize"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CheckImageSize",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Performance"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 29,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlRequiredLangAttribute",
                "shortDescription": {
                  "text": "Missing required 'lang' attribute"
                },
                "fullDescription": {
                  "text": "Reports a missing 'lang' (or 'xml:lang') attribute in a 'html' tag. Suggests adding a required attribute to state the default language of the document. Based on WCAG 2.0: H57. Inspection ID: HtmlRequiredLangAttribute",
                  "markdown": "Reports a missing `lang` (or `xml:lang`) attribute in a `html` tag. Suggests adding a required attribute to state the default language of the document. Based on WCAG 2.0: [H57](https://www.w3.org/TR/WCAG20-TECHS/H57.html).\n\nInspection ID: HtmlRequiredLangAttribute"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HtmlRequiredLangAttribute",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML/Accessibility",
                      "index": 120,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlPresentationalElement",
                "shortDescription": {
                  "text": "Presentational tag"
                },
                "fullDescription": {
                  "text": "Reports a presentational HTML tag. Suggests replacing the presentational tag with a CSS or another tag. Inspection ID: HtmlPresentationalElement",
                  "markdown": "Reports a presentational HTML tag. Suggests replacing the presentational tag with a CSS or another tag.\n\nInspection ID: HtmlPresentationalElement"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "HtmlPresentationalElement",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 29,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.swagger",
            "version": "253.22441.33",
            "rules": [
              {
                "id": "SwYamlMaybeSpecificationInspection",
                "shortDescription": {
                  "text": "Possible OpenAPI/Swagger specification candidate"
                },
                "fullDescription": {
                  "text": "Detects YAML files that can be interpreted as a part of OpenAPI/Swagger specification. Such files do not contain explicit specification attributes, but they are referenced from primary specification files located nearby. The following example contains two files located in the same directory. First one is a plain primary specification file. Second is referenced from the first one and thus is suggested to be considered a specification too. Primary specification file 'openapi.yaml': 'openapi: 3.1.0\ncomponents:\n  schemas:\n    CustomSchema:\n      description: Custom schema object\n      properties:\n        foo:\n          $ref: 'common.components.yaml#/components/schemas/CommonSchema'' Specification file candidate 'common.components.yaml': 'components: # 'Mark file as OpenAPI specification' highlighting\n  schemas:\n    CommonSchema:\n      description: Common schema object reused in several specifications' Inspection ID: SwYamlMaybeSpecificationInspection",
                  "markdown": "Detects YAML files that can be interpreted as a part of OpenAPI/Swagger specification.\n\n\nSuch files do not contain explicit specification attributes, but they are referenced from primary specification files located nearby.\n\n\nThe following example contains two files located in the same directory. First one is a plain primary specification file.\nSecond is referenced from the first one and thus is suggested to be considered a specification too.\n\n**Primary specification file `openapi.yaml`:**\n\n\n    openapi: 3.1.0\n    components:\n      schemas:\n        CustomSchema:\n          description: Custom schema object\n          properties:\n            foo:\n              $ref: 'common.components.yaml#/components/schemas/CommonSchema'\n\n**Specification file candidate `common.components.yaml`:**\n\n\n    components: # 'Mark file as OpenAPI specification' highlighting\n      schemas:\n        CommonSchema:\n          description: Common schema object reused in several specifications\n\nInspection ID: SwYamlMaybeSpecificationInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SwYamlMaybeSpecificationInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "OpenAPI specifications",
                      "index": 104,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SwYamlUnresolvedReferencesInspection",
                "shortDescription": {
                  "text": "Unresolved reference"
                },
                "fullDescription": {
                  "text": "Detects unresolved references in YAML specification files. Inspection ID: SwYamlUnresolvedReferencesInspection",
                  "markdown": "Detects unresolved references in YAML specification files.\n\nInspection ID: SwYamlUnresolvedReferencesInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "SwYamlUnresolvedReferencesInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "OpenAPI specifications",
                      "index": 104,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SwJsonUnresolvedReferencesInspection",
                "shortDescription": {
                  "text": "Unresolved reference"
                },
                "fullDescription": {
                  "text": "Detects unresolved references in JSON specification files. Inspection ID: SwJsonUnresolvedReferencesInspection",
                  "markdown": "Detects unresolved references in JSON specification files.\n\nInspection ID: SwJsonUnresolvedReferencesInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "SwJsonUnresolvedReferencesInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "OpenAPI specifications",
                      "index": 104,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SwJsonMaybeSpecificationInspection",
                "shortDescription": {
                  "text": "Possible OpenAPI/Swagger specification candidate"
                },
                "fullDescription": {
                  "text": "Detects JSON files that can be interpreted as a part of OpenAPI/Swagger specification. Such files do not contain explicit specification attributes, but they are referenced from primary specification files located nearby. The following example contains two files located in the same directory. First one is a plain primary specification file. Second is referenced from the first one and thus is suggested to be considered a specification too. Primary specification file 'openapi.yaml': 'openapi: 3.1.0\ncomponents:\n  schemas:\n    CustomSchema:\n      description: Custom schema object\n      properties:\n        foo:\n          $ref: 'common.components.json#/components/schemas/CommonSchema'' Specification file candidate 'common.components.json': '{\n  \"components\": { // 'Mark file as OpenAPI specification' highlighting\n    \"schemas\": {\n      \"CommonSchema\": {\n        \"description\": \"Common schema object reused in several specifications\"\n      }\n    }\n  }\n}' Inspection ID: SwJsonMaybeSpecificationInspection",
                  "markdown": "Detects JSON files that can be interpreted as a part of OpenAPI/Swagger specification.\n\n\nSuch files do not contain explicit specification attributes, but they are referenced from primary specification files located nearby.\n\n\nThe following example contains two files located in the same directory. First one is a plain primary specification file.\nSecond is referenced from the first one and thus is suggested to be considered a specification too.\n\n**Primary specification file `openapi.yaml`:**\n\n\n    openapi: 3.1.0\n    components:\n      schemas:\n        CustomSchema:\n          description: Custom schema object\n          properties:\n            foo:\n              $ref: 'common.components.json#/components/schemas/CommonSchema'\n\n**Specification file candidate `common.components.json`:**\n\n\n    {\n      \"components\": { // 'Mark file as OpenAPI specification' highlighting\n        \"schemas\": {\n          \"CommonSchema\": {\n            \"description\": \"Common schema object reused in several specifications\"\n          }\n        }\n      }\n    }\n\nInspection ID: SwJsonMaybeSpecificationInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SwJsonMaybeSpecificationInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "OpenAPI specifications",
                      "index": 104,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "tslint",
            "version": "253.22441.33",
            "rules": [
              {
                "id": "TsLint",
                "shortDescription": {
                  "text": "TSLint"
                },
                "fullDescription": {
                  "text": "Reports a discrepancy detected by the TSLint linter. The highlighting is based on the rule severity specified in the TSLint configuration file for each individual rule. Clear the 'Use rule severity from the configuration file' checkbox to use the severity configured in this inspection for all TSLint rules. Inspection ID: TsLint",
                  "markdown": "Reports a discrepancy detected by the [TSLint](https://github.com/palantir/tslint) linter.   \n\nThe highlighting is based on the rule severity specified in the [TSLint configuration file](https://palantir.github.io/tslint/usage/configuration/) for each individual rule.   \n\nClear the 'Use rule severity from the configuration file' checkbox to use the severity configured in this inspection for all TSLint rules.\n\nInspection ID: TsLint"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "TsLint",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code quality tools",
                      "index": 105,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.jetbrains.plugins.github",
            "version": "253.22441.33",
            "rules": [
              {
                "id": "CyclicJobDependency",
                "shortDescription": {
                  "text": "Cyclic job dependency"
                },
                "fullDescription": {
                  "text": "Detects cyclic dependencies for jobs in GitHub workflow YML file. See the GitHub Actions documentation for more information on workflow syntax. Inspection ID: CyclicJobDependency",
                  "markdown": "Detects cyclic dependencies for jobs in GitHub workflow YML file.\n\n\nSee the [GitHub Actions documentation](https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idneeds) for more information on workflow syntax.\n\nInspection ID: CyclicJobDependency"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CyclicJobDependency",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "GitHub actions",
                      "index": 107,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UndefinedParamsPresent",
                "shortDescription": {
                  "text": "Undefined parameters"
                },
                "fullDescription": {
                  "text": "Reports the presence of parameters which are not defined in an action. It also provides a Quick Fix by removing the undefined parameters. For more information on action params, see the GitHub documentation. Inspection ID: UndefinedParamsPresent",
                  "markdown": "Reports the presence of parameters which are not defined in an action. It also provides a Quick Fix by removing the undefined parameters.\n\n\nFor more information on action params, see the [GitHub documentation](https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#runsstepswith).\n\nInspection ID: UndefinedParamsPresent"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UndefinedParamsPresent",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "GitHub actions",
                      "index": 107,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MandatoryParamsAbsent",
                "shortDescription": {
                  "text": "Invalid parameters"
                },
                "fullDescription": {
                  "text": "Reports the absence of mandatory parameters that do not have a default value for an action. It also provides a Quick Fix by adding the missing parameters with an empty value. For more information on action params, see the GitHub documentation. Inspection ID: MandatoryParamsAbsent",
                  "markdown": "Reports the absence of mandatory parameters that do not have a default value for an action. It also provides a Quick Fix by adding the missing parameters with an empty value.\n\n\nFor more information on action params, see the [GitHub documentation](https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#runsstepswith).\n\nInspection ID: MandatoryParamsAbsent"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "MandatoryParamsAbsent",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "GitHub actions",
                      "index": 107,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GithubFunctionSignatureValidation",
                "shortDescription": {
                  "text": "Standard library functions validation"
                },
                "fullDescription": {
                  "text": "Reports invalid GitHub Actions Expression language standard library function calls For more information on GitHub Actions Expression language, see the GitHub documentation. Inspection ID: GithubFunctionSignatureValidation",
                  "markdown": "Reports invalid GitHub Actions Expression language standard library function calls\n\n\nFor more information on GitHub Actions Expression language, see the [GitHub documentation](https://docs.github.com/en/actions/learn-github-actions/expressions).\n\nInspection ID: GithubFunctionSignatureValidation"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "GithubFunctionSignatureValidation",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "GitHub actions",
                      "index": 107,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IllegalJobDependency",
                "shortDescription": {
                  "text": "Undefined job dependency"
                },
                "fullDescription": {
                  "text": "Detects dependencies to undefined Jobs in GitHub workflow YML file. See the GitHub Actions documentation for more information on workflow syntax. Inspection ID: IllegalJobDependency",
                  "markdown": "Detects dependencies to undefined Jobs in GitHub workflow YML file.\n\n\nSee the [GitHub Actions documentation](https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idneeds) for more information on workflow syntax.\n\nInspection ID: IllegalJobDependency"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "IllegalJobDependency",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "GitHub actions",
                      "index": 107,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UndefinedAction",
                "shortDescription": {
                  "text": "Undefined action/file reference"
                },
                "fullDescription": {
                  "text": "Detects unresolved action references in GitHub action and workflow files. For more information on action references, see the GitHub documentation. Inspection ID: UndefinedAction",
                  "markdown": "Detects unresolved action references in GitHub action and workflow files.\n\n\nFor more information on action references, see the [GitHub documentation](https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsuses).\n\nInspection ID: UndefinedAction"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UndefinedAction",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "GitHub actions",
                      "index": 107,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.jsonpath",
            "version": "253.22441.33",
            "rules": [
              {
                "id": "JsonPathUnknownFunction",
                "shortDescription": {
                  "text": "Unknown JSONPath function"
                },
                "fullDescription": {
                  "text": "Reports an unknown name in a JSONPath function call instead of known standard function names: 'concat', 'keys', 'length', 'min', 'max', 'avg', 'stddev', 'sum'. Inspection ID: JsonPathUnknownFunction",
                  "markdown": "Reports an unknown name in a JSONPath function call instead of known standard function names: `concat`, `keys`, `length`, `min`, `max`, `avg`, `stddev`, `sum`.\n\nInspection ID: JsonPathUnknownFunction"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JsonPathUnknownFunction",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSONPath",
                      "index": 116,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonPathUnknownOperator",
                "shortDescription": {
                  "text": "Unknown JSONPath operator"
                },
                "fullDescription": {
                  "text": "Reports an unknown operator on a JSONPath expression instead of one of the standard ones: 'in', 'nin', 'subsetof', 'anyof', 'noneof', 'size', 'empty', 'contains'. Inspection ID: JsonPathUnknownOperator",
                  "markdown": "Reports an unknown operator on a JSONPath expression instead of one of the standard ones: `in`, `nin`, `subsetof`, `anyof`, `noneof`, `size`, `empty`, `contains`.\n\nInspection ID: JsonPathUnknownOperator"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JsonPathUnknownOperator",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSONPath",
                      "index": 116,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonPathEvaluateUnknownKey",
                "shortDescription": {
                  "text": "Unknown property key used for JSONPath evaluate expression"
                },
                "fullDescription": {
                  "text": "Reports a key in a JSONPath expression that is missing in the source JSON document to evaluate. Inspection ID: JsonPathEvaluateUnknownKey",
                  "markdown": "Reports a key in a JSONPath expression that is missing in the source JSON document to evaluate.\n\nInspection ID: JsonPathEvaluateUnknownKey"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JsonPathEvaluateUnknownKey",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSONPath",
                      "index": 116,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.modules.json",
            "version": "253.22441.33",
            "rules": [
              {
                "id": "JsonSchemaCompliance",
                "shortDescription": {
                  "text": "Compliance with JSON schema"
                },
                "fullDescription": {
                  "text": "Reports inconsistence between a JSON file and the JSON schema that is assigned to it. Inspection ID: JsonSchemaCompliance",
                  "markdown": "Reports inconsistence between a JSON file and the [JSON schema](https://json-schema.org) that is assigned to it.  \n\nInspection ID: JsonSchemaCompliance"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JsonSchemaCompliance",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 21,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonStandardCompliance",
                "shortDescription": {
                  "text": "Compliance with JSON standard"
                },
                "fullDescription": {
                  "text": "Reports the following discrepancies of a JSON file with the language specification: A line or block comment (configurable). Multiple top-level values (expect for JSON Lines files, configurable for others). A trailing comma in an object or array (configurable). A single quoted string. A property key is a not a double quoted strings. A NaN or Infinity/-Infinity numeric value as a floating point literal (configurable). Inspection ID: JsonStandardCompliance",
                  "markdown": "Reports the following discrepancies of a JSON file with [the language specification](https://tools.ietf.org/html/rfc7159):\n\n* A line or block comment (configurable).\n* Multiple top-level values (expect for JSON Lines files, configurable for others).\n* A trailing comma in an object or array (configurable).\n* A single quoted string.\n* A property key is a not a double quoted strings.\n* A NaN or Infinity/-Infinity numeric value as a floating point literal (configurable).\n\nInspection ID: JsonStandardCompliance"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "JsonStandardCompliance",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 21,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonSchemaRefReference",
                "shortDescription": {
                  "text": "Unresolved '$ref' and '$schema' references"
                },
                "fullDescription": {
                  "text": "Reports an unresolved '$ref' or '$schema' path in a JSON schema. Inspection ID: JsonSchemaRefReference",
                  "markdown": "Reports an unresolved `$ref` or `$schema` path in a JSON schema.  \n\nInspection ID: JsonSchemaRefReference"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JsonSchemaRefReference",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 21,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Json5StandardCompliance",
                "shortDescription": {
                  "text": "Compliance with JSON5 standard"
                },
                "fullDescription": {
                  "text": "Reports inconsistency with the language specification in a JSON5 file. Inspection ID: Json5StandardCompliance",
                  "markdown": "Reports inconsistency with [the language specification](http://json5.org) in a JSON5 file.\n\nInspection ID: Json5StandardCompliance"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "Json5StandardCompliance",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 21,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonSchemaDeprecation",
                "shortDescription": {
                  "text": "Deprecated JSON property"
                },
                "fullDescription": {
                  "text": "Reports a deprecated property in a JSON file. Note that deprecation mechanism is not defined in the JSON Schema specification yet, and this inspection uses a non-standard extension 'deprecationMessage'. Inspection ID: JsonSchemaDeprecation",
                  "markdown": "Reports a deprecated property in a JSON file.  \nNote that deprecation mechanism is not defined in the JSON Schema specification yet, and this inspection uses a non-standard extension 'deprecationMessage'.\n\nInspection ID: JsonSchemaDeprecation"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JsonSchemaDeprecation",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 21,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonDuplicatePropertyKeys",
                "shortDescription": {
                  "text": "Duplicate keys in object literals"
                },
                "fullDescription": {
                  "text": "Reports a duplicate key in an object literal. Inspection ID: JsonDuplicatePropertyKeys",
                  "markdown": "Reports a duplicate key in an object literal.\n\nInspection ID: JsonDuplicatePropertyKeys"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JsonDuplicatePropertyKeys",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 21,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.beanValidation",
            "version": "253.22441.33",
            "rules": [
              {
                "id": "BvConfigDomInspection",
                "shortDescription": {
                  "text": "Incorrect elements in Bean Validation <validation-config> files"
                },
                "fullDescription": {
                  "text": "Reports incorrect elements in Bean Validation '<validation-config>' files: References to non-instantiable classes References to classes that do not extend required class References to classes with inappropriate scope Empty tag and attribute values Tag and attribute values that do not match the required pattern (for example, Java Identifiers) Tags that do not include required children tags or attributes Tags that define objects with duplicate names Example: '<validation-config>\n  <default-provider>foo.UnknownProvider</default-provider>  <!-- Cannot resolve class or package 'UnknownProvider'  -->\n  <message-interpolator>my.Interpolator</message-interpolator>\n  <constraint-mapping>META-INF/ConstraintMappings.xml</constraint-mapping>\n  <constraint-mapping>META-INF/unknown.xml</constraint-mapping>\n</validation-config>' Inspection ID: BvConfigDomInspection",
                  "markdown": "Reports incorrect elements in Bean Validation `<validation-config>` files:\n\n* References to non-instantiable classes\n* References to classes that do not extend required class\n* References to classes with inappropriate scope\n* Empty tag and attribute values\n* Tag and attribute values that do not match the required pattern (for example, Java Identifiers)\n* Tags that do not include required children tags or attributes\n* Tags that define objects with duplicate names\n\n**Example:**\n\n\n    <validation-config>\n      <default-provider>foo.UnknownProvider</default-provider>  <!-- Cannot resolve class or package 'UnknownProvider'  -->\n      <message-interpolator>my.Interpolator</message-interpolator>\n      <constraint-mapping>META-INF/ConstraintMappings.xml</constraint-mapping>\n      <constraint-mapping>META-INF/unknown.xml</constraint-mapping>\n    </validation-config>\n\nInspection ID: BvConfigDomInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "BvConfigDomInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Bean Validation",
                      "index": 123,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MinMaxValuesInspection",
                "shortDescription": {
                  "text": "Incorrect 'min' and 'max' values in Bean Validation annotations"
                },
                "fullDescription": {
                  "text": "Reports incorrect values of 'max' and 'min' values in Bean Validation constraint annotations. Example: 'public class Car {\n  @NotNull\n  @Size(min = 14, max = 2) // 'max' value is less than 'min' value\n  private String licensePlate;\n}' Inspection ID: MinMaxValuesInspection",
                  "markdown": "Reports incorrect values of `max` and `min` values in Bean Validation constraint annotations.\n\n**Example:**\n\n\n    public class Car {\n      @NotNull\n      @Size(min = 14, max = 2) // 'max' value is less than 'min' value\n      private String licensePlate;\n    }\n\nInspection ID: MinMaxValuesInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MinMaxValuesInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Bean Validation",
                      "index": 123,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BvConstraintMappingsInspection",
                "shortDescription": {
                  "text": "Incorrect elements in Bean Validation <constraint-mappings> files"
                },
                "fullDescription": {
                  "text": "Reports incorrect elements in Bean Validation '<constraint-mappings>' files: References to non-instantiable classes References to classes that do not extend required class References to classes with inappropriate scope Empty tag and attribute values Tag and attribute values that do not match the required pattern (for example, Java Identifiers) Tags that do not include required children tags or attributes Tags that define objects with duplicate names Example: '<constraint-mappings version=\"1.1\">\n    <bean class=\"my.UserClass\" ignore-annotations=\"false\">\n        <field name=\"name\">\n            <constraint annotation=\"java.lang.String\"/>  <!--'java.lang.String' is not a Java Annotation -->\n        </field>\n\n        <field name=\"name\">\n            <constraint annotation=\"javax.validation.constraints.Size\">\n                <element name=\"min\">non-number</element>    <!--Should be a number from '-2,147,483,648' to '2,147,483,647' -->\n            </constraint>\n        </field>\n\n        <getter name=\"zzz\"> Cannot resolve symbol 'zzz'\n            <valid/>\n        </getter>\n\n    </bean>\n</constraint-mappings>' Inspection ID: BvConstraintMappingsInspection",
                  "markdown": "Reports incorrect elements in Bean Validation `<constraint-mappings>` files:\n\n* References to non-instantiable classes\n* References to classes that do not extend required class\n* References to classes with inappropriate scope\n* Empty tag and attribute values\n* Tag and attribute values that do not match the required pattern (for example, Java Identifiers)\n* Tags that do not include required children tags or attributes\n* Tags that define objects with duplicate names\n\n**Example:**\n\n\n    <constraint-mappings version=\"1.1\">\n        <bean class=\"my.UserClass\" ignore-annotations=\"false\">\n            <field name=\"name\">\n                <constraint annotation=\"java.lang.String\"/>  <!--'java.lang.String' is not a Java Annotation -->\n            </field>\n\n            <field name=\"name\">\n                <constraint annotation=\"javax.validation.constraints.Size\">\n                    <element name=\"min\">non-number</element>    <!--Should be a number from '-2,147,483,648' to '2,147,483,647' -->\n                </constraint>\n            </field>\n\n            <getter name=\"zzz\"> Cannot resolve symbol 'zzz'\n                <valid/>\n            </getter>\n\n        </bean>\n    </constraint-mappings>\n\nInspection ID: BvConstraintMappingsInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "BvConstraintMappingsInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Bean Validation",
                      "index": 123,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.javaee.jakarta.data",
            "version": "253.22441.33",
            "rules": [
              {
                "id": "JakartaDataRepositoryMethodInconsistency",
                "shortDescription": {
                  "text": "Jakarta Data repository method errors"
                },
                "fullDescription": {
                  "text": "Reports Jakarta Dat repository methods for which the builder cannot generate the corresponding query. Example: 'interface PersonRepository extends Repository<Person, Long> {\n  List<Person> findByEmailAndLastname(String email, String lastname);\n  List<Person> findByUnknownAndLastname(EmailAddress emailAddress, String lastname); // Cannot resolve property 'Unknown'\n  List<Person> findByAndLastname(String email, String lastname); // Missing property name\n\n  List<Person> findByLastnameOrderByFirstnameAsc(String lastname);\n  List<Person> findByLastnameOrderByUnknownDesc(String lastname);  // Cannot resolve property 'Unknown'\n}' Inspection ID: JakartaDataRepositoryMethodInconsistency",
                  "markdown": "Reports Jakarta Dat repository methods for which the builder cannot generate the corresponding query.\n\n**Example:**\n\n\n    interface PersonRepository extends Repository<Person, Long> {\n      List<Person> findByEmailAndLastname(String email, String lastname);\n      List<Person> findByUnknownAndLastname(EmailAddress emailAddress, String lastname); // Cannot resolve property 'Unknown'\n      List<Person> findByAndLastname(String email, String lastname); // Missing property name\n\n      List<Person> findByLastnameOrderByFirstnameAsc(String lastname);\n      List<Person> findByLastnameOrderByUnknownDesc(String lastname);  // Cannot resolve property 'Unknown'\n    }\n\nInspection ID: JakartaDataRepositoryMethodInconsistency"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JakartaDataRepositoryMethodInconsistency",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Jakarta Data",
                      "index": 127,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JakartaDataRepositoryMethodParameters",
                "shortDescription": {
                  "text": "Incorrect repository method parameter"
                },
                "fullDescription": {
                  "text": "Reports incorrect repository method parameter types. Example: 'public class Person {\n    private int id;\n    @Column\n    private String lastname;\n\n    @Column\n    private int age;\n  }\n\n  public interface CustomerRepository extends Repository<Person, Integer> {\n    List<Person> findByAddress(int lastname);  // 'String' type expected\n    List<Person> deleteByAge(String str);   // 'int' type expected\n  }' Inspection ID: JakartaDataRepositoryMethodParameters",
                  "markdown": "Reports incorrect repository method parameter types.\n\n**Example:**\n\n\n      public class Person {\n        private int id;\n        @Column\n        private String lastname;\n\n        @Column\n        private int age;\n      }\n\n      public interface CustomerRepository extends Repository<Person, Integer> {\n        List<Person> findByAddress(int lastname);  // 'String' type expected\n        List<Person> deleteByAge(String str);   // 'int' type expected\n      }\n\nInspection ID: JakartaDataRepositoryMethodParameters"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JakartaDataRepositoryMethodParameters",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Jakarta Data",
                      "index": 127,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.spring.security",
            "version": "253.22441.33",
            "rules": [
              {
                "id": "SpringSecurityMethodCallsInspection",
                "shortDescription": {
                  "text": "@PreFilter/@PreAuthorize/@PostFilter self-invocation method calls"
                },
                "fullDescription": {
                  "text": "Using @PreFilter/@PostFilter/@PreAuthorize: In proxy mode (which is the default), only external method calls coming in through the proxy are intercepted. This means that self-invocation (in effect, a method within the target object calling another method of the target object) will not work at runtime even if the invoked method is marked with @PreFilter/@PostFilter/@PreAuthorize Inspection ID: SpringSecurityMethodCallsInspection",
                  "markdown": "Using @PreFilter/@PostFilter/@PreAuthorize: In proxy mode (which is the default), only external method calls coming in through the proxy are intercepted. This means that self-invocation (in effect, a method within the target object calling another method of the target object) will not work at runtime even if the invoked method is marked with @PreFilter/@PostFilter/@PreAuthorize\n\nInspection ID: SpringSecurityMethodCallsInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SpringSecurityMethodCallsInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Security"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Security",
                      "index": 134,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringSecurityModelInspection",
                "shortDescription": {
                  "text": "Incorrect Spring Security XML-based application context"
                },
                "fullDescription": {
                  "text": "Reports issues with the Spring Security XML-based context: Unresolved bean references Missing required tags or attributes Incorrect property types Inconsistent 'enum' properties Incorrect types of referenced beans Also reports the following issues: <https> configuration errors <http> with the pattern '/**' must be the last one Multiple <http> elements without 'pattern' are not allowed <http> configuration errors Empty tag if 'security='none'' <user-service> Must either have attribute 'properties' or list of <user> elements <ldap-server> 'manager-password' is required when 'manager-dn' is used Must either have 'user-context-mapper-ref' or 'user-details-class' <authentication-provider> Only one kind of user-service is allowed <global-method-security> 'pre-post-annotations' must have the value 'enabled' to use <pre-post-annotation-handling>' Cannot use 'mode' with value 'aspectj' for <protect-pointcut> and <intercept-url> 'requires-channel' attribute only allowed for parent <http> <protect> Mixing <protect> with <global-method-security> is not recommended Inspection ID: SpringSecurityModelInspection",
                  "markdown": "Reports issues with the [Spring Security](https://spring.io/projects/spring-security) XML-based context:\n\n* Unresolved bean references\n* Missing required tags or attributes\n* Incorrect property types\n* Inconsistent `enum` properties\n* Incorrect types of referenced beans\n\nAlso reports the following issues:\n\n* \\<https\\> configuration errors\n  * \\<http\\> with the pattern '/\\*\\*' must be the last one\n  * Multiple \\<http\\> elements without 'pattern' are not allowed\n* \\<http\\> configuration errors\n  * Empty tag if `security='none'`\n* \\<user-service\\>\n  * Must either have attribute 'properties' or list of \\<user\\> elements\n* \\<ldap-server\\>\n  * 'manager-password' is required when 'manager-dn' is used\n  * Must either have 'user-context-mapper-ref' or 'user-details-class'\n* \\<authentication-provider\\>\n  * Only one kind of user-service is allowed\n* \\<global-method-security\\>\n  * 'pre-post-annotations' must have the value 'enabled' to use \\<pre-post-annotation-handling\\>'\n  * Cannot use 'mode' with value 'aspectj' for \\<protect-pointcut\\> and \\<intercept-url\\>\n  * 'requires-channel' attribute only allowed for parent \\<http\\>\n* \\<protect\\>\n  * Mixing \\<protect\\> with \\<global-method-security\\> is not recommended\n\nInspection ID: SpringSecurityModelInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "SpringSecurityModelInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Security"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Security",
                      "index": 134,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringSecurityDebugActivatedInspection",
                "shortDescription": {
                  "text": "Debug mode is activated in the Spring Security configuration"
                },
                "fullDescription": {
                  "text": "Reports activated <debug> that may expose sensitive information. Inspection ID: SpringSecurityDebugActivatedInspection",
                  "markdown": "Reports activated **\\<debug\\>** that may expose sensitive information.\n\nInspection ID: SpringSecurityDebugActivatedInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SpringSecurityDebugActivatedInspection",
                    "cweIds": [
                      215
                    ],
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Security"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Security",
                      "index": 134,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringSecurityAnnotationBeanPointersResolveInspection",
                "shortDescription": {
                  "text": "Incorrect configuration of Spring beans referenced in the Spring Security annotation"
                },
                "fullDescription": {
                  "text": "Reports unresolved Spring beans referenced in Spring Security annotations. Examples: '@WithUserDetails(value = \"admin\", userDetailsServiceBeanName = \"unknownUserDetailsService\")\n      // \"Cannot resolve 'unknownUserDetailsService' bean\" will be reported if 'unknownUserDetailsService' is not defined in the Spring model' '@WithUserDetails(value = \"admin\", userDetailsServiceBeanName = \"jpaUserDetailsService\")\n      //\"Bean must be of 'org.springframework.security.core.userdetails.UserDetailsService' type\"\n      // will be reported if \"jpaUserDetailsService\"  bean is not of 'UserDetailsService' type' Inspection ID: SpringSecurityAnnotationBeanPointersResolveInspection",
                  "markdown": "Reports unresolved Spring beans referenced in [Spring Security](https://spring.io/projects/spring-security) annotations.\n\n**Examples:**\n\n*\n\n      @WithUserDetails(value = \"admin\", userDetailsServiceBeanName = \"unknownUserDetailsService\")\n            // \"Cannot resolve 'unknownUserDetailsService' bean\" will be reported if 'unknownUserDetailsService' is not defined in the Spring model\n          \n*\n\n      @WithUserDetails(value = \"admin\", userDetailsServiceBeanName = \"jpaUserDetailsService\")\n            //\"Bean must be of 'org.springframework.security.core.userdetails.UserDetailsService' type\"\n            // will be reported if \"jpaUserDetailsService\"  bean is not of 'UserDetailsService' type\n          \nInspection ID: SpringSecurityAnnotationBeanPointersResolveInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "SpringSecurityAnnotationBeanPointersResolveInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Security"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Security",
                      "index": 134,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.jetbrains.plugins.yaml",
            "version": "253.22441.33",
            "rules": [
              {
                "id": "YAMLIncompatibleTypes",
                "shortDescription": {
                  "text": "Suspicious type mismatch"
                },
                "fullDescription": {
                  "text": "Reports a mismatch between a scalar value type in YAML file and types of the values in the similar positions. Example: 'myElements:\n  - value1\n  - value2\n  - false # <- reported, because it is a boolean value, while other values are strings' Inspection ID: YAMLIncompatibleTypes",
                  "markdown": "Reports a mismatch between a scalar value type in YAML file and types of the values in the similar positions.\n\n**Example:**\n\n\n    myElements:\n      - value1\n      - value2\n      - false # <- reported, because it is a boolean value, while other values are strings\n\nInspection ID: YAMLIncompatibleTypes"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "YAMLIncompatibleTypes",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "YAML",
                      "index": 136,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "YAMLDuplicatedKeys",
                "shortDescription": {
                  "text": "Duplicated YAML keys"
                },
                "fullDescription": {
                  "text": "Reports duplicated keys in YAML files. Example: 'same_key: some value\n  same_key: another value' Inspection ID: YAMLDuplicatedKeys",
                  "markdown": "Reports duplicated keys in YAML files.\n\n**Example:**\n\n\n      same_key: some value\n      same_key: another value\n\nInspection ID: YAMLDuplicatedKeys"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "YAMLDuplicatedKeys",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "YAML",
                      "index": 136,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "YAMLSchemaValidation",
                "shortDescription": {
                  "text": "Validation by JSON Schema"
                },
                "fullDescription": {
                  "text": "Reports inconsistencies between a YAML file and a JSON Schema if the schema is specified. Scheme example: '{\n    \"properties\": {\n      \"SomeNumberProperty\": {\n        \"type\": \"number\"\n      }\n    }\n  }' The following is an example with the corresponding warning: 'SomeNumberProperty: hello world' Inspection ID: YAMLSchemaValidation",
                  "markdown": "Reports inconsistencies between a YAML file and a JSON Schema if the schema is specified.\n\n**Scheme example:**\n\n\n      {\n        \"properties\": {\n          \"SomeNumberProperty\": {\n            \"type\": \"number\"\n          }\n        }\n      }\n\n**The following is an example with the corresponding warning:**\n\n\n      SomeNumberProperty: hello world\n\nInspection ID: YAMLSchemaValidation"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "YAMLSchemaValidation",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "YAML",
                      "index": 136,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "YAMLUnresolvedAlias",
                "shortDescription": {
                  "text": "Unresolved alias"
                },
                "fullDescription": {
                  "text": "Reports unresolved aliases in YAML files. Example: 'some_key: *unknown_alias' Inspection ID: YAMLUnresolvedAlias",
                  "markdown": "Reports unresolved aliases in YAML files.\n\n**Example:**\n\n\n      some_key: *unknown_alias\n\nInspection ID: YAMLUnresolvedAlias"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "YAMLUnresolvedAlias",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "YAML",
                      "index": 136,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "YAMLSchemaDeprecation",
                "shortDescription": {
                  "text": "Deprecated YAML key"
                },
                "fullDescription": {
                  "text": "Reports deprecated keys in YAML files. Deprecation is checked only if there exists a JSON schema associated with the corresponding YAML file. Note that the deprecation mechanism is not defined in the JSON Schema specification yet, and this inspection uses a non-standard 'deprecationMessage' extension. Scheme deprecation example: '{\n    \"properties\": {\n      \"SomeDeprecatedProperty\": {\n        \"deprecationMessage\": \"Baz\",\n        \"description\": \"Foo bar\"\n      }\n    }\n  }' The following is an example with the corresponding warning: 'SomeDeprecatedProperty: some value' Inspection ID: YAMLSchemaDeprecation",
                  "markdown": "Reports deprecated keys in YAML files.\n\nDeprecation is checked only if there exists a JSON schema associated with the corresponding YAML file.\n\nNote that the deprecation mechanism is not defined in the JSON Schema specification yet,\nand this inspection uses a non-standard `deprecationMessage` extension.\n\n**Scheme deprecation example:**\n\n\n      {\n        \"properties\": {\n          \"SomeDeprecatedProperty\": {\n            \"deprecationMessage\": \"Baz\",\n            \"description\": \"Foo bar\"\n          }\n        }\n      }\n\n**The following is an example with the corresponding warning:**\n\n\n      SomeDeprecatedProperty: some value\n\nInspection ID: YAMLSchemaDeprecation"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "YAMLSchemaDeprecation",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "YAML",
                      "index": 136,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "YAMLRecursiveAlias",
                "shortDescription": {
                  "text": "Recursive alias"
                },
                "fullDescription": {
                  "text": "Reports recursion in YAML aliases. Alias can't be recursive and be used inside the data referenced by a corresponding anchor. Example: 'some_key: &some_anchor\n    sub_key1: value1\n    sub_key2: *some_anchor' Inspection ID: YAMLRecursiveAlias",
                  "markdown": "Reports recursion in YAML aliases.\n\nAlias can't be recursive and be used inside the data referenced by a corresponding anchor.\n\n**Example:**\n\n\n      some_key: &some_anchor\n        sub_key1: value1\n        sub_key2: *some_anchor\n\nInspection ID: YAMLRecursiveAlias"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "YAMLRecursiveAlias",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "YAML",
                      "index": 136,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "YAMLUnusedAnchor",
                "shortDescription": {
                  "text": "Unused anchor"
                },
                "fullDescription": {
                  "text": "Reports unused anchors. Example: 'some_key: &some_anchor\n    key1: value1' Inspection ID: YAMLUnusedAnchor",
                  "markdown": "Reports unused anchors.\n\n**Example:**\n\n\n      some_key: &some_anchor\n        key1: value1\n\nInspection ID: YAMLUnusedAnchor"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "YAMLUnusedAnchor",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "YAML",
                      "index": 136,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.spring.boot",
            "version": "253.22441.33",
            "rules": [
              {
                "id": "SpringBootApplicationYaml",
                "shortDescription": {
                  "text": "Invalid YAML configuration"
                },
                "fullDescription": {
                  "text": "Reports unresolved and deprecated configuration keys and invalid values in Spring Boot application '.yaml' configuration files, which can lead to runtime errors. Example: 'server:\n  port: invalid # Reports 'Cannot convert 'invalid' to java.lang.Integer'' If a deprecated configuration key has a replacement key, you can apply the 'Use replacement key' quick-fix. Example: 'logging:\n  path: ${path} # Reports 'Deprecated configuration property 'logging.path''' After the quick-fix is applied: 'logging:\n  file:\n    path: ${path}' If a configuration key is not defined in 'spring-configuration-metadata.json', you can apply the 'Define configuration key' quick-fix that creates the 'META-INF/spring-additional-configuration-metadata.json' file and defines the necessary key. Example: 'new:\n  key: value # Reports 'Cannot resolve configuration property 'new.key''' After the quick-fix is applied, the following is added to 'META-INF/spring-additional-configuration-metadata.json': '{\n  \"properties\": [\n    {\n      \"name\": \"new.key\",\n      \"type\": \"java.lang.String\",\n      \"description\": \"Description for new.key.\"\n  }\n] }' Use the Replacement tokens option to define tokens used for value placeholders in configuration files. These tokens are specified in the form 'beginToken*endToken'. Without the '*', the token is assumed to be the same for start and end. For example, the default is '@' for both start and end token, which enables you to define placeholders, such as 'some.property=@another.property@'. Values inside the replacement token ('@property.key@') will not be highlighted. Inspection ID: SpringBootApplicationYaml",
                  "markdown": "Reports unresolved and deprecated configuration keys and invalid values in Spring Boot application `.yaml` configuration files,\nwhich can lead to runtime errors.\n\n**Example:**\n\n\n    server:\n      port: invalid # Reports 'Cannot convert 'invalid' to java.lang.Integer'\n\nIf a deprecated configuration key has a replacement key, you can apply the 'Use replacement key' quick-fix.\n\n**Example:**\n\n\n    logging:\n      path: ${path} # Reports 'Deprecated configuration property 'logging.path''\n\nAfter the quick-fix is applied:\n\n\n    logging:\n      file:\n        path: ${path}\n\n\nIf a configuration key is not defined in `spring-configuration-metadata.json`, you can apply the 'Define configuration key' quick-fix\nthat creates the `META-INF/spring-additional-configuration-metadata.json` file and defines the necessary key.\n\n**Example:**\n\n\n    new:\n      key: value # Reports 'Cannot resolve configuration property 'new.key''\n\nAfter the quick-fix is applied, the following is added to `META-INF/spring-additional-configuration-metadata.json`:\n\n\n    {\n      \"properties\": [\n        {\n          \"name\": \"new.key\",\n          \"type\": \"java.lang.String\",\n          \"description\": \"Description for new.key.\"\n      }\n    ] }\n\n\nUse the **Replacement tokens** option to define tokens used for value placeholders in configuration files.\nThese tokens are specified in the form `beginToken*endToken`.\nWithout the `*`, the token is assumed to be the same for start and end.\n\n\nFor example, the default is `@` for both start and end token,\nwhich enables you to define placeholders, such as `some.property=@another.property@`.\n\nValues inside the replacement token (`@property.key@`) will not be highlighted.\n\nInspection ID: SpringBootApplicationYaml"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SpringBootApplicationYaml",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Boot",
                      "index": 140,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringDataYamlNoDriverDependencyInspection",
                "shortDescription": {
                  "text": "Spring Data driver class availability"
                },
                "fullDescription": {
                  "text": "Driver class isn't found in dependencies. Inspection ID: SpringDataYamlNoDriverDependencyInspection",
                  "markdown": "Driver class isn't found in dependencies.\n\nInspection ID: SpringDataYamlNoDriverDependencyInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "SpringDataYamlNoDriverDependencyInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Boot",
                      "index": 140,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringBootApplicationSetup",
                "shortDescription": {
                  "text": "Invalid Spring Boot application setup"
                },
                "fullDescription": {
                  "text": "Reports '@SpringBootApplication' in the default package and redundant '@EnableAutoConfiguration' or '@ComponentScan' annotations. The quick-fix removes the redundant annotations. Example: '@SpringBootApplication\n@ComponentScan // Reports 'Redundant declaration: @SpringBootApplication already implies @ComponentScan'\npublic class DemoApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(DemoApplication.class, args);\n    }\n}' After the quick-fix is applied: '@SpringBootApplication\n  public class DemoApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(DemoApplication.class, args);\n    }\n  }' Inspection ID: SpringBootApplicationSetup New in 2018.2",
                  "markdown": "Reports `@SpringBootApplication` in the default package and redundant `@EnableAutoConfiguration` or `@ComponentScan` annotations.\n\nThe quick-fix removes the redundant annotations.\n\n**Example:**\n\n\n    @SpringBootApplication\n    @ComponentScan // Reports 'Redundant declaration: @SpringBootApplication already implies @ComponentScan'\n    public class DemoApplication {\n        public static void main(String[] args) {\n            SpringApplication.run(DemoApplication.class, args);\n        }\n    }\n\nAfter the quick-fix is applied:\n\n\n      @SpringBootApplication\n      public class DemoApplication {\n        public static void main(String[] args) {\n            SpringApplication.run(DemoApplication.class, args);\n        }\n      }\n\nInspection ID: SpringBootApplicationSetup\n\nNew in 2018.2"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "SpringBootApplicationSetup",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Boot",
                      "index": 140,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringDataPropertiesNoDriverDependencyInspection",
                "shortDescription": {
                  "text": "Spring Data driver class availability"
                },
                "fullDescription": {
                  "text": "Driver class isn't found in dependencies. Inspection ID: SpringDataPropertiesNoDriverDependencyInspection",
                  "markdown": "Driver class isn't found in dependencies.\n\nInspection ID: SpringDataPropertiesNoDriverDependencyInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "SpringDataPropertiesNoDriverDependencyInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Boot",
                      "index": 140,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringBootAdditionalConfig",
                "shortDescription": {
                  "text": "Invalid additional-spring-configuration-metadata.json"
                },
                "fullDescription": {
                  "text": "Reports missing and deprecated properties, unresolved references, and invalid values in the 'additional-spring-configuration-metadata.json' configuration file. Example: '{\n    \"properties\": [\n      {\n        \"name\": \"old.key\",\n        \"type\": \"com.Unknown\", // Reports 'Cannot resolve class 'Unknown''\n        \"description\": \"Description for old.key\", // Reports 'Text should end with '.''\n        \"deprecation\": {\n          \"replacement\": \"new.key\", // Reports 'Cannot resolve configuration key reference 'new.key''\n          \"reason\": \"Reason\", // Reports 'Text should end with '.''\n          \"level\": \"warning\"\n         }\n      },\n      {\n        \"name\": \"duplicate\", // Reports 'Duplicate entry for 'duplicate''\n        \"type\": \"java.lang.String\"\n      },\n      {\n        \"name\": \"duplicate\", // Reports 'Duplicate entry for 'duplicate''\n        \"type\": \"java.lang.String\"\n      },\n      {\n        // Reports 'Missing required 'name''\n        \"type\": \"java.lang.String\"\n      }\n    ]\n  }' Inspection ID: SpringBootAdditionalConfig",
                  "markdown": "Reports missing and deprecated properties, unresolved references, and invalid values\nin the `additional-spring-configuration-metadata.json` configuration file.\n\n**Example:**\n\n\n      {\n        \"properties\": [\n          {\n            \"name\": \"old.key\",\n            \"type\": \"com.Unknown\", // Reports 'Cannot resolve class 'Unknown''\n            \"description\": \"Description for old.key\", // Reports 'Text should end with '.''\n            \"deprecation\": {\n              \"replacement\": \"new.key\", // Reports 'Cannot resolve configuration key reference 'new.key''\n              \"reason\": \"Reason\", // Reports 'Text should end with '.''\n              \"level\": \"warning\"\n             }\n          },\n          {\n            \"name\": \"duplicate\", // Reports 'Duplicate entry for 'duplicate''\n            \"type\": \"java.lang.String\"\n          },\n          {\n            \"name\": \"duplicate\", // Reports 'Duplicate entry for 'duplicate''\n            \"type\": \"java.lang.String\"\n          },\n          {\n            // Reports 'Missing required 'name''\n            \"type\": \"java.lang.String\"\n          }\n        ]\n      }\n\nInspection ID: SpringBootAdditionalConfig"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "SpringBootAdditionalConfig",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Boot",
                      "index": 140,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringBootReactorHooksOnDebug",
                "shortDescription": {
                  "text": "Suspicious Hooks.onOperatorDebug() usage"
                },
                "fullDescription": {
                  "text": "Reports the usage of 'Hooks.onOperatorDebug()' when 'ReactorDebugAgent.init()' is called. If 'ReactorDebugAgent' is in the classpath, and 'spring.reactor.debug-agent.enabled' is 'true' (default value), 'ReactorDebugAgent.init()' is called automatically at startup. Using both 'Hooks.onOperatorDebug()' and 'ReactorDebugAgent.init()' cause doubled debugging stack frames generated by Reactor. Also, 'Hooks.onOperatorDebug()' can cause performance overhead. The quick-fix removes the invocation of 'Hooks.onOperatorDebug()'. Example: 'public void hook() {\n    Hooks.onOperatorDebug(); // Reports 'Call Hooks.onOperatorDebug() while ReactorDebugAgent is initialized'\n  }' After the quick-fix is applied: 'public void hook() {\n  }' This inspection only triggers when Spring Boot version for the project or module is 2.2.0 or higher. Inspection ID: SpringBootReactorHooksOnDebug",
                  "markdown": "Reports the usage of `Hooks.onOperatorDebug()` when `ReactorDebugAgent.init()` is called.\n\n\nIf `ReactorDebugAgent` is in the classpath, and `spring.reactor.debug-agent.enabled`\nis `true` (default value), `ReactorDebugAgent.init()` is called automatically at startup.\nUsing both `Hooks.onOperatorDebug()` and `ReactorDebugAgent.init()` cause doubled debugging stack frames generated by Reactor.\nAlso, `Hooks.onOperatorDebug()` can cause performance overhead.\n\nThe quick-fix removes the invocation of `Hooks.onOperatorDebug()`.\n\n**Example:**\n\n\n      public void hook() {\n        Hooks.onOperatorDebug(); // Reports 'Call Hooks.onOperatorDebug() while ReactorDebugAgent is initialized'\n      }\n\nAfter the quick-fix is applied:\n\n\n      public void hook() {\n      }\n\nThis inspection only triggers when Spring Boot version for the project or module is 2.2.0 or higher.\n\nInspection ID: SpringBootReactorHooksOnDebug"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SpringBootReactorHooksOnDebug",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Boot",
                      "index": 140,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConfigurationProperties",
                "shortDescription": {
                  "text": "Invalid @ConfigurationProperties"
                },
                "fullDescription": {
                  "text": "Reports invalid prefixes defined in the '@ConfigurationProperties' annotations: Missing prefix Empty prefix Duplicate prefix Prefix in notation other than kebab-case The inspection triggers in classes that are annotated with '@ConfigurationProperties' and not registered via '@EnableConfigurationProperties', marked as Spring component, or scanned via '@ConfigurationPropertiesScan'. This inspection only triggers in classes annotated with '@ConfigurationProperties' that are not scanned via '@ConfigurationPropertiesScan' when the Spring Boot version for the project or module is set to 2.2.0 or later. Inspection ID: ConfigurationProperties New in 2018.3",
                  "markdown": "Reports invalid prefixes defined in the `@ConfigurationProperties` annotations:\n\n* Missing prefix\n* Empty prefix\n* Duplicate prefix\n* Prefix in notation other than kebab-case\n\n\nThe inspection triggers in classes that are annotated with `@ConfigurationProperties` and not registered via `@EnableConfigurationProperties`,\nmarked as Spring component, or scanned via `@ConfigurationPropertiesScan`.\n\n\nThis inspection only triggers in classes annotated with `@ConfigurationProperties` that are not scanned via `@ConfigurationPropertiesScan`\nwhen the Spring Boot version for the project or module is set to 2.2.0 or later.\n\nInspection ID: ConfigurationProperties\n\nNew in 2018.3"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "ConfigurationProperties",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Boot",
                      "index": 140,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringBootApplicationProperties",
                "shortDescription": {
                  "text": "Invalid properties configuration"
                },
                "fullDescription": {
                  "text": "Reports unresolved and deprecated configuration keys and invalid values in Spring Boot application '.properties' configuration files, which can lead to runtime errors. Example: 'server.port=invalid # Reports 'Cannot convert 'invalid' to java.lang.Integer'' If a deprecated configuration key has a replacement key, you can apply the 'Use replacement key' quick-fix. Example: 'logging.path=${path} # Reports 'Deprecated configuration property 'logging.path''' After the quick-fix is applied: 'logging.file.path=${path}' If a configuration key is not defined in 'spring-configuration-metadata.json', you can apply the 'Define configuration key' quick-fix that creates the 'META-INF/spring-additional-configuration-metadata.json' file and defines the necessary key. Example: 'new.key=value #Reports 'Cannot resolve configuration property 'new.key''' After the quick-fix is applied, the following is added to 'META-INF/spring-additional-configuration-metadata.json': '{\n  \"properties\": [\n    {\n      \"name\": \"new.key\",\n      \"type\": \"java.lang.String\",\n      \"description\": \"Description for new.key.\"\n  }\n] }' The inspection also highlights index notation errors in list and map configuration keys. Example: 'spring.datasource.schema[]=${schema} #Reports 'Missing index value'' Use the Replacement tokens option to define tokens used for value placeholders in configuration files. These tokens are specified in the form 'beginToken*endToken'. Without the '*', the token is assumed to be the same for start and end. For example, the default is '@' for both start and end token, which enables you to define placeholders, such as 'some.property=@another.property@'. Values inside the replacement token ('@property.key@') will not be highlighted. Inspection ID: SpringBootApplicationProperties",
                  "markdown": "Reports unresolved and deprecated configuration keys and invalid values in Spring Boot application `.properties` configuration files,\nwhich can lead to runtime errors.\n\n**Example:**\n\n\n    server.port=invalid # Reports 'Cannot convert 'invalid' to java.lang.Integer'\n\nIf a deprecated configuration key has a replacement key, you can apply the 'Use replacement key' quick-fix.\n\n**Example:**\n\n\n    logging.path=${path} # Reports 'Deprecated configuration property 'logging.path''\n\nAfter the quick-fix is applied:\n\n\n    logging.file.path=${path}\n\n\nIf a configuration key is not defined in `spring-configuration-metadata.json`, you can apply the 'Define configuration key' quick-fix\nthat creates the `META-INF/spring-additional-configuration-metadata.json` file and defines the necessary key.\n\n**Example:**\n\n\n    new.key=value #Reports 'Cannot resolve configuration property 'new.key''\n\nAfter the quick-fix is applied, the following is added to `META-INF/spring-additional-configuration-metadata.json`:\n\n\n    {\n      \"properties\": [\n        {\n          \"name\": \"new.key\",\n          \"type\": \"java.lang.String\",\n          \"description\": \"Description for new.key.\"\n      }\n    ] }\n\nThe inspection also highlights index notation errors in list and map configuration keys.\n\n**Example:**\n\n\n    spring.datasource.schema[]=${schema} #Reports 'Missing index value'\n\n\nUse the **Replacement tokens** option to define tokens used for value placeholders in configuration files.\nThese tokens are specified in the form `beginToken*endToken`.\nWithout the `*`, the token is assumed to be the same for start and end.\n\n\nFor example, the default is `@` for both start and end token,\nwhich enables you to define placeholders, such as `some.property=@another.property@`.\n\nValues inside the replacement token (`@property.key@`) will not be highlighted.\n\nInspection ID: SpringBootApplicationProperties"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SpringBootApplicationProperties",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring Boot",
                      "index": 140,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.jvm.dfa.analysis",
            "version": "253.22441.33",
            "rules": [
              {
                "id": "JvmDfaAnalysis.Local",
                "shortDescription": {
                  "text": "RML-based analysis (Local)"
                },
                "fullDescription": {
                  "text": "Local RML-based analysis for Java Inspection ID: JvmDfaAnalysis.Local",
                  "markdown": "Local RML-based analysis for Java\n\nInspection ID: JvmDfaAnalysis.Local"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JvmDfaAnalysis.Local",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Data flow",
                      "index": 51,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JvmDfaAnalysis.Global",
                "shortDescription": {
                  "text": "RML-based analysis (Global)"
                },
                "fullDescription": {
                  "text": "Global RML-based analysis for Java Inspection ID: JvmDfaAnalysis.Global",
                  "markdown": "Global RML-based analysis for Java\n\nInspection ID: JvmDfaAnalysis.Global"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JvmDfaAnalysis.Global",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Data flow",
                      "index": 51,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JvmTaintAnalysis",
                "shortDescription": {
                  "text": "Taint analysis"
                },
                "fullDescription": {
                  "text": "This inspection is designed to identify potentially vulnerable sections of code where data obtained from potentially unreliable sources may be used in operations that pose security risks. Data Flow Tracking: The inspection tracks the flow of data from the source to its usage in critical operations. This includes analyzing the transfer of data through methods, objects, and variables. Consider an example where user input is directly used in an SQL query without proper preprocessing. The inspection would issue a warning about a potential SQL injection. String userInput = getUserInput();\nString sqlQuery = \"SELECT * FROM users WHERE username = '\" + userInput + \"'\";\n Inspection ID: JvmTaintAnalysis",
                  "markdown": "This inspection is designed to identify potentially vulnerable sections of code where data\nobtained from potentially unreliable sources may be used in operations that pose security risks.\n\nData Flow Tracking:\n\nThe inspection tracks the flow of data from the source to its usage in critical operations.\nThis includes analyzing the transfer of data through methods, objects, and variables.\n\nConsider an example where user input is directly used in an SQL query without proper preprocessing.\nThe inspection would issue a warning about a potential SQL injection.\n\n```\nString userInput = getUserInput();\nString sqlQuery = \"SELECT * FROM users WHERE username = '\" + userInput + \"'\";\n```\n\nInspection ID: JvmTaintAnalysis"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JvmTaintAnalysis",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Security",
                      "index": 97,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JvmNullDereferenceAnalysis.Local",
                "shortDescription": {
                  "text": "RML-based null dereference analysis"
                },
                "fullDescription": {
                  "text": "This inspection is designed to identify complex dataflow paths leading to dereference of pointers that may be null. Inspection ID: JvmNullDereferenceAnalysis.Local",
                  "markdown": "This inspection is designed to identify complex dataflow paths leading to dereference of pointers that may be null.\n\nInspection ID: JvmNullDereferenceAnalysis.Local"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JvmNullDereferenceAnalysis.Local",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Data flow",
                      "index": 51,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.microservices.jvm",
            "version": "253.22441.33",
            "rules": [
              {
                "id": "UastIncorrectMimeTypeInspection",
                "shortDescription": {
                  "text": "Incorrect MIME Type declaration"
                },
                "fullDescription": {
                  "text": "Reports incorrect MIME types (for example, in 'Content-Type' strings) for HTTP servers and clients. Inspection ID: UastIncorrectMimeTypeInspection",
                  "markdown": "Reports incorrect MIME types (for example, in `Content-Type` strings) for HTTP servers and clients.\n\nInspection ID: UastIncorrectMimeTypeInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "UastIncorrectMimeTypeInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Security"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JVM languages",
                      "index": 1,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UastIncorrectHttpHeaderInspection",
                "shortDescription": {
                  "text": "Unknown HTTP header"
                },
                "fullDescription": {
                  "text": "Reports unknown HTTP headers that do not match any publicly known headers. The quick fix suggests adding the header to the list of custom headers to avoid triggering this inspection in the future. Custom HTTP headers are listed for the inspection with the same name in the HTTP Client group. Inspection ID: UastIncorrectHttpHeaderInspection",
                  "markdown": "Reports unknown HTTP headers that do not match any [publicly\nknown headers](https://www.iana.org/assignments/message-headers/message-headers.xml). The quick fix suggests adding the header to the list of custom headers to avoid triggering this inspection in the\nfuture.\n\nCustom HTTP headers are listed for the inspection with the same name in the HTTP Client group.\n\nInspection ID: UastIncorrectHttpHeaderInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UastIncorrectHttpHeaderInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Security"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JVM languages",
                      "index": 1,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "intellij.webpack",
            "version": "253.22441.33",
            "rules": [
              {
                "id": "WebpackConfigHighlighting",
                "shortDescription": {
                  "text": "Webpack config compliance with JSON Schema"
                },
                "fullDescription": {
                  "text": "Validates options in webpack config files (which name should start with `webpack`, e.g. `webpack.config.js`) against webpack options schema. Disable this inspection to turn off validation and code completion inside the configuration object. Inspection ID: WebpackConfigHighlighting",
                  "markdown": "Validates options in webpack config files (which name should start with \\`webpack\\`, e.g. \\`webpack.config.js\\`) against [webpack options schema](https://github.com/webpack/webpack/blob/master/schemas/WebpackOptions.json).   \n\nDisable this inspection to turn off validation and code completion inside the configuration object.\n\nInspection ID: WebpackConfigHighlighting"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "WebpackConfigHighlighting",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 35,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.javaee.el",
            "version": "253.22441.33",
            "rules": [
              {
                "id": "ELValidationInspection",
                "shortDescription": {
                  "text": "EL validation"
                },
                "fullDescription": {
                  "text": "Reports possible EL problems, such as unresolved references and invalid EL locations. Inspection ID: ELValidationInspection",
                  "markdown": "Reports possible EL problems, such as unresolved references and invalid EL locations.\n\nInspection ID: ELValidationInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ELValidationInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EL",
                      "index": 152,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.jetbrains.sh",
            "version": "253.22441.33",
            "rules": [
              {
                "id": "ShellCheck",
                "shortDescription": {
                  "text": "ShellCheck"
                },
                "fullDescription": {
                  "text": "Reports shell script bugs detected by the integrated ShellCheck static analysis tool. Inspection ID: ShellCheck",
                  "markdown": "Reports shell script bugs detected by the integrated [ShellCheck](https://github.com/koalaman/shellcheck) static analysis tool.\n\nInspection ID: ShellCheck"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "ShellCheck",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Security"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Shell script",
                      "index": 154,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.spring.modulith",
            "version": "253.22441.33",
            "rules": [
              {
                "id": "SpringModulithEventListenerInspection",
                "shortDescription": {
                  "text": "Event listener declaration can be simplified"
                },
                "fullDescription": {
                  "text": "Reports async transactional event listener declarations which can be simplified: '@Component\npublic class MyEventListener {\n\n    @Async\n    @Transactional\n    @TransactionalEventListener\n    public void on(MyEvent e) {\n        // ...\n    }\n}' with '@ApplicationModuleListener': '@Component\npublic class MyEventListener {\n\n    @ApplicationModuleListener\n    public void on(MyEvent e) {\n        // ...\n    }\n}' Inspection ID: SpringModulithEventListenerInspection",
                  "markdown": "Reports async transactional event listener declarations which can be simplified:\n\n\n    @Component\n    public class MyEventListener {\n\n        @Async\n        @Transactional\n        @TransactionalEventListener\n        public void on(MyEvent e) {\n            // ...\n        }\n    }\n\nwith `@ApplicationModuleListener`:\n\n\n    @Component\n    public class MyEventListener {\n\n        @ApplicationModuleListener\n        public void on(MyEvent e) {\n            // ...\n        }\n    }\n\nInspection ID: SpringModulithEventListenerInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "SpringModulithEventListenerInspection",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring Modulith",
                      "index": 155,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringModulithAllowedDependencyInspection",
                "shortDescription": {
                  "text": "Invalid dependency declaration"
                },
                "fullDescription": {
                  "text": "Reports an allowed dependency when there's no corresponding module or a named interface. Inspection ID: SpringModulithAllowedDependencyInspection",
                  "markdown": "Reports an allowed dependency when there's no corresponding module or a named interface.\n\nInspection ID: SpringModulithAllowedDependencyInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "SpringModulithAllowedDependencyInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring Modulith",
                      "index": 155,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringModulithApiUsageInspection",
                "shortDescription": {
                  "text": "Restricted module API usage"
                },
                "fullDescription": {
                  "text": "Reports restricted internal API usages in terms of Spring Modulith. Inspection ID: SpringModulithApiUsageInspection",
                  "markdown": "Reports restricted internal API usages in terms of [Spring Modulith](https://docs.spring.io/spring-modulith/reference/index.html).\n\nInspection ID: SpringModulithApiUsageInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "SpringModulithApiUsageInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring Modulith",
                      "index": 155,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.spring.mvc",
            "version": "253.22441.33",
            "rules": [
              {
                "id": "SpringMVCViewInspection",
                "shortDescription": {
                  "text": "Unresolved view reference"
                },
                "fullDescription": {
                  "text": "Reports unresolved Spring MVC View references. Example: '@RequestMapping\n  public String viewHandler() {\n    return \"viewName\"; // will be highlighted if no view with \"viewName\" can be found\n  }' Inspection ID: SpringMVCViewInspection",
                  "markdown": "Reports unresolved Spring MVC View references.\n\nExample:\n\n\n      @RequestMapping\n      public String viewHandler() {\n        return \"viewName\"; // will be highlighted if no view with \"viewName\" can be found\n      }\n\nInspection ID: SpringMVCViewInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SpringMVCViewInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring MVC",
                      "index": 159,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpringMVCInitBinder",
                "shortDescription": {
                  "text": "Non-void @InitBinder method"
                },
                "fullDescription": {
                  "text": "Reports Spring MVC Controller methods annotated with '@InitBinder' that are not declared as 'void'. According to the specification, init-binder methods should be declared as 'void'. Inspection ID: SpringMVCInitBinder",
                  "markdown": "Reports Spring MVC Controller methods annotated with `@InitBinder` that are not declared as `void`.\n\nAccording to the [specification](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/InitBinder.html),\ninit-binder methods should be declared as `void`.\n\nInspection ID: SpringMVCInitBinder"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "SpringMVCInitBinder",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring MVC",
                      "index": 159,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MVCPathVariableInspection",
                "shortDescription": {
                  "text": "Mismatch in @PathVariable declarations and usages"
                },
                "fullDescription": {
                  "text": "Reports '@PathVariable' parameters that are declared in the method signature but are absent in the URL path or vice versa. The quick-fix adds the missing parameter. Example: '@RequestMapping(\"/path/{myVariable}/\")\n  public String handler(@PathVariable String name_is_not_equal_to_myVariable) {\n    return \"...\";\n  }' After the quick-fix is applied the result looks like: '@RequestMapping(\"/path/{myVariable}/\")\n  public String handler(@PathVariable String myVariable) {\n    return \"...\";\n  }' Inspection ID: MVCPathVariableInspection",
                  "markdown": "Reports `@PathVariable` parameters that are declared in the method signature but are absent in the URL path or vice versa.\nThe quick-fix adds the missing parameter.\n\n**Example:**\n\n\n      @RequestMapping(\"/path/{myVariable}/\")\n      public String handler(@PathVariable String name_is_not_equal_to_myVariable) {\n        return \"...\";\n      }\n\nAfter the quick-fix is applied the result looks like:\n\n\n      @RequestMapping(\"/path/{myVariable}/\")\n      public String handler(@PathVariable String myVariable) {\n        return \"...\";\n      }\n\nInspection ID: MVCPathVariableInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MVCPathVariableInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spring/Spring MVC",
                      "index": 159,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.jetbrains.plugins.less",
            "version": "253.22441.33",
            "rules": [
              {
                "id": "LessUnresolvedVariable",
                "shortDescription": {
                  "text": "Unresolved variable"
                },
                "fullDescription": {
                  "text": "Reports a reference to a Less variable that is not resolved. Example: '* {\n  margin: @unknown-var;\n}' Inspection ID: LessUnresolvedVariable",
                  "markdown": "Reports a reference to a [Less variable](http://lesscss.org/features/#variables-feature) that is not resolved.\n\n**Example:**\n\n\n    * {\n      margin: @unknown-var;\n    }\n\nInspection ID: LessUnresolvedVariable"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "LessUnresolvedVariable",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Less",
                      "index": 162,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LessResolvedByNameOnly",
                "shortDescription": {
                  "text": "Missing import"
                },
                "fullDescription": {
                  "text": "Reports a reference to a variable or mixin that is declared in another file, which is not explicitly imported in the current file. Example: '* {\n  margin: @var-in-other-file;\n}' Inspection ID: LessResolvedByNameOnly",
                  "markdown": "Reports a reference to a variable or mixin that is declared in another file, which is not explicitly [imported](http://lesscss.org/features/#import-atrules-feature) in the current file.\n\n**Example:**\n\n\n    * {\n      margin: @var-in-other-file;\n    }\n\nInspection ID: LessResolvedByNameOnly"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "LessResolvedByNameOnly",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Less",
                      "index": 162,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LessUnresolvedMixin",
                "shortDescription": {
                  "text": "Unresolved mixin"
                },
                "fullDescription": {
                  "text": "Reports a reference to a Less mixin that is not resolved. Example: '* {\n  .unknown-mixin();\n}' Inspection ID: LessUnresolvedMixin",
                  "markdown": "Reports a reference to a [Less mixin](http://lesscss.org/features/#mixins-feature) that is not resolved.\n\n**Example:**\n\n\n    * {\n      .unknown-mixin();\n    }\n\nInspection ID: LessUnresolvedMixin"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "LessUnresolvedMixin",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Less",
                      "index": 162,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "idea.plugin.protoeditor",
            "version": "253.22441.33",
            "rules": [
              {
                "id": "PbDuplicatedImports",
                "shortDescription": {
                  "text": "Duplicated import statements"
                },
                "fullDescription": {
                  "text": "Reports effectively equivalent import statements. Inspection ID: PbDuplicatedImports",
                  "markdown": "Reports effectively equivalent import statements.\n\nInspection ID: PbDuplicatedImports"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PbDuplicatedImports",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Protocol Buffers",
                      "index": 165,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.toml.lang",
            "version": "253.22441.34",
            "rules": [
              {
                "id": "TomlUnresolvedReference",
                "shortDescription": {
                  "text": "Unresolved reference"
                },
                "fullDescription": {
                  "text": "Reports unresolved references in TOML files. Inspection ID: TomlUnresolvedReference",
                  "markdown": "Reports unresolved references in TOML files.\n\nInspection ID: TomlUnresolvedReference"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "TomlUnresolvedReference",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "TOML",
                      "index": 166,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.cron",
            "version": "253.22441.33",
            "rules": [
              {
                "id": "CronExpressionValidationInspection",
                "shortDescription": {
                  "text": "Validate Cron expression"
                },
                "fullDescription": {
                  "text": "Reports invalid cron expression Example: '1 5 4 * * 8 //Failed to parse cron expression. Value 8 not in range [0, 7]' Inspection ID: CronExpressionValidationInspection",
                  "markdown": "Reports invalid cron expression\n\n**Example:**\n\n\n      1 5 4 * * 8 //Failed to parse cron expression. Value 8 not in range [0, 7]\n\nInspection ID: CronExpressionValidationInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CronExpressionValidationInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Cron",
                      "index": 168,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.thymeleaf",
            "version": "253.22441.33",
            "rules": [
              {
                "id": "ThymeleafMessagesResolveInspection",
                "shortDescription": {
                  "text": "Unresolved message resource keys"
                },
                "fullDescription": {
                  "text": "Reports unresolved message resource keys. Example: '<html xmlns:th=\"https://www.thymeleaf.org\">\n <body>\n    <h1 th:text=\"#{welcome.unknown}\">Hallo, World</h1> <!-- Cannot resolve property key  -->\n </body>\n</html>' Inspection ID: ThymeleafMessagesResolveInspection",
                  "markdown": "Reports unresolved message resource keys.\n\nExample:\n\n\n    <html xmlns:th=\"https://www.thymeleaf.org\">\n     <body>\n        <h1 th:text=\"#{welcome.unknown}\">Hallo, World</h1> <!-- Cannot resolve property key  -->\n     </body>\n    </html>\n\nInspection ID: ThymeleafMessagesResolveInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "ThymeleafMessagesResolveInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Thymeleaf",
                      "index": 171,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ThymeleafDialectDomInspection",
                "shortDescription": {
                  "text": "Thymeleaf Dialect Extensions errors"
                },
                "fullDescription": {
                  "text": "Reports incorrect elements in Thymeleaf Dialect Extension '<dialect>' files: References to non-instantiable classes References to classes that do not extend required class References to classes with inappropriate scope Empty tag and attribute values Tag and attribute values that do not match the required pattern (for example, Java Identifiers) Tags that do not include required children tags or attributes Tags that define objects with duplicate names Inspection ID: ThymeleafDialectDomInspection",
                  "markdown": "Reports incorrect elements in Thymeleaf Dialect Extension `<dialect>` files:\n\n* References to non-instantiable classes\n* References to classes that do not extend required class\n* References to classes with inappropriate scope\n* Empty tag and attribute values\n* Tag and attribute values that do not match the required pattern (for example, Java Identifiers)\n* Tags that do not include required children tags or attributes\n* Tags that define objects with duplicate names\n\nInspection ID: ThymeleafDialectDomInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "ThymeleafDialectDomInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Thymeleaf",
                      "index": 171,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ThymeleafVariablesResolveInspection",
                "shortDescription": {
                  "text": "Unresolved references in Thymeleaf expression variables"
                },
                "fullDescription": {
                  "text": "Reports unresolved references and invalid Thymeleaf expressions. Example: '<html xmlns:th=\"https://www.thymeleaf.org\">\n<body>\n  <form th:object=\"${unknownPet}\"  <!-- Cannot resolve 'unknownPet'  -->\n        class=\"form-horizontal\" method=\"post\">\n    <input type=\"hidden\" name=\"id\" th:value=\"*{id}\" /> <!-- Cannot resolve 'id'  -->\n  </form>\n</body>\n</html>' Inspection ID: ThymeleafVariablesResolveInspection",
                  "markdown": "Reports unresolved references and invalid Thymeleaf expressions.\n\n**Example:**\n\n\n    <html xmlns:th=\"https://www.thymeleaf.org\">\n    <body>\n      <form th:object=\"${unknownPet}\"  <!-- Cannot resolve 'unknownPet'  -->\n            class=\"form-horizontal\" method=\"post\">\n        <input type=\"hidden\" name=\"id\" th:value=\"*{id}\" /> <!-- Cannot resolve 'id'  -->\n      </form>\n    </body>\n    </html>\n\nInspection ID: ThymeleafVariablesResolveInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ThymeleafVariablesResolveInspection",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Thymeleaf",
                      "index": 171,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.stylelint",
            "version": "253.22441.33",
            "rules": [
              {
                "id": "Stylelint",
                "shortDescription": {
                  "text": "Stylelint"
                },
                "fullDescription": {
                  "text": "Reports a discrepancy detected by the Stylelint linter. The highlighting is based on the rule severity specified in the Stylelint configuration file for each individual rule. Inspection ID: Stylelint",
                  "markdown": "Reports a discrepancy detected by the [Stylelint](http://stylelint.io) linter.   \n\nThe highlighting is based on the rule severity specified in the [Stylelint configuration file](https://stylelint.io/user-guide/configure) for each individual rule.\n\nInspection ID: Stylelint"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "Stylelint",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Code quality tools",
                      "index": 173,
                      "toolComponent": {
                        "name": "IU"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          }
        ]
      },
      "invocations": [
        {
          "startTimeUtc": "2025-10-06T02:48:48.110894463Z",
          "exitCode": 0,
          "executionSuccessful": true
        }
      ],
      "language": "en-US",
      "versionControlProvenance": [
        {
          "properties": {
            "repoUrl": "",
            "vcsType": "Git"
          }
        }
      ],
      "results": [],
      "automationDetails": {
        "id": "TestesDevJavaLearn/qodana/2025-10-05",
        "guid": "7d2efeda-fd81-400b-a990-e90cbb2e5140",
        "properties": {
          "jobUrl": "",
          "analysisKind": "ide"
        }
      },
      "newlineSequences": [
        "\r\n",
        "\n"
      ],
      "properties": {
        "qodana.coverage.files.provided": false,
        "configProfile": "starter",
        "deviceId": "2309253cff3d300-89a6-454f-b3d8-e897da6a1b2f",
        "qodanaNewResultSummary": {
          "total": 0
        }
      }
    }
  ],
  "properties": {
    "runTimestamp": "1759718929369"
  }
}